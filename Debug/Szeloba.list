
Szeloba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e74  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef8  08008ef8  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f00  08008f00  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f00  08008f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f04  08008f04  00018f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08008f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000194  0800909c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800909c  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014432  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b8  00000000  00000000  000345ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  000377a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00038910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017418  00000000  00000000  00039928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a5b  00000000  00000000  00050d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c95  00000000  00000000  0006779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee430  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004180  00000000  00000000  000ee480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000194 	.word	0x20000194
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800706c 	.word	0x0800706c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000198 	.word	0x20000198
 8000104:	0800706c 	.word	0x0800706c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4647      	mov	r7, r8
 800045e:	b580      	push	{r7, lr}
 8000460:	0007      	movs	r7, r0
 8000462:	4699      	mov	r9, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	469c      	mov	ip, r3
 8000468:	0413      	lsls	r3, r2, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0400      	lsls	r0, r0, #16
 8000474:	0c14      	lsrs	r4, r2, #16
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	4345      	muls	r5, r0
 800047a:	434b      	muls	r3, r1
 800047c:	4360      	muls	r0, r4
 800047e:	4361      	muls	r1, r4
 8000480:	18c0      	adds	r0, r0, r3
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4372      	muls	r2, r6
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	4463      	add	r3, ip
 800049e:	042d      	lsls	r5, r5, #16
 80004a0:	0c2d      	lsrs	r5, r5, #16
 80004a2:	18c9      	adds	r1, r1, r3
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	1889      	adds	r1, r1, r2
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	469b      	mov	fp, r3
 80004ea:	d433      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ec:	465a      	mov	r2, fp
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83a      	bhi.n	8000576 <__udivmoddi4+0xc2>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e078      	b.n	80005f8 <__udivmoddi4+0x144>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e075      	b.n	80005fe <__udivmoddi4+0x14a>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e028      	b.n	800057e <__udivmoddi4+0xca>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	2320      	movs	r3, #32
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	4652      	mov	r2, sl
 800055c:	40da      	lsrs	r2, r3
 800055e:	4641      	mov	r1, r8
 8000560:	0013      	movs	r3, r2
 8000562:	464a      	mov	r2, r9
 8000564:	408a      	lsls	r2, r1
 8000566:	0017      	movs	r7, r2
 8000568:	4642      	mov	r2, r8
 800056a:	431f      	orrs	r7, r3
 800056c:	4653      	mov	r3, sl
 800056e:	4093      	lsls	r3, r2
 8000570:	001e      	movs	r6, r3
 8000572:	42af      	cmp	r7, r5
 8000574:	d9c4      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000576:	2200      	movs	r2, #0
 8000578:	2300      	movs	r3, #0
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0d9      	beq.n	8000538 <__udivmoddi4+0x84>
 8000584:	07fb      	lsls	r3, r7, #31
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	4646      	mov	r6, r8
 800058c:	087b      	lsrs	r3, r7, #1
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xfa>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xe4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xfe>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0x108>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xdc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xfa>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	465b      	mov	r3, fp
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db24      	blt.n	8000614 <__udivmoddi4+0x160>
 80005ca:	002b      	movs	r3, r5
 80005cc:	465a      	mov	r2, fp
 80005ce:	4644      	mov	r4, r8
 80005d0:	40d3      	lsrs	r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	465b      	mov	r3, fp
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2a      	blt.n	8000636 <__udivmoddi4+0x182>
 80005e0:	0026      	movs	r6, r4
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	0026      	movs	r6, r4
 80005e8:	4647      	mov	r7, r8
 80005ea:	40be      	lsls	r6, r7
 80005ec:	0032      	movs	r2, r6
 80005ee:	1a80      	subs	r0, r0, r2
 80005f0:	4199      	sbcs	r1, r3
 80005f2:	9000      	str	r0, [sp, #0]
 80005f4:	9101      	str	r1, [sp, #4]
 80005f6:	e79f      	b.n	8000538 <__udivmoddi4+0x84>
 80005f8:	42a3      	cmp	r3, r4
 80005fa:	d8bc      	bhi.n	8000576 <__udivmoddi4+0xc2>
 80005fc:	e783      	b.n	8000506 <__udivmoddi4+0x52>
 80005fe:	4642      	mov	r2, r8
 8000600:	2320      	movs	r3, #32
 8000602:	2100      	movs	r1, #0
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2200      	movs	r2, #0
 8000608:	9100      	str	r1, [sp, #0]
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	40da      	lsrs	r2, r3
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	e786      	b.n	8000522 <__udivmoddi4+0x6e>
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	4646      	mov	r6, r8
 800061e:	409a      	lsls	r2, r3
 8000620:	0023      	movs	r3, r4
 8000622:	40f3      	lsrs	r3, r6
 8000624:	4644      	mov	r4, r8
 8000626:	4313      	orrs	r3, r2
 8000628:	002a      	movs	r2, r5
 800062a:	40e2      	lsrs	r2, r4
 800062c:	001c      	movs	r4, r3
 800062e:	465b      	mov	r3, fp
 8000630:	0015      	movs	r5, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	dad4      	bge.n	80005e0 <__udivmoddi4+0x12c>
 8000636:	4642      	mov	r2, r8
 8000638:	002f      	movs	r7, r5
 800063a:	2320      	movs	r3, #32
 800063c:	0026      	movs	r6, r4
 800063e:	4097      	lsls	r7, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	40de      	lsrs	r6, r3
 8000644:	003b      	movs	r3, r7
 8000646:	4333      	orrs	r3, r6
 8000648:	e7cd      	b.n	80005e6 <__udivmoddi4+0x132>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	; (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b08b      	sub	sp, #44	; 0x2c
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	2414      	movs	r4, #20
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2314      	movs	r3, #20
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f006 f872 	bl	800679a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <MX_GPIO_Init+0x164>)
 80006b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <MX_GPIO_Init+0x164>)
 80006bc:	2104      	movs	r1, #4
 80006be:	430a      	orrs	r2, r1
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <MX_GPIO_Init+0x164>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	2204      	movs	r2, #4
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <MX_GPIO_Init+0x164>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <MX_GPIO_Init+0x164>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <MX_GPIO_Init+0x164>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	4013      	ands	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <MX_GPIO_Init+0x164>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x164>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <MX_GPIO_Init+0x164>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <MX_GPIO_Init+0x164>)
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x164>)
 8000704:	2102      	movs	r1, #2
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <MX_GPIO_Init+0x164>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	2202      	movs	r2, #2
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_GPIO_Init+0x164>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x164>)
 800071c:	2108      	movs	r1, #8
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_GPIO_Init+0x164>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2208      	movs	r2, #8
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800072e:	193b      	adds	r3, r7, r4
 8000730:	4a35      	ldr	r2, [pc, #212]	; (8000808 <MX_GPIO_Init+0x168>)
 8000732:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <MX_GPIO_Init+0x16c>)
 8000744:	0019      	movs	r1, r3
 8000746:	0010      	movs	r0, r2
 8000748:	f002 fa90 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2203      	movs	r2, #3
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800075e:	193b      	adds	r3, r7, r4
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <MX_GPIO_Init+0x170>)
 8000762:	0019      	movs	r1, r3
 8000764:	0010      	movs	r0, r2
 8000766:	f002 fa81 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2210      	movs	r2, #16
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2284      	movs	r2, #132	; 0x84
 8000774:	0392      	lsls	r2, r2, #14
 8000776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2201      	movs	r2, #1
 800077c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 800077e:	193a      	adds	r2, r7, r4
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fa70 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800078c:	193b      	adds	r3, r7, r4
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <MX_GPIO_Init+0x174>)
 8000790:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2203      	movs	r2, #3
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	193a      	adds	r2, r7, r4
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fa60 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <MX_GPIO_Init+0x178>)
 80007b0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2203      	movs	r2, #3
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_GPIO_Init+0x17c>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f002 fa51 	bl	8002c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2204      	movs	r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2203      	movs	r2, #3
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_GPIO_Init+0x180>)
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f002 fa41 	bl	8002c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2007      	movs	r0, #7
 80007f0:	f002 f982 	bl	8002af8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007f4:	2007      	movs	r0, #7
 80007f6:	f002 f994 	bl	8002b22 <HAL_NVIC_EnableIRQ>

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	; 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	00003fff 	.word	0x00003fff
 800080c:	50000800 	.word	0x50000800
 8000810:	50001c00 	.word	0x50001c00
 8000814:	00009fe0 	.word	0x00009fe0
 8000818:	0000fcff 	.word	0x0000fcff
 800081c:	50000400 	.word	0x50000400
 8000820:	50000c00 	.word	0x50000c00

08000824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C1_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C1_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2C1_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fbbb 	bl	8002fdc <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 fa37 	bl	8000cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2C1_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fff6 	bl	8003864 <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fa2e 	bl	8000cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_I2C1_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f003 f839 	bl	80038fc <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 fa25 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001b0 	.word	0x200001b0
 800089c:	40005400 	.word	0x40005400
 80008a0:	0000020b 	.word	0x0000020b

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	240c      	movs	r4, #12
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f005 ff6f 	bl	800679a <memset>
  if(i2cHandle->Instance==I2C1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_I2C_MspInit+0x80>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d129      	bne.n	800091a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	22c0      	movs	r2, #192	; 0xc0
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2212      	movs	r2, #18
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2203      	movs	r2, #3
 80008f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2204      	movs	r2, #4
 80008fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	187b      	adds	r3, r7, r1
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_I2C_MspInit+0x88>)
 8000904:	0019      	movs	r1, r3
 8000906:	0010      	movs	r0, r2
 8000908:	f002 f9b0 	bl	8002c6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x84>)
 800090e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_I2C_MspInit+0x84>)
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	0389      	lsls	r1, r1, #14
 8000916:	430a      	orrs	r2, r1
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b009      	add	sp, #36	; 0x24
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	50000400 	.word	0x50000400

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f001 ffa0 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f830 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f7ff feb0 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000940:	f001 fef4 	bl	800272c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000944:	f7ff ff6e 	bl	8000824 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000948:	f001 fd94 	bl	8002474 <MX_TIM2_Init>
  MX_TIM6_Init();
 800094c:	f001 fdf6 	bl	800253c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000950:	f001 fe30 	bl	80025b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  // USART & TIMERS
  HAL_UART_Receive_IT(&huart2, &usart2data, 1);
 8000954:	490d      	ldr	r1, [pc, #52]	; (800098c <main+0x5c>)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <main+0x60>)
 8000958:	2201      	movs	r2, #1
 800095a:	0018      	movs	r0, r3
 800095c:	f004 fc68 	bl	8005230 <HAL_UART_Receive_IT>
  printUART((unsigned char*)"Running...");
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <main+0x64>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f9c0 	bl	8000ce8 <printUART>
  // display initialization
  SSD1306_Init();
 8000968:	f000 fa80 	bl	8000e6c <SSD1306_Init>
  SSD1306_SetContrast(0);
 800096c:	2000      	movs	r0, #0
 800096e:	f000 ff59 	bl	8001824 <SSD1306_SetContrast>
  setTheme();
 8000972:	f001 f81b 	bl	80019ac <setTheme>
  __HAL_TIM_SET_COUNTER(&htim2, 32000);
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <main+0x68>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	22fa      	movs	r2, #250	; 0xfa
 800097c:	01d2      	lsls	r2, r2, #7
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <main+0x68>)
 8000982:	213c      	movs	r1, #60	; 0x3c
 8000984:	0018      	movs	r0, r3
 8000986:	f004 f8c9 	bl	8004b1c <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0x5a>
 800098c:	200001fc 	.word	0x200001fc
 8000990:	200006d4 	.word	0x200006d4
 8000994:	08007084 	.word	0x08007084
 8000998:	20000614 	.word	0x20000614

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b09f      	sub	sp, #124	; 0x7c
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	2440      	movs	r4, #64	; 0x40
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	0018      	movs	r0, r3
 80009a8:	2338      	movs	r3, #56	; 0x38
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f005 fef4 	bl	800679a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b2:	232c      	movs	r3, #44	; 0x2c
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f005 feec 	bl	800679a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2328      	movs	r3, #40	; 0x28
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f005 fee5 	bl	800679a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <SystemClock_Config+0xc8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <SystemClock_Config+0xcc>)
 80009d6:	401a      	ands	r2, r3
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <SystemClock_Config+0xc8>)
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	430a      	orrs	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	22a0      	movs	r2, #160	; 0xa0
 80009ec:	02d2      	lsls	r2, r2, #11
 80009ee:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	f002 ffcb 	bl	8003994 <HAL_RCC_OscConfig>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a02:	f000 f96b 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	212c      	movs	r1, #44	; 0x2c
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2100      	movs	r1, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f003 fb86 	bl	800413c <HAL_RCC_ClockConfig>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a34:	f000 f952 	bl	8000cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	220a      	movs	r2, #10
 8000a3c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2204      	movs	r2, #4
 8000a42:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 fd99 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a56:	f000 f941 	bl	8000cdc <Error_Handler>
  }
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b01f      	add	sp, #124	; 0x7c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40007000 	.word	0x40007000
 8000a68:	ffffe7ff 	.word	0xffffe7ff

08000a6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_UART_RxCpltCallback+0x38>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10d      	bne.n	8000a9a <HAL_UART_RxCpltCallback+0x2e>
	{
		if(usart2data == '\r')
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b0d      	cmp	r3, #13
 8000a84:	d103      	bne.n	8000a8e <HAL_UART_RxCpltCallback+0x22>
		{
			printUART((uint8_t *) "Connected");
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_UART_RxCpltCallback+0x40>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 f92d 	bl	8000ce8 <printUART>
		}
		HAL_UART_Receive_IT(&huart2, &usart2data, 1);
 8000a8e:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_UART_RxCpltCallback+0x44>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	0018      	movs	r0, r3
 8000a96:	f004 fbcb 	bl	8005230 <HAL_UART_Receive_IT>
	}
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	200001fc 	.word	0x200001fc
 8000aac:	08007090 	.word	0x08007090
 8000ab0:	200006d4 	.word	0x200006d4

08000ab4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d11b      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000ac8:	250f      	movs	r5, #15
 8000aca:	197c      	adds	r4, r7, r5
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 f9b9 	bl	8004e46 <HAL_TIM_Base_GetState>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	7023      	strb	r3, [r4, #0]
		uint8_t encoderBusyFlag = HAL_TIM_Encoder_GetState(&htim7);
 8000ad8:	260e      	movs	r6, #14
 8000ada:	19bc      	adds	r4, r7, r6
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f004 f9bd 	bl	8004e5e <HAL_TIM_Encoder_GetState>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	7023      	strb	r3, [r4, #0]
		if(tim7BusyFlag == 1)
 8000ae8:	197b      	adds	r3, r7, r5
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d107      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if(encoderBusyFlag == 1)
 8000af0:	19bb      	adds	r3, r7, r6
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d103      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				HAL_TIM_Base_Start_IT(&htim7);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 fef6 	bl	80048ec <HAL_TIM_Base_Start_IT>
			}
		}
	}
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b005      	add	sp, #20
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	20000694 	.word	0x20000694

08000b0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	801a      	strh	r2, [r3, #0]
	uint8_t tim6BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000b18:	250f      	movs	r5, #15
 8000b1a:	197c      	adds	r4, r7, r5
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f004 f991 	bl	8004e46 <HAL_TIM_Base_GetState>
 8000b24:	0003      	movs	r3, r0
 8000b26:	7023      	strb	r3, [r4, #0]
	if(tim6BusyFlag == 1)
 8000b28:	197b      	adds	r3, r7, r5
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d107      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if(GPIO_Pin == SET_BTN_Pin)
 8000b30:	1dbb      	adds	r3, r7, #6
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	2b10      	cmp	r3, #16
 8000b36:	d103      	bne.n	8000b40 <HAL_GPIO_EXTI_Callback+0x34>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x40>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f003 fed6 	bl	80048ec <HAL_TIM_Base_Start_IT>
		}
	}
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bdb0      	pop	{r4, r5, r7, pc}
 8000b48:	20000694 	.word	0x20000694
 8000b4c:	20000654 	.word	0x20000654

08000b50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a55      	ldr	r2, [pc, #340]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d13e      	bne.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x90>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8000b62:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 ff13 	bl	8004990 <HAL_TIM_Base_Stop_IT>
		bool btnBusyFlag = HAL_GPIO_ReadPin(GPIOA, SET_BTN_Pin); // buffor kliknięcia
 8000b6a:	23a0      	movs	r3, #160	; 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2110      	movs	r1, #16
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 f9f9 	bl	8002f68 <HAL_GPIO_ReadPin>
 8000b76:	0003      	movs	r3, r0
 8000b78:	001a      	movs	r2, r3
 8000b7a:	200e      	movs	r0, #14
 8000b7c:	183b      	adds	r3, r7, r0
 8000b7e:	1e51      	subs	r1, r2, #1
 8000b80:	418a      	sbcs	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
		if(!btnBusyFlag)
 8000b84:	183b      	adds	r3, r7, r0
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4053      	eors	r3, r2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d026      	beq.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0x90>
		{
			switch(workStep)
 8000b92:	4b4a      	ldr	r3, [pc, #296]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b0b      	cmp	r3, #11
 8000b9a:	d014      	beq.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x76>
 8000b9c:	dc21      	bgt.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x92>
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d002      	beq.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d015      	beq.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x82>
 8000ba6:	e01c      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				case 1: // step 1
					if(projectSelect == 0)
 8000ba8:	4b45      	ldr	r3, [pc, #276]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <HAL_TIM_PeriodElapsedCallback+0x6a>
					{
						workStep = 2;
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e002      	b.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x70>
					}
					else
					{
						workStep = 11;
 8000bba:	4b40      	ldr	r3, [pc, #256]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000bbc:	220b      	movs	r2, #11
 8000bbe:	701a      	strb	r2, [r3, #0]
					}
				setTheme();
 8000bc0:	f000 fef4 	bl	80019ac <setTheme>
				break;
 8000bc4:	e00d      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x92>
				case 11: // step 11
					workStep = 1;
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000bcc:	f000 feee 	bl	80019ac <setTheme>
				break;
 8000bd0:	e007      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x92>
				case 2: // step 2
					moveMarker();
 8000bd2:	f001 fa09 	bl	8001fe8 <moveMarker>
					showWidthScreen(1, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f001 f975 	bl	8001ec8 <showWidthScreen>
				break;
 8000bde:	e000      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x92>
			}
		}
 8000be0:	46c0      	nop			; (mov r8, r8)
	}
	if(htim->Instance == TIM7)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d15e      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x15a>
	{
		HAL_TIM_Base_Stop_IT(&htim7);
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f003 fece 	bl	8004990 <HAL_TIM_Base_Stop_IT>
		encoderCount = (__HAL_TIM_GET_COUNTER(&htim2) / 2);
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c00:	801a      	strh	r2, [r3, #0]
		bool direction;
		if(encoderCount != encoderCountPrev)
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d04b      	beq.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x15a>
		{
			if(encoderCount > encoderCountPrev)
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d904      	bls.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0xdc>
			{
				direction = 1;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e003      	b.n	8000c34 <HAL_TIM_PeriodElapsedCallback+0xe4>
			}
			else
			{
				direction = 0;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
			}
			encoderCountPrev = encoderCount;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c3c:	801a      	strh	r2, [r3, #0]
			switch(workStep)
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d002      	beq.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d026      	beq.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x14a>
						showWidthScreen(2, direction);
				break;
			}
		}
	}
}
 8000c4c:	e02e      	b.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x15c>
					if(!direction)
 8000c4e:	230f      	movs	r3, #15
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4053      	eors	r3, r2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00c      	beq.n	8000c78 <HAL_TIM_PeriodElapsedCallback+0x128>
						if(projectSelect > 0)
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d015      	beq.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x144>
							projectSelect--;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e00d      	b.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x144>
						if((projectSelect) < PROJECT_COUNT)
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d206      	bcs.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x144>
							projectSelect++;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000c92:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000c94:	f000 fe8a 	bl	80019ac <setTheme>
				break;
 8000c98:	e008      	b.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x15c>
						showWidthScreen(2, direction);
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f001 f910 	bl	8001ec8 <showWidthScreen>
				break;
 8000ca8:	e000      	b.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x15c>
		}
 8000caa:	46c0      	nop			; (mov r8, r8)
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b004      	add	sp, #16
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40001000 	.word	0x40001000
 8000cb8:	20000654 	.word	0x20000654
 8000cbc:	20000606 	.word	0x20000606
 8000cc0:	20000607 	.word	0x20000607
 8000cc4:	40001400 	.word	0x40001400
 8000cc8:	20000694 	.word	0x20000694
 8000ccc:	20000614 	.word	0x20000614
 8000cd0:	200001fe 	.word	0x200001fe
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	0800798c 	.word	0x0800798c

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <printUART>:

#include "misc.h"

// UART
void printUART(unsigned char * str)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	uint8_t length = strlen(str);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fa08 	bl	8000108 <strlen>
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	210f      	movs	r1, #15
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, str, length, 10);
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <printUART+0x3c>)
 8000d0a:	230a      	movs	r3, #10
 8000d0c:	f004 f9e8 	bl	80050e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (unsigned char*)"\r\n", 2, 10);
 8000d10:	4905      	ldr	r1, [pc, #20]	; (8000d28 <printUART+0x40>)
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <printUART+0x3c>)
 8000d14:	230a      	movs	r3, #10
 8000d16:	2202      	movs	r2, #2
 8000d18:	f004 f9e2 	bl	80050e0 <HAL_UART_Transmit>
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200006d4 	.word	0x200006d4
 8000d28:	0800709c 	.word	0x0800709c

08000d2c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	0004      	movs	r4, r0
 8000d34:	0008      	movs	r0, r1
 8000d36:	60ba      	str	r2, [r7, #8]
 8000d38:	0019      	movs	r1, r3
 8000d3a:	230e      	movs	r3, #14
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	1c22      	adds	r2, r4, #0
 8000d40:	801a      	strh	r2, [r3, #0]
 8000d42:	230c      	movs	r3, #12
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	1c02      	adds	r2, r0, #0
 8000d48:	801a      	strh	r2, [r3, #0]
 8000d4a:	1dbb      	adds	r3, r7, #6
 8000d4c:	1c0a      	adds	r2, r1, #0
 8000d4e:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000d50:	1dbb      	adds	r3, r7, #6
 8000d52:	2200      	movs	r2, #0
 8000d54:	5e9b      	ldrsh	r3, [r3, r2]
 8000d56:	3307      	adds	r3, #7
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	da00      	bge.n	8000d5e <SSD1306_DrawBitmap+0x32>
 8000d5c:	3307      	adds	r3, #7
 8000d5e:	10db      	asrs	r3, r3, #3
 8000d60:	001a      	movs	r2, r3
 8000d62:	2310      	movs	r3, #16
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000d68:	2317      	movs	r3, #23
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8000d70:	2314      	movs	r3, #20
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	801a      	strh	r2, [r3, #0]
 8000d78:	e068      	b.n	8000e4c <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	2200      	movs	r2, #0
 8000d80:	801a      	strh	r2, [r3, #0]
 8000d82:	e048      	b.n	8000e16 <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8000d84:	2312      	movs	r3, #18
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d006      	beq.n	8000da0 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8000d92:	2317      	movs	r3, #23
 8000d94:	18fa      	adds	r2, r7, r3
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	18db      	adds	r3, r3, r3
 8000d9c:	7013      	strb	r3, [r2, #0]
 8000d9e:	e019      	b.n	8000dd4 <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000da0:	2314      	movs	r3, #20
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	5e9b      	ldrsh	r3, [r3, r2]
 8000da8:	2210      	movs	r2, #16
 8000daa:	18ba      	adds	r2, r7, r2
 8000dac:	2100      	movs	r1, #0
 8000dae:	5e52      	ldrsh	r2, [r2, r1]
 8000db0:	435a      	muls	r2, r3
 8000db2:	2312      	movs	r3, #18
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	5e5b      	ldrsh	r3, [r3, r1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da00      	bge.n	8000dc0 <SSD1306_DrawBitmap+0x94>
 8000dbe:	3307      	adds	r3, #7
 8000dc0:	10db      	asrs	r3, r3, #3
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	189a      	adds	r2, r3, r2
 8000dcc:	2317      	movs	r3, #23
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000dd4:	2317      	movs	r3, #23
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da11      	bge.n	8000e04 <SSD1306_DrawBitmap+0xd8>
 8000de0:	230e      	movs	r3, #14
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	2312      	movs	r3, #18
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	18d3      	adds	r3, r2, r3
 8000dee:	b298      	uxth	r0, r3
 8000df0:	230c      	movs	r3, #12
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	8819      	ldrh	r1, [r3, #0]
 8000df6:	232c      	movs	r3, #44	; 0x2c
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	001a      	movs	r2, r3
 8000e00:	f000 f946 	bl	8001090 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000e04:	2112      	movs	r1, #18
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	5e9b      	ldrsh	r3, [r3, r2]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	801a      	strh	r2, [r3, #0]
 8000e16:	2312      	movs	r3, #18
 8000e18:	18fa      	adds	r2, r7, r3
 8000e1a:	1dbb      	adds	r3, r7, #6
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5e52      	ldrsh	r2, [r2, r1]
 8000e20:	2100      	movs	r1, #0
 8000e22:	5e5b      	ldrsh	r3, [r3, r1]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbad      	blt.n	8000d84 <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8000e28:	2114      	movs	r1, #20
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	5e9b      	ldrsh	r3, [r3, r2]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	801a      	strh	r2, [r3, #0]
 8000e3a:	210c      	movs	r1, #12
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	5e9b      	ldrsh	r3, [r3, r2]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	801a      	strh	r2, [r3, #0]
 8000e4c:	2314      	movs	r3, #20
 8000e4e:	18fa      	adds	r2, r7, r3
 8000e50:	2328      	movs	r3, #40	; 0x28
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	5e52      	ldrsh	r2, [r2, r1]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5e5b      	ldrsh	r3, [r3, r1]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	db8c      	blt.n	8000d7a <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b007      	add	sp, #28
 8000e68:	bd90      	pop	{r4, r7, pc}
	...

08000e6c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e72:	f000 fcf3 	bl	800185c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e76:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <SSD1306_Init+0x178>)
 8000e78:	485b      	ldr	r0, [pc, #364]	; (8000fe8 <SSD1306_Init+0x17c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2178      	movs	r1, #120	; 0x78
 8000e7e:	f002 fa4b 	bl	8003318 <HAL_I2C_IsDeviceReady>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e0a8      	b.n	8000fdc <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <SSD1306_Init+0x180>)
 8000e8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e8e:	e002      	b.n	8000e96 <SSD1306_Init+0x2a>
		p--;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f9      	bne.n	8000e90 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000e9c:	22ae      	movs	r2, #174	; 0xae
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	; 0x78
 8000ea2:	f000 fd5b 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	; 0x78
 8000eac:	f000 fd56 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	; 0x78
 8000eb6:	f000 fd51 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000eba:	22b0      	movs	r2, #176	; 0xb0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	; 0x78
 8000ec0:	f000 fd4c 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ec4:	22c8      	movs	r2, #200	; 0xc8
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	; 0x78
 8000eca:	f000 fd47 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	; 0x78
 8000ed4:	f000 fd42 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ed8:	2210      	movs	r2, #16
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	; 0x78
 8000ede:	f000 fd3d 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ee2:	2240      	movs	r2, #64	; 0x40
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	; 0x78
 8000ee8:	f000 fd38 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000eec:	2281      	movs	r2, #129	; 0x81
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2078      	movs	r0, #120	; 0x78
 8000ef2:	f000 fd33 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fd2e 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f00:	22a1      	movs	r2, #161	; 0xa1
 8000f02:	2100      	movs	r1, #0
 8000f04:	2078      	movs	r0, #120	; 0x78
 8000f06:	f000 fd29 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f0a:	22a6      	movs	r2, #166	; 0xa6
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	; 0x78
 8000f10:	f000 fd24 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f14:	22a8      	movs	r2, #168	; 0xa8
 8000f16:	2100      	movs	r1, #0
 8000f18:	2078      	movs	r0, #120	; 0x78
 8000f1a:	f000 fd1f 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f1e:	223f      	movs	r2, #63	; 0x3f
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fd1a 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f28:	22a4      	movs	r2, #164	; 0xa4
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fd15 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f32:	22d3      	movs	r2, #211	; 0xd3
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fd10 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f000 fd0b 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f46:	22d5      	movs	r2, #213	; 0xd5
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f000 fd06 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f50:	22f0      	movs	r2, #240	; 0xf0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2078      	movs	r0, #120	; 0x78
 8000f56:	f000 fd01 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f5a:	22d9      	movs	r2, #217	; 0xd9
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	; 0x78
 8000f60:	f000 fcfc 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f64:	2222      	movs	r2, #34	; 0x22
 8000f66:	2100      	movs	r1, #0
 8000f68:	2078      	movs	r0, #120	; 0x78
 8000f6a:	f000 fcf7 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f6e:	22da      	movs	r2, #218	; 0xda
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fcf2 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f78:	2212      	movs	r2, #18
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2078      	movs	r0, #120	; 0x78
 8000f7e:	f000 fced 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f82:	22db      	movs	r2, #219	; 0xdb
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	; 0x78
 8000f88:	f000 fce8 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2078      	movs	r0, #120	; 0x78
 8000f92:	f000 fce3 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f96:	228d      	movs	r2, #141	; 0x8d
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 fcde 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 fcd9 	bl	800195c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000faa:	22af      	movs	r2, #175	; 0xaf
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 fcd4 	bl	800195c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000fb4:	222e      	movs	r2, #46	; 0x2e
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	; 0x78
 8000fba:	f000 fccf 	bl	800195c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f84c 	bl	800105c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000fc4:	f000 f816 	bl	8000ff4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <SSD1306_Init+0x184>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <SSD1306_Init+0x184>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SSD1306_Init+0x184>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	00004e20 	.word	0x00004e20
 8000fe8:	200001b0 	.word	0x200001b0
 8000fec:	000009c4 	.word	0x000009c4
 8000ff0:	20000600 	.word	0x20000600

08000ff4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e021      	b.n	8001046 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3b50      	subs	r3, #80	; 0x50
 8001008:	b2db      	uxtb	r3, r3
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	; 0x78
 8001010:	f000 fca4 	bl	800195c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2078      	movs	r0, #120	; 0x78
 800101a:	f000 fc9f 	bl	800195c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800101e:	2210      	movs	r2, #16
 8001020:	2100      	movs	r1, #0
 8001022:	2078      	movs	r0, #120	; 0x78
 8001024:	f000 fc9a 	bl	800195c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	01da      	lsls	r2, r3, #7
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <SSD1306_UpdateScreen+0x64>)
 8001030:	18d2      	adds	r2, r2, r3
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	2078      	movs	r0, #120	; 0x78
 8001038:	f000 fc24 	bl	8001884 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	3201      	adds	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b07      	cmp	r3, #7
 800104c:	d9d9      	bls.n	8001002 <SSD1306_UpdateScreen+0xe>
	}
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000200 	.word	0x20000200

0800105c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	0002      	movs	r2, r0
 8001064:	1dfb      	adds	r3, r7, #7
 8001066:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <SSD1306_Fill+0x18>
 8001070:	2300      	movs	r3, #0
 8001072:	e000      	b.n	8001076 <SSD1306_Fill+0x1a>
 8001074:	23ff      	movs	r3, #255	; 0xff
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	00d2      	lsls	r2, r2, #3
 800107a:	4804      	ldr	r0, [pc, #16]	; (800108c <SSD1306_Fill+0x30>)
 800107c:	0019      	movs	r1, r3
 800107e:	f005 fb8c 	bl	800679a <memset>
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20000200 	.word	0x20000200

08001090 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	0004      	movs	r4, r0
 8001098:	0008      	movs	r0, r1
 800109a:	0011      	movs	r1, r2
 800109c:	1dbb      	adds	r3, r7, #6
 800109e:	1c22      	adds	r2, r4, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	1c02      	adds	r2, r0, #0
 80010a6:	801a      	strh	r2, [r3, #0]
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	1c0a      	adds	r2, r1, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	if (
 80010ae:	1dbb      	adds	r3, r7, #6
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	2b7f      	cmp	r3, #127	; 0x7f
 80010b4:	d852      	bhi.n	800115c <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	2b3f      	cmp	r3, #63	; 0x3f
 80010bc:	d84e      	bhi.n	800115c <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <SSD1306_DrawPixel+0xd4>)
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80010c6:	1cfb      	adds	r3, r7, #3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	425a      	negs	r2, r3
 80010cc:	4153      	adcs	r3, r2
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	1cfb      	adds	r3, r7, #3
 80010d2:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010d4:	1cfb      	adds	r3, r7, #3
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d11e      	bne.n	800111a <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010dc:	1dbb      	adds	r3, r7, #6
 80010de:	881a      	ldrh	r2, [r3, #0]
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b298      	uxth	r0, r3
 80010e8:	0003      	movs	r3, r0
 80010ea:	01db      	lsls	r3, r3, #7
 80010ec:	18d3      	adds	r3, r2, r3
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <SSD1306_DrawPixel+0xd8>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	2107      	movs	r1, #7
 80010fa:	400b      	ands	r3, r1
 80010fc:	2101      	movs	r1, #1
 80010fe:	4099      	lsls	r1, r3
 8001100:	000b      	movs	r3, r1
 8001102:	b25b      	sxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b259      	sxtb	r1, r3
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	0003      	movs	r3, r0
 800110e:	01db      	lsls	r3, r3, #7
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	b2c9      	uxtb	r1, r1
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <SSD1306_DrawPixel+0xd8>)
 8001116:	54d1      	strb	r1, [r2, r3]
 8001118:	e021      	b.n	800115e <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800111a:	1dbb      	adds	r3, r7, #6
 800111c:	881a      	ldrh	r2, [r3, #0]
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	b298      	uxth	r0, r3
 8001126:	0003      	movs	r3, r0
 8001128:	01db      	lsls	r3, r3, #7
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <SSD1306_DrawPixel+0xd8>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	2107      	movs	r1, #7
 8001138:	400a      	ands	r2, r1
 800113a:	2101      	movs	r1, #1
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	b252      	sxtb	r2, r2
 8001142:	43d2      	mvns	r2, r2
 8001144:	b252      	sxtb	r2, r2
 8001146:	4013      	ands	r3, r2
 8001148:	b259      	sxtb	r1, r3
 800114a:	1dbb      	adds	r3, r7, #6
 800114c:	881a      	ldrh	r2, [r3, #0]
 800114e:	0003      	movs	r3, r0
 8001150:	01db      	lsls	r3, r3, #7
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	b2c9      	uxtb	r1, r1
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <SSD1306_DrawPixel+0xd8>)
 8001158:	54d1      	strb	r1, [r2, r3]
 800115a:	e000      	b.n	800115e <SSD1306_DrawPixel+0xce>
		return;
 800115c:	46c0      	nop			; (mov r8, r8)
	}
}
 800115e:	46bd      	mov	sp, r7
 8001160:	b003      	add	sp, #12
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	20000600 	.word	0x20000600
 8001168:	20000200 	.word	0x20000200

0800116c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	0002      	movs	r2, r0
 8001174:	1dbb      	adds	r3, r7, #6
 8001176:	801a      	strh	r2, [r3, #0]
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	1c0a      	adds	r2, r1, #0
 800117c:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SSD1306_GotoXY+0x2c>)
 8001180:	1dba      	adds	r2, r7, #6
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SSD1306_GotoXY+0x2c>)
 8001188:	1d3a      	adds	r2, r7, #4
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	805a      	strh	r2, [r3, #2]
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000600 	.word	0x20000600

0800119c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6039      	str	r1, [r7, #0]
 80011a4:	0011      	movs	r1, r2
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	1c02      	adds	r2, r0, #0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	1c0a      	adds	r2, r1, #0
 80011b0:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <SSD1306_Putc+0x100>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	001a      	movs	r2, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	18d3      	adds	r3, r2, r3
	if (
 80011be:	2b7f      	cmp	r3, #127	; 0x7f
 80011c0:	dc07      	bgt.n	80011d2 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <SSD1306_Putc+0x100>)
 80011c4:	885b      	ldrh	r3, [r3, #2]
 80011c6:	001a      	movs	r2, r3
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	785b      	ldrb	r3, [r3, #1]
 80011cc:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011ce:	2b3f      	cmp	r3, #63	; 0x3f
 80011d0:	dd01      	ble.n	80011d6 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e05e      	b.n	8001294 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e04a      	b.n	8001272 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	1dfb      	adds	r3, r7, #7
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3b20      	subs	r3, #32
 80011e6:	6839      	ldr	r1, [r7, #0]
 80011e8:	7849      	ldrb	r1, [r1, #1]
 80011ea:	434b      	muls	r3, r1
 80011ec:	0019      	movs	r1, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	18cb      	adds	r3, r1, r3
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	e02f      	b.n	8001260 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	409a      	lsls	r2, r3
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	4013      	ands	r3, r2
 800120c:	d011      	beq.n	8001232 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <SSD1306_Putc+0x100>)
 8001210:	881a      	ldrh	r2, [r3, #0]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	b29b      	uxth	r3, r3
 8001216:	18d3      	adds	r3, r2, r3
 8001218:	b298      	uxth	r0, r3
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <SSD1306_Putc+0x100>)
 800121c:	885a      	ldrh	r2, [r3, #2]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	b29b      	uxth	r3, r3
 8001222:	18d3      	adds	r3, r2, r3
 8001224:	b299      	uxth	r1, r3
 8001226:	1dbb      	adds	r3, r7, #6
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	001a      	movs	r2, r3
 800122c:	f7ff ff30 	bl	8001090 <SSD1306_DrawPixel>
 8001230:	e013      	b.n	800125a <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <SSD1306_Putc+0x100>)
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	b29b      	uxth	r3, r3
 800123a:	18d3      	adds	r3, r2, r3
 800123c:	b298      	uxth	r0, r3
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <SSD1306_Putc+0x100>)
 8001240:	885a      	ldrh	r2, [r3, #2]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	b29b      	uxth	r3, r3
 8001246:	18d3      	adds	r3, r2, r3
 8001248:	b299      	uxth	r1, r3
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	425a      	negs	r2, r3
 8001250:	4153      	adcs	r3, r2
 8001252:	b2db      	uxtb	r3, r3
 8001254:	001a      	movs	r2, r3
 8001256:	f7ff ff1b 	bl	8001090 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	3301      	adds	r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	001a      	movs	r2, r3
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4293      	cmp	r3, r2
 800126a:	d3c9      	bcc.n	8001200 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	001a      	movs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	4293      	cmp	r3, r2
 800127c:	d3ae      	bcc.n	80011dc <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <SSD1306_Putc+0x100>)
 8001280:	881a      	ldrh	r2, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <SSD1306_Putc+0x100>)
 800128e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000600 	.word	0x20000600

080012a0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 80012ae:	e013      	b.n	80012d8 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	7818      	ldrb	r0, [r3, #0]
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	0019      	movs	r1, r3
 80012bc:	f7ff ff6e 	bl	800119c <SSD1306_Putc>
 80012c0:	0003      	movs	r3, r0
 80012c2:	001a      	movs	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d002      	beq.n	80012d2 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	e008      	b.n	80012e4 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e7      	bne.n	80012b0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	781b      	ldrb	r3, [r3, #0]
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}

080012ec <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	0005      	movs	r5, r0
 80012f4:	000c      	movs	r4, r1
 80012f6:	0010      	movs	r0, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	1dbb      	adds	r3, r7, #6
 80012fc:	1c2a      	adds	r2, r5, #0
 80012fe:	801a      	strh	r2, [r3, #0]
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	1c22      	adds	r2, r4, #0
 8001304:	801a      	strh	r2, [r3, #0]
 8001306:	1cbb      	adds	r3, r7, #2
 8001308:	1c02      	adds	r2, r0, #0
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	003b      	movs	r3, r7
 800130e:	1c0a      	adds	r2, r1, #0
 8001310:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001312:	1dbb      	adds	r3, r7, #6
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	2b7f      	cmp	r3, #127	; 0x7f
 8001318:	d902      	bls.n	8001320 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 800131a:	1dbb      	adds	r3, r7, #6
 800131c:	227f      	movs	r2, #127	; 0x7f
 800131e:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001320:	1cbb      	adds	r3, r7, #2
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	2b7f      	cmp	r3, #127	; 0x7f
 8001326:	d902      	bls.n	800132e <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	227f      	movs	r2, #127	; 0x7f
 800132c:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	2b3f      	cmp	r3, #63	; 0x3f
 8001334:	d902      	bls.n	800133c <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	223f      	movs	r2, #63	; 0x3f
 800133a:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800133c:	003b      	movs	r3, r7
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2b3f      	cmp	r3, #63	; 0x3f
 8001342:	d902      	bls.n	800134a <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 8001344:	003b      	movs	r3, r7
 8001346:	223f      	movs	r2, #63	; 0x3f
 8001348:	801a      	strh	r2, [r3, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800134a:	1dba      	adds	r2, r7, #6
 800134c:	1cbb      	adds	r3, r7, #2
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d207      	bcs.n	8001366 <SSD1306_DrawLine+0x7a>
 8001356:	1cba      	adds	r2, r7, #2
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	8812      	ldrh	r2, [r2, #0]
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b29b      	uxth	r3, r3
 8001362:	b21b      	sxth	r3, r3
 8001364:	e006      	b.n	8001374 <SSD1306_DrawLine+0x88>
 8001366:	1dba      	adds	r2, r7, #6
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	8812      	ldrh	r2, [r2, #0]
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21b      	sxth	r3, r3
 8001374:	2212      	movs	r2, #18
 8001376:	18ba      	adds	r2, r7, r2
 8001378:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800137a:	1d3a      	adds	r2, r7, #4
 800137c:	003b      	movs	r3, r7
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d207      	bcs.n	8001396 <SSD1306_DrawLine+0xaa>
 8001386:	003a      	movs	r2, r7
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	8812      	ldrh	r2, [r2, #0]
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	b29b      	uxth	r3, r3
 8001392:	b21b      	sxth	r3, r3
 8001394:	e006      	b.n	80013a4 <SSD1306_DrawLine+0xb8>
 8001396:	1d3a      	adds	r2, r7, #4
 8001398:	003b      	movs	r3, r7
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	2210      	movs	r2, #16
 80013a6:	18ba      	adds	r2, r7, r2
 80013a8:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1; 
 80013aa:	1dba      	adds	r2, r7, #6
 80013ac:	1cbb      	adds	r3, r7, #2
 80013ae:	8812      	ldrh	r2, [r2, #0]
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d201      	bcs.n	80013ba <SSD1306_DrawLine+0xce>
 80013b6:	2201      	movs	r2, #1
 80013b8:	e001      	b.n	80013be <SSD1306_DrawLine+0xd2>
 80013ba:	2301      	movs	r3, #1
 80013bc:	425a      	negs	r2, r3
 80013be:	230e      	movs	r3, #14
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1; 
 80013c4:	1d3a      	adds	r2, r7, #4
 80013c6:	003b      	movs	r3, r7
 80013c8:	8812      	ldrh	r2, [r2, #0]
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d201      	bcs.n	80013d4 <SSD1306_DrawLine+0xe8>
 80013d0:	2201      	movs	r2, #1
 80013d2:	e001      	b.n	80013d8 <SSD1306_DrawLine+0xec>
 80013d4:	2301      	movs	r3, #1
 80013d6:	425a      	negs	r2, r3
 80013d8:	230c      	movs	r3, #12
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80013de:	2112      	movs	r1, #18
 80013e0:	187a      	adds	r2, r7, r1
 80013e2:	2310      	movs	r3, #16
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2000      	movs	r0, #0
 80013e8:	5e12      	ldrsh	r2, [r2, r0]
 80013ea:	2000      	movs	r0, #0
 80013ec:	5e1b      	ldrsh	r3, [r3, r0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dd08      	ble.n	8001404 <SSD1306_DrawLine+0x118>
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	5e9b      	ldrsh	r3, [r3, r2]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da00      	bge.n	80013fe <SSD1306_DrawLine+0x112>
 80013fc:	3301      	adds	r3, #1
 80013fe:	105b      	asrs	r3, r3, #1
 8001400:	b21b      	sxth	r3, r3
 8001402:	e009      	b.n	8001418 <SSD1306_DrawLine+0x12c>
 8001404:	2310      	movs	r3, #16
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2200      	movs	r2, #0
 800140a:	5e9b      	ldrsh	r3, [r3, r2]
 800140c:	2b00      	cmp	r3, #0
 800140e:	da00      	bge.n	8001412 <SSD1306_DrawLine+0x126>
 8001410:	3301      	adds	r3, #1
 8001412:	105b      	asrs	r3, r3, #1
 8001414:	425b      	negs	r3, r3
 8001416:	b21b      	sxth	r3, r3
 8001418:	2216      	movs	r2, #22
 800141a:	18ba      	adds	r2, r7, r2
 800141c:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 800141e:	2312      	movs	r3, #18
 8001420:	18fb      	adds	r3, r7, r3
 8001422:	2200      	movs	r2, #0
 8001424:	5e9b      	ldrsh	r3, [r3, r2]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d148      	bne.n	80014bc <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 800142a:	003a      	movs	r2, r7
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d20c      	bcs.n	8001450 <SSD1306_DrawLine+0x164>
			tmp = y1;
 8001436:	2108      	movs	r1, #8
 8001438:	187b      	adds	r3, r7, r1
 800143a:	003a      	movs	r2, r7
 800143c:	8812      	ldrh	r2, [r2, #0]
 800143e:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 8001440:	003b      	movs	r3, r7
 8001442:	1d3a      	adds	r2, r7, #4
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	187a      	adds	r2, r7, r1
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 8001450:	1cba      	adds	r2, r7, #2
 8001452:	1dbb      	adds	r3, r7, #6
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d20c      	bcs.n	8001476 <SSD1306_DrawLine+0x18a>
			tmp = x1;
 800145c:	2108      	movs	r1, #8
 800145e:	187b      	adds	r3, r7, r1
 8001460:	1cba      	adds	r2, r7, #2
 8001462:	8812      	ldrh	r2, [r2, #0]
 8001464:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8001466:	1cbb      	adds	r3, r7, #2
 8001468:	1dba      	adds	r2, r7, #6
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	187a      	adds	r2, r7, r1
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	801a      	strh	r2, [r3, #0]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001476:	2314      	movs	r3, #20
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	1d3a      	adds	r2, r7, #4
 800147c:	8812      	ldrh	r2, [r2, #0]
 800147e:	801a      	strh	r2, [r3, #0]
 8001480:	e013      	b.n	80014aa <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 8001482:	2414      	movs	r4, #20
 8001484:	193b      	adds	r3, r7, r4
 8001486:	8819      	ldrh	r1, [r3, #0]
 8001488:	2328      	movs	r3, #40	; 0x28
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	1dbb      	adds	r3, r7, #6
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	f7ff fdfc 	bl	8001090 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001498:	0021      	movs	r1, r4
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	5e9b      	ldrsh	r3, [r3, r2]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	2314      	movs	r3, #20
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2200      	movs	r2, #0
 80014b0:	5e9a      	ldrsh	r2, [r3, r2]
 80014b2:	003b      	movs	r3, r7
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dde3      	ble.n	8001482 <SSD1306_DrawLine+0x196>
		}
		
		/* Return from function */
		return;
 80014ba:	e0a3      	b.n	8001604 <SSD1306_DrawLine+0x318>
	}
	
	if (dy == 0) {
 80014bc:	2310      	movs	r3, #16
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	2200      	movs	r2, #0
 80014c2:	5e9b      	ldrsh	r3, [r3, r2]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d148      	bne.n	800155a <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 80014c8:	003a      	movs	r2, r7
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d20c      	bcs.n	80014ee <SSD1306_DrawLine+0x202>
			tmp = y1;
 80014d4:	2108      	movs	r1, #8
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	003a      	movs	r2, r7
 80014da:	8812      	ldrh	r2, [r2, #0]
 80014dc:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80014de:	003b      	movs	r3, r7
 80014e0:	1d3a      	adds	r2, r7, #4
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	187a      	adds	r2, r7, r1
 80014ea:	8812      	ldrh	r2, [r2, #0]
 80014ec:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 80014ee:	1cba      	adds	r2, r7, #2
 80014f0:	1dbb      	adds	r3, r7, #6
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d20c      	bcs.n	8001514 <SSD1306_DrawLine+0x228>
			tmp = x1;
 80014fa:	2108      	movs	r1, #8
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	1cba      	adds	r2, r7, #2
 8001500:	8812      	ldrh	r2, [r2, #0]
 8001502:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	1dba      	adds	r2, r7, #6
 8001508:	8812      	ldrh	r2, [r2, #0]
 800150a:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800150c:	1dbb      	adds	r3, r7, #6
 800150e:	187a      	adds	r2, r7, r1
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	801a      	strh	r2, [r3, #0]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001514:	2314      	movs	r3, #20
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	1dba      	adds	r2, r7, #6
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	e013      	b.n	8001548 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 8001520:	2414      	movs	r4, #20
 8001522:	193b      	adds	r3, r7, r4
 8001524:	8818      	ldrh	r0, [r3, #0]
 8001526:	2328      	movs	r3, #40	; 0x28
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	0019      	movs	r1, r3
 8001532:	f7ff fdad 	bl	8001090 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001536:	0021      	movs	r1, r4
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2200      	movs	r2, #0
 800153c:	5e9b      	ldrsh	r3, [r3, r2]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	187b      	adds	r3, r7, r1
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	2314      	movs	r3, #20
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	5e9a      	ldrsh	r2, [r3, r2]
 8001550:	1cbb      	adds	r3, r7, #2
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	dde3      	ble.n	8001520 <SSD1306_DrawLine+0x234>
		}
		
		/* Return from function */
		return;
 8001558:	e054      	b.n	8001604 <SSD1306_DrawLine+0x318>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800155a:	2328      	movs	r3, #40	; 0x28
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	8819      	ldrh	r1, [r3, #0]
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff fd91 	bl	8001090 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800156e:	1dba      	adds	r2, r7, #6
 8001570:	1cbb      	adds	r3, r7, #2
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d105      	bne.n	8001586 <SSD1306_DrawLine+0x29a>
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	003b      	movs	r3, r7
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d03d      	beq.n	8001602 <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err; 
 8001586:	200a      	movs	r0, #10
 8001588:	183b      	adds	r3, r7, r0
 800158a:	2116      	movs	r1, #22
 800158c:	187a      	adds	r2, r7, r1
 800158e:	8812      	ldrh	r2, [r2, #0]
 8001590:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 8001592:	183b      	adds	r3, r7, r0
 8001594:	2200      	movs	r2, #0
 8001596:	5e9a      	ldrsh	r2, [r3, r2]
 8001598:	2312      	movs	r3, #18
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	2000      	movs	r0, #0
 800159e:	5e1b      	ldrsh	r3, [r3, r0]
 80015a0:	425b      	negs	r3, r3
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dd10      	ble.n	80015c8 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	2310      	movs	r3, #16
 80015ac:	18fb      	adds	r3, r7, r3
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 80015b8:	230e      	movs	r3, #14
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	8819      	ldrh	r1, [r3, #0]
 80015be:	1dbb      	adds	r3, r7, #6
 80015c0:	1dba      	adds	r2, r7, #6
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	188a      	adds	r2, r1, r2
 80015c6:	801a      	strh	r2, [r3, #0]
		} 
		if (e2 < dy) {
 80015c8:	230a      	movs	r3, #10
 80015ca:	18fa      	adds	r2, r7, r3
 80015cc:	2310      	movs	r3, #16
 80015ce:	18fb      	adds	r3, r7, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	5e52      	ldrsh	r2, [r2, r1]
 80015d4:	2100      	movs	r1, #0
 80015d6:	5e5b      	ldrsh	r3, [r3, r1]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dabe      	bge.n	800155a <SSD1306_DrawLine+0x26e>
			err += dx;
 80015dc:	2116      	movs	r1, #22
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	881a      	ldrh	r2, [r3, #0]
 80015e2:	2312      	movs	r3, #18
 80015e4:	18fb      	adds	r3, r7, r3
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	18d3      	adds	r3, r2, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 80015f0:	230c      	movs	r3, #12
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	8819      	ldrh	r1, [r3, #0]
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	1d3a      	adds	r2, r7, #4
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	188a      	adds	r2, r1, r2
 80015fe:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 8001600:	e7ab      	b.n	800155a <SSD1306_DrawLine+0x26e>
			break;
 8001602:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
 8001604:	46bd      	mov	sp, r7
 8001606:	b006      	add	sp, #24
 8001608:	bdb0      	pop	{r4, r5, r7, pc}

0800160a <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800160a:	b5b0      	push	{r4, r5, r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af02      	add	r7, sp, #8
 8001610:	0005      	movs	r5, r0
 8001612:	000c      	movs	r4, r1
 8001614:	0010      	movs	r0, r2
 8001616:	0019      	movs	r1, r3
 8001618:	1dbb      	adds	r3, r7, #6
 800161a:	1c2a      	adds	r2, r5, #0
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	1c22      	adds	r2, r4, #0
 8001622:	801a      	strh	r2, [r3, #0]
 8001624:	1cbb      	adds	r3, r7, #2
 8001626:	1c02      	adds	r2, r0, #0
 8001628:	801a      	strh	r2, [r3, #0]
 800162a:	003b      	movs	r3, r7
 800162c:	1c0a      	adds	r2, r1, #0
 800162e:	801a      	strh	r2, [r3, #0]
	/* Check input parameters */
	if (
 8001630:	1dbb      	adds	r3, r7, #6
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	2b7f      	cmp	r3, #127	; 0x7f
 8001636:	d900      	bls.n	800163a <SSD1306_DrawRectangle+0x30>
 8001638:	e07a      	b.n	8001730 <SSD1306_DrawRectangle+0x126>
		x >= SSD1306_WIDTH ||
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	2b3f      	cmp	r3, #63	; 0x3f
 8001640:	d900      	bls.n	8001644 <SSD1306_DrawRectangle+0x3a>
 8001642:	e075      	b.n	8001730 <SSD1306_DrawRectangle+0x126>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001644:	1dbb      	adds	r3, r7, #6
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	2b7f      	cmp	r3, #127	; 0x7f
 8001650:	dd05      	ble.n	800165e <SSD1306_DrawRectangle+0x54>
		w = SSD1306_WIDTH - x;
 8001652:	1cbb      	adds	r3, r7, #2
 8001654:	1dba      	adds	r2, r7, #6
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	1a8a      	subs	r2, r1, r2
 800165c:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	881a      	ldrh	r2, [r3, #0]
 8001662:	003b      	movs	r3, r7
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	18d3      	adds	r3, r2, r3
 8001668:	2b3f      	cmp	r3, #63	; 0x3f
 800166a:	dd05      	ble.n	8001678 <SSD1306_DrawRectangle+0x6e>
		h = SSD1306_HEIGHT - y;
 800166c:	003b      	movs	r3, r7
 800166e:	1d3a      	adds	r2, r7, #4
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	1a8a      	subs	r2, r1, r2
 8001676:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001678:	1dba      	adds	r2, r7, #6
 800167a:	1cbb      	adds	r3, r7, #2
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	881c      	ldrh	r4, [r3, #0]
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	8819      	ldrh	r1, [r3, #0]
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	8818      	ldrh	r0, [r3, #0]
 8001690:	2518      	movs	r5, #24
 8001692:	197b      	adds	r3, r7, r5
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	0023      	movs	r3, r4
 800169a:	f7ff fe27 	bl	80012ec <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800169e:	1d3a      	adds	r2, r7, #4
 80016a0:	003b      	movs	r3, r7
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	18d3      	adds	r3, r2, r3
 80016a8:	b299      	uxth	r1, r3
 80016aa:	1dba      	adds	r2, r7, #6
 80016ac:	1cbb      	adds	r3, r7, #2
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	18d3      	adds	r3, r2, r3
 80016b4:	b29c      	uxth	r4, r3
 80016b6:	1d3a      	adds	r2, r7, #4
 80016b8:	003b      	movs	r3, r7
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	18d3      	adds	r3, r2, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	1dbb      	adds	r3, r7, #6
 80016c4:	8818      	ldrh	r0, [r3, #0]
 80016c6:	197b      	adds	r3, r7, r5
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	0013      	movs	r3, r2
 80016ce:	0022      	movs	r2, r4
 80016d0:	f7ff fe0c 	bl	80012ec <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80016d4:	1d3a      	adds	r2, r7, #4
 80016d6:	003b      	movs	r3, r7
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	b29c      	uxth	r4, r3
 80016e0:	1dbb      	adds	r3, r7, #6
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	8819      	ldrh	r1, [r3, #0]
 80016e8:	1dbb      	adds	r3, r7, #6
 80016ea:	8818      	ldrh	r0, [r3, #0]
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	0023      	movs	r3, r4
 80016f4:	f7ff fdfa 	bl	80012ec <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80016f8:	1dba      	adds	r2, r7, #6
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	8812      	ldrh	r2, [r2, #0]
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	b298      	uxth	r0, r3
 8001704:	1dba      	adds	r2, r7, #6
 8001706:	1cbb      	adds	r3, r7, #2
 8001708:	8812      	ldrh	r2, [r2, #0]
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	b29c      	uxth	r4, r3
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	003b      	movs	r3, r7
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	8819      	ldrh	r1, [r3, #0]
 8001720:	197b      	adds	r3, r7, r5
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	0013      	movs	r3, r2
 8001728:	0022      	movs	r2, r4
 800172a:	f7ff fddf 	bl	80012ec <SSD1306_DrawLine>
 800172e:	e000      	b.n	8001732 <SSD1306_DrawRectangle+0x128>
		return;
 8001730:	46c0      	nop			; (mov r8, r8)
}
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bdb0      	pop	{r4, r5, r7, pc}

08001738 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af02      	add	r7, sp, #8
 800173e:	0005      	movs	r5, r0
 8001740:	000c      	movs	r4, r1
 8001742:	0010      	movs	r0, r2
 8001744:	0019      	movs	r1, r3
 8001746:	1dbb      	adds	r3, r7, #6
 8001748:	1c2a      	adds	r2, r5, #0
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	1c22      	adds	r2, r4, #0
 8001750:	801a      	strh	r2, [r3, #0]
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	1c02      	adds	r2, r0, #0
 8001756:	801a      	strh	r2, [r3, #0]
 8001758:	003b      	movs	r3, r7
 800175a:	1c0a      	adds	r2, r1, #0
 800175c:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800175e:	1dbb      	adds	r3, r7, #6
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	2b7f      	cmp	r3, #127	; 0x7f
 8001764:	d850      	bhi.n	8001808 <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	2b3f      	cmp	r3, #63	; 0x3f
 800176c:	d84c      	bhi.n	8001808 <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800176e:	1dbb      	adds	r3, r7, #6
 8001770:	881a      	ldrh	r2, [r3, #0]
 8001772:	1cbb      	adds	r3, r7, #2
 8001774:	881b      	ldrh	r3, [r3, #0]
 8001776:	18d3      	adds	r3, r2, r3
 8001778:	2b7f      	cmp	r3, #127	; 0x7f
 800177a:	dd05      	ble.n	8001788 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 800177c:	1cbb      	adds	r3, r7, #2
 800177e:	1dba      	adds	r2, r7, #6
 8001780:	8812      	ldrh	r2, [r2, #0]
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	1a8a      	subs	r2, r1, r2
 8001786:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	003b      	movs	r3, r7
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	18d3      	adds	r3, r2, r3
 8001792:	2b3f      	cmp	r3, #63	; 0x3f
 8001794:	dd05      	ble.n	80017a2 <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 8001796:	003b      	movs	r3, r7
 8001798:	1d3a      	adds	r2, r7, #4
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	2140      	movs	r1, #64	; 0x40
 800179e:	1a8a      	subs	r2, r1, r2
 80017a0:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80017a2:	230f      	movs	r3, #15
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e024      	b.n	80017f6 <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80017ac:	200f      	movs	r0, #15
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	b299      	uxth	r1, r3
 80017bc:	1dba      	adds	r2, r7, #6
 80017be:	1cbb      	adds	r3, r7, #2
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	18d3      	adds	r3, r2, r3
 80017c6:	b29c      	uxth	r4, r3
 80017c8:	0005      	movs	r5, r0
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	18d3      	adds	r3, r2, r3
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	1dbb      	adds	r3, r7, #6
 80017da:	8818      	ldrh	r0, [r3, #0]
 80017dc:	2320      	movs	r3, #32
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	0013      	movs	r3, r2
 80017e6:	0022      	movs	r2, r4
 80017e8:	f7ff fd80 	bl	80012ec <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	3201      	adds	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	230f      	movs	r3, #15
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	003a      	movs	r2, r7
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d2d2      	bcs.n	80017ac <SSD1306_DrawFilledRectangle+0x74>
 8001806:	e000      	b.n	800180a <SSD1306_DrawFilledRectangle+0xd2>
		return;
 8001808:	46c0      	nop			; (mov r8, r8)
	}
}
 800180a:	46bd      	mov	sp, r7
 800180c:	b004      	add	sp, #16
 800180e:	bdb0      	pop	{r4, r5, r7, pc}

08001810 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fc21 	bl	800105c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800181a:	f7ff fbeb 	bl	8000ff4 <SSD1306_UpdateScreen>
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <SSD1306_SetContrast>:
	SSD1306_WRITECOMMAND(0x8D);  
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}

void SSD1306_SetContrast(const uint8_t value) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	0002      	movs	r2, r0
 800182c:	1dfb      	adds	r3, r7, #7
 800182e:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001830:	210f      	movs	r1, #15
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2281      	movs	r2, #129	; 0x81
 8001836:	701a      	strb	r2, [r3, #0]
    SSD1306_WRITECOMMAND(kSetContrastControlRegister);
 8001838:	187b      	adds	r3, r7, r1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	001a      	movs	r2, r3
 800183e:	2100      	movs	r1, #0
 8001840:	2078      	movs	r0, #120	; 0x78
 8001842:	f000 f88b 	bl	800195c <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(value);
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	001a      	movs	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	2078      	movs	r0, #120	; 0x78
 8001850:	f000 f884 	bl	800195c <ssd1306_I2C_Write>
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}

0800185c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <ssd1306_I2C_Init+0x24>)
 8001864:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001866:	e002      	b.n	800186e <ssd1306_I2C_Init+0x12>
		p--;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f9      	bne.n	8001868 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	0003d090 	.word	0x0003d090

08001884 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b0c6      	sub	sp, #280	; 0x118
 8001888:	af02      	add	r7, sp, #8
 800188a:	0004      	movs	r4, r0
 800188c:	0008      	movs	r0, r1
 800188e:	603a      	str	r2, [r7, #0]
 8001890:	0019      	movs	r1, r3
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <ssd1306_I2C_WriteMulti+0xc4>)
 8001894:	2588      	movs	r5, #136	; 0x88
 8001896:	006d      	lsls	r5, r5, #1
 8001898:	195b      	adds	r3, r3, r5
 800189a:	19db      	adds	r3, r3, r7
 800189c:	1c22      	adds	r2, r4, #0
 800189e:	701a      	strb	r2, [r3, #0]
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <ssd1306_I2C_WriteMulti+0xc8>)
 80018a2:	002c      	movs	r4, r5
 80018a4:	191b      	adds	r3, r3, r4
 80018a6:	19db      	adds	r3, r3, r7
 80018a8:	1c02      	adds	r2, r0, #0
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <ssd1306_I2C_WriteMulti+0xcc>)
 80018ae:	0020      	movs	r0, r4
 80018b0:	181b      	adds	r3, r3, r0
 80018b2:	19db      	adds	r3, r3, r7
 80018b4:	1c0a      	adds	r2, r1, #0
 80018b6:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <ssd1306_I2C_WriteMulti+0xd0>)
 80018ba:	181b      	adds	r3, r3, r0
 80018bc:	19db      	adds	r3, r3, r7
 80018be:	4a23      	ldr	r2, [pc, #140]	; (800194c <ssd1306_I2C_WriteMulti+0xc8>)
 80018c0:	1812      	adds	r2, r2, r0
 80018c2:	19d2      	adds	r2, r2, r7
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80018c8:	2310      	movs	r3, #16
 80018ca:	33ff      	adds	r3, #255	; 0xff
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e014      	b.n	80018fe <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 80018d4:	2010      	movs	r0, #16
 80018d6:	30ff      	adds	r0, #255	; 0xff
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	18d2      	adds	r2, r2, r3
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	7811      	ldrb	r1, [r2, #0]
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <ssd1306_I2C_WriteMulti+0xd0>)
 80018ea:	2488      	movs	r4, #136	; 0x88
 80018ec:	0064      	lsls	r4, r4, #1
 80018ee:	1912      	adds	r2, r2, r4
 80018f0:	19d2      	adds	r2, r2, r7
 80018f2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018f4:	183b      	adds	r3, r7, r0
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	3201      	adds	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	2310      	movs	r3, #16
 8001900:	33ff      	adds	r3, #255	; 0xff
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <ssd1306_I2C_WriteMulti+0xcc>)
 800190a:	2188      	movs	r1, #136	; 0x88
 800190c:	0049      	lsls	r1, r1, #1
 800190e:	1852      	adds	r2, r2, r1
 8001910:	19d2      	adds	r2, r2, r7
 8001912:	8812      	ldrh	r2, [r2, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8dd      	bhi.n	80018d4 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <ssd1306_I2C_WriteMulti+0xc4>)
 800191a:	000a      	movs	r2, r1
 800191c:	189b      	adds	r3, r3, r2
 800191e:	19db      	adds	r3, r3, r7
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b299      	uxth	r1, r3
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <ssd1306_I2C_WriteMulti+0xcc>)
 8001926:	189b      	adds	r3, r3, r2
 8001928:	19db      	adds	r3, r3, r7
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	220c      	movs	r2, #12
 8001932:	18ba      	adds	r2, r7, r2
 8001934:	4808      	ldr	r0, [pc, #32]	; (8001958 <ssd1306_I2C_WriteMulti+0xd4>)
 8001936:	240a      	movs	r4, #10
 8001938:	9400      	str	r4, [sp, #0]
 800193a:	f001 fbe5 	bl	8003108 <HAL_I2C_Master_Transmit>
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b044      	add	sp, #272	; 0x110
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	fffffef7 	.word	0xfffffef7
 800194c:	fffffef6 	.word	0xfffffef6
 8001950:	fffffef4 	.word	0xfffffef4
 8001954:	fffffefc 	.word	0xfffffefc
 8001958:	200001b0 	.word	0x200001b0

0800195c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b087      	sub	sp, #28
 8001960:	af02      	add	r7, sp, #8
 8001962:	0004      	movs	r4, r0
 8001964:	0008      	movs	r0, r1
 8001966:	0011      	movs	r1, r2
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	1c22      	adds	r2, r4, #0
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	1dbb      	adds	r3, r7, #6
 8001970:	1c02      	adds	r2, r0, #0
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	1d7b      	adds	r3, r7, #5
 8001976:	1c0a      	adds	r2, r1, #0
 8001978:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 800197a:	200c      	movs	r0, #12
 800197c:	183b      	adds	r3, r7, r0
 800197e:	1dba      	adds	r2, r7, #6
 8001980:	7812      	ldrb	r2, [r2, #0]
 8001982:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001984:	183b      	adds	r3, r7, r0
 8001986:	1d7a      	adds	r2, r7, #5
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b299      	uxth	r1, r3
 8001992:	183a      	adds	r2, r7, r0
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <ssd1306_I2C_Write+0x4c>)
 8001996:	230a      	movs	r3, #10
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	f001 fbb4 	bl	8003108 <HAL_I2C_Master_Transmit>
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b005      	add	sp, #20
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	200001b0 	.word	0x200001b0

080019ac <setTheme>:
//markery wyboru
volatile int8_t markerPosition 		= 0; 			// polozenie wskaznika ustawianej wartosci
volatile int8_t valueToken[4] 		= {0,0,0,0};	// ustawianie wartosci

void setTheme(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b092      	sub	sp, #72	; 0x48
 80019b0:	af00      	add	r7, sp, #0
	clearContent();
 80019b2:	f000 fc1f 	bl	80021f4 <clearContent>
	switch (workStep)
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <setTheme+0xf4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b0b      	cmp	r3, #11
 80019be:	d052      	beq.n	8001a66 <setTheme+0xba>
 80019c0:	dc67      	bgt.n	8001a92 <setTheme+0xe6>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d05c      	beq.n	8001a80 <setTheme+0xd4>
 80019c6:	dc64      	bgt.n	8001a92 <setTheme+0xe6>
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <setTheme+0x26>
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d017      	beq.n	8001a00 <setTheme+0x54>
 80019d0:	e05f      	b.n	8001a92 <setTheme+0xe6>
	{
		case 0: // wyświetla logo
			showLogo();
 80019d2:	f000 f873 	bl	8001abc <showLogo>
			workStep++;
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <setTheme+0xf4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3301      	adds	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <setTheme+0xf4>)
 80019e2:	701a      	strb	r2, [r3, #0]
			SSD1306_UpdateScreen();
 80019e4:	f7ff fb06 	bl	8000ff4 <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 80019e8:	23fa      	movs	r3, #250	; 0xfa
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 ffb3 	bl	8002958 <HAL_Delay>
			SSD1306_Clear();
 80019f2:	f7ff ff0d 	bl	8001810 <SSD1306_Clear>
			SSD1306_UpdateScreen();
 80019f6:	f7ff fafd 	bl	8000ff4 <SSD1306_UpdateScreen>
			setTheme();
 80019fa:	f7ff ffd7 	bl	80019ac <setTheme>
		break;
 80019fe:	e048      	b.n	8001a92 <setTheme+0xe6>
		case 1: // wybór projektu - nowy lub istniejacy
			showLabelBar(DISP_PROJECT_LABEL);
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <setTheme+0xf8>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 fbda 	bl	80021bc <showLabelBar>
			progressBarWidth = (128 / ((PROJECT_COUNT + 1) / 2) + ((PROJECT_COUNT + 1) % 2));
 8001a08:	2303      	movs	r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da00      	bge.n	8001a12 <setTheme+0x66>
 8001a10:	3301      	adds	r3, #1
 8001a12:	105b      	asrs	r3, r3, #1
 8001a14:	0019      	movs	r1, r3
 8001a16:	2080      	movs	r0, #128	; 0x80
 8001a18:	f7fe fc12 	bl	8000240 <__divsi3>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	2303      	movs	r3, #3
 8001a22:	3301      	adds	r3, #1
 8001a24:	4920      	ldr	r1, [pc, #128]	; (8001aa8 <setTheme+0xfc>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	d504      	bpl.n	8001a34 <setTheme+0x88>
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	4249      	negs	r1, r1
 8001a30:	430b      	orrs	r3, r1
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	18d3      	adds	r3, r2, r3
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <setTheme+0x100>)
 8001a3c:	701a      	strb	r2, [r3, #0]
			progressBarStep = projectSelect / 2;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <setTheme+0x104>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <setTheme+0x108>)
 8001a4a:	701a      	strb	r2, [r3, #0]
			paginationBar(progressBarWidth, progressBarStep);
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <setTheme+0x100>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <setTheme+0x108>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f000 fbd8 	bl	8002210 <paginationBar>
			showProjectSelectMenu();
 8001a60:	f000 f83e 	bl	8001ae0 <showProjectSelectMenu>
		break;
 8001a64:	e015      	b.n	8001a92 <setTheme+0xe6>
		case 11:; // szczegoly projektu
			Project Handler = getProjectStructByID(projectSelect);
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <setTheme+0x104>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 fc1f 	bl	80022b4 <getProjectStructByID>
			showProjectDetails(&Handler);
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 f995 	bl	8001da8 <showProjectDetails>
		break;
 8001a7e:	e008      	b.n	8001a92 <setTheme+0xe6>
		case 2: // ustawienie szerokości karkasu
			showLabelBar(DISP_SET_WIDTH_LABEL);
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <setTheme+0x10c>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 fb9a 	bl	80021bc <showLabelBar>
			showWidthScreen(0, 0);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 fa1c 	bl	8001ec8 <showWidthScreen>
		break;
 8001a90:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_UpdateScreen();
 8001a92:	f7ff faaf 	bl	8000ff4 <SSD1306_UpdateScreen>
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b012      	add	sp, #72	; 0x48
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	20000606 	.word	0x20000606
 8001aa4:	080070a4 	.word	0x080070a4
 8001aa8:	80000001 	.word	0x80000001
 8001aac:	20000608 	.word	0x20000608
 8001ab0:	20000607 	.word	0x20000607
 8001ab4:	20000609 	.word	0x20000609
 8001ab8:	080070b8 	.word	0x080070b8

08001abc <showLogo>:

// start - 0
// -------------------------------------------------------------------------------------
void showLogo(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af02      	add	r7, sp, #8
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <showLogo+0x20>)
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	2340      	movs	r3, #64	; 0x40
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff f92b 	bl	8000d2c <SSD1306_DrawBitmap>
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	0800718c 	.word	0x0800718c

08001ae0 <showProjectSelectMenu>:

// wybór projektu - 1
// -------------------------------------------------------------------------------------
void showProjectSelectMenu(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b092      	sub	sp, #72	; 0x48
 8001ae4:	af00      	add	r7, sp, #0
	uint8_t side = 5;
 8001ae6:	2347      	movs	r3, #71	; 0x47
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	2205      	movs	r2, #5
 8001aec:	701a      	strb	r2, [r3, #0]
	uint8_t display = projectSelect;
 8001aee:	2346      	movs	r3, #70	; 0x46
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	4a3e      	ldr	r2, [pc, #248]	; (8001bec <showProjectSelectMenu+0x10c>)
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	701a      	strb	r2, [r3, #0]
	uint8_t step = 0;
 8001af8:	2345      	movs	r3, #69	; 0x45
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]

		if(projectSelect < 2)
 8001b00:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <showProjectSelectMenu+0x10c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d866      	bhi.n	8001bd8 <showProjectSelectMenu+0xf8>
		{
			newTaskElement();
 8001b0a:	f000 f871 	bl	8001bf0 <newTaskElement>
			Project Handler = getProjectStructByID(1);
 8001b0e:	003b      	movs	r3, r7
 8001b10:	2101      	movs	r1, #1
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 fbce 	bl	80022b4 <getProjectStructByID>
			showProjectElements(&Handler, 69);
 8001b18:	003b      	movs	r3, r7
 8001b1a:	2145      	movs	r1, #69	; 0x45
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f8af 	bl	8001c80 <showProjectElements>
					showProjectElements(&Handler, side);
				}
				step++;
			}
		}
}
 8001b22:	e05e      	b.n	8001be2 <showProjectSelectMenu+0x102>
				if(!step)
 8001b24:	2345      	movs	r3, #69	; 0x45
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d121      	bne.n	8001b72 <showProjectSelectMenu+0x92>
					if(projectSelect % 2)
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <showProjectSelectMenu+0x10c>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2201      	movs	r2, #1
 8001b36:	4013      	ands	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <showProjectSelectMenu+0x68>
						side = 68;
 8001b3e:	2347      	movs	r3, #71	; 0x47
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2244      	movs	r2, #68	; 0x44
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e003      	b.n	8001b50 <showProjectSelectMenu+0x70>
						side = 5;
 8001b48:	2347      	movs	r3, #71	; 0x47
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	701a      	strb	r2, [r3, #0]
					Project Handler = getProjectStructByID(display);
 8001b50:	003a      	movs	r2, r7
 8001b52:	2346      	movs	r3, #70	; 0x46
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	0019      	movs	r1, r3
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	f000 fbaa 	bl	80022b4 <getProjectStructByID>
					showProjectElements(&Handler, side);
 8001b60:	2347      	movs	r3, #71	; 0x47
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	003b      	movs	r3, r7
 8001b68:	0011      	movs	r1, r2
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 f888 	bl	8001c80 <showProjectElements>
 8001b70:	e02c      	b.n	8001bcc <showProjectSelectMenu+0xec>
					if(projectSelect % 2)
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <showProjectSelectMenu+0x10c>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <showProjectSelectMenu+0xb8>
						display--;
 8001b82:	2146      	movs	r1, #70	; 0x46
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
						side = 5;
 8001b8e:	2347      	movs	r3, #71	; 0x47
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2205      	movs	r2, #5
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e009      	b.n	8001bac <showProjectSelectMenu+0xcc>
						display++;
 8001b98:	2146      	movs	r1, #70	; 0x46
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	3201      	adds	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
						side = 68;
 8001ba4:	2347      	movs	r3, #71	; 0x47
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2244      	movs	r2, #68	; 0x44
 8001baa:	701a      	strb	r2, [r3, #0]
					Project Handler = getProjectStructByID(display);
 8001bac:	003a      	movs	r2, r7
 8001bae:	2346      	movs	r3, #70	; 0x46
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	0010      	movs	r0, r2
 8001bb8:	f000 fb7c 	bl	80022b4 <getProjectStructByID>
					showProjectElements(&Handler, side);
 8001bbc:	2347      	movs	r3, #71	; 0x47
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	003b      	movs	r3, r7
 8001bc4:	0011      	movs	r1, r2
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 f85a 	bl	8001c80 <showProjectElements>
				step++;
 8001bcc:	2145      	movs	r1, #69	; 0x45
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	781a      	ldrb	r2, [r3, #0]
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	3201      	adds	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
			while(step < 2)
 8001bd8:	2345      	movs	r3, #69	; 0x45
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d9a0      	bls.n	8001b24 <showProjectSelectMenu+0x44>
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b012      	add	sp, #72	; 0x48
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20000607 	.word	0x20000607

08001bf0 <newTaskElement>:

void newTaskElement(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
	bool color = 0;
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	if((projectSelect + 3) % 2)
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <newTaskElement+0x80>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3303      	adds	r3, #3
 8001c04:	001a      	movs	r2, r3
 8001c06:	2301      	movs	r3, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d00b      	beq.n	8001c24 <newTaskElement+0x34>
	{
		SSD1306_DrawFilledRectangle(5, 25, 56, 47, 1);
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	232f      	movs	r3, #47	; 0x2f
 8001c12:	2238      	movs	r2, #56	; 0x38
 8001c14:	2119      	movs	r1, #25
 8001c16:	2005      	movs	r0, #5
 8001c18:	f7ff fd8e 	bl	8001738 <SSD1306_DrawFilledRectangle>
		color = 0;
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e00a      	b.n	8001c3a <newTaskElement+0x4a>
	}
	else
	{
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
 8001c24:	2301      	movs	r3, #1
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	232f      	movs	r3, #47	; 0x2f
 8001c2a:	2238      	movs	r2, #56	; 0x38
 8001c2c:	2119      	movs	r1, #25
 8001c2e:	2005      	movs	r0, #5
 8001c30:	f7ff fceb 	bl	800160a <SSD1306_DrawRectangle>
		color = 1;
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
	}

	SSD1306_GotoXY(18, 33);
 8001c3a:	2121      	movs	r1, #33	; 0x21
 8001c3c:	2012      	movs	r0, #18
 8001c3e:	f7ff fa95 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts("Nowe", &Font_7x10, color);
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	490b      	ldr	r1, [pc, #44]	; (8001c74 <newTaskElement+0x84>)
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <newTaskElement+0x88>)
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f7ff fb28 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(9, 46);
 8001c50:	212e      	movs	r1, #46	; 0x2e
 8001c52:	2009      	movs	r0, #9
 8001c54:	f7ff fa8a 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts("zadanie", &Font_7x10, color);
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781a      	ldrb	r2, [r3, #0]
 8001c5c:	4905      	ldr	r1, [pc, #20]	; (8001c74 <newTaskElement+0x84>)
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <newTaskElement+0x8c>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fb1d 	bl	80012a0 <SSD1306_Puts>
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000607 	.word	0x20000607
 8001c74:	20000114 	.word	0x20000114
 8001c78:	080070c8 	.word	0x080070c8
 8001c7c:	080070d0 	.word	0x080070d0

08001c80 <showProjectElements>:

void showProjectElements(Project * project, uint8_t margin)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	000a      	movs	r2, r1
 8001c8a:	1cfb      	adds	r3, r7, #3
 8001c8c:	701a      	strb	r2, [r3, #0]
	bool color = 0;
 8001c8e:	240f      	movs	r4, #15
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
	if(margin == 5)
 8001c96:	1cfb      	adds	r3, r7, #3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d124      	bne.n	8001ce8 <showProjectElements+0x68>
	{
		if((projectSelect + 3) % 2)
 8001c9e:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <showProjectElements+0x120>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	d00d      	beq.n	8001cca <showProjectElements+0x4a>
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001cae:	1cfb      	adds	r3, r7, #3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b298      	uxth	r0, r3
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	232f      	movs	r3, #47	; 0x2f
 8001cba:	2238      	movs	r2, #56	; 0x38
 8001cbc:	2119      	movs	r1, #25
 8001cbe:	f7ff fd3b 	bl	8001738 <SSD1306_DrawFilledRectangle>
			color = 0;
 8001cc2:	193b      	adds	r3, r7, r4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	e033      	b.n	8001d32 <showProjectElements+0xb2>
		}
		else
		{
			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001cca:	1cfb      	adds	r3, r7, #3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b298      	uxth	r0, r3
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	232f      	movs	r3, #47	; 0x2f
 8001cd6:	2238      	movs	r2, #56	; 0x38
 8001cd8:	2119      	movs	r1, #25
 8001cda:	f7ff fc96 	bl	800160a <SSD1306_DrawRectangle>
			color = 1;
 8001cde:	230f      	movs	r3, #15
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e024      	b.n	8001d32 <showProjectElements+0xb2>
		}
	}
	else
	{
		if((projectSelect + 3) % 2)
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <showProjectElements+0x120>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3303      	adds	r3, #3
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <showProjectElements+0x96>
		{

			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001cf8:	1cfb      	adds	r3, r7, #3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b298      	uxth	r0, r3
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	232f      	movs	r3, #47	; 0x2f
 8001d04:	2238      	movs	r2, #56	; 0x38
 8001d06:	2119      	movs	r1, #25
 8001d08:	f7ff fc7f 	bl	800160a <SSD1306_DrawRectangle>
			color = 1;
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e00d      	b.n	8001d32 <showProjectElements+0xb2>
		}
		else
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001d16:	1cfb      	adds	r3, r7, #3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	b298      	uxth	r0, r3
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	232f      	movs	r3, #47	; 0x2f
 8001d22:	2238      	movs	r2, #56	; 0x38
 8001d24:	2119      	movs	r1, #25
 8001d26:	f7ff fd07 	bl	8001738 <SSD1306_DrawFilledRectangle>
			color = 0;
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
		}
	}
	margin = margin + 4;
 8001d32:	1cfb      	adds	r3, r7, #3
 8001d34:	1cfa      	adds	r2, r7, #3
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	3204      	adds	r2, #4
 8001d3a:	701a      	strb	r2, [r3, #0]
	SSD1306_GotoXY(margin, 29);
 8001d3c:	1cfb      	adds	r3, r7, #3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	211d      	movs	r1, #29
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fa11 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(project->shortName, &Font_7x10, color);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6858      	ldr	r0, [r3, #4]
 8001d4e:	240f      	movs	r4, #15
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <showProjectElements+0x124>)
 8001d56:	0019      	movs	r1, r3
 8001d58:	f7ff faa2 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 40);
 8001d5c:	1cfb      	adds	r3, r7, #3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2128      	movs	r1, #40	; 0x28
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff fa01 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(project->desc1, &Font_7x10, color);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6898      	ldr	r0, [r3, #8]
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <showProjectElements+0x124>)
 8001d74:	0019      	movs	r1, r3
 8001d76:	f7ff fa93 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 51);
 8001d7a:	1cfb      	adds	r3, r7, #3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2133      	movs	r1, #51	; 0x33
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff f9f2 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(project->desc2, &Font_7x10, color);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68d8      	ldr	r0, [r3, #12]
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <showProjectElements+0x124>)
 8001d92:	0019      	movs	r1, r3
 8001d94:	f7ff fa84 	bl	80012a0 <SSD1306_Puts>
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	b005      	add	sp, #20
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	20000607 	.word	0x20000607
 8001da4:	20000114 	.word	0x20000114

08001da8 <showProjectDetails>:

// szczegoly projektu - 11
// -------------------------------------------------------------------------------------

void showProjectDetails(Project * project)
{
 8001da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

	char width[10];
	sprintf(width, "%i.%imm", project->width / 10, project->width % 10);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8b1b      	ldrh	r3, [r3, #24]
 8001db4:	210a      	movs	r1, #10
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7fe f9b8 	bl	800012c <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	001c      	movs	r4, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8b1b      	ldrh	r3, [r3, #24]
 8001dc6:	210a      	movs	r1, #10
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7fe fa35 	bl	8000238 <__aeabi_uidivmod>
 8001dce:	000b      	movs	r3, r1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4938      	ldr	r1, [pc, #224]	; (8001eb4 <showProjectDetails+0x10c>)
 8001dd4:	250c      	movs	r5, #12
 8001dd6:	1978      	adds	r0, r7, r5
 8001dd8:	0022      	movs	r2, r4
 8001dda:	f004 fce7 	bl	80067ac <siprintf>
	showLabelBar(project->fullName);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f9ea 	bl	80021bc <showLabelBar>
	SSD1306_GotoXY(0, 20);
 8001de8:	2114      	movs	r1, #20
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff f9be 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 8001df0:	4931      	ldr	r1, [pc, #196]	; (8001eb8 <showProjectDetails+0x110>)
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <showProjectDetails+0x114>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff fa52 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8001dfc:	2114      	movs	r1, #20
 8001dfe:	2046      	movs	r0, #70	; 0x46
 8001e00:	f7ff f9b4 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 8001e04:	492c      	ldr	r1, [pc, #176]	; (8001eb8 <showProjectDetails+0x110>)
 8001e06:	197b      	adds	r3, r7, r5
 8001e08:	2201      	movs	r2, #1
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff fa48 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 8001e10:	211f      	movs	r1, #31
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff f9aa 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(TASK_NO_LABEL, &Font_7x10, 1);
 8001e18:	4927      	ldr	r1, [pc, #156]	; (8001eb8 <showProjectDetails+0x110>)
 8001e1a:	4b29      	ldr	r3, [pc, #164]	; (8001ec0 <showProjectDetails+0x118>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fa3e 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(70, 31);
 8001e24:	211f      	movs	r1, #31
 8001e26:	2046      	movs	r0, #70	; 0x46
 8001e28:	f7ff f9a0 	bl	800116c <SSD1306_GotoXY>
	uint8_t count = countArray(project);
 8001e2c:	2617      	movs	r6, #23
 8001e2e:	19bc      	adds	r4, r7, r6
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 fa0d 	bl	8002252 <countArray>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	7023      	strb	r3, [r4, #0]
	sprintf(width, "%i", count);
 8001e3c:	19bb      	adds	r3, r7, r6
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4920      	ldr	r1, [pc, #128]	; (8001ec4 <showProjectDetails+0x11c>)
 8001e42:	197b      	adds	r3, r7, r5
 8001e44:	0018      	movs	r0, r3
 8001e46:	f004 fcb1 	bl	80067ac <siprintf>
	SSD1306_Puts(width, &Font_7x10, 1);
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <showProjectDetails+0x110>)
 8001e4c:	197b      	adds	r3, r7, r5
 8001e4e:	2201      	movs	r2, #1
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fa25 	bl	80012a0 <SSD1306_Puts>

	char * desc1;
	char * desc2;
	if(!project->desc1F)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <showProjectDetails+0xbe>
	{
		desc1 = project->desc1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	e002      	b.n	8001e6c <showProjectDetails+0xc4>
	}
	else
	{
		desc1 = project->desc1F;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	61fb      	str	r3, [r7, #28]
	}
	if(!project->desc2F)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <showProjectDetails+0xd4>
	{
		desc2 = project->desc2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	e002      	b.n	8001e82 <showProjectDetails+0xda>
	}
	else
	{
		desc2 = project->desc2F;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	61bb      	str	r3, [r7, #24]
	}
	SSD1306_GotoXY(0, 42);
 8001e82:	212a      	movs	r1, #42	; 0x2a
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff f971 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(desc1, &Font_7x10, 1);
 8001e8a:	490b      	ldr	r1, [pc, #44]	; (8001eb8 <showProjectDetails+0x110>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fa05 	bl	80012a0 <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 8001e96:	2135      	movs	r1, #53	; 0x35
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff f967 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(desc2, &Font_7x10, 1);
 8001e9e:	4906      	ldr	r1, [pc, #24]	; (8001eb8 <showProjectDetails+0x110>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff f9fb 	bl	80012a0 <SSD1306_Puts>
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b009      	add	sp, #36	; 0x24
 8001eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	080070d8 	.word	0x080070d8
 8001eb8:	20000114 	.word	0x20000114
 8001ebc:	080070e0 	.word	0x080070e0
 8001ec0:	080070ec 	.word	0x080070ec
 8001ec4:	080070f8 	.word	0x080070f8

08001ec8 <showWidthScreen>:

// szerokosc karkasu - 2
// -------------------------------------------------------------------------------------
void showWidthScreen(uint8_t runMode, bool direction)
{
 8001ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	0002      	movs	r2, r0
 8001ed0:	1dfb      	adds	r3, r7, #7
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	1c0a      	adds	r2, r1, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
	char value[8];
	if(!runMode)
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10a      	bne.n	8001ef8 <showWidthScreen+0x30>
	{
		SSD1306_DrawBitmap(0, 0, width, 128, 64, 1);
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <showWidthScreen+0xa0>)
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2340      	movs	r3, #64	; 0x40
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7fe ff1b 	bl	8000d2c <SSD1306_DrawBitmap>
 8001ef6:	e00a      	b.n	8001f0e <showWidthScreen+0x46>
	}
	else if(runMode == 2)
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d106      	bne.n	8001f0e <showWidthScreen+0x46>
	{
		changeValue(direction, 0, 9);
 8001f00:	1dbb      	adds	r3, r7, #6
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2209      	movs	r2, #9
 8001f06:	2100      	movs	r1, #0
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f885 	bl	8002018 <changeValue>
	}
		setMarkerPosition(1);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 f832 	bl	8001f78 <setMarkerPosition>
		sprintf(value, "%i%i%i.%imm", valueToken[3], valueToken[2], valueToken[1], valueToken[0]);
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <showWidthScreen+0xa4>)
 8001f16:	78db      	ldrb	r3, [r3, #3]
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	001c      	movs	r4, r3
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <showWidthScreen+0xa4>)
 8001f1e:	789b      	ldrb	r3, [r3, #2]
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	001d      	movs	r5, r3
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <showWidthScreen+0xa4>)
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <showWidthScreen+0xa4>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	490f      	ldr	r1, [pc, #60]	; (8001f70 <showWidthScreen+0xa8>)
 8001f34:	2608      	movs	r6, #8
 8001f36:	19b8      	adds	r0, r7, r6
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	9200      	str	r2, [sp, #0]
 8001f3c:	002b      	movs	r3, r5
 8001f3e:	0022      	movs	r2, r4
 8001f40:	f004 fc34 	bl	80067ac <siprintf>
		clearValue();
 8001f44:	f000 f92b 	bl	800219e <clearValue>
		SSD1306_GotoXY(25, 20);
 8001f48:	2114      	movs	r1, #20
 8001f4a:	2019      	movs	r0, #25
 8001f4c:	f7ff f90e 	bl	800116c <SSD1306_GotoXY>
		SSD1306_Puts(value, &Font_11x18, 1);
 8001f50:	4908      	ldr	r1, [pc, #32]	; (8001f74 <showWidthScreen+0xac>)
 8001f52:	19bb      	adds	r3, r7, r6
 8001f54:	2201      	movs	r2, #1
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7ff f9a2 	bl	80012a0 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001f5c:	f7ff f84a 	bl	8000ff4 <SSD1306_UpdateScreen>
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b005      	add	sp, #20
 8001f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f68:	0800758c 	.word	0x0800758c
 8001f6c:	2000060c 	.word	0x2000060c
 8001f70:	080070fc 	.word	0x080070fc
 8001f74:	2000011c 	.word	0x2000011c

08001f78 <setMarkerPosition>:

// ustawianie wartosci
// -------------------------------------------------------------------------------------
void setMarkerPosition(uint8_t divider)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	0002      	movs	r2, r0
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	701a      	strb	r2, [r3, #0]
	clearMarker();
 8001f84:	f000 f8fd 	bl	8002182 <clearMarker>
	uint8_t correction = 0;
 8001f88:	210f      	movs	r1, #15
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= divider)
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <setMarkerPosition+0x6c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	001a      	movs	r2, r3
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	db02      	blt.n	8001fa6 <setMarkerPosition+0x2e>
	{
		correction = 11;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	220b      	movs	r2, #11
 8001fa4:	701a      	strb	r2, [r3, #0]
	}
	char margin = (73 - ((markerPosition * 11) + correction));
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <setMarkerPosition+0x6c>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	1c1a      	adds	r2, r3, #0
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	18d2      	adds	r2, r2, r3
 8001fb4:	1892      	adds	r2, r2, r2
 8001fb6:	18d3      	adds	r3, r2, r3
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	230f      	movs	r3, #15
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	200e      	movs	r0, #14
 8001fc6:	183b      	adds	r3, r7, r0
 8001fc8:	2149      	movs	r1, #73	; 0x49
 8001fca:	1a8a      	subs	r2, r1, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
	drawMarker(margin, 39);
 8001fce:	183b      	adds	r3, r7, r0
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2127      	movs	r1, #39	; 0x27
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 f889 	bl	80020ec <drawMarker>
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	2000060a 	.word	0x2000060a

08001fe8 <moveMarker>:

void moveMarker(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	markerPosition++;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <moveMarker+0x2c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	b25a      	sxtb	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <moveMarker+0x2c>)
 8001ffc:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= 4) {markerPosition = 0;}
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <moveMarker+0x2c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b25b      	sxtb	r3, r3
 8002004:	2b03      	cmp	r3, #3
 8002006:	dd02      	ble.n	800200e <moveMarker+0x26>
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <moveMarker+0x2c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000060a 	.word	0x2000060a

08002018 <changeValue>:

void changeValue(bool set, uint16_t min, uint16_t max)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	0004      	movs	r4, r0
 8002020:	0008      	movs	r0, r1
 8002022:	0011      	movs	r1, r2
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	1c22      	adds	r2, r4, #0
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	1c02      	adds	r2, r0, #0
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	1cbb      	adds	r3, r7, #2
 8002032:	1c0a      	adds	r2, r1, #0
 8002034:	801a      	strh	r2, [r3, #0]
	uint8_t minV = 0;
 8002036:	230f      	movs	r3, #15
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
	uint8_t maxV = 9;
 800203e:	230e      	movs	r3, #14
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2209      	movs	r2, #9
 8002044:	701a      	strb	r2, [r3, #0]

	if(set)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <changeValue+0x50>
	{
		valueToken[markerPosition]++;
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <changeValue+0xcc>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b25b      	sxtb	r3, r3
 8002054:	4a24      	ldr	r2, [pc, #144]	; (80020e8 <changeValue+0xd0>)
 8002056:	5cd2      	ldrb	r2, [r2, r3]
 8002058:	b252      	sxtb	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	3201      	adds	r2, #1
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	b251      	sxtb	r1, r2
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <changeValue+0xd0>)
 8002064:	54d1      	strb	r1, [r2, r3]
 8002066:	e00b      	b.n	8002080 <changeValue+0x68>
	}
	else
	{
		valueToken[markerPosition]--;
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <changeValue+0xcc>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b25b      	sxtb	r3, r3
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <changeValue+0xd0>)
 8002070:	5cd2      	ldrb	r2, [r2, r3]
 8002072:	b252      	sxtb	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	3a01      	subs	r2, #1
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	b251      	sxtb	r1, r2
 800207c:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <changeValue+0xd0>)
 800207e:	54d1      	strb	r1, [r2, r3]
	}
	if(valueToken[markerPosition] > maxV) {valueToken[markerPosition] = minV;}
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <changeValue+0xcc>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b25b      	sxtb	r3, r3
 8002086:	001a      	movs	r2, r3
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <changeValue+0xd0>)
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	b25b      	sxtb	r3, r3
 800208e:	001a      	movs	r2, r3
 8002090:	230e      	movs	r3, #14
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	dd09      	ble.n	80020ae <changeValue+0x96>
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <changeValue+0xcc>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	001a      	movs	r2, r3
 80020a2:	230f      	movs	r3, #15
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2100      	movs	r1, #0
 80020a8:	5659      	ldrsb	r1, [r3, r1]
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <changeValue+0xd0>)
 80020ac:	5499      	strb	r1, [r3, r2]
	if(valueToken[markerPosition] < minV) {valueToken[markerPosition] = maxV;}
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <changeValue+0xcc>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b25b      	sxtb	r3, r3
 80020b4:	001a      	movs	r2, r3
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <changeValue+0xd0>)
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	001a      	movs	r2, r3
 80020be:	230f      	movs	r3, #15
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	da09      	bge.n	80020dc <changeValue+0xc4>
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <changeValue+0xcc>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	001a      	movs	r2, r3
 80020d0:	230e      	movs	r3, #14
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2100      	movs	r1, #0
 80020d6:	5659      	ldrsb	r1, [r3, r1]
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <changeValue+0xd0>)
 80020da:	5499      	strb	r1, [r3, r2]
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b005      	add	sp, #20
 80020e2:	bd90      	pop	{r4, r7, pc}
 80020e4:	2000060a 	.word	0x2000060a
 80020e8:	2000060c 	.word	0x2000060c

080020ec <drawMarker>:

void drawMarker(uint8_t width, uint8_t height)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	0002      	movs	r2, r0
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	1c0a      	adds	r2, r1, #0
 80020fc:	701a      	strb	r2, [r3, #0]
	for(uint8_t h = 0; h < 5; h++)
 80020fe:	230f      	movs	r3, #15
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
 8002106:	e032      	b.n	800216e <drawMarker+0x82>
	{
		uint8_t w = 0;
 8002108:	230e      	movs	r3, #14
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002110:	e01f      	b.n	8002152 <drawMarker+0x66>
		{
			SSD1306_DrawPixel(((width - h) + w), height + h, 1);
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b29a      	uxth	r2, r3
 8002118:	210f      	movs	r1, #15
 800211a:	187b      	adds	r3, r7, r1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	240e      	movs	r4, #14
 8002126:	193b      	adds	r3, r7, r4
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	18d3      	adds	r3, r2, r3
 800212e:	b298      	uxth	r0, r3
 8002130:	1dbb      	adds	r3, r7, #6
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	187b      	adds	r3, r7, r1
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	18d3      	adds	r3, r2, r3
 800213e:	b29b      	uxth	r3, r3
 8002140:	2201      	movs	r2, #1
 8002142:	0019      	movs	r1, r3
 8002144:	f7fe ffa4 	bl	8001090 <SSD1306_DrawPixel>
			w++;
 8002148:	193b      	adds	r3, r7, r4
 800214a:	781a      	ldrb	r2, [r3, #0]
 800214c:	193b      	adds	r3, r7, r4
 800214e:	3201      	adds	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002152:	230e      	movs	r3, #14
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	210f      	movs	r1, #15
 800215a:	187b      	adds	r3, r7, r1
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	429a      	cmp	r2, r3
 8002162:	ddd6      	ble.n	8002112 <drawMarker+0x26>
	for(uint8_t h = 0; h < 5; h++)
 8002164:	187b      	adds	r3, r7, r1
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	187b      	adds	r3, r7, r1
 800216a:	3201      	adds	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	230f      	movs	r3, #15
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d9c7      	bls.n	8002108 <drawMarker+0x1c>
		}
	}
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b005      	add	sp, #20
 8002180:	bd90      	pop	{r4, r7, pc}

08002182 <clearMarker>:
void clearMarker(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 39, 80, 5, 0);
 8002188:	2300      	movs	r3, #0
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2305      	movs	r3, #5
 800218e:	2250      	movs	r2, #80	; 0x50
 8002190:	2127      	movs	r1, #39	; 0x27
 8002192:	2014      	movs	r0, #20
 8002194:	f7ff fad0 	bl	8001738 <SSD1306_DrawFilledRectangle>
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <clearValue>:
void clearValue(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 20, 100, 18, 0);
 80021a4:	2300      	movs	r3, #0
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2312      	movs	r3, #18
 80021aa:	2264      	movs	r2, #100	; 0x64
 80021ac:	2114      	movs	r1, #20
 80021ae:	2014      	movs	r0, #20
 80021b0:	f7ff fac2 	bl	8001738 <SSD1306_DrawFilledRectangle>
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <showLabelBar>:

// uniwersalne
// -------------------------------------------------------------------------------------
void showLabelBar(char* label)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	6078      	str	r0, [r7, #4]
	SSD1306_DrawFilledRectangle(0, 0, 128, 16, 1);
 80021c4:	2301      	movs	r3, #1
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2310      	movs	r3, #16
 80021ca:	2280      	movs	r2, #128	; 0x80
 80021cc:	2100      	movs	r1, #0
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff fab2 	bl	8001738 <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY(4, 4);
 80021d4:	2104      	movs	r1, #4
 80021d6:	2004      	movs	r0, #4
 80021d8:	f7fe ffc8 	bl	800116c <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, 0);
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <showLabelBar+0x34>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff f85c 	bl	80012a0 <SSD1306_Puts>
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000114 	.word	0x20000114

080021f4 <clearContent>:


void clearContent(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 18, 128, 46, 0);
 80021fa:	2300      	movs	r3, #0
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	232e      	movs	r3, #46	; 0x2e
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	2112      	movs	r1, #18
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff fa97 	bl	8001738 <SSD1306_DrawFilledRectangle>
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <paginationBar>:

void paginationBar(uint8_t pageBarWidth, uint8_t pageNo)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	0002      	movs	r2, r0
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	1dbb      	adds	r3, r7, #6
 800221e:	1c0a      	adds	r2, r1, #0
 8002220:	701a      	strb	r2, [r3, #0]
	uint8_t pageBarMargin = pageBarWidth * pageNo;
 8002222:	200f      	movs	r0, #15
 8002224:	183b      	adds	r3, r7, r0
 8002226:	1dfa      	adds	r2, r7, #7
 8002228:	1db9      	adds	r1, r7, #6
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	7809      	ldrb	r1, [r1, #0]
 800222e:	434a      	muls	r2, r1
 8002230:	701a      	strb	r2, [r3, #0]
	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 8002232:	183b      	adds	r3, r7, r0
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b298      	uxth	r0, r3
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b29a      	uxth	r2, r3
 800223e:	2301      	movs	r3, #1
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2303      	movs	r3, #3
 8002244:	2112      	movs	r1, #18
 8002246:	f7ff fa77 	bl	8001738 <SSD1306_DrawFilledRectangle>
}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b004      	add	sp, #16
 8002250:	bd80      	pop	{r7, pc}

08002252 <countArray>:

uint8_t countArray(Project * project)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 800225a:	230f      	movs	r3, #15
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 8002262:	230e      	movs	r3, #14
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e016      	b.n	800229a <countArray+0x48>
	{
		if(project->coil[i][0] > 0)
 800226c:	230e      	movs	r3, #14
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	3306      	adds	r3, #6
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	18d3      	adds	r3, r2, r3
 800227a:	3302      	adds	r3, #2
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <countArray+0x3c>
		{
			count++;
 8002282:	210f      	movs	r1, #15
 8002284:	187b      	adds	r3, r7, r1
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	187b      	adds	r3, r7, r1
 800228a:	3201      	adds	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 800228e:	210e      	movs	r1, #14
 8002290:	187b      	adds	r3, r7, r1
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	187b      	adds	r3, r7, r1
 8002296:	3201      	adds	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	230e      	movs	r3, #14
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d9e3      	bls.n	800226c <countArray+0x1a>
		}
	}
	return count;
 80022a4:	230f      	movs	r3, #15
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <getProjectStructByID>:
	0,
	{{}}
};

Project getProjectStructByID(uint8_t id)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	000a      	movs	r2, r1
 80022be:	1cfb      	adds	r3, r7, #3
 80022c0:	701a      	strb	r2, [r3, #0]
	switch(id)
 80022c2:	1cfb      	adds	r3, r7, #3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d017      	beq.n	80022fa <getProjectStructByID+0x46>
 80022ca:	dc1f      	bgt.n	800230c <getProjectStructByID+0x58>
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d002      	beq.n	80022d6 <getProjectStructByID+0x22>
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d009      	beq.n	80022e8 <getProjectStructByID+0x34>
 80022d4:	e01a      	b.n	800230c <getProjectStructByID+0x58>
	{
		case 1:
			return PeaveyC30_MAIN;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <getProjectStructByID+0x70>)
 80022da:	0010      	movs	r0, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	2344      	movs	r3, #68	; 0x44
 80022e0:	001a      	movs	r2, r3
 80022e2:	f004 fa51 	bl	8006788 <memcpy>
 80022e6:	e019      	b.n	800231c <getProjectStructByID+0x68>
		break;
		case 2:
			return PeaveyC30_SPK;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <getProjectStructByID+0x74>)
 80022ec:	0010      	movs	r0, r2
 80022ee:	0019      	movs	r1, r3
 80022f0:	2344      	movs	r3, #68	; 0x44
 80022f2:	001a      	movs	r2, r3
 80022f4:	f004 fa48 	bl	8006788 <memcpy>
 80022f8:	e010      	b.n	800231c <getProjectStructByID+0x68>
		break;
		case 3:
			return Test_Trafo;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <getProjectStructByID+0x78>)
 80022fe:	0010      	movs	r0, r2
 8002300:	0019      	movs	r1, r3
 8002302:	2344      	movs	r3, #68	; 0x44
 8002304:	001a      	movs	r2, r3
 8002306:	f004 fa3f 	bl	8006788 <memcpy>
 800230a:	e007      	b.n	800231c <getProjectStructByID+0x68>
		break;
	}
	return Empty;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <getProjectStructByID+0x7c>)
 8002310:	0010      	movs	r0, r2
 8002312:	0019      	movs	r1, r3
 8002314:	2344      	movs	r3, #68	; 0x44
 8002316:	001a      	movs	r2, r3
 8002318:	f004 fa36 	bl	8006788 <memcpy>
}
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000004 	.word	0x20000004
 8002328:	20000048 	.word	0x20000048
 800232c:	2000008c 	.word	0x2000008c
 8002330:	200000d0 	.word	0x200000d0

08002334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_MspInit+0x24>)
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_MspInit+0x24>)
 800233e:	2101      	movs	r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <HAL_MspInit+0x24>)
 8002346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_MspInit+0x24>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0549      	lsls	r1, r1, #21
 800234e:	430a      	orrs	r2, r1
 8002350:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002380:	f000 face 	bl	8002920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 800238e:	2010      	movs	r0, #16
 8002390:	f000 fe08 	bl	8002fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <TIM2_IRQHandler+0x14>)
 80023a2:	0018      	movs	r0, r3
 80023a4:	f002 fc4f 	bl	8004c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000614 	.word	0x20000614

080023b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <TIM6_DAC_IRQHandler+0x14>)
 80023ba:	0018      	movs	r0, r3
 80023bc:	f002 fc43 	bl	8004c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	20000654 	.word	0x20000654

080023cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <TIM7_IRQHandler+0x14>)
 80023d2:	0018      	movs	r0, r3
 80023d4:	f002 fc37 	bl	8004c46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000694 	.word	0x20000694

080023e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <USART2_IRQHandler+0x14>)
 80023ea:	0018      	movs	r0, r3
 80023ec:	f002 ff88 	bl	8005300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	200006d4 	.word	0x200006d4

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	18d3      	adds	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f004 f982 	bl	8006734 <__errno>
 8002430:	0003      	movs	r3, r0
 8002432:	220c      	movs	r2, #12
 8002434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002436:	2301      	movs	r3, #1
 8002438:	425b      	negs	r3, r3
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	18d2      	adds	r2, r2, r3
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <_sbrk+0x64>)
 800244c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b006      	add	sp, #24
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20005000 	.word	0x20005000
 800245c:	00000400 	.word	0x00000400
 8002460:	20000610 	.word	0x20000610
 8002464:	20000770 	.word	0x20000770

08002468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b08d      	sub	sp, #52	; 0x34
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800247a:	240c      	movs	r4, #12
 800247c:	193b      	adds	r3, r7, r4
 800247e:	0018      	movs	r0, r3
 8002480:	2324      	movs	r3, #36	; 0x24
 8002482:	001a      	movs	r2, r3
 8002484:	2100      	movs	r1, #0
 8002486:	f004 f988 	bl	800679a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	0018      	movs	r0, r3
 800248e:	2308      	movs	r3, #8
 8002490:	001a      	movs	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	f004 f981 	bl	800679a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002498:	4b26      	ldr	r3, [pc, #152]	; (8002534 <MX_TIM2_Init+0xc0>)
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	05d2      	lsls	r2, r2, #23
 800249e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <MX_TIM2_Init+0xc0>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <MX_TIM2_Init+0xc0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <MX_TIM2_Init+0xc0>)
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <MX_TIM2_Init+0xc4>)
 80024b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <MX_TIM2_Init+0xc0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <MX_TIM2_Init+0xc0>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024be:	0021      	movs	r1, r4
 80024c0:	187b      	adds	r3, r7, r1
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	2201      	movs	r2, #1
 80024d0:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d2:	187b      	adds	r3, r7, r1
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	220f      	movs	r2, #15
 80024dc:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2201      	movs	r2, #1
 80024e8:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	220f      	movs	r2, #15
 80024f4:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024f6:	187a      	adds	r2, r7, r1
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_TIM2_Init+0xc0>)
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f002 fa6d 	bl	80049dc <HAL_TIM_Encoder_Init>
 8002502:	1e03      	subs	r3, r0, #0
 8002504:	d001      	beq.n	800250a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002506:	f7fe fbe9 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002516:	1d3a      	adds	r2, r7, #4
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_TIM2_Init+0xc0>)
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f002 fd2d 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002522:	1e03      	subs	r3, r0, #0
 8002524:	d001      	beq.n	800252a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002526:	f7fe fbd9 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b00d      	add	sp, #52	; 0x34
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	20000614 	.word	0x20000614
 8002538:	0000ffff 	.word	0x0000ffff

0800253c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002542:	003b      	movs	r3, r7
 8002544:	0018      	movs	r0, r3
 8002546:	2308      	movs	r3, #8
 8002548:	001a      	movs	r2, r3
 800254a:	2100      	movs	r1, #0
 800254c:	f004 f925 	bl	800679a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <MX_TIM6_Init+0x6c>)
 8002552:	4a16      	ldr	r2, [pc, #88]	; (80025ac <MX_TIM6_Init+0x70>)
 8002554:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_TIM6_Init+0x6c>)
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <MX_TIM6_Init+0x74>)
 800255a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_TIM6_Init+0x6c>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_TIM6_Init+0x6c>)
 8002564:	2263      	movs	r2, #99	; 0x63
 8002566:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_TIM6_Init+0x6c>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_TIM6_Init+0x6c>)
 8002570:	0018      	movs	r0, r3
 8002572:	f002 f97b 	bl	800486c <HAL_TIM_Base_Init>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800257a:	f7fe fbaf 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257e:	003b      	movs	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	003b      	movs	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800258a:	003a      	movs	r2, r7
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_TIM6_Init+0x6c>)
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f002 fcf3 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	1e03      	subs	r3, r0, #0
 8002598:	d001      	beq.n	800259e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800259a:	f7fe fb9f 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000654 	.word	0x20000654
 80025ac:	40001000 	.word	0x40001000
 80025b0:	00001f3f 	.word	0x00001f3f

080025b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ba:	003b      	movs	r3, r7
 80025bc:	0018      	movs	r0, r3
 80025be:	2308      	movs	r3, #8
 80025c0:	001a      	movs	r2, r3
 80025c2:	2100      	movs	r1, #0
 80025c4:	f004 f8e9 	bl	800679a <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_TIM7_Init+0x6c>)
 80025ca:	4a16      	ldr	r2, [pc, #88]	; (8002624 <MX_TIM7_Init+0x70>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <MX_TIM7_Init+0x6c>)
 80025d0:	4a15      	ldr	r2, [pc, #84]	; (8002628 <MX_TIM7_Init+0x74>)
 80025d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <MX_TIM7_Init+0x6c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_TIM7_Init+0x6c>)
 80025dc:	2263      	movs	r2, #99	; 0x63
 80025de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <MX_TIM7_Init+0x6c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_TIM7_Init+0x6c>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f002 f93f 	bl	800486c <HAL_TIM_Base_Init>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80025f2:	f7fe fb73 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	003b      	movs	r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fc:	003b      	movs	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002602:	003a      	movs	r2, r7
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MX_TIM7_Init+0x6c>)
 8002606:	0011      	movs	r1, r2
 8002608:	0018      	movs	r0, r3
 800260a:	f002 fcb7 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002612:	f7fe fb63 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000694 	.word	0x20000694
 8002624:	40001400 	.word	0x40001400
 8002628:	00001f3f 	.word	0x00001f3f

0800262c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	240c      	movs	r4, #12
 8002636:	193b      	adds	r3, r7, r4
 8002638:	0018      	movs	r0, r3
 800263a:	2314      	movs	r3, #20
 800263c:	001a      	movs	r2, r3
 800263e:	2100      	movs	r1, #0
 8002640:	f004 f8ab 	bl	800679a <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	05db      	lsls	r3, r3, #23
 800264c:	429a      	cmp	r2, r3
 800264e:	d130      	bne.n	80026b2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_TIM_Encoder_MspInit+0x90>)
 8002652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_TIM_Encoder_MspInit+0x90>)
 8002656:	2101      	movs	r1, #1
 8002658:	430a      	orrs	r2, r1
 800265a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <HAL_TIM_Encoder_MspInit+0x90>)
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_TIM_Encoder_MspInit+0x90>)
 8002662:	2101      	movs	r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <HAL_TIM_Encoder_MspInit+0x90>)
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	2201      	movs	r2, #1
 800266e:	4013      	ands	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002674:	0021      	movs	r1, r4
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2203      	movs	r2, #3
 800267a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2202      	movs	r2, #2
 8002680:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2202      	movs	r2, #2
 8002692:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	187a      	adds	r2, r7, r1
 8002696:	23a0      	movs	r3, #160	; 0xa0
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f000 fae5 	bl	8002c6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 fa26 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026ac:	200f      	movs	r0, #15
 80026ae:	f000 fa38 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b009      	add	sp, #36	; 0x24
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <HAL_TIM_Base_MspInit+0x60>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_TIM_Base_MspInit+0x64>)
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_TIM_Base_MspInit+0x64>)
 80026d8:	2110      	movs	r1, #16
 80026da:	430a      	orrs	r2, r1
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	2011      	movs	r0, #17
 80026e4:	f000 fa08 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026e8:	2011      	movs	r0, #17
 80026ea:	f000 fa1a 	bl	8002b22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80026ee:	e012      	b.n	8002716 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_TIM_Base_MspInit+0x68>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10d      	bne.n	8002716 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_TIM_Base_MspInit+0x64>)
 80026fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_TIM_Base_MspInit+0x64>)
 8002700:	2120      	movs	r1, #32
 8002702:	430a      	orrs	r2, r1
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	2012      	movs	r0, #18
 800270c:	f000 f9f4 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002710:	2012      	movs	r0, #18
 8002712:	f000 fa06 	bl	8002b22 <HAL_NVIC_EnableIRQ>
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b002      	add	sp, #8
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	40001000 	.word	0x40001000
 8002724:	40021000 	.word	0x40021000
 8002728:	40001400 	.word	0x40001400

0800272c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <MX_USART2_UART_Init+0x5c>)
 8002734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002738:	22e1      	movs	r2, #225	; 0xe1
 800273a:	0252      	lsls	r2, r2, #9
 800273c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_USART2_UART_Init+0x58>)
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002752:	220c      	movs	r2, #12
 8002754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002758:	2200      	movs	r2, #0
 800275a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_USART2_UART_Init+0x58>)
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_USART2_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <MX_USART2_UART_Init+0x58>)
 8002770:	0018      	movs	r0, r3
 8002772:	f002 fc61 	bl	8005038 <HAL_UART_Init>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800277a:	f7fe faaf 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200006d4 	.word	0x200006d4
 8002788:	40004400 	.word	0x40004400

0800278c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	240c      	movs	r4, #12
 8002796:	193b      	adds	r3, r7, r4
 8002798:	0018      	movs	r0, r3
 800279a:	2314      	movs	r3, #20
 800279c:	001a      	movs	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	f003 fffb 	bl	800679a <memset>
  if(uartHandle->Instance==USART2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_UART_MspInit+0x90>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d131      	bne.n	8002812 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_UART_MspInit+0x94>)
 80027b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_UART_MspInit+0x94>)
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0289      	lsls	r1, r1, #10
 80027b8:	430a      	orrs	r2, r1
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_UART_MspInit+0x94>)
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_UART_MspInit+0x94>)
 80027c2:	2101      	movs	r1, #1
 80027c4:	430a      	orrs	r2, r1
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_UART_MspInit+0x94>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027d4:	0021      	movs	r1, r4
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	220c      	movs	r2, #12
 80027da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2202      	movs	r2, #2
 80027e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	187b      	adds	r3, r7, r1
 80027ea:	2203      	movs	r2, #3
 80027ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	2204      	movs	r2, #4
 80027f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	187a      	adds	r2, r7, r1
 80027f6:	23a0      	movs	r3, #160	; 0xa0
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	0011      	movs	r1, r2
 80027fc:	0018      	movs	r0, r3
 80027fe:	f000 fa35 	bl	8002c6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	201c      	movs	r0, #28
 8002808:	f000 f976 	bl	8002af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800280c:	201c      	movs	r0, #28
 800280e:	f000 f988 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b009      	add	sp, #36	; 0x24
 8002818:	bd90      	pop	{r4, r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40004400 	.word	0x40004400
 8002820:	40021000 	.word	0x40021000

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002824:	480d      	ldr	r0, [pc, #52]	; (800285c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002826:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <LoopForever+0x6>)
  ldr r1, =_edata
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <LoopForever+0xa>)
  ldr r2, =_sidata
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <LoopForever+0xe>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002840:	4c0b      	ldr	r4, [pc, #44]	; (8002870 <LoopForever+0x16>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800284e:	f7ff fe0b 	bl	8002468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f003 ff75 	bl	8006740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7fe f86b 	bl	8000930 <main>

0800285a <LoopForever>:

LoopForever:
    b LoopForever
 800285a:	e7fe      	b.n	800285a <LoopForever>
   ldr   r0, =_estack
 800285c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002868:	08008f08 	.word	0x08008f08
  ldr r2, =_sbss
 800286c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002870:	2000076c 	.word	0x2000076c

08002874 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC1_COMP_IRQHandler>
	...

08002878 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800287e:	1dfb      	adds	r3, r7, #7
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_Init+0x3c>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_Init+0x3c>)
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002890:	2000      	movs	r0, #0
 8002892:	f000 f811 	bl	80028b8 <HAL_InitTick>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d003      	beq.n	80028a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e001      	b.n	80028a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028a2:	f7ff fd47 	bl	8002334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	40022000 	.word	0x40022000

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_InitTick+0x5c>)
 80028c2:	681c      	ldr	r4, [r3, #0]
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_InitTick+0x60>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	0019      	movs	r1, r3
 80028ca:	23fa      	movs	r3, #250	; 0xfa
 80028cc:	0098      	lsls	r0, r3, #2
 80028ce:	f7fd fc2d 	bl	800012c <__udivsi3>
 80028d2:	0003      	movs	r3, r0
 80028d4:	0019      	movs	r1, r3
 80028d6:	0020      	movs	r0, r4
 80028d8:	f7fd fc28 	bl	800012c <__udivsi3>
 80028dc:	0003      	movs	r3, r0
 80028de:	0018      	movs	r0, r3
 80028e0:	f000 f92f 	bl	8002b42 <HAL_SYSTICK_Config>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d001      	beq.n	80028ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e00f      	b.n	800290c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d80b      	bhi.n	800290a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	2301      	movs	r3, #1
 80028f6:	425b      	negs	r3, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 f8fc 	bl	8002af8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_InitTick+0x64>)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b003      	add	sp, #12
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	20000124 	.word	0x20000124
 8002918:	2000012c 	.word	0x2000012c
 800291c:	20000128 	.word	0x20000128

08002920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_IncTick+0x1c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	001a      	movs	r2, r3
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_IncTick+0x20>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	18d2      	adds	r2, r2, r3
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_IncTick+0x20>)
 8002932:	601a      	str	r2, [r3, #0]
}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	2000012c 	.word	0x2000012c
 8002940:	20000758 	.word	0x20000758

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b02      	ldr	r3, [pc, #8]	; (8002954 <HAL_GetTick+0x10>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	20000758 	.word	0x20000758

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff fff0 	bl	8002944 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3301      	adds	r3, #1
 8002970:	d005      	beq.n	800297e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_Delay+0x44>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	001a      	movs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	189b      	adds	r3, r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	f7ff ffe0 	bl	8002944 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d8f7      	bhi.n	8002980 <HAL_Delay+0x28>
  {
  }
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	2000012c 	.word	0x2000012c

080029a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	0002      	movs	r2, r0
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b7f      	cmp	r3, #127	; 0x7f
 80029b2:	d809      	bhi.n	80029c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b4:	1dfb      	adds	r3, r7, #7
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	001a      	movs	r2, r3
 80029ba:	231f      	movs	r3, #31
 80029bc:	401a      	ands	r2, r3
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_EnableIRQ+0x30>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	4091      	lsls	r1, r2
 80029c4:	000a      	movs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
  }
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	0002      	movs	r2, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b7f      	cmp	r3, #127	; 0x7f
 80029e8:	d828      	bhi.n	8002a3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ea:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <__NVIC_SetPriority+0xd4>)
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	33c0      	adds	r3, #192	; 0xc0
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	589b      	ldr	r3, [r3, r2]
 80029fa:	1dfa      	adds	r2, r7, #7
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	0011      	movs	r1, r2
 8002a00:	2203      	movs	r2, #3
 8002a02:	400a      	ands	r2, r1
 8002a04:	00d2      	lsls	r2, r2, #3
 8002a06:	21ff      	movs	r1, #255	; 0xff
 8002a08:	4091      	lsls	r1, r2
 8002a0a:	000a      	movs	r2, r1
 8002a0c:	43d2      	mvns	r2, r2
 8002a0e:	401a      	ands	r2, r3
 8002a10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	401a      	ands	r2, r3
 8002a1a:	1dfb      	adds	r3, r7, #7
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	2303      	movs	r3, #3
 8002a22:	4003      	ands	r3, r0
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a28:	481f      	ldr	r0, [pc, #124]	; (8002aa8 <__NVIC_SetPriority+0xd4>)
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	430a      	orrs	r2, r1
 8002a34:	33c0      	adds	r3, #192	; 0xc0
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a3a:	e031      	b.n	8002aa0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <__NVIC_SetPriority+0xd8>)
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	0019      	movs	r1, r3
 8002a44:	230f      	movs	r3, #15
 8002a46:	400b      	ands	r3, r1
 8002a48:	3b08      	subs	r3, #8
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	3306      	adds	r3, #6
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	3304      	adds	r3, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1dfa      	adds	r2, r7, #7
 8002a58:	7812      	ldrb	r2, [r2, #0]
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	400a      	ands	r2, r1
 8002a60:	00d2      	lsls	r2, r2, #3
 8002a62:	21ff      	movs	r1, #255	; 0xff
 8002a64:	4091      	lsls	r1, r2
 8002a66:	000a      	movs	r2, r1
 8002a68:	43d2      	mvns	r2, r2
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	22ff      	movs	r2, #255	; 0xff
 8002a74:	401a      	ands	r2, r3
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	4003      	ands	r3, r0
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a84:	4809      	ldr	r0, [pc, #36]	; (8002aac <__NVIC_SetPriority+0xd8>)
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	001c      	movs	r4, r3
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	4023      	ands	r3, r4
 8002a90:	3b08      	subs	r3, #8
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	430a      	orrs	r2, r1
 8002a96:	3306      	adds	r3, #6
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	18c3      	adds	r3, r0, r3
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b003      	add	sp, #12
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	045b      	lsls	r3, r3, #17
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d301      	bcc.n	8002ac8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e010      	b.n	8002aea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <SysTick_Config+0x44>)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	3a01      	subs	r2, #1
 8002ace:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7ff ff7c 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <SysTick_Config+0x44>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae2:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <SysTick_Config+0x44>)
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	0018      	movs	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	e000e010 	.word	0xe000e010

08002af8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	210f      	movs	r1, #15
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	1c02      	adds	r2, r0, #0
 8002b08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	0011      	movs	r1, r2
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	0002      	movs	r2, r0
 8002b2a:	1dfb      	adds	r3, r7, #7
 8002b2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff ff33 	bl	80029a0 <__NVIC_EnableIRQ>
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff ffaf 	bl	8002ab0 <SysTick_Config>
 8002b52:	0003      	movs	r3, r0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2225      	movs	r2, #37	; 0x25
 8002b70:	5c9b      	ldrb	r3, [r3, r2]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d008      	beq.n	8002b8a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2224      	movs	r2, #36	; 0x24
 8002b82:	2100      	movs	r1, #0
 8002b84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e024      	b.n	8002bd4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	210e      	movs	r1, #14
 8002b96:	438a      	bics	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	438a      	bics	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	221c      	movs	r2, #28
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4091      	lsls	r1, r2
 8002bba:	000a      	movs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2225      	movs	r2, #37	; 0x25
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2224      	movs	r2, #36	; 0x24
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    return status;
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b004      	add	sp, #16
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002be4:	210f      	movs	r1, #15
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2225      	movs	r2, #37	; 0x25
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d006      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e02a      	b.n	8002c5c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	210e      	movs	r1, #14
 8002c12:	438a      	bics	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	438a      	bics	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	221c      	movs	r2, #28
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2101      	movs	r1, #1
 8002c34:	4091      	lsls	r1, r2
 8002c36:	000a      	movs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2225      	movs	r2, #37	; 0x25
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	0010      	movs	r0, r2
 8002c5a:	4798      	blx	r3
    }
  }
  return status;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b004      	add	sp, #16
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c82:	e155      	b.n	8002f30 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4091      	lsls	r1, r2
 8002c8e:	000a      	movs	r2, r1
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d100      	bne.n	8002c9c <HAL_GPIO_Init+0x30>
 8002c9a:	e146      	b.n	8002f2a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d005      	beq.n	8002cb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2203      	movs	r2, #3
 8002cae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d130      	bne.n	8002d16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cea:	2201      	movs	r2, #1
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	0013      	movs	r3, r2
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	2201      	movs	r2, #1
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
 8002d08:	0013      	movs	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d017      	beq.n	8002d52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	0013      	movs	r3, r2
 8002d32:	43da      	mvns	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	409a      	lsls	r2, r3
 8002d44:	0013      	movs	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2203      	movs	r2, #3
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d123      	bne.n	8002da6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	08da      	lsrs	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3208      	adds	r2, #8
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	58d3      	ldr	r3, [r2, r3]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2207      	movs	r2, #7
 8002d70:	4013      	ands	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	409a      	lsls	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2107      	movs	r1, #7
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	0013      	movs	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	08da      	lsrs	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3208      	adds	r2, #8
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	6939      	ldr	r1, [r7, #16]
 8002da4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	409a      	lsls	r2, r3
 8002db4:	0013      	movs	r3, r2
 8002db6:	43da      	mvns	r2, r3
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	23c0      	movs	r3, #192	; 0xc0
 8002de0:	029b      	lsls	r3, r3, #10
 8002de2:	4013      	ands	r3, r2
 8002de4:	d100      	bne.n	8002de8 <HAL_GPIO_Init+0x17c>
 8002de6:	e0a0      	b.n	8002f2a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de8:	4b57      	ldr	r3, [pc, #348]	; (8002f48 <HAL_GPIO_Init+0x2dc>)
 8002dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_GPIO_Init+0x2dc>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df4:	4a55      	ldr	r2, [pc, #340]	; (8002f4c <HAL_GPIO_Init+0x2e0>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	589b      	ldr	r3, [r3, r2]
 8002e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2203      	movs	r2, #3
 8002e06:	4013      	ands	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	0013      	movs	r3, r2
 8002e10:	43da      	mvns	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	23a0      	movs	r3, #160	; 0xa0
 8002e1c:	05db      	lsls	r3, r3, #23
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x1f6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4a      	ldr	r2, [pc, #296]	; (8002f50 <HAL_GPIO_Init+0x2e4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x1f2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a49      	ldr	r2, [pc, #292]	; (8002f54 <HAL_GPIO_Init+0x2e8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x1ee>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a48      	ldr	r2, [pc, #288]	; (8002f58 <HAL_GPIO_Init+0x2ec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x1ea>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a47      	ldr	r2, [pc, #284]	; (8002f5c <HAL_GPIO_Init+0x2f0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x1e6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_GPIO_Init+0x2f4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x1e2>
 8002e4a:	2305      	movs	r3, #5
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x1f8>
 8002e4e:	2306      	movs	r3, #6
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x1f8>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x1f8>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x1f8>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x1f8>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x1f8>
 8002e62:	2300      	movs	r3, #0
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	2103      	movs	r1, #3
 8002e68:	400a      	ands	r2, r1
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4935      	ldr	r1, [pc, #212]	; (8002f4c <HAL_GPIO_Init+0x2e0>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	025b      	lsls	r3, r3, #9
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ea6:	4b2f      	ldr	r3, [pc, #188]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002eac:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	029b      	lsls	r3, r3, #10
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ed0:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	035b      	lsls	r3, r3, #13
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_GPIO_Init+0x2f8>)
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	40da      	lsrs	r2, r3
 8002f38:	1e13      	subs	r3, r2, #0
 8002f3a:	d000      	beq.n	8002f3e <HAL_GPIO_Init+0x2d2>
 8002f3c:	e6a2      	b.n	8002c84 <HAL_GPIO_Init+0x18>
  }
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	50000400 	.word	0x50000400
 8002f54:	50000800 	.word	0x50000800
 8002f58:	50000c00 	.word	0x50000c00
 8002f5c:	50001000 	.word	0x50001000
 8002f60:	50001c00 	.word	0x50001c00
 8002f64:	40010400 	.word	0x40010400

08002f68 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	000a      	movs	r2, r1
 8002f72:	1cbb      	adds	r3, r7, #2
 8002f74:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	1cba      	adds	r2, r7, #2
 8002f7c:	8812      	ldrh	r2, [r2, #0]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e003      	b.n	8002f94 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8c:	230f      	movs	r3, #15
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	781b      	ldrb	r3, [r3, #0]
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	0002      	movs	r2, r0
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	1dba      	adds	r2, r7, #6
 8002fb6:	8812      	ldrh	r2, [r2, #0]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d008      	beq.n	8002fce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002fbe:	1dba      	adds	r2, r7, #6
 8002fc0:	8812      	ldrh	r2, [r2, #0]
 8002fc2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc4:	1dbb      	adds	r3, r7, #6
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd fd9f 	bl	8000b0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b002      	add	sp, #8
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e082      	b.n	80030f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2241      	movs	r2, #65	; 0x41
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	2100      	movs	r1, #0
 8003000:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f7fd fc4d 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2241      	movs	r2, #65	; 0x41
 800300e:	2124      	movs	r1, #36	; 0x24
 8003010:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_I2C_Init+0x120>)
 800302c:	400a      	ands	r2, r1
 800302e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4931      	ldr	r1, [pc, #196]	; (8003100 <HAL_I2C_Init+0x124>)
 800303c:	400a      	ands	r2, r1
 800303e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	0209      	lsls	r1, r1, #8
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	e007      	b.n	800306a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2184      	movs	r1, #132	; 0x84
 8003064:	0209      	lsls	r1, r1, #8
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d104      	bne.n	800307c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	0112      	lsls	r2, r2, #4
 800307a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	491f      	ldr	r1, [pc, #124]	; (8003104 <HAL_I2C_Init+0x128>)
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	491a      	ldr	r1, [pc, #104]	; (8003100 <HAL_I2C_Init+0x124>)
 8003098:	400a      	ands	r2, r1
 800309a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69d9      	ldr	r1, [r3, #28]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2241      	movs	r2, #65	; 0x41
 80030e0:	2120      	movs	r1, #32
 80030e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2242      	movs	r2, #66	; 0x42
 80030ee:	2100      	movs	r1, #0
 80030f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	0018      	movs	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	f0ffffff 	.word	0xf0ffffff
 8003100:	ffff7fff 	.word	0xffff7fff
 8003104:	02008000 	.word	0x02008000

08003108 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	0008      	movs	r0, r1
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	0019      	movs	r1, r3
 8003116:	230a      	movs	r3, #10
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	1c02      	adds	r2, r0, #0
 800311c:	801a      	strh	r2, [r3, #0]
 800311e:	2308      	movs	r3, #8
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	1c0a      	adds	r2, r1, #0
 8003124:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2241      	movs	r2, #65	; 0x41
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	d000      	beq.n	8003134 <HAL_I2C_Master_Transmit+0x2c>
 8003132:	e0e7      	b.n	8003304 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Master_Transmit+0x3a>
 800313e:	2302      	movs	r3, #2
 8003140:	e0e1      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1fe>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2240      	movs	r2, #64	; 0x40
 8003146:	2101      	movs	r1, #1
 8003148:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800314a:	f7ff fbfb 	bl	8002944 <HAL_GetTick>
 800314e:	0003      	movs	r3, r0
 8003150:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	0219      	lsls	r1, r3, #8
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2319      	movs	r3, #25
 800315e:	2201      	movs	r2, #1
 8003160:	f000 fa16 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cc      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2241      	movs	r2, #65	; 0x41
 8003170:	2121      	movs	r1, #33	; 0x21
 8003172:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2242      	movs	r2, #66	; 0x42
 8003178:	2110      	movs	r1, #16
 800317a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2208      	movs	r2, #8
 800318c:	18ba      	adds	r2, r7, r2
 800318e:	8812      	ldrh	r2, [r2, #0]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d911      	bls.n	80031c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	045c      	lsls	r4, r3, #17
 80031b2:	230a      	movs	r3, #10
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	8819      	ldrh	r1, [r3, #0]
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	4b55      	ldr	r3, [pc, #340]	; (8003310 <HAL_I2C_Master_Transmit+0x208>)
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	0023      	movs	r3, r4
 80031c0:	f000 fb1a 	bl	80037f8 <I2C_TransferConfig>
 80031c4:	e075      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	049c      	lsls	r4, r3, #18
 80031da:	230a      	movs	r3, #10
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	8819      	ldrh	r1, [r3, #0]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_I2C_Master_Transmit+0x208>)
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	0023      	movs	r3, r4
 80031e8:	f000 fb06 	bl	80037f8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80031ec:	e061      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 fa0a 	bl	800360e <I2C_WaitOnTXISFlagUntilTimeout>
 80031fa:	1e03      	subs	r3, r0, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e081      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d03a      	beq.n	80032b2 <HAL_I2C_Master_Transmit+0x1aa>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d136      	bne.n	80032b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	0013      	movs	r3, r2
 800324e:	2200      	movs	r2, #0
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	f000 f99d 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e053      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2bff      	cmp	r3, #255	; 0xff
 8003266:	d911      	bls.n	800328c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	b2da      	uxtb	r2, r3
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	045c      	lsls	r4, r3, #17
 8003278:	230a      	movs	r3, #10
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	8819      	ldrh	r1, [r3, #0]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	2300      	movs	r3, #0
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	0023      	movs	r3, r4
 8003286:	f000 fab7 	bl	80037f8 <I2C_TransferConfig>
 800328a:	e012      	b.n	80032b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	b2da      	uxtb	r2, r3
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	049c      	lsls	r4, r3, #18
 80032a0:	230a      	movs	r3, #10
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	8819      	ldrh	r1, [r3, #0]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	0023      	movs	r3, r4
 80032ae:	f000 faa3 	bl	80037f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d198      	bne.n	80031ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 f9e2 	bl	800368c <I2C_WaitOnSTOPFlagUntilTimeout>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01a      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2220      	movs	r2, #32
 80032d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	490c      	ldr	r1, [pc, #48]	; (8003314 <HAL_I2C_Master_Transmit+0x20c>)
 80032e4:	400a      	ands	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2241      	movs	r2, #65	; 0x41
 80032ec:	2120      	movs	r1, #32
 80032ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2242      	movs	r2, #66	; 0x42
 80032f4:	2100      	movs	r1, #0
 80032f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	2100      	movs	r1, #0
 80032fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b007      	add	sp, #28
 800330c:	bd90      	pop	{r4, r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	80002000 	.word	0x80002000
 8003314:	fe00e800 	.word	0xfe00e800

08003318 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	230a      	movs	r3, #10
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	1c0a      	adds	r2, r1, #0
 800332a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2241      	movs	r2, #65	; 0x41
 8003334:	5c9b      	ldrb	r3, [r3, r2]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	d000      	beq.n	800333e <HAL_I2C_IsDeviceReady+0x26>
 800333c:	e0fe      	b.n	800353c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	401a      	ands	r2, r3
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	429a      	cmp	r2, r3
 8003350:	d101      	bne.n	8003356 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e0f3      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2240      	movs	r2, #64	; 0x40
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_IsDeviceReady+0x4c>
 8003360:	2302      	movs	r3, #2
 8003362:	e0ec      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2240      	movs	r2, #64	; 0x40
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2241      	movs	r2, #65	; 0x41
 8003370:	2124      	movs	r1, #36	; 0x24
 8003372:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_I2C_IsDeviceReady+0x7a>
 8003382:	230a      	movs	r3, #10
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	059b      	lsls	r3, r3, #22
 800338a:	0d9b      	lsrs	r3, r3, #22
 800338c:	4a6e      	ldr	r2, [pc, #440]	; (8003548 <HAL_I2C_IsDeviceReady+0x230>)
 800338e:	431a      	orrs	r2, r3
 8003390:	e007      	b.n	80033a2 <HAL_I2C_IsDeviceReady+0x8a>
 8003392:	230a      	movs	r3, #10
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	059b      	lsls	r3, r3, #22
 800339a:	0d9b      	lsrs	r3, r3, #22
 800339c:	22a0      	movs	r2, #160	; 0xa0
 800339e:	0192      	lsls	r2, r2, #6
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80033a8:	f7ff facc 	bl	8002944 <HAL_GetTick>
 80033ac:	0003      	movs	r3, r0
 80033ae:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2220      	movs	r2, #32
 80033b8:	4013      	ands	r3, r2
 80033ba:	3b20      	subs	r3, #32
 80033bc:	425a      	negs	r2, r3
 80033be:	4153      	adcs	r3, r2
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	231f      	movs	r3, #31
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2210      	movs	r2, #16
 80033d0:	4013      	ands	r3, r2
 80033d2:	3b10      	subs	r3, #16
 80033d4:	425a      	negs	r2, r3
 80033d6:	4153      	adcs	r3, r2
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	231e      	movs	r3, #30
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033e0:	e035      	b.n	800344e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	d01a      	beq.n	800341e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7ff faac 	bl	8002944 <HAL_GetTick>
 80033ec:	0002      	movs	r2, r0
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <HAL_I2C_IsDeviceReady+0xe6>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2241      	movs	r2, #65	; 0x41
 8003402:	2120      	movs	r1, #32
 8003404:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	2220      	movs	r2, #32
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e08f      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2220      	movs	r2, #32
 8003426:	4013      	ands	r3, r2
 8003428:	3b20      	subs	r3, #32
 800342a:	425a      	negs	r2, r3
 800342c:	4153      	adcs	r3, r2
 800342e:	b2da      	uxtb	r2, r3
 8003430:	231f      	movs	r3, #31
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	3b10      	subs	r3, #16
 8003442:	425a      	negs	r2, r3
 8003444:	4153      	adcs	r3, r2
 8003446:	b2da      	uxtb	r2, r3
 8003448:	231e      	movs	r3, #30
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800344e:	231f      	movs	r3, #31
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_I2C_IsDeviceReady+0x14a>
 8003458:	231e      	movs	r3, #30
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0bf      	beq.n	80033e2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2210      	movs	r2, #16
 800346a:	4013      	ands	r3, r2
 800346c:	2b10      	cmp	r3, #16
 800346e:	d01a      	beq.n	80034a6 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	0013      	movs	r3, r2
 800347a:	2200      	movs	r2, #0
 800347c:	2120      	movs	r1, #32
 800347e:	f000 f887 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e059      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2220      	movs	r2, #32
 8003490:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2241      	movs	r2, #65	; 0x41
 8003496:	2120      	movs	r1, #32
 8003498:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e04b      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	0013      	movs	r3, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	2120      	movs	r1, #32
 80034b4:	f000 f86c 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 80034b8:	1e03      	subs	r3, r0, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e03e      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2210      	movs	r2, #16
 80034c6:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2220      	movs	r2, #32
 80034ce:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d119      	bne.n	800350c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	01c9      	lsls	r1, r1, #7
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	0013      	movs	r3, r2
 80034f4:	2200      	movs	r2, #0
 80034f6:	2120      	movs	r1, #32
 80034f8:	f000 f84a 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e01c      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2220      	movs	r2, #32
 800350a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3301      	adds	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d900      	bls.n	800351c <HAL_I2C_IsDeviceReady+0x204>
 800351a:	e72e      	b.n	800337a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2241      	movs	r2, #65	; 0x41
 8003520:	2120      	movs	r1, #32
 8003522:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	2220      	movs	r2, #32
 800352a:	431a      	orrs	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b008      	add	sp, #32
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	02002000 	.word	0x02002000

0800354c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d103      	bne.n	800356a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2201      	movs	r2, #1
 8003572:	4013      	ands	r3, r2
 8003574:	2b01      	cmp	r3, #1
 8003576:	d007      	beq.n	8003588 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2101      	movs	r1, #1
 8003584:	430a      	orrs	r2, r1
 8003586:	619a      	str	r2, [r3, #24]
  }
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	1dfb      	adds	r3, r7, #7
 800359e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a0:	e021      	b.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	d01e      	beq.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7ff f9cc 	bl	8002944 <HAL_GetTick>
 80035ac:	0002      	movs	r2, r0
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d113      	bne.n	80035e6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	2220      	movs	r2, #32
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2241      	movs	r2, #65	; 0x41
 80035ce:	2120      	movs	r1, #32
 80035d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2242      	movs	r2, #66	; 0x42
 80035d6:	2100      	movs	r1, #0
 80035d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2240      	movs	r2, #64	; 0x40
 80035de:	2100      	movs	r1, #0
 80035e0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	425a      	negs	r2, r3
 80035f6:	4153      	adcs	r3, r2
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	001a      	movs	r2, r3
 80035fc:	1dfb      	adds	r3, r7, #7
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d0ce      	beq.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b004      	add	sp, #16
 800360c:	bd80      	pop	{r7, pc}

0800360e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800361a:	e02b      	b.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f86e 	bl	8003704 <I2C_IsAcknowledgeFailed>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d001      	beq.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e029      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	3301      	adds	r3, #1
 8003634:	d01e      	beq.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7ff f985 	bl	8002944 <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d113      	bne.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	2220      	movs	r2, #32
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2241      	movs	r2, #65	; 0x41
 800365c:	2120      	movs	r1, #32
 800365e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2242      	movs	r2, #66	; 0x42
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2202      	movs	r2, #2
 800367c:	4013      	ands	r3, r2
 800367e:	2b02      	cmp	r3, #2
 8003680:	d1cc      	bne.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003698:	e028      	b.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f82f 	bl	8003704 <I2C_IsAcknowledgeFailed>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e026      	b.n	80036fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7ff f949 	bl	8002944 <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d113      	bne.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	2220      	movs	r2, #32
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2241      	movs	r2, #65	; 0x41
 80036d4:	2120      	movs	r1, #32
 80036d6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2242      	movs	r2, #66	; 0x42
 80036dc:	2100      	movs	r1, #0
 80036de:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e007      	b.n	80036fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2220      	movs	r2, #32
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d1cf      	bne.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2210      	movs	r2, #16
 8003718:	4013      	ands	r3, r2
 800371a:	2b10      	cmp	r3, #16
 800371c:	d164      	bne.n	80037e8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	049b      	lsls	r3, r3, #18
 8003728:	401a      	ands	r2, r3
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	049b      	lsls	r3, r3, #18
 800372e:	429a      	cmp	r2, r3
 8003730:	d02b      	beq.n	800378a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	01c9      	lsls	r1, r1, #7
 8003740:	430a      	orrs	r2, r1
 8003742:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003744:	e021      	b.n	800378a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3301      	adds	r3, #1
 800374a:	d01e      	beq.n	800378a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374c:	f7ff f8fa 	bl	8002944 <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <I2C_IsAcknowledgeFailed+0x5e>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d113      	bne.n	800378a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	2220      	movs	r2, #32
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2241      	movs	r2, #65	; 0x41
 8003772:	2120      	movs	r1, #32
 8003774:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2242      	movs	r2, #66	; 0x42
 800377a:	2100      	movs	r1, #0
 800377c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2240      	movs	r2, #64	; 0x40
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e02f      	b.n	80037ea <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2220      	movs	r2, #32
 8003792:	4013      	ands	r3, r2
 8003794:	2b20      	cmp	r3, #32
 8003796:	d1d6      	bne.n	8003746 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2220      	movs	r2, #32
 80037a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7ff fece 	bl	800354c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	490e      	ldr	r1, [pc, #56]	; (80037f4 <I2C_IsAcknowledgeFailed+0xf0>)
 80037bc:	400a      	ands	r2, r1
 80037be:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	2204      	movs	r2, #4
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2241      	movs	r2, #65	; 0x41
 80037d0:	2120      	movs	r1, #32
 80037d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2242      	movs	r2, #66	; 0x42
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	fe00e800 	.word	0xfe00e800

080037f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	0008      	movs	r0, r1
 8003802:	0011      	movs	r1, r2
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	240a      	movs	r4, #10
 8003808:	193b      	adds	r3, r7, r4
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	801a      	strh	r2, [r3, #0]
 800380e:	2009      	movs	r0, #9
 8003810:	183b      	adds	r3, r7, r0
 8003812:	1c0a      	adds	r2, r1, #0
 8003814:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	0d51      	lsrs	r1, r2, #21
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	00d2      	lsls	r2, r2, #3
 8003824:	400a      	ands	r2, r1
 8003826:	490e      	ldr	r1, [pc, #56]	; (8003860 <I2C_TransferConfig+0x68>)
 8003828:	430a      	orrs	r2, r1
 800382a:	43d2      	mvns	r2, r2
 800382c:	401a      	ands	r2, r3
 800382e:	0011      	movs	r1, r2
 8003830:	193b      	adds	r3, r7, r4
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	059b      	lsls	r3, r3, #22
 8003836:	0d9a      	lsrs	r2, r3, #22
 8003838:	183b      	adds	r3, r7, r0
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	0418      	lsls	r0, r3, #16
 800383e:	23ff      	movs	r3, #255	; 0xff
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	4003      	ands	r3, r0
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	431a      	orrs	r2, r3
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	46bd      	mov	sp, r7
 800385a:	b005      	add	sp, #20
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	03ff63ff 	.word	0x03ff63ff

08003864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2241      	movs	r2, #65	; 0x41
 8003872:	5c9b      	ldrb	r3, [r3, r2]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	d138      	bne.n	80038ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	5c9b      	ldrb	r3, [r3, r2]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003884:	2302      	movs	r3, #2
 8003886:	e032      	b.n	80038ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2240      	movs	r2, #64	; 0x40
 800388c:	2101      	movs	r1, #1
 800388e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	2124      	movs	r1, #36	; 0x24
 8003896:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2101      	movs	r1, #1
 80038a4:	438a      	bics	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4911      	ldr	r1, [pc, #68]	; (80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038b4:	400a      	ands	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2101      	movs	r1, #1
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2241      	movs	r2, #65	; 0x41
 80038dc:	2120      	movs	r1, #32
 80038de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b002      	add	sp, #8
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	ffffefff 	.word	0xffffefff

080038fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2241      	movs	r2, #65	; 0x41
 800390a:	5c9b      	ldrb	r3, [r3, r2]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d139      	bne.n	8003986 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	5c9b      	ldrb	r3, [r3, r2]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e033      	b.n	8003988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2241      	movs	r2, #65	; 0x41
 800392c:	2124      	movs	r1, #36	; 0x24
 800392e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	438a      	bics	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2101      	movs	r1, #1
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2241      	movs	r2, #65	; 0x41
 8003976:	2120      	movs	r1, #32
 8003978:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b004      	add	sp, #16
 800398e:	bd80      	pop	{r7, pc}
 8003990:	fffff0ff 	.word	0xfffff0ff

08003994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003994:	b5b0      	push	{r4, r5, r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f000 fbbf 	bl	8004126 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a8:	4bc9      	ldr	r3, [pc, #804]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	220c      	movs	r2, #12
 80039ae:	4013      	ands	r3, r2
 80039b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b2:	4bc7      	ldr	r3, [pc, #796]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	025b      	lsls	r3, r3, #9
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d100      	bne.n	80039ca <HAL_RCC_OscConfig+0x36>
 80039c8:	e07e      	b.n	8003ac8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d007      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0c      	cmp	r3, #12
 80039d4:	d112      	bne.n	80039fc <HAL_RCC_OscConfig+0x68>
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	429a      	cmp	r2, r3
 80039de:	d10d      	bne.n	80039fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4bbb      	ldr	r3, [pc, #748]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	029b      	lsls	r3, r3, #10
 80039e8:	4013      	ands	r3, r2
 80039ea:	d100      	bne.n	80039ee <HAL_RCC_OscConfig+0x5a>
 80039ec:	e06b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x132>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d167      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f000 fb95 	bl	8004126 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	025b      	lsls	r3, r3, #9
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_OscConfig+0x84>
 8003a08:	4bb1      	ldr	r3, [pc, #708]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4bb0      	ldr	r3, [pc, #704]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0249      	lsls	r1, r1, #9
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e027      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	23a0      	movs	r3, #160	; 0xa0
 8003a1e:	02db      	lsls	r3, r3, #11
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d10e      	bne.n	8003a42 <HAL_RCC_OscConfig+0xae>
 8003a24:	4baa      	ldr	r3, [pc, #680]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4ba9      	ldr	r3, [pc, #676]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a2a:	2180      	movs	r1, #128	; 0x80
 8003a2c:	02c9      	lsls	r1, r1, #11
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4ba7      	ldr	r3, [pc, #668]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4ba6      	ldr	r3, [pc, #664]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a38:	2180      	movs	r1, #128	; 0x80
 8003a3a:	0249      	lsls	r1, r1, #9
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e012      	b.n	8003a68 <HAL_RCC_OscConfig+0xd4>
 8003a42:	4ba3      	ldr	r3, [pc, #652]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4ba2      	ldr	r3, [pc, #648]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a48:	49a2      	ldr	r1, [pc, #648]	; (8003cd4 <HAL_RCC_OscConfig+0x340>)
 8003a4a:	400a      	ands	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	4ba0      	ldr	r3, [pc, #640]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	025b      	lsls	r3, r3, #9
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4b9c      	ldr	r3, [pc, #624]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b9b      	ldr	r3, [pc, #620]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a62:	499d      	ldr	r1, [pc, #628]	; (8003cd8 <HAL_RCC_OscConfig+0x344>)
 8003a64:	400a      	ands	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d015      	beq.n	8003a9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fe ff68 	bl	8002944 <HAL_GetTick>
 8003a74:	0003      	movs	r3, r0
 8003a76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a78:	e009      	b.n	8003a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7a:	f7fe ff63 	bl	8002944 <HAL_GetTick>
 8003a7e:	0002      	movs	r2, r0
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d902      	bls.n	8003a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	f000 fb4c 	bl	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8e:	4b90      	ldr	r3, [pc, #576]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	2380      	movs	r3, #128	; 0x80
 8003a94:	029b      	lsls	r3, r3, #10
 8003a96:	4013      	ands	r3, r2
 8003a98:	d0ef      	beq.n	8003a7a <HAL_RCC_OscConfig+0xe6>
 8003a9a:	e015      	b.n	8003ac8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe ff52 	bl	8002944 <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa6:	f7fe ff4d 	bl	8002944 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	; 0x64
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e336      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ab8:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	029b      	lsls	r3, r3, #10
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x112>
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d100      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x140>
 8003ad2:	e099      	b.n	8003c08 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2220      	movs	r2, #32
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ae2:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003ae8:	2120      	movs	r1, #32
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	2220      	movs	r2, #32
 8003af2:	4393      	bics	r3, r2
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d13e      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1ec>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d13b      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b08:	4b71      	ldr	r3, [pc, #452]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_RCC_OscConfig+0x188>
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e304      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a6e      	ldr	r2, [pc, #440]	; (8003cdc <HAL_RCC_OscConfig+0x348>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	021a      	lsls	r2, r3, #8
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b32:	4b67      	ldr	r3, [pc, #412]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2209      	movs	r2, #9
 8003b38:	4393      	bics	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	4b64      	ldr	r3, [pc, #400]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b44:	f000 fc42 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8003b48:	0001      	movs	r1, r0
 8003b4a:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	220f      	movs	r2, #15
 8003b52:	4013      	ands	r3, r2
 8003b54:	4a62      	ldr	r2, [pc, #392]	; (8003ce0 <HAL_RCC_OscConfig+0x34c>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	000a      	movs	r2, r1
 8003b5a:	40da      	lsrs	r2, r3
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_RCC_OscConfig+0x350>)
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <HAL_RCC_OscConfig+0x354>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2513      	movs	r5, #19
 8003b66:	197c      	adds	r4, r7, r5
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fe fea5 	bl	80028b8 <HAL_InitTick>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b72:	197b      	adds	r3, r7, r5
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d046      	beq.n	8003c08 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003b7a:	197b      	adds	r3, r7, r5
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	e2d2      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d027      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b86:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2209      	movs	r2, #9
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	0019      	movs	r1, r3
 8003b90:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fed4 	bl	8002944 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba2:	f7fe fecf 	bl	8002944 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e2b8      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b44      	ldr	r3, [pc, #272]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4a46      	ldr	r2, [pc, #280]	; (8003cdc <HAL_RCC_OscConfig+0x348>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	e018      	b.n	8003c08 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	438a      	bics	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fe feaf 	bl	8002944 <HAL_GetTick>
 8003be6:	0003      	movs	r3, r0
 8003be8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe feaa 	bl	8002944 <HAL_GetTick>
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e293      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	4013      	ands	r3, r2
 8003c06:	d1f1      	bne.n	8003bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d100      	bne.n	8003c14 <HAL_RCC_OscConfig+0x280>
 8003c12:	e0a2      	b.n	8003d5a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d140      	bne.n	8003c9c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c1a:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x29e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e279      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <HAL_RCC_OscConfig+0x358>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	0a19      	lsrs	r1, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	061a      	lsls	r2, r3, #24
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	0b5b      	lsrs	r3, r3, #13
 8003c60:	3301      	adds	r3, #1
 8003c62:	2280      	movs	r2, #128	; 0x80
 8003c64:	0212      	lsls	r2, r2, #8
 8003c66:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	210f      	movs	r1, #15
 8003c70:	400b      	ands	r3, r1
 8003c72:	491b      	ldr	r1, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x34c>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCC_OscConfig+0x350>)
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <HAL_RCC_OscConfig+0x354>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2513      	movs	r5, #19
 8003c82:	197c      	adds	r4, r7, r5
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fe fe17 	bl	80028b8 <HAL_InitTick>
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003c8e:	197b      	adds	r3, r7, r5
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d061      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003c96:	197b      	adds	r3, r7, r5
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	e244      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d040      	beq.n	8003d26 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x33c>)
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	0049      	lsls	r1, r1, #1
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fe47 	bl	8002944 <HAL_GetTick>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cba:	e019      	b.n	8003cf0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fe42 	bl	8002944 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d912      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e22b      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	fffeffff 	.word	0xfffeffff
 8003cd8:	fffbffff 	.word	0xfffbffff
 8003cdc:	ffffe0ff 	.word	0xffffe0ff
 8003ce0:	08008e58 	.word	0x08008e58
 8003ce4:	20000124 	.word	0x20000124
 8003ce8:	20000128 	.word	0x20000128
 8003cec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cf0:	4bca      	ldr	r3, [pc, #808]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2380      	movs	r3, #128	; 0x80
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d0df      	beq.n	8003cbc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cfc:	4bc7      	ldr	r3, [pc, #796]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4ac7      	ldr	r2, [pc, #796]	; (8004020 <HAL_RCC_OscConfig+0x68c>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0a:	4bc4      	ldr	r3, [pc, #784]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d10:	4bc2      	ldr	r3, [pc, #776]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	0a19      	lsrs	r1, r3, #8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	061a      	lsls	r2, r3, #24
 8003d1e:	4bbf      	ldr	r3, [pc, #764]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e019      	b.n	8003d5a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d26:	4bbd      	ldr	r3, [pc, #756]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4bbc      	ldr	r3, [pc, #752]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d2c:	49bd      	ldr	r1, [pc, #756]	; (8004024 <HAL_RCC_OscConfig+0x690>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe fe07 	bl	8002944 <HAL_GetTick>
 8003d36:	0003      	movs	r3, r0
 8003d38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d3c:	f7fe fe02 	bl	8002944 <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1eb      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d4e:	4bb3      	ldr	r3, [pc, #716]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2208      	movs	r2, #8
 8003d60:	4013      	ands	r3, r2
 8003d62:	d036      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d019      	beq.n	8003da0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6c:	4bab      	ldr	r3, [pc, #684]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d70:	4baa      	ldr	r3, [pc, #680]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	430a      	orrs	r2, r1
 8003d76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d78:	f7fe fde4 	bl	8002944 <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fe fddf 	bl	8002944 <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e1c8      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d94:	4ba1      	ldr	r3, [pc, #644]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	2202      	movs	r2, #2
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d0f1      	beq.n	8003d82 <HAL_RCC_OscConfig+0x3ee>
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da0:	4b9e      	ldr	r3, [pc, #632]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da4:	4b9d      	ldr	r3, [pc, #628]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003da6:	2101      	movs	r1, #1
 8003da8:	438a      	bics	r2, r1
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fdca 	bl	8002944 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fe fdc5 	bl	8002944 <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e1ae      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dc8:	4b94      	ldr	r3, [pc, #592]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dcc:	2202      	movs	r2, #2
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d1f1      	bne.n	8003db6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d100      	bne.n	8003dde <HAL_RCC_OscConfig+0x44a>
 8003ddc:	e0ae      	b.n	8003f3c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2023      	movs	r0, #35	; 0x23
 8003de0:	183b      	adds	r3, r7, r0
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b8d      	ldr	r3, [pc, #564]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	055b      	lsls	r3, r3, #21
 8003dee:	4013      	ands	r3, r2
 8003df0:	d109      	bne.n	8003e06 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	4b8a      	ldr	r3, [pc, #552]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df6:	4b89      	ldr	r3, [pc, #548]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	0549      	lsls	r1, r1, #21
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e00:	183b      	adds	r3, r7, r0
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e06:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x694>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d11a      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e12:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_OscConfig+0x694>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4b84      	ldr	r3, [pc, #528]	; (8004028 <HAL_RCC_OscConfig+0x694>)
 8003e18:	2180      	movs	r1, #128	; 0x80
 8003e1a:	0049      	lsls	r1, r1, #1
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e20:	f7fe fd90 	bl	8002944 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fe fd8b 	bl	8002944 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	; 0x64
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e174      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b7a      	ldr	r3, [pc, #488]	; (8004028 <HAL_RCC_OscConfig+0x694>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4d0>
 8003e54:	4b71      	ldr	r3, [pc, #452]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e58:	4b70      	ldr	r3, [pc, #448]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	0049      	lsls	r1, r1, #1
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50
 8003e62:	e031      	b.n	8003ec8 <HAL_RCC_OscConfig+0x534>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10c      	bne.n	8003e86 <HAL_RCC_OscConfig+0x4f2>
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e72:	496c      	ldr	r1, [pc, #432]	; (8004024 <HAL_RCC_OscConfig+0x690>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	651a      	str	r2, [r3, #80]	; 0x50
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e7c:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e7e:	496b      	ldr	r1, [pc, #428]	; (800402c <HAL_RCC_OscConfig+0x698>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	651a      	str	r2, [r3, #80]	; 0x50
 8003e84:	e020      	b.n	8003ec8 <HAL_RCC_OscConfig+0x534>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	23a0      	movs	r3, #160	; 0xa0
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d10e      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x51c>
 8003e92:	4b62      	ldr	r3, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	00c9      	lsls	r1, r1, #3
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea0:	4b5e      	ldr	r3, [pc, #376]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea4:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	0049      	lsls	r1, r1, #1
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	651a      	str	r2, [r3, #80]	; 0x50
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0x534>
 8003eb0:	4b5a      	ldr	r3, [pc, #360]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003eb6:	495b      	ldr	r1, [pc, #364]	; (8004024 <HAL_RCC_OscConfig+0x690>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
 8003ebc:	4b57      	ldr	r3, [pc, #348]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ebe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ec0:	4b56      	ldr	r3, [pc, #344]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ec2:	495a      	ldr	r1, [pc, #360]	; (800402c <HAL_RCC_OscConfig+0x698>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed0:	f7fe fd38 	bl	8002944 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed8:	e009      	b.n	8003eee <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fe fd33 	bl	8002944 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_RCC_OscConfig+0x69c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e11b      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eee:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d0ef      	beq.n	8003eda <HAL_RCC_OscConfig+0x546>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efc:	f7fe fd22 	bl	8002944 <HAL_GetTick>
 8003f00:	0003      	movs	r3, r0
 8003f02:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f04:	e009      	b.n	8003f1a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe fd1d 	bl	8002944 <HAL_GetTick>
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	4a47      	ldr	r2, [pc, #284]	; (8004030 <HAL_RCC_OscConfig+0x69c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e105      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f1a:	4b40      	ldr	r3, [pc, #256]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d1ef      	bne.n	8003f06 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f26:	2323      	movs	r3, #35	; 0x23
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f34:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f36:	493f      	ldr	r1, [pc, #252]	; (8004034 <HAL_RCC_OscConfig+0x6a0>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2220      	movs	r2, #32
 8003f42:	4013      	ands	r3, r2
 8003f44:	d049      	beq.n	8003fda <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d026      	beq.n	8003f9c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f4e:	4b33      	ldr	r3, [pc, #204]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f54:	2101      	movs	r1, #1
 8003f56:	430a      	orrs	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5e:	4b2f      	ldr	r3, [pc, #188]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f60:	2101      	movs	r1, #1
 8003f62:	430a      	orrs	r2, r1
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCC_OscConfig+0x6a4>)
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x6a4>)
 8003f6c:	2180      	movs	r1, #128	; 0x80
 8003f6e:	0189      	lsls	r1, r1, #6
 8003f70:	430a      	orrs	r2, r1
 8003f72:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fe fce6 	bl	8002944 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7e:	f7fe fce1 	bl	8002944 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0ca      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2202      	movs	r2, #2
 8003f96:	4013      	ands	r3, r2
 8003f98:	d0f1      	beq.n	8003f7e <HAL_RCC_OscConfig+0x5ea>
 8003f9a:	e01e      	b.n	8003fda <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003f9c:	4b1f      	ldr	r3, [pc, #124]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_RCC_OscConfig+0x6a4>)
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_RCC_OscConfig+0x6a4>)
 8003fae:	4923      	ldr	r1, [pc, #140]	; (800403c <HAL_RCC_OscConfig+0x6a8>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fcc6 	bl	8002944 <HAL_GetTick>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fbe:	f7fe fcc1 	bl	8002944 <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e0aa      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d1f1      	bne.n	8003fbe <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d100      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x650>
 8003fe2:	e09f      	b.n	8004124 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d100      	bne.n	8003fec <HAL_RCC_OscConfig+0x658>
 8003fea:	e078      	b.n	80040de <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d159      	bne.n	80040a8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_RCC_OscConfig+0x688>)
 8003ffa:	4911      	ldr	r1, [pc, #68]	; (8004040 <HAL_RCC_OscConfig+0x6ac>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fe fca0 	bl	8002944 <HAL_GetTick>
 8004004:	0003      	movs	r3, r0
 8004006:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004008:	e01c      	b.n	8004044 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe fc9b 	bl	8002944 <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d915      	bls.n	8004044 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e084      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
 800401c:	40021000 	.word	0x40021000
 8004020:	ffff1fff 	.word	0xffff1fff
 8004024:	fffffeff 	.word	0xfffffeff
 8004028:	40007000 	.word	0x40007000
 800402c:	fffffbff 	.word	0xfffffbff
 8004030:	00001388 	.word	0x00001388
 8004034:	efffffff 	.word	0xefffffff
 8004038:	40010000 	.word	0x40010000
 800403c:	ffffdfff 	.word	0xffffdfff
 8004040:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004044:	4b3a      	ldr	r3, [pc, #232]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	049b      	lsls	r3, r3, #18
 800404c:	4013      	ands	r3, r2
 800404e:	d1dc      	bne.n	800400a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a37      	ldr	r2, [pc, #220]	; (8004134 <HAL_RCC_OscConfig+0x7a0>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	431a      	orrs	r2, r3
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	0449      	lsls	r1, r1, #17
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fe fc61 	bl	8002944 <HAL_GetTick>
 8004082:	0003      	movs	r3, r0
 8004084:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fe fc5c 	bl	8002944 <HAL_GetTick>
 800408c:	0002      	movs	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e045      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800409a:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	049b      	lsls	r3, r3, #18
 80040a2:	4013      	ands	r3, r2
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x6f4>
 80040a6:	e03d      	b.n	8004124 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 80040ae:	4922      	ldr	r1, [pc, #136]	; (8004138 <HAL_RCC_OscConfig+0x7a4>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fe fc46 	bl	8002944 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe fc41 	bl	8002944 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e02a      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	049b      	lsls	r3, r3, #18
 80040d8:	4013      	ands	r3, r2
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x72a>
 80040dc:	e022      	b.n	8004124 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e01d      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x79c>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	025b      	lsls	r3, r3, #9
 80040f6:	401a      	ands	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d10f      	bne.n	8004120 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	23f0      	movs	r3, #240	; 0xf0
 8004104:	039b      	lsls	r3, r3, #14
 8004106:	401a      	ands	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	23c0      	movs	r3, #192	; 0xc0
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	0018      	movs	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	b00a      	add	sp, #40	; 0x28
 800412c:	bdb0      	pop	{r4, r5, r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40021000 	.word	0x40021000
 8004134:	ff02ffff 	.word	0xff02ffff
 8004138:	feffffff 	.word	0xfeffffff

0800413c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b5b0      	push	{r4, r5, r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e128      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b96      	ldr	r3, [pc, #600]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d91e      	bls.n	800419c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b93      	ldr	r3, [pc, #588]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2201      	movs	r2, #1
 8004164:	4393      	bics	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	4b90      	ldr	r3, [pc, #576]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004170:	f7fe fbe8 	bl	8002944 <HAL_GetTick>
 8004174:	0003      	movs	r3, r0
 8004176:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004178:	e009      	b.n	800418e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417a:	f7fe fbe3 	bl	8002944 <HAL_GetTick>
 800417e:	0002      	movs	r2, r0
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	4a8a      	ldr	r2, [pc, #552]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e109      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b87      	ldr	r3, [pc, #540]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	4013      	ands	r3, r2
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d1ee      	bne.n	800417a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2202      	movs	r2, #2
 80041a2:	4013      	ands	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a6:	4b83      	ldr	r3, [pc, #524]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	22f0      	movs	r2, #240	; 0xf0
 80041ac:	4393      	bics	r3, r2
 80041ae:	0019      	movs	r1, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 80041b6:	430a      	orrs	r2, r1
 80041b8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2201      	movs	r2, #1
 80041c0:	4013      	ands	r3, r2
 80041c2:	d100      	bne.n	80041c6 <HAL_RCC_ClockConfig+0x8a>
 80041c4:	e089      	b.n	80042da <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ce:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	029b      	lsls	r3, r3, #10
 80041d6:	4013      	ands	r3, r2
 80041d8:	d120      	bne.n	800421c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e0e1      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d107      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e6:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	049b      	lsls	r3, r3, #18
 80041ee:	4013      	ands	r3, r2
 80041f0:	d114      	bne.n	800421c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0d5      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d106      	bne.n	800420c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041fe:	4b6d      	ldr	r3, [pc, #436]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2204      	movs	r2, #4
 8004204:	4013      	ands	r3, r2
 8004206:	d109      	bne.n	800421c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0ca      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800420c:	4b69      	ldr	r3, [pc, #420]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4013      	ands	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0c2      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421c:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2203      	movs	r2, #3
 8004222:	4393      	bics	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4b62      	ldr	r3, [pc, #392]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004230:	f7fe fb88 	bl	8002944 <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d111      	bne.n	8004264 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004240:	e009      	b.n	8004256 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004242:	f7fe fb7f 	bl	8002944 <HAL_GetTick>
 8004246:	0002      	movs	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0a5      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004256:	4b57      	ldr	r3, [pc, #348]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	220c      	movs	r2, #12
 800425c:	4013      	ands	r3, r2
 800425e:	2b08      	cmp	r3, #8
 8004260:	d1ef      	bne.n	8004242 <HAL_RCC_ClockConfig+0x106>
 8004262:	e03a      	b.n	80042da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d111      	bne.n	8004290 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800426c:	e009      	b.n	8004282 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426e:	f7fe fb69 	bl	8002944 <HAL_GetTick>
 8004272:	0002      	movs	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	4a4d      	ldr	r2, [pc, #308]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e08f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004282:	4b4c      	ldr	r3, [pc, #304]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	220c      	movs	r2, #12
 8004288:	4013      	ands	r3, r2
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d1ef      	bne.n	800426e <HAL_RCC_ClockConfig+0x132>
 800428e:	e024      	b.n	80042da <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d11b      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004298:	e009      	b.n	80042ae <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fe fb53 	bl	8002944 <HAL_GetTick>
 800429e:	0002      	movs	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	4a42      	ldr	r2, [pc, #264]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e079      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ae:	4b41      	ldr	r3, [pc, #260]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	220c      	movs	r2, #12
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d1ef      	bne.n	800429a <HAL_RCC_ClockConfig+0x15e>
 80042ba:	e00e      	b.n	80042da <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe fb42 	bl	8002944 <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e068      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042d0:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	220c      	movs	r2, #12
 80042d6:	4013      	ands	r3, r2
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042da:	4b34      	ldr	r3, [pc, #208]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2201      	movs	r2, #1
 80042e0:	4013      	ands	r3, r2
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d21e      	bcs.n	8004326 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	4393      	bics	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042fa:	f7fe fb23 	bl	8002944 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	e009      	b.n	8004318 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fe fb1e 	bl	8002944 <HAL_GetTick>
 8004308:	0002      	movs	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <HAL_RCC_ClockConfig+0x274>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e044      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004318:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCC_ClockConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	4013      	ands	r3, r2
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d1ee      	bne.n	8004304 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2204      	movs	r2, #4
 800432c:	4013      	ands	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <HAL_RCC_ClockConfig+0x27c>)
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004340:	430a      	orrs	r2, r1
 8004342:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2208      	movs	r2, #8
 800434a:	4013      	ands	r3, r2
 800434c:	d00a      	beq.n	8004364 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800434e:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4a1a      	ldr	r2, [pc, #104]	; (80043bc <HAL_RCC_ClockConfig+0x280>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	00da      	lsls	r2, r3, #3
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004364:	f000 f832 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8004368:	0001      	movs	r1, r0
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x278>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	220f      	movs	r2, #15
 8004372:	4013      	ands	r3, r2
 8004374:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <HAL_RCC_ClockConfig+0x284>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	000a      	movs	r2, r1
 800437a:	40da      	lsrs	r2, r3
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCC_ClockConfig+0x288>)
 800437e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_ClockConfig+0x28c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	250b      	movs	r5, #11
 8004386:	197c      	adds	r4, r7, r5
 8004388:	0018      	movs	r0, r3
 800438a:	f7fe fa95 	bl	80028b8 <HAL_InitTick>
 800438e:	0003      	movs	r3, r0
 8004390:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004392:	197b      	adds	r3, r7, r5
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800439a:	197b      	adds	r3, r7, r5
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	e000      	b.n	80043a2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b004      	add	sp, #16
 80043a8:	bdb0      	pop	{r4, r5, r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	40022000 	.word	0x40022000
 80043b0:	00001388 	.word	0x00001388
 80043b4:	40021000 	.word	0x40021000
 80043b8:	fffff8ff 	.word	0xfffff8ff
 80043bc:	ffffc7ff 	.word	0xffffc7ff
 80043c0:	08008e58 	.word	0x08008e58
 80043c4:	20000124 	.word	0x20000124
 80043c8:	20000128 	.word	0x20000128

080043cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043cc:	b5b0      	push	{r4, r5, r7, lr}
 80043ce:	b08e      	sub	sp, #56	; 0x38
 80043d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80043d2:	4b4c      	ldr	r3, [pc, #304]	; (8004504 <HAL_RCC_GetSysClockFreq+0x138>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043da:	230c      	movs	r3, #12
 80043dc:	4013      	ands	r3, r2
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d014      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x40>
 80043e2:	d900      	bls.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1a>
 80043e4:	e07b      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x112>
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d002      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x24>
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d00b      	beq.n	8004406 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ee:	e076      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043f0:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCC_GetSysClockFreq+0x138>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2210      	movs	r2, #16
 80043f6:	4013      	ands	r3, r2
 80043f8:	d002      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCC_GetSysClockFreq+0x13c>)
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80043fe:	e07c      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004400:	4b42      	ldr	r3, [pc, #264]	; (800450c <HAL_RCC_GetSysClockFreq+0x140>)
 8004402:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004404:	e079      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004406:	4b42      	ldr	r3, [pc, #264]	; (8004510 <HAL_RCC_GetSysClockFreq+0x144>)
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800440a:	e076      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440e:	0c9a      	lsrs	r2, r3, #18
 8004410:	230f      	movs	r3, #15
 8004412:	401a      	ands	r2, r3
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_RCC_GetSysClockFreq+0x148>)
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	0d9a      	lsrs	r2, r3, #22
 800441e:	2303      	movs	r3, #3
 8004420:	4013      	ands	r3, r2
 8004422:	3301      	adds	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCC_GetSysClockFreq+0x138>)
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	025b      	lsls	r3, r3, #9
 800442e:	4013      	ands	r3, r2
 8004430:	d01a      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	4a35      	ldr	r2, [pc, #212]	; (8004510 <HAL_RCC_GetSysClockFreq+0x144>)
 800443c:	2300      	movs	r3, #0
 800443e:	69b8      	ldr	r0, [r7, #24]
 8004440:	69f9      	ldr	r1, [r7, #28]
 8004442:	f7fc f809 	bl	8000458 <__aeabi_lmul>
 8004446:	0002      	movs	r2, r0
 8004448:	000b      	movs	r3, r1
 800444a:	0010      	movs	r0, r2
 800444c:	0019      	movs	r1, r3
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f7fb ffdd 	bl	8000418 <__aeabi_uldivmod>
 800445e:	0002      	movs	r2, r0
 8004460:	000b      	movs	r3, r1
 8004462:	0013      	movs	r3, r2
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	e037      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004468:	4b26      	ldr	r3, [pc, #152]	; (8004504 <HAL_RCC_GetSysClockFreq+0x138>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2210      	movs	r2, #16
 800446e:	4013      	ands	r3, r2
 8004470:	d01a      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_RCC_GetSysClockFreq+0x13c>)
 800447c:	2300      	movs	r3, #0
 800447e:	68b8      	ldr	r0, [r7, #8]
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	f7fb ffe9 	bl	8000458 <__aeabi_lmul>
 8004486:	0002      	movs	r2, r0
 8004488:	000b      	movs	r3, r1
 800448a:	0010      	movs	r0, r2
 800448c:	0019      	movs	r1, r3
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f7fb ffbd 	bl	8000418 <__aeabi_uldivmod>
 800449e:	0002      	movs	r2, r0
 80044a0:	000b      	movs	r3, r1
 80044a2:	0013      	movs	r3, r2
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	e017      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	0018      	movs	r0, r3
 80044ac:	2300      	movs	r3, #0
 80044ae:	0019      	movs	r1, r3
 80044b0:	4a16      	ldr	r2, [pc, #88]	; (800450c <HAL_RCC_GetSysClockFreq+0x140>)
 80044b2:	2300      	movs	r3, #0
 80044b4:	f7fb ffd0 	bl	8000458 <__aeabi_lmul>
 80044b8:	0002      	movs	r2, r0
 80044ba:	000b      	movs	r3, r1
 80044bc:	0010      	movs	r0, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	001c      	movs	r4, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	001d      	movs	r5, r3
 80044c8:	0022      	movs	r2, r4
 80044ca:	002b      	movs	r3, r5
 80044cc:	f7fb ffa4 	bl	8000418 <__aeabi_uldivmod>
 80044d0:	0002      	movs	r2, r0
 80044d2:	000b      	movs	r3, r1
 80044d4:	0013      	movs	r3, r2
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044dc:	e00d      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_GetSysClockFreq+0x138>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	0b5b      	lsrs	r3, r3, #13
 80044e4:	2207      	movs	r2, #7
 80044e6:	4013      	ands	r3, r2
 80044e8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	3301      	adds	r3, #1
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	0212      	lsls	r2, r2, #8
 80044f2:	409a      	lsls	r2, r3
 80044f4:	0013      	movs	r3, r2
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044f8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b00e      	add	sp, #56	; 0x38
 8004502:	bdb0      	pop	{r4, r5, r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	003d0900 	.word	0x003d0900
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200
 8004514:	08008e70 	.word	0x08008e70

08004518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <HAL_RCC_GetHCLKFreq+0x10>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	0018      	movs	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	20000124 	.word	0x20000124

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004530:	f7ff fff2 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004534:	0001      	movs	r1, r0
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	2207      	movs	r2, #7
 800453e:	4013      	ands	r3, r2
 8004540:	4a04      	ldr	r2, [pc, #16]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004542:	5cd3      	ldrb	r3, [r2, r3]
 8004544:	40d9      	lsrs	r1, r3
 8004546:	000b      	movs	r3, r1
}
 8004548:	0018      	movs	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	40021000 	.word	0x40021000
 8004554:	08008e68 	.word	0x08008e68

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800455c:	f7ff ffdc 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004560:	0001      	movs	r1, r0
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	0adb      	lsrs	r3, r3, #11
 8004568:	2207      	movs	r2, #7
 800456a:	4013      	ands	r3, r2
 800456c:	4a04      	ldr	r2, [pc, #16]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	40d9      	lsrs	r1, r3
 8004572:	000b      	movs	r3, r1
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	40021000 	.word	0x40021000
 8004580:	08008e68 	.word	0x08008e68

08004584 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800458c:	2317      	movs	r3, #23
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2220      	movs	r2, #32
 800459a:	4013      	ands	r3, r2
 800459c:	d106      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	2380      	movs	r3, #128	; 0x80
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	4013      	ands	r3, r2
 80045a8:	d100      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x28>
 80045aa:	e0d9      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ac:	4ba4      	ldr	r3, [pc, #656]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	055b      	lsls	r3, r3, #21
 80045b4:	4013      	ands	r3, r2
 80045b6:	d10a      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4ba1      	ldr	r3, [pc, #644]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045bc:	4ba0      	ldr	r3, [pc, #640]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045be:	2180      	movs	r1, #128	; 0x80
 80045c0:	0549      	lsls	r1, r1, #21
 80045c2:	430a      	orrs	r2, r1
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80045c6:	2317      	movs	r3, #23
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ce:	4b9d      	ldr	r3, [pc, #628]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4013      	ands	r3, r2
 80045d8:	d11a      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045da:	4b9a      	ldr	r3, [pc, #616]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b99      	ldr	r3, [pc, #612]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	0049      	lsls	r1, r1, #1
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e8:	f7fe f9ac 	bl	8002944 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fe f9a7 	bl	8002944 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	; 0x64
 80045fe:	d901      	bls.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e118      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b8f      	ldr	r3, [pc, #572]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4013      	ands	r3, r2
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004610:	4b8b      	ldr	r3, [pc, #556]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	23c0      	movs	r3, #192	; 0xc0
 8004616:	039b      	lsls	r3, r3, #14
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	23c0      	movs	r3, #192	; 0xc0
 8004622:	039b      	lsls	r3, r3, #14
 8004624:	4013      	ands	r3, r2
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d107      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	23c0      	movs	r3, #192	; 0xc0
 8004632:	039b      	lsls	r3, r3, #14
 8004634:	4013      	ands	r3, r2
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	429a      	cmp	r2, r3
 800463a:	d013      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	23c0      	movs	r3, #192	; 0xc0
 8004642:	029b      	lsls	r3, r3, #10
 8004644:	401a      	ands	r2, r3
 8004646:	23c0      	movs	r3, #192	; 0xc0
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	429a      	cmp	r2, r3
 800464c:	d10a      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800464e:	4b7c      	ldr	r3, [pc, #496]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	029b      	lsls	r3, r3, #10
 8004656:	401a      	ands	r2, r3
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	429a      	cmp	r2, r3
 800465e:	d101      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0e8      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004664:	4b76      	ldr	r3, [pc, #472]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004668:	23c0      	movs	r3, #192	; 0xc0
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d049      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	23c0      	movs	r3, #192	; 0xc0
 800467c:	029b      	lsls	r3, r3, #10
 800467e:	4013      	ands	r3, r2
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	429a      	cmp	r2, r3
 8004684:	d004      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2220      	movs	r2, #32
 800468c:	4013      	ands	r3, r2
 800468e:	d10d      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	23c0      	movs	r3, #192	; 0xc0
 8004696:	029b      	lsls	r3, r3, #10
 8004698:	4013      	ands	r3, r2
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	429a      	cmp	r2, r3
 800469e:	d034      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	d02e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046ac:	4b64      	ldr	r3, [pc, #400]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	4a65      	ldr	r2, [pc, #404]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b6:	4b62      	ldr	r3, [pc, #392]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	0309      	lsls	r1, r1, #12
 80046c0:	430a      	orrs	r2, r1
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c4:	4b5e      	ldr	r3, [pc, #376]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ca:	4960      	ldr	r1, [pc, #384]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80046d0:	4b5b      	ldr	r3, [pc, #364]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d014      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe f930 	bl	8002944 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e8:	e009      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fe f92b 	bl	8002944 <HAL_GetTick>
 80046ee:	0002      	movs	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	4a56      	ldr	r2, [pc, #344]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e09b      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046fe:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4013      	ands	r3, r2
 8004708:	d0ef      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	029b      	lsls	r3, r3, #10
 8004712:	401a      	ands	r2, r3
 8004714:	23c0      	movs	r3, #192	; 0xc0
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	429a      	cmp	r2, r3
 800471a:	d10c      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800471c:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a4c      	ldr	r2, [pc, #304]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004722:	4013      	ands	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	23c0      	movs	r3, #192	; 0xc0
 800472c:	039b      	lsls	r3, r3, #14
 800472e:	401a      	ands	r2, r3
 8004730:	4b43      	ldr	r3, [pc, #268]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	4b42      	ldr	r3, [pc, #264]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004738:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	23c0      	movs	r3, #192	; 0xc0
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	401a      	ands	r2, r3
 8004744:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004746:	430a      	orrs	r2, r1
 8004748:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800474a:	2317      	movs	r3, #23
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004758:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800475a:	493f      	ldr	r1, [pc, #252]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800475c:	400a      	ands	r2, r1
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2201      	movs	r2, #1
 8004766:	4013      	ands	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476a:	4b35      	ldr	r3, [pc, #212]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800476c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476e:	2203      	movs	r2, #3
 8004770:	4393      	bics	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800477a:	430a      	orrs	r2, r1
 800477c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	4013      	ands	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478c:	220c      	movs	r2, #12
 800478e:	4393      	bics	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	4b2a      	ldr	r3, [pc, #168]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004798:	430a      	orrs	r2, r1
 800479a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2204      	movs	r2, #4
 80047a2:	4013      	ands	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	4a2c      	ldr	r2, [pc, #176]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047b6:	430a      	orrs	r2, r1
 80047b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2208      	movs	r2, #8
 80047c0:	4013      	ands	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047c4:	4b1e      	ldr	r3, [pc, #120]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c8:	4a25      	ldr	r2, [pc, #148]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047d4:	430a      	orrs	r2, r1
 80047d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4013      	ands	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e8:	4a17      	ldr	r2, [pc, #92]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	4b13      	ldr	r3, [pc, #76]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047f4:	430a      	orrs	r2, r1
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2240      	movs	r2, #64	; 0x40
 80047fe:	4013      	ands	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	4a17      	ldr	r2, [pc, #92]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004808:	4013      	ands	r3, r2
 800480a:	0019      	movs	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004812:	430a      	orrs	r2, r1
 8004814:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	4013      	ands	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004824:	4a10      	ldr	r2, [pc, #64]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004826:	4013      	ands	r3, r2
 8004828:	0019      	movs	r1, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	4b04      	ldr	r3, [pc, #16]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004830:	430a      	orrs	r2, r1
 8004832:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	0018      	movs	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	b006      	add	sp, #24
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	40021000 	.word	0x40021000
 8004844:	40007000 	.word	0x40007000
 8004848:	fffcffff 	.word	0xfffcffff
 800484c:	fff7ffff 	.word	0xfff7ffff
 8004850:	00001388 	.word	0x00001388
 8004854:	ffcfffff 	.word	0xffcfffff
 8004858:	efffffff 	.word	0xefffffff
 800485c:	fffff3ff 	.word	0xfffff3ff
 8004860:	ffffcfff 	.word	0xffffcfff
 8004864:	fbffffff 	.word	0xfbffffff
 8004868:	fff3ffff 	.word	0xfff3ffff

0800486c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e032      	b.n	80048e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2239      	movs	r2, #57	; 0x39
 8004882:	5c9b      	ldrb	r3, [r3, r2]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d107      	bne.n	800489a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2238      	movs	r2, #56	; 0x38
 800488e:	2100      	movs	r1, #0
 8004890:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f7fd ff13 	bl	80026c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2239      	movs	r2, #57	; 0x39
 800489e:	2102      	movs	r1, #2
 80048a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	0019      	movs	r1, r3
 80048ac:	0010      	movs	r0, r2
 80048ae:	f000 fae3 	bl	8004e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	223e      	movs	r2, #62	; 0x3e
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	223a      	movs	r2, #58	; 0x3a
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	223b      	movs	r2, #59	; 0x3b
 80048c6:	2101      	movs	r1, #1
 80048c8:	5499      	strb	r1, [r3, r2]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	223c      	movs	r2, #60	; 0x3c
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	223d      	movs	r2, #61	; 0x3d
 80048d6:	2101      	movs	r1, #1
 80048d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2239      	movs	r2, #57	; 0x39
 80048de:	2101      	movs	r1, #1
 80048e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2239      	movs	r2, #57	; 0x39
 80048f8:	5c9b      	ldrb	r3, [r3, r2]
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d001      	beq.n	8004904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e03b      	b.n	800497c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2239      	movs	r2, #57	; 0x39
 8004908:	2102      	movs	r1, #2
 800490a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	430a      	orrs	r2, r1
 800491a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	05db      	lsls	r3, r3, #23
 8004924:	429a      	cmp	r2, r3
 8004926:	d00e      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x5a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <HAL_TIM_Base_Start_IT+0x98>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x5a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a14      	ldr	r2, [pc, #80]	; (8004988 <HAL_TIM_Base_Start_IT+0x9c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x5a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <HAL_TIM_Base_Start_IT+0xa0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2207      	movs	r2, #7
 800494e:	4013      	ands	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b06      	cmp	r3, #6
 8004956:	d010      	beq.n	800497a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004968:	e007      	b.n	800497a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2101      	movs	r1, #1
 8004976:	430a      	orrs	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b004      	add	sp, #16
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40000400 	.word	0x40000400
 8004988:	40010800 	.word	0x40010800
 800498c:	40011400 	.word	0x40011400

08004990 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	438a      	bics	r2, r1
 80049a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <HAL_TIM_Base_Stop_IT+0x48>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_Base_Stop_IT+0x34>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2101      	movs	r1, #1
 80049c0:	438a      	bics	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2239      	movs	r2, #57	; 0x39
 80049c8:	2101      	movs	r1, #1
 80049ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	00001111 	.word	0x00001111

080049dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e088      	b.n	8004b02 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2239      	movs	r2, #57	; 0x39
 80049f4:	5c9b      	ldrb	r3, [r3, r2]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2238      	movs	r2, #56	; 0x38
 8004a00:	2100      	movs	r1, #0
 8004a02:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7fd fe10 	bl	800262c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2239      	movs	r2, #57	; 0x39
 8004a10:	2102      	movs	r1, #2
 8004a12:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	493b      	ldr	r1, [pc, #236]	; (8004b0c <HAL_TIM_Encoder_Init+0x130>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	0010      	movs	r0, r2
 8004a30:	f000 fa22 	bl	8004e78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <HAL_TIM_Encoder_Init+0x134>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <HAL_TIM_Encoder_Init+0x138>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4a27      	ldr	r2, [pc, #156]	; (8004b18 <HAL_TIM_Encoder_Init+0x13c>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	011a      	lsls	r2, r3, #4
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2222      	movs	r2, #34	; 0x22
 8004aaa:	4393      	bics	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2288      	movs	r2, #136	; 0x88
 8004ab2:	4393      	bics	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	223e      	movs	r2, #62	; 0x3e
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223a      	movs	r2, #58	; 0x3a
 8004aec:	2101      	movs	r1, #1
 8004aee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	223b      	movs	r2, #59	; 0x3b
 8004af4:	2101      	movs	r1, #1
 8004af6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2239      	movs	r2, #57	; 0x39
 8004afc:	2101      	movs	r1, #1
 8004afe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b006      	add	sp, #24
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	ffffbff8 	.word	0xffffbff8
 8004b10:	fffffcfc 	.word	0xfffffcfc
 8004b14:	fffff3f3 	.word	0xfffff3f3
 8004b18:	ffff0f0f 	.word	0xffff0f0f

08004b1c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b26:	200f      	movs	r0, #15
 8004b28:	183b      	adds	r3, r7, r0
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	213a      	movs	r1, #58	; 0x3a
 8004b2e:	5c52      	ldrb	r2, [r2, r1]
 8004b30:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b32:	230e      	movs	r3, #14
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	213b      	movs	r1, #59	; 0x3b
 8004b3a:	5c52      	ldrb	r2, [r2, r1]
 8004b3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <HAL_TIM_Encoder_Start_IT+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b44:	183b      	adds	r3, r7, r0
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d001      	beq.n	8004b50 <HAL_TIM_Encoder_Start_IT+0x34>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e076      	b.n	8004c3e <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	223a      	movs	r2, #58	; 0x3a
 8004b54:	2102      	movs	r1, #2
 8004b56:	5499      	strb	r1, [r3, r2]
 8004b58:	e022      	b.n	8004ba0 <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d10b      	bne.n	8004b78 <HAL_TIM_Encoder_Start_IT+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b60:	230e      	movs	r3, #14
 8004b62:	18fb      	adds	r3, r7, r3
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_Encoder_Start_IT+0x52>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e067      	b.n	8004c3e <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223b      	movs	r2, #59	; 0x3b
 8004b72:	2102      	movs	r1, #2
 8004b74:	5499      	strb	r1, [r3, r2]
 8004b76:	e013      	b.n	8004ba0 <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b78:	230f      	movs	r3, #15
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d104      	bne.n	8004b8c <HAL_TIM_Encoder_Start_IT+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b82:	230e      	movs	r3, #14
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d001      	beq.n	8004b90 <HAL_TIM_Encoder_Start_IT+0x74>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e056      	b.n	8004c3e <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	223a      	movs	r2, #58	; 0x3a
 8004b94:	2102      	movs	r1, #2
 8004b96:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	223b      	movs	r2, #59	; 0x3b
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_Encoder_Start_IT+0x92>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d010      	beq.n	8004bce <HAL_TIM_Encoder_Start_IT+0xb2>
 8004bac:	e01f      	b.n	8004bee <HAL_TIM_Encoder_Start_IT+0xd2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 f9bc 	bl	8004f34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	60da      	str	r2, [r3, #12]
      break;
 8004bcc:	e02e      	b.n	8004c2c <HAL_TIM_Encoder_Start_IT+0x110>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f9ac 	bl	8004f34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2104      	movs	r1, #4
 8004be8:	430a      	orrs	r2, r1
 8004bea:	60da      	str	r2, [r3, #12]
      break;
 8004bec:	e01e      	b.n	8004c2c <HAL_TIM_Encoder_Start_IT+0x110>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 f99c 	bl	8004f34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	2104      	movs	r1, #4
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 f995 	bl	8004f34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2102      	movs	r1, #2
 8004c16:	430a      	orrs	r2, r1
 8004c18:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2104      	movs	r1, #4
 8004c26:	430a      	orrs	r2, r1
 8004c28:	60da      	str	r2, [r3, #12]
      break;
 8004c2a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2101      	movs	r1, #1
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b004      	add	sp, #16
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d124      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2202      	movs	r2, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d11d      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	4252      	negs	r2, r2
 8004c72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	2203      	movs	r2, #3
 8004c82:	4013      	ands	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fb ff13 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8004c8e:	e007      	b.n	8004ca0 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 f8bf 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f8c3 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2204      	movs	r2, #4
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d125      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d11e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2205      	movs	r2, #5
 8004cc8:	4252      	negs	r2, r2
 8004cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	23c0      	movs	r3, #192	; 0xc0
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d004      	beq.n	8004cea <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f7fb fee6 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e007      	b.n	8004cfa <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 f892 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 f896 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2208      	movs	r2, #8
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d124      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2208      	movs	r2, #8
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d11d      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2209      	movs	r2, #9
 8004d22:	4252      	negs	r2, r2
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	2203      	movs	r2, #3
 8004d34:	4013      	ands	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7fb feba 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e007      	b.n	8004d52 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f000 f866 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 f86a 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2210      	movs	r2, #16
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d125      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d11e      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2211      	movs	r2, #17
 8004d7a:	4252      	negs	r2, r2
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2208      	movs	r2, #8
 8004d82:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	23c0      	movs	r3, #192	; 0xc0
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fb fe8d 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8004d9a:	e007      	b.n	8004dac <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 f839 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 f83d 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10f      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d108      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	4252      	negs	r2, r2
 8004dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7fb feb8 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2240      	movs	r2, #64	; 0x40
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b40      	cmp	r3, #64	; 0x40
 8004dec:	d10f      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d108      	bne.n	8004e0e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2241      	movs	r2, #65	; 0x41
 8004e02:	4252      	negs	r2, r2
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f000 f814 	bl	8004e36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b002      	add	sp, #8
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b002      	add	sp, #8
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b002      	add	sp, #8
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  return htim->State;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2239      	movs	r2, #57	; 0x39
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	b2db      	uxtb	r3, r3
}
 8004e56:	0018      	movs	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  return htim->State;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2239      	movs	r2, #57	; 0x39
 8004e6a:	5c9b      	ldrb	r3, [r3, r2]
 8004e6c:	b2db      	uxtb	r3, r3
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b002      	add	sp, #8
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	05db      	lsls	r3, r3, #23
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0x32>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <TIM_Base_SetConfig+0xac>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0x32>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <TIM_Base_SetConfig+0xb0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0x32>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <TIM_Base_SetConfig+0xb4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2270      	movs	r2, #112	; 0x70
 8004eae:	4393      	bics	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	05db      	lsls	r3, r3, #23
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d00b      	beq.n	8004ede <TIM_Base_SetConfig+0x66>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <TIM_Base_SetConfig+0xac>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d007      	beq.n	8004ede <TIM_Base_SetConfig+0x66>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <TIM_Base_SetConfig+0xb0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d003      	beq.n	8004ede <TIM_Base_SetConfig+0x66>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a14      	ldr	r2, [pc, #80]	; (8004f2c <TIM_Base_SetConfig+0xb4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <TIM_Base_SetConfig+0xb8>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2280      	movs	r2, #128	; 0x80
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	615a      	str	r2, [r3, #20]
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b004      	add	sp, #16
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40010800 	.word	0x40010800
 8004f2c:	40011400 	.word	0x40011400
 8004f30:	fffffcff 	.word	0xfffffcff

08004f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	221f      	movs	r2, #31
 8004f44:	4013      	ands	r3, r2
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	0013      	movs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	43d2      	mvns	r2, r2
 8004f56:	401a      	ands	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1a      	ldr	r2, [r3, #32]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	211f      	movs	r1, #31
 8004f64:	400b      	ands	r3, r1
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4099      	lsls	r1, r3
 8004f6a:	000b      	movs	r3, r1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b006      	add	sp, #24
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2238      	movs	r2, #56	; 0x38
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e047      	b.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2238      	movs	r2, #56	; 0x38
 8004f98:	2101      	movs	r1, #1
 8004f9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2239      	movs	r2, #57	; 0x39
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2270      	movs	r2, #112	; 0x70
 8004fb8:	4393      	bics	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	05db      	lsls	r3, r3, #23
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a11      	ldr	r2, [pc, #68]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d10c      	bne.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2239      	movs	r2, #57	; 0x39
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2238      	movs	r2, #56	; 0x38
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40000400 	.word	0x40000400
 8005030:	40010800 	.word	0x40010800
 8005034:	40011400 	.word	0x40011400

08005038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e044      	b.n	80050d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504e:	2b00      	cmp	r3, #0
 8005050:	d107      	bne.n	8005062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2274      	movs	r2, #116	; 0x74
 8005056:	2100      	movs	r1, #0
 8005058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	0018      	movs	r0, r3
 800505e:	f7fd fb95 	bl	800278c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2224      	movs	r2, #36	; 0x24
 8005066:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2101      	movs	r1, #1
 8005074:	438a      	bics	r2, r1
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fc36 	bl	80058ec <UART_SetConfig>
 8005080:	0003      	movs	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e024      	b.n	80050d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 fec9 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	490d      	ldr	r1, [pc, #52]	; (80050dc <HAL_UART_Init+0xa4>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	212a      	movs	r1, #42	; 0x2a
 80050b6:	438a      	bics	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f000 ff61 	bl	8005f94 <UART_CheckIdleState>
 80050d2:	0003      	movs	r3, r0
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	ffffb7ff 	.word	0xffffb7ff

080050e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	1dbb      	adds	r3, r7, #6
 80050ee:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d000      	beq.n	80050fa <HAL_UART_Transmit+0x1a>
 80050f8:	e095      	b.n	8005226 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_UART_Transmit+0x28>
 8005100:	1dbb      	adds	r3, r7, #6
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e08d      	b.n	8005228 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	015b      	lsls	r3, r3, #5
 8005114:	429a      	cmp	r2, r3
 8005116:	d109      	bne.n	800512c <HAL_UART_Transmit+0x4c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2201      	movs	r2, #1
 8005124:	4013      	ands	r3, r2
 8005126:	d001      	beq.n	800512c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e07d      	b.n	8005228 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2274      	movs	r2, #116	; 0x74
 8005130:	5c9b      	ldrb	r3, [r3, r2]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_UART_Transmit+0x5a>
 8005136:	2302      	movs	r3, #2
 8005138:	e076      	b.n	8005228 <HAL_UART_Transmit+0x148>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2274      	movs	r2, #116	; 0x74
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2280      	movs	r2, #128	; 0x80
 8005146:	2100      	movs	r1, #0
 8005148:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2221      	movs	r2, #33	; 0x21
 800514e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005150:	f7fd fbf8 	bl	8002944 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1dba      	adds	r2, r7, #6
 800515c:	2150      	movs	r1, #80	; 0x50
 800515e:	8812      	ldrh	r2, [r2, #0]
 8005160:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1dba      	adds	r2, r7, #6
 8005166:	2152      	movs	r1, #82	; 0x52
 8005168:	8812      	ldrh	r2, [r2, #0]
 800516a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	015b      	lsls	r3, r3, #5
 8005174:	429a      	cmp	r2, r3
 8005176:	d108      	bne.n	800518a <HAL_UART_Transmit+0xaa>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e003      	b.n	8005192 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2274      	movs	r2, #116	; 0x74
 8005196:	2100      	movs	r1, #0
 8005198:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800519a:	e02c      	b.n	80051f6 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	0013      	movs	r3, r2
 80051a6:	2200      	movs	r2, #0
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	f000 ff3b 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e038      	b.n	8005228 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	001a      	movs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	05d2      	lsls	r2, r2, #23
 80051c8:	0dd2      	lsrs	r2, r2, #23
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3302      	adds	r3, #2
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	e007      	b.n	80051e4 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2252      	movs	r2, #82	; 0x52
 80051e8:	5a9b      	ldrh	r3, [r3, r2]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b299      	uxth	r1, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2252      	movs	r2, #82	; 0x52
 80051f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2252      	movs	r2, #82	; 0x52
 80051fa:	5a9b      	ldrh	r3, [r3, r2]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1cc      	bne.n	800519c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	0013      	movs	r3, r2
 800520c:	2200      	movs	r2, #0
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	f000 ff08 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d001      	beq.n	800521c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e005      	b.n	8005228 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	e000      	b.n	8005228 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005226:	2302      	movs	r3, #2
  }
}
 8005228:	0018      	movs	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	b008      	add	sp, #32
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	1dbb      	adds	r3, r7, #6
 800523c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005242:	2b20      	cmp	r3, #32
 8005244:	d155      	bne.n	80052f2 <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_UART_Receive_IT+0x24>
 800524c:	1dbb      	adds	r3, r7, #6
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e04d      	b.n	80052f4 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	015b      	lsls	r3, r3, #5
 8005260:	429a      	cmp	r2, r3
 8005262:	d109      	bne.n	8005278 <HAL_UART_Receive_IT+0x48>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2201      	movs	r2, #1
 8005270:	4013      	ands	r3, r2
 8005272:	d001      	beq.n	8005278 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e03d      	b.n	80052f4 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2274      	movs	r2, #116	; 0x74
 800527c:	5c9b      	ldrb	r3, [r3, r2]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_UART_Receive_IT+0x56>
 8005282:	2302      	movs	r3, #2
 8005284:	e036      	b.n	80052f4 <HAL_UART_Receive_IT+0xc4>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2274      	movs	r2, #116	; 0x74
 800528a:	2101      	movs	r1, #1
 800528c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_UART_Receive_IT+0xcc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d020      	beq.n	80052e0 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	4013      	ands	r3, r2
 80052aa:	d019      	beq.n	80052e0 <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ac:	f3ef 8310 	mrs	r3, PRIMASK
 80052b0:	613b      	str	r3, [r7, #16]
  return(result);
 80052b2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	2301      	movs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f383 8810 	msr	PRIMASK, r3
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	04c9      	lsls	r1, r1, #19
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f383 8810 	msr	PRIMASK, r3
}
 80052de:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052e0:	1dbb      	adds	r3, r7, #6
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 ff5f 	bl	80061ac <UART_Start_Receive_IT>
 80052ee:	0003      	movs	r3, r0
 80052f0:	e000      	b.n	80052f4 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80052f2:	2302      	movs	r3, #2
  }
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b008      	add	sp, #32
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40004800 	.word	0x40004800

08005300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b0ab      	sub	sp, #172	; 0xac
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	22a4      	movs	r2, #164	; 0xa4
 8005310:	18b9      	adds	r1, r7, r2
 8005312:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	20a0      	movs	r0, #160	; 0xa0
 800531c:	1839      	adds	r1, r7, r0
 800531e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	219c      	movs	r1, #156	; 0x9c
 8005328:	1879      	adds	r1, r7, r1
 800532a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800532c:	0011      	movs	r1, r2
 800532e:	18bb      	adds	r3, r7, r2
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a99      	ldr	r2, [pc, #612]	; (8005598 <HAL_UART_IRQHandler+0x298>)
 8005334:	4013      	ands	r3, r2
 8005336:	2298      	movs	r2, #152	; 0x98
 8005338:	18bc      	adds	r4, r7, r2
 800533a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800533c:	18bb      	adds	r3, r7, r2
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d114      	bne.n	800536e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005344:	187b      	adds	r3, r7, r1
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2220      	movs	r2, #32
 800534a:	4013      	ands	r3, r2
 800534c:	d00f      	beq.n	800536e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800534e:	183b      	adds	r3, r7, r0
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2220      	movs	r2, #32
 8005354:	4013      	ands	r3, r2
 8005356:	d00a      	beq.n	800536e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	2b00      	cmp	r3, #0
 800535e:	d100      	bne.n	8005362 <HAL_UART_IRQHandler+0x62>
 8005360:	e298      	b.n	8005894 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	0010      	movs	r0, r2
 800536a:	4798      	blx	r3
      }
      return;
 800536c:	e292      	b.n	8005894 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800536e:	2398      	movs	r3, #152	; 0x98
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d100      	bne.n	800537a <HAL_UART_IRQHandler+0x7a>
 8005378:	e114      	b.n	80055a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800537a:	239c      	movs	r3, #156	; 0x9c
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	4013      	ands	r3, r2
 8005384:	d106      	bne.n	8005394 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005386:	23a0      	movs	r3, #160	; 0xa0
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_UART_IRQHandler+0x29c>)
 800538e:	4013      	ands	r3, r2
 8005390:	d100      	bne.n	8005394 <HAL_UART_IRQHandler+0x94>
 8005392:	e107      	b.n	80055a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005394:	23a4      	movs	r3, #164	; 0xa4
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	4013      	ands	r3, r2
 800539e:	d012      	beq.n	80053c6 <HAL_UART_IRQHandler+0xc6>
 80053a0:	23a0      	movs	r3, #160	; 0xa0
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2280      	movs	r2, #128	; 0x80
 80053ba:	589b      	ldr	r3, [r3, r2]
 80053bc:	2201      	movs	r2, #1
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053c6:	23a4      	movs	r3, #164	; 0xa4
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2202      	movs	r2, #2
 80053ce:	4013      	ands	r3, r2
 80053d0:	d011      	beq.n	80053f6 <HAL_UART_IRQHandler+0xf6>
 80053d2:	239c      	movs	r3, #156	; 0x9c
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2202      	movs	r2, #2
 80053e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	589b      	ldr	r3, [r3, r2]
 80053ec:	2204      	movs	r2, #4
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053f6:	23a4      	movs	r3, #164	; 0xa4
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2204      	movs	r2, #4
 80053fe:	4013      	ands	r3, r2
 8005400:	d011      	beq.n	8005426 <HAL_UART_IRQHandler+0x126>
 8005402:	239c      	movs	r3, #156	; 0x9c
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2204      	movs	r2, #4
 8005414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	589b      	ldr	r3, [r3, r2]
 800541c:	2202      	movs	r2, #2
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005426:	23a4      	movs	r3, #164	; 0xa4
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2208      	movs	r2, #8
 800542e:	4013      	ands	r3, r2
 8005430:	d017      	beq.n	8005462 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005432:	23a0      	movs	r3, #160	; 0xa0
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2220      	movs	r2, #32
 800543a:	4013      	ands	r3, r2
 800543c:	d105      	bne.n	800544a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800543e:	239c      	movs	r3, #156	; 0x9c
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2201      	movs	r2, #1
 8005446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005448:	d00b      	beq.n	8005462 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2208      	movs	r2, #8
 8005450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2280      	movs	r2, #128	; 0x80
 8005456:	589b      	ldr	r3, [r3, r2]
 8005458:	2208      	movs	r2, #8
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005462:	23a4      	movs	r3, #164	; 0xa4
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4013      	ands	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_UART_IRQHandler+0x198>
 8005470:	23a0      	movs	r3, #160	; 0xa0
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	04db      	lsls	r3, r3, #19
 800547a:	4013      	ands	r3, r2
 800547c:	d00c      	beq.n	8005498 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	0112      	lsls	r2, r2, #4
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2280      	movs	r2, #128	; 0x80
 800548c:	589b      	ldr	r3, [r3, r2]
 800548e:	2220      	movs	r2, #32
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2280      	movs	r2, #128	; 0x80
 800549c:	589b      	ldr	r3, [r3, r2]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d100      	bne.n	80054a4 <HAL_UART_IRQHandler+0x1a4>
 80054a2:	e1f9      	b.n	8005898 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054a4:	23a4      	movs	r3, #164	; 0xa4
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2220      	movs	r2, #32
 80054ac:	4013      	ands	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054b0:	23a0      	movs	r3, #160	; 0xa0
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2220      	movs	r2, #32
 80054b8:	4013      	ands	r3, r2
 80054ba:	d008      	beq.n	80054ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d004      	beq.n	80054ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	0010      	movs	r0, r2
 80054cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	589b      	ldr	r3, [r3, r2]
 80054d4:	2194      	movs	r1, #148	; 0x94
 80054d6:	187a      	adds	r2, r7, r1
 80054d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2240      	movs	r2, #64	; 0x40
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d004      	beq.n	80054f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2228      	movs	r2, #40	; 0x28
 80054ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f0:	d047      	beq.n	8005582 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 ff09 	bl	800630c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	4013      	ands	r3, r2
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	d137      	bne.n	8005578 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005508:	f3ef 8310 	mrs	r3, PRIMASK
 800550c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800550e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005510:	2090      	movs	r0, #144	; 0x90
 8005512:	183a      	adds	r2, r7, r0
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	2301      	movs	r3, #1
 8005518:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2140      	movs	r1, #64	; 0x40
 800552e:	438a      	bics	r2, r1
 8005530:	609a      	str	r2, [r3, #8]
 8005532:	183b      	adds	r3, r7, r0
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	2b00      	cmp	r3, #0
 8005546:	d012      	beq.n	800556e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <HAL_UART_IRQHandler+0x2a0>)
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	0018      	movs	r0, r3
 8005556:	f7fd fb41 	bl	8002bdc <HAL_DMA_Abort_IT>
 800555a:	1e03      	subs	r3, r0, #0
 800555c:	d01a      	beq.n	8005594 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005568:	0018      	movs	r0, r3
 800556a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	e012      	b.n	8005594 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0018      	movs	r0, r3
 8005572:	f000 f9a7 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005576:	e00d      	b.n	8005594 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	0018      	movs	r0, r3
 800557c:	f000 f9a2 	bl	80058c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005580:	e008      	b.n	8005594 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 f99d 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	2100      	movs	r1, #0
 8005590:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005592:	e181      	b.n	8005898 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	46c0      	nop			; (mov r8, r8)
    return;
 8005596:	e17f      	b.n	8005898 <HAL_UART_IRQHandler+0x598>
 8005598:	0000080f 	.word	0x0000080f
 800559c:	04000120 	.word	0x04000120
 80055a0:	080063d1 	.word	0x080063d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d000      	beq.n	80055ae <HAL_UART_IRQHandler+0x2ae>
 80055ac:	e133      	b.n	8005816 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055ae:	23a4      	movs	r3, #164	; 0xa4
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2210      	movs	r2, #16
 80055b6:	4013      	ands	r3, r2
 80055b8:	d100      	bne.n	80055bc <HAL_UART_IRQHandler+0x2bc>
 80055ba:	e12c      	b.n	8005816 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055bc:	23a0      	movs	r3, #160	; 0xa0
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2210      	movs	r2, #16
 80055c4:	4013      	ands	r3, r2
 80055c6:	d100      	bne.n	80055ca <HAL_UART_IRQHandler+0x2ca>
 80055c8:	e125      	b.n	8005816 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2210      	movs	r2, #16
 80055d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	4013      	ands	r3, r2
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d000      	beq.n	80055e2 <HAL_UART_IRQHandler+0x2e2>
 80055e0:	e09d      	b.n	800571e <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	217e      	movs	r1, #126	; 0x7e
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80055f0:	187b      	adds	r3, r7, r1
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d100      	bne.n	80055fa <HAL_UART_IRQHandler+0x2fa>
 80055f8:	e150      	b.n	800589c <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2258      	movs	r2, #88	; 0x58
 80055fe:	5a9b      	ldrh	r3, [r3, r2]
 8005600:	187a      	adds	r2, r7, r1
 8005602:	8812      	ldrh	r2, [r2, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d300      	bcc.n	800560a <HAL_UART_IRQHandler+0x30a>
 8005608:	e148      	b.n	800589c <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	187a      	adds	r2, r7, r1
 800560e:	215a      	movs	r1, #90	; 0x5a
 8005610:	8812      	ldrh	r2, [r2, #0]
 8005612:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2220      	movs	r2, #32
 800561e:	4013      	ands	r3, r2
 8005620:	d16e      	bne.n	8005700 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005622:	f3ef 8310 	mrs	r3, PRIMASK
 8005626:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562a:	67bb      	str	r3, [r7, #120]	; 0x78
 800562c:	2301      	movs	r3, #1
 800562e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	f383 8810 	msr	PRIMASK, r3
}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	499a      	ldr	r1, [pc, #616]	; (80058ac <HAL_UART_IRQHandler+0x5ac>)
 8005644:	400a      	ands	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	677b      	str	r3, [r7, #116]	; 0x74
 800565e:	2301      	movs	r3, #1
 8005660:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2101      	movs	r1, #1
 8005676:	438a      	bics	r2, r1
 8005678:	609a      	str	r2, [r3, #8]
 800567a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800567c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005686:	f3ef 8310 	mrs	r3, PRIMASK
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	673b      	str	r3, [r7, #112]	; 0x70
 8005690:	2301      	movs	r3, #1
 8005692:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2140      	movs	r1, #64	; 0x40
 80056a8:	438a      	bics	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ae:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c4:	f3ef 8310 	mrs	r3, PRIMASK
 80056c8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80056ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056ce:	2301      	movs	r3, #1
 80056d0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056d4:	f383 8810 	msr	PRIMASK, r3
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2110      	movs	r1, #16
 80056e6:	438a      	bics	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	0018      	movs	r0, r3
 80056fc:	f7fd fa2e 	bl	8002b5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2258      	movs	r2, #88	; 0x58
 8005704:	5a9a      	ldrh	r2, [r3, r2]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	215a      	movs	r1, #90	; 0x5a
 800570a:	5a5b      	ldrh	r3, [r3, r1]
 800570c:	b29b      	uxth	r3, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0011      	movs	r1, r2
 8005716:	0018      	movs	r0, r3
 8005718:	f000 f8dc 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800571c:	e0be      	b.n	800589c <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2258      	movs	r2, #88	; 0x58
 8005722:	5a99      	ldrh	r1, [r3, r2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	225a      	movs	r2, #90	; 0x5a
 8005728:	5a9b      	ldrh	r3, [r3, r2]
 800572a:	b29a      	uxth	r2, r3
 800572c:	208e      	movs	r0, #142	; 0x8e
 800572e:	183b      	adds	r3, r7, r0
 8005730:	1a8a      	subs	r2, r1, r2
 8005732:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	225a      	movs	r2, #90	; 0x5a
 8005738:	5a9b      	ldrh	r3, [r3, r2]
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d100      	bne.n	8005742 <HAL_UART_IRQHandler+0x442>
 8005740:	e0ae      	b.n	80058a0 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8005742:	183b      	adds	r3, r7, r0
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d100      	bne.n	800574c <HAL_UART_IRQHandler+0x44c>
 800574a:	e0a9      	b.n	80058a0 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574c:	f3ef 8310 	mrs	r3, PRIMASK
 8005750:	60fb      	str	r3, [r7, #12]
  return(result);
 8005752:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005754:	2488      	movs	r4, #136	; 0x88
 8005756:	193a      	adds	r2, r7, r4
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	2301      	movs	r3, #1
 800575c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			; (mov r8, r8)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	494f      	ldr	r1, [pc, #316]	; (80058b0 <HAL_UART_IRQHandler+0x5b0>)
 8005772:	400a      	ands	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	193b      	adds	r3, r7, r4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f383 8810 	msr	PRIMASK, r3
}
 8005782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005784:	f3ef 8310 	mrs	r3, PRIMASK
 8005788:	61bb      	str	r3, [r7, #24]
  return(result);
 800578a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	2484      	movs	r4, #132	; 0x84
 800578e:	193a      	adds	r2, r7, r4
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	2301      	movs	r3, #1
 8005794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2101      	movs	r1, #1
 80057aa:	438a      	bics	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	193b      	adds	r3, r7, r4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	f383 8810 	msr	PRIMASK, r3
}
 80057ba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ce:	f3ef 8310 	mrs	r3, PRIMASK
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d6:	2480      	movs	r4, #128	; 0x80
 80057d8:	193a      	adds	r2, r7, r4
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	2301      	movs	r3, #1
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	f383 8810 	msr	PRIMASK, r3
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2110      	movs	r1, #16
 80057f4:	438a      	bics	r2, r1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	193b      	adds	r3, r7, r4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005806:	183b      	adds	r3, r7, r0
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	0011      	movs	r1, r2
 800580e:	0018      	movs	r0, r3
 8005810:	f000 f860 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005814:	e044      	b.n	80058a0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005816:	23a4      	movs	r3, #164	; 0xa4
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	035b      	lsls	r3, r3, #13
 8005820:	4013      	ands	r3, r2
 8005822:	d010      	beq.n	8005846 <HAL_UART_IRQHandler+0x546>
 8005824:	239c      	movs	r3, #156	; 0x9c
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	2380      	movs	r3, #128	; 0x80
 800582c:	03db      	lsls	r3, r3, #15
 800582e:	4013      	ands	r3, r2
 8005830:	d009      	beq.n	8005846 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2280      	movs	r2, #128	; 0x80
 8005838:	0352      	lsls	r2, r2, #13
 800583a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	0018      	movs	r0, r3
 8005840:	f000 ff70 	bl	8006724 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005844:	e02f      	b.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005846:	23a4      	movs	r3, #164	; 0xa4
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2280      	movs	r2, #128	; 0x80
 800584e:	4013      	ands	r3, r2
 8005850:	d00f      	beq.n	8005872 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005852:	23a0      	movs	r3, #160	; 0xa0
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2280      	movs	r2, #128	; 0x80
 800585a:	4013      	ands	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01e      	beq.n	80058a4 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	0010      	movs	r0, r2
 800586e:	4798      	blx	r3
    }
    return;
 8005870:	e018      	b.n	80058a4 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005872:	23a4      	movs	r3, #164	; 0xa4
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	4013      	ands	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
 800587e:	23a0      	movs	r3, #160	; 0xa0
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	4013      	ands	r3, r2
 8005888:	d00d      	beq.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 fdb6 	bl	80063fe <UART_EndTransmit_IT>
    return;
 8005892:	e008      	b.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	e006      	b.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
    return;
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	e004      	b.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
      return;
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	e002      	b.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
      return;
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	e000      	b.n	80058a6 <HAL_UART_IRQHandler+0x5a6>
    return;
 80058a4:	46c0      	nop			; (mov r8, r8)
  }

}
 80058a6:	46bd      	mov	sp, r7
 80058a8:	b02b      	add	sp, #172	; 0xac
 80058aa:	bd90      	pop	{r4, r7, pc}
 80058ac:	fffffeff 	.word	0xfffffeff
 80058b0:	fffffedf 	.word	0xfffffedf

080058b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b002      	add	sp, #8
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	000a      	movs	r2, r1
 80058de:	1cbb      	adds	r3, r7, #2
 80058e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b002      	add	sp, #8
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b5b0      	push	{r4, r5, r7, lr}
 80058ee:	b08e      	sub	sp, #56	; 0x38
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058f4:	231a      	movs	r3, #26
 80058f6:	2218      	movs	r2, #24
 80058f8:	189b      	adds	r3, r3, r2
 80058fa:	19db      	adds	r3, r3, r7
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	431a      	orrs	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	431a      	orrs	r2, r3
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	4313      	orrs	r3, r2
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4ac3      	ldr	r2, [pc, #780]	; (8005c2c <UART_SetConfig+0x340>)
 8005920:	4013      	ands	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592a:	430a      	orrs	r2, r1
 800592c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4abe      	ldr	r2, [pc, #760]	; (8005c30 <UART_SetConfig+0x344>)
 8005936:	4013      	ands	r3, r2
 8005938:	0019      	movs	r1, r3
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4ab8      	ldr	r2, [pc, #736]	; (8005c34 <UART_SetConfig+0x348>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800595c:	4313      	orrs	r3, r2
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4ab4      	ldr	r2, [pc, #720]	; (8005c38 <UART_SetConfig+0x34c>)
 8005968:	4013      	ands	r3, r2
 800596a:	0019      	movs	r1, r3
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005972:	430a      	orrs	r2, r1
 8005974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4ab0      	ldr	r2, [pc, #704]	; (8005c3c <UART_SetConfig+0x350>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d131      	bne.n	80059e4 <UART_SetConfig+0xf8>
 8005980:	4baf      	ldr	r3, [pc, #700]	; (8005c40 <UART_SetConfig+0x354>)
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	2203      	movs	r2, #3
 8005986:	4013      	ands	r3, r2
 8005988:	2b03      	cmp	r3, #3
 800598a:	d01d      	beq.n	80059c8 <UART_SetConfig+0xdc>
 800598c:	d823      	bhi.n	80059d6 <UART_SetConfig+0xea>
 800598e:	2b02      	cmp	r3, #2
 8005990:	d00c      	beq.n	80059ac <UART_SetConfig+0xc0>
 8005992:	d820      	bhi.n	80059d6 <UART_SetConfig+0xea>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <UART_SetConfig+0xb2>
 8005998:	2b01      	cmp	r3, #1
 800599a:	d00e      	beq.n	80059ba <UART_SetConfig+0xce>
 800599c:	e01b      	b.n	80059d6 <UART_SetConfig+0xea>
 800599e:	231b      	movs	r3, #27
 80059a0:	2218      	movs	r2, #24
 80059a2:	189b      	adds	r3, r3, r2
 80059a4:	19db      	adds	r3, r3, r7
 80059a6:	2201      	movs	r2, #1
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e0b4      	b.n	8005b16 <UART_SetConfig+0x22a>
 80059ac:	231b      	movs	r3, #27
 80059ae:	2218      	movs	r2, #24
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	19db      	adds	r3, r3, r7
 80059b4:	2202      	movs	r2, #2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e0ad      	b.n	8005b16 <UART_SetConfig+0x22a>
 80059ba:	231b      	movs	r3, #27
 80059bc:	2218      	movs	r2, #24
 80059be:	189b      	adds	r3, r3, r2
 80059c0:	19db      	adds	r3, r3, r7
 80059c2:	2204      	movs	r2, #4
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e0a6      	b.n	8005b16 <UART_SetConfig+0x22a>
 80059c8:	231b      	movs	r3, #27
 80059ca:	2218      	movs	r2, #24
 80059cc:	189b      	adds	r3, r3, r2
 80059ce:	19db      	adds	r3, r3, r7
 80059d0:	2208      	movs	r2, #8
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	e09f      	b.n	8005b16 <UART_SetConfig+0x22a>
 80059d6:	231b      	movs	r3, #27
 80059d8:	2218      	movs	r2, #24
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	19db      	adds	r3, r3, r7
 80059de:	2210      	movs	r2, #16
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e098      	b.n	8005b16 <UART_SetConfig+0x22a>
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a96      	ldr	r2, [pc, #600]	; (8005c44 <UART_SetConfig+0x358>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d131      	bne.n	8005a52 <UART_SetConfig+0x166>
 80059ee:	4b94      	ldr	r3, [pc, #592]	; (8005c40 <UART_SetConfig+0x354>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	220c      	movs	r2, #12
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	d01d      	beq.n	8005a36 <UART_SetConfig+0x14a>
 80059fa:	d823      	bhi.n	8005a44 <UART_SetConfig+0x158>
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d00c      	beq.n	8005a1a <UART_SetConfig+0x12e>
 8005a00:	d820      	bhi.n	8005a44 <UART_SetConfig+0x158>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <UART_SetConfig+0x120>
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d00e      	beq.n	8005a28 <UART_SetConfig+0x13c>
 8005a0a:	e01b      	b.n	8005a44 <UART_SetConfig+0x158>
 8005a0c:	231b      	movs	r3, #27
 8005a0e:	2218      	movs	r2, #24
 8005a10:	189b      	adds	r3, r3, r2
 8005a12:	19db      	adds	r3, r3, r7
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	e07d      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a1a:	231b      	movs	r3, #27
 8005a1c:	2218      	movs	r2, #24
 8005a1e:	189b      	adds	r3, r3, r2
 8005a20:	19db      	adds	r3, r3, r7
 8005a22:	2202      	movs	r2, #2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e076      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a28:	231b      	movs	r3, #27
 8005a2a:	2218      	movs	r2, #24
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	19db      	adds	r3, r3, r7
 8005a30:	2204      	movs	r2, #4
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e06f      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a36:	231b      	movs	r3, #27
 8005a38:	2218      	movs	r2, #24
 8005a3a:	189b      	adds	r3, r3, r2
 8005a3c:	19db      	adds	r3, r3, r7
 8005a3e:	2208      	movs	r2, #8
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	e068      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a44:	231b      	movs	r3, #27
 8005a46:	2218      	movs	r2, #24
 8005a48:	189b      	adds	r3, r3, r2
 8005a4a:	19db      	adds	r3, r3, r7
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	e061      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a7c      	ldr	r2, [pc, #496]	; (8005c48 <UART_SetConfig+0x35c>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d106      	bne.n	8005a6a <UART_SetConfig+0x17e>
 8005a5c:	231b      	movs	r3, #27
 8005a5e:	2218      	movs	r2, #24
 8005a60:	189b      	adds	r3, r3, r2
 8005a62:	19db      	adds	r3, r3, r7
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	e055      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a77      	ldr	r2, [pc, #476]	; (8005c4c <UART_SetConfig+0x360>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d106      	bne.n	8005a82 <UART_SetConfig+0x196>
 8005a74:	231b      	movs	r3, #27
 8005a76:	2218      	movs	r2, #24
 8005a78:	189b      	adds	r3, r3, r2
 8005a7a:	19db      	adds	r3, r3, r7
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e049      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6b      	ldr	r2, [pc, #428]	; (8005c34 <UART_SetConfig+0x348>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d13e      	bne.n	8005b0a <UART_SetConfig+0x21e>
 8005a8c:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <UART_SetConfig+0x354>)
 8005a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a90:	23c0      	movs	r3, #192	; 0xc0
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	4013      	ands	r3, r2
 8005a96:	22c0      	movs	r2, #192	; 0xc0
 8005a98:	0112      	lsls	r2, r2, #4
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d027      	beq.n	8005aee <UART_SetConfig+0x202>
 8005a9e:	22c0      	movs	r2, #192	; 0xc0
 8005aa0:	0112      	lsls	r2, r2, #4
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d82a      	bhi.n	8005afc <UART_SetConfig+0x210>
 8005aa6:	2280      	movs	r2, #128	; 0x80
 8005aa8:	0112      	lsls	r2, r2, #4
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d011      	beq.n	8005ad2 <UART_SetConfig+0x1e6>
 8005aae:	2280      	movs	r2, #128	; 0x80
 8005ab0:	0112      	lsls	r2, r2, #4
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d822      	bhi.n	8005afc <UART_SetConfig+0x210>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <UART_SetConfig+0x1d8>
 8005aba:	2280      	movs	r2, #128	; 0x80
 8005abc:	00d2      	lsls	r2, r2, #3
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <UART_SetConfig+0x1f4>
 8005ac2:	e01b      	b.n	8005afc <UART_SetConfig+0x210>
 8005ac4:	231b      	movs	r3, #27
 8005ac6:	2218      	movs	r2, #24
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	19db      	adds	r3, r3, r7
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e021      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005ad2:	231b      	movs	r3, #27
 8005ad4:	2218      	movs	r2, #24
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	19db      	adds	r3, r3, r7
 8005ada:	2202      	movs	r2, #2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e01a      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005ae0:	231b      	movs	r3, #27
 8005ae2:	2218      	movs	r2, #24
 8005ae4:	189b      	adds	r3, r3, r2
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	2204      	movs	r2, #4
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e013      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005aee:	231b      	movs	r3, #27
 8005af0:	2218      	movs	r2, #24
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	19db      	adds	r3, r3, r7
 8005af6:	2208      	movs	r2, #8
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e00c      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005afc:	231b      	movs	r3, #27
 8005afe:	2218      	movs	r2, #24
 8005b00:	189b      	adds	r3, r3, r2
 8005b02:	19db      	adds	r3, r3, r7
 8005b04:	2210      	movs	r2, #16
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e005      	b.n	8005b16 <UART_SetConfig+0x22a>
 8005b0a:	231b      	movs	r3, #27
 8005b0c:	2218      	movs	r2, #24
 8005b0e:	189b      	adds	r3, r3, r2
 8005b10:	19db      	adds	r3, r3, r7
 8005b12:	2210      	movs	r2, #16
 8005b14:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a46      	ldr	r2, [pc, #280]	; (8005c34 <UART_SetConfig+0x348>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d000      	beq.n	8005b22 <UART_SetConfig+0x236>
 8005b20:	e09a      	b.n	8005c58 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b22:	231b      	movs	r3, #27
 8005b24:	2218      	movs	r2, #24
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	19db      	adds	r3, r3, r7
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d01d      	beq.n	8005b6c <UART_SetConfig+0x280>
 8005b30:	dc20      	bgt.n	8005b74 <UART_SetConfig+0x288>
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d015      	beq.n	8005b62 <UART_SetConfig+0x276>
 8005b36:	dc1d      	bgt.n	8005b74 <UART_SetConfig+0x288>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <UART_SetConfig+0x256>
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d005      	beq.n	8005b4c <UART_SetConfig+0x260>
 8005b40:	e018      	b.n	8005b74 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fe fcf3 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8005b46:	0003      	movs	r3, r0
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b4a:	e01c      	b.n	8005b86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b4c:	4b3c      	ldr	r3, [pc, #240]	; (8005c40 <UART_SetConfig+0x354>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2210      	movs	r2, #16
 8005b52:	4013      	ands	r3, r2
 8005b54:	d002      	beq.n	8005b5c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b56:	4b3e      	ldr	r3, [pc, #248]	; (8005c50 <UART_SetConfig+0x364>)
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b5a:	e014      	b.n	8005b86 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005b5c:	4b3d      	ldr	r3, [pc, #244]	; (8005c54 <UART_SetConfig+0x368>)
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b60:	e011      	b.n	8005b86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b62:	f7fe fc33 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8005b66:	0003      	movs	r3, r0
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b6a:	e00c      	b.n	8005b86 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b72:	e008      	b.n	8005b86 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b78:	231a      	movs	r3, #26
 8005b7a:	2218      	movs	r2, #24
 8005b7c:	189b      	adds	r3, r3, r2
 8005b7e:	19db      	adds	r3, r3, r7
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
        break;
 8005b84:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d100      	bne.n	8005b8e <UART_SetConfig+0x2a2>
 8005b8c:	e134      	b.n	8005df8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	0013      	movs	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	189b      	adds	r3, r3, r2
 8005b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d305      	bcc.n	8005baa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d906      	bls.n	8005bb8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005baa:	231a      	movs	r3, #26
 8005bac:	2218      	movs	r2, #24
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	19db      	adds	r3, r3, r7
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e11f      	b.n	8005df8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	6939      	ldr	r1, [r7, #16]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	000b      	movs	r3, r1
 8005bc6:	0e1b      	lsrs	r3, r3, #24
 8005bc8:	0010      	movs	r0, r2
 8005bca:	0205      	lsls	r5, r0, #8
 8005bcc:	431d      	orrs	r5, r3
 8005bce:	000b      	movs	r3, r1
 8005bd0:	021c      	lsls	r4, r3, #8
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68b8      	ldr	r0, [r7, #8]
 8005be0:	68f9      	ldr	r1, [r7, #12]
 8005be2:	1900      	adds	r0, r0, r4
 8005be4:	4169      	adcs	r1, r5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	2300      	movs	r3, #0
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f7fa fc10 	bl	8000418 <__aeabi_uldivmod>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	000b      	movs	r3, r1
 8005bfc:	0013      	movs	r3, r2
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c02:	23c0      	movs	r3, #192	; 0xc0
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d309      	bcc.n	8005c1e <UART_SetConfig+0x332>
 8005c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	035b      	lsls	r3, r3, #13
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d204      	bcs.n	8005c1e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e0ec      	b.n	8005df8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c1e:	231a      	movs	r3, #26
 8005c20:	2218      	movs	r2, #24
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	19db      	adds	r3, r3, r7
 8005c26:	2201      	movs	r2, #1
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e0e5      	b.n	8005df8 <UART_SetConfig+0x50c>
 8005c2c:	efff69f3 	.word	0xefff69f3
 8005c30:	ffffcfff 	.word	0xffffcfff
 8005c34:	40004800 	.word	0x40004800
 8005c38:	fffff4ff 	.word	0xfffff4ff
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40021000 	.word	0x40021000
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004c00 	.word	0x40004c00
 8005c4c:	40005000 	.word	0x40005000
 8005c50:	003d0900 	.word	0x003d0900
 8005c54:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	2380      	movs	r3, #128	; 0x80
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d000      	beq.n	8005c66 <UART_SetConfig+0x37a>
 8005c64:	e071      	b.n	8005d4a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005c66:	231b      	movs	r3, #27
 8005c68:	2218      	movs	r2, #24
 8005c6a:	189b      	adds	r3, r3, r2
 8005c6c:	19db      	adds	r3, r3, r7
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d822      	bhi.n	8005cba <UART_SetConfig+0x3ce>
 8005c74:	009a      	lsls	r2, r3, #2
 8005c76:	4b68      	ldr	r3, [pc, #416]	; (8005e18 <UART_SetConfig+0x52c>)
 8005c78:	18d3      	adds	r3, r2, r3
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7fe fc55 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8005c82:	0003      	movs	r3, r0
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c86:	e021      	b.n	8005ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fe fc66 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c90:	e01c      	b.n	8005ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c92:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <UART_SetConfig+0x530>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2210      	movs	r2, #16
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d002      	beq.n	8005ca2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005c9c:	4b60      	ldr	r3, [pc, #384]	; (8005e20 <UART_SetConfig+0x534>)
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ca0:	e014      	b.n	8005ccc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005ca2:	4b60      	ldr	r3, [pc, #384]	; (8005e24 <UART_SetConfig+0x538>)
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ca6:	e011      	b.n	8005ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca8:	f7fe fb90 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8005cac:	0003      	movs	r3, r0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb0:	e00c      	b.n	8005ccc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cb8:	e008      	b.n	8005ccc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005cbe:	231a      	movs	r3, #26
 8005cc0:	2218      	movs	r2, #24
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	19db      	adds	r3, r3, r7
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	701a      	strb	r2, [r3, #0]
        break;
 8005cca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d100      	bne.n	8005cd4 <UART_SetConfig+0x3e8>
 8005cd2:	e091      	b.n	8005df8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	005a      	lsls	r2, r3, #1
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	18d2      	adds	r2, r2, r3
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	0019      	movs	r1, r3
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	f7fa fa20 	bl	800012c <__udivsi3>
 8005cec:	0003      	movs	r3, r0
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	2b0f      	cmp	r3, #15
 8005cf6:	d921      	bls.n	8005d3c <UART_SetConfig+0x450>
 8005cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	025b      	lsls	r3, r3, #9
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d21c      	bcs.n	8005d3c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	200e      	movs	r0, #14
 8005d08:	2418      	movs	r4, #24
 8005d0a:	1903      	adds	r3, r0, r4
 8005d0c:	19db      	adds	r3, r3, r7
 8005d0e:	210f      	movs	r1, #15
 8005d10:	438a      	bics	r2, r1
 8005d12:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2207      	movs	r2, #7
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	1903      	adds	r3, r0, r4
 8005d22:	19db      	adds	r3, r3, r7
 8005d24:	1902      	adds	r2, r0, r4
 8005d26:	19d2      	adds	r2, r2, r7
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1902      	adds	r2, r0, r4
 8005d34:	19d2      	adds	r2, r2, r7
 8005d36:	8812      	ldrh	r2, [r2, #0]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	e05d      	b.n	8005df8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d3c:	231a      	movs	r3, #26
 8005d3e:	2218      	movs	r2, #24
 8005d40:	189b      	adds	r3, r3, r2
 8005d42:	19db      	adds	r3, r3, r7
 8005d44:	2201      	movs	r2, #1
 8005d46:	701a      	strb	r2, [r3, #0]
 8005d48:	e056      	b.n	8005df8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4a:	231b      	movs	r3, #27
 8005d4c:	2218      	movs	r2, #24
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	19db      	adds	r3, r3, r7
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d822      	bhi.n	8005d9e <UART_SetConfig+0x4b2>
 8005d58:	009a      	lsls	r2, r3, #2
 8005d5a:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <UART_SetConfig+0x53c>)
 8005d5c:	18d3      	adds	r3, r2, r3
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fe fbe3 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8005d66:	0003      	movs	r3, r0
 8005d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d6a:	e021      	b.n	8005db0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fe fbf4 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8005d70:	0003      	movs	r3, r0
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d74:	e01c      	b.n	8005db0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d76:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <UART_SetConfig+0x530>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d002      	beq.n	8005d86 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <UART_SetConfig+0x534>)
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d84:	e014      	b.n	8005db0 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <UART_SetConfig+0x538>)
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d8a:	e011      	b.n	8005db0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8c:	f7fe fb1e 	bl	80043cc <HAL_RCC_GetSysClockFreq>
 8005d90:	0003      	movs	r3, r0
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d94:	e00c      	b.n	8005db0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d9c:	e008      	b.n	8005db0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005da2:	231a      	movs	r3, #26
 8005da4:	2218      	movs	r2, #24
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	19db      	adds	r3, r3, r7
 8005daa:	2201      	movs	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
        break;
 8005dae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d020      	beq.n	8005df8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	085a      	lsrs	r2, r3, #1
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	18d2      	adds	r2, r2, r3
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	0010      	movs	r0, r2
 8005dc8:	f7fa f9b0 	bl	800012c <__udivsi3>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d909      	bls.n	8005dec <UART_SetConfig+0x500>
 8005dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	025b      	lsls	r3, r3, #9
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d204      	bcs.n	8005dec <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	e005      	b.n	8005df8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dec:	231a      	movs	r3, #26
 8005dee:	2218      	movs	r2, #24
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2200      	movs	r2, #0
 8005e02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e04:	231a      	movs	r3, #26
 8005e06:	2218      	movs	r2, #24
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	19db      	adds	r3, r3, r7
 8005e0c:	781b      	ldrb	r3, [r3, #0]
}
 8005e0e:	0018      	movs	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b00e      	add	sp, #56	; 0x38
 8005e14:	bdb0      	pop	{r4, r5, r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	08008e7c 	.word	0x08008e7c
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	003d0900 	.word	0x003d0900
 8005e24:	00f42400 	.word	0x00f42400
 8005e28:	08008ea0 	.word	0x08008ea0

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d00b      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4a4a      	ldr	r2, [pc, #296]	; (8005f70 <UART_AdvFeatureConfig+0x144>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	0019      	movs	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a43      	ldr	r2, [pc, #268]	; (8005f74 <UART_AdvFeatureConfig+0x148>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a3b      	ldr	r2, [pc, #236]	; (8005f78 <UART_AdvFeatureConfig+0x14c>)
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	4a34      	ldr	r2, [pc, #208]	; (8005f7c <UART_AdvFeatureConfig+0x150>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	0019      	movs	r1, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4a2c      	ldr	r2, [pc, #176]	; (8005f80 <UART_AdvFeatureConfig+0x154>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4a25      	ldr	r2, [pc, #148]	; (8005f84 <UART_AdvFeatureConfig+0x158>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2240      	movs	r2, #64	; 0x40
 8005f06:	4013      	ands	r3, r2
 8005f08:	d01d      	beq.n	8005f46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a1d      	ldr	r2, [pc, #116]	; (8005f88 <UART_AdvFeatureConfig+0x15c>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	035b      	lsls	r3, r3, #13
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d10b      	bne.n	8005f46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <UART_AdvFeatureConfig+0x160>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d00b      	beq.n	8005f68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4a0e      	ldr	r2, [pc, #56]	; (8005f90 <UART_AdvFeatureConfig+0x164>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	fffdffff 	.word	0xfffdffff
 8005f74:	fffeffff 	.word	0xfffeffff
 8005f78:	fffbffff 	.word	0xfffbffff
 8005f7c:	ffff7fff 	.word	0xffff7fff
 8005f80:	ffffefff 	.word	0xffffefff
 8005f84:	ffffdfff 	.word	0xffffdfff
 8005f88:	ffefffff 	.word	0xffefffff
 8005f8c:	ff9fffff 	.word	0xff9fffff
 8005f90:	fff7ffff 	.word	0xfff7ffff

08005f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fa4:	f7fc fcce 	bl	8002944 <HAL_GetTick>
 8005fa8:	0003      	movs	r3, r0
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d10c      	bne.n	8005fd4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2280      	movs	r2, #128	; 0x80
 8005fbe:	0391      	lsls	r1, r2, #14
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4a17      	ldr	r2, [pc, #92]	; (8006020 <UART_CheckIdleState+0x8c>)
 8005fc4:	9200      	str	r2, [sp, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f000 f82c 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005fcc:	1e03      	subs	r3, r0, #0
 8005fce:	d001      	beq.n	8005fd4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e021      	b.n	8006018 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2204      	movs	r2, #4
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d10c      	bne.n	8005ffc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	03d1      	lsls	r1, r2, #15
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <UART_CheckIdleState+0x8c>)
 8005fec:	9200      	str	r2, [sp, #0]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f000 f818 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d001      	beq.n	8005ffc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e00d      	b.n	8006018 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2274      	movs	r2, #116	; 0x74
 8006012:	2100      	movs	r1, #0
 8006014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	0018      	movs	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	b004      	add	sp, #16
 800601e:	bd80      	pop	{r7, pc}
 8006020:	01ffffff 	.word	0x01ffffff

08006024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b094      	sub	sp, #80	; 0x50
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	1dfb      	adds	r3, r7, #7
 8006032:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006034:	e0a3      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006038:	3301      	adds	r3, #1
 800603a:	d100      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0x1a>
 800603c:	e09f      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fc fc81 	bl	8002944 <HAL_GetTick>
 8006042:	0002      	movs	r2, r0
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <UART_WaitOnFlagUntilTimeout+0x30>
 800604e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006050:	2b00      	cmp	r3, #0
 8006052:	d13d      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006054:	f3ef 8310 	mrs	r3, PRIMASK
 8006058:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800605c:	647b      	str	r3, [r7, #68]	; 0x44
 800605e:	2301      	movs	r3, #1
 8006060:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	f383 8810 	msr	PRIMASK, r3
}
 8006068:	46c0      	nop			; (mov r8, r8)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	494c      	ldr	r1, [pc, #304]	; (80061a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006076:	400a      	ands	r2, r1
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	f383 8810 	msr	PRIMASK, r3
}
 8006084:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006086:	f3ef 8310 	mrs	r3, PRIMASK
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800608c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
 8006090:	2301      	movs	r3, #1
 8006092:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	f383 8810 	msr	PRIMASK, r3
}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2101      	movs	r1, #1
 80060a8:	438a      	bics	r2, r1
 80060aa:	609a      	str	r2, [r3, #8]
 80060ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	f383 8810 	msr	PRIMASK, r3
}
 80060b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2274      	movs	r2, #116	; 0x74
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e067      	b.n	80061a0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2204      	movs	r2, #4
 80060d8:	4013      	ands	r3, r2
 80060da:	d050      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	401a      	ands	r2, r3
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d146      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	0112      	lsls	r2, r2, #4
 80060f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060fa:	f3ef 8310 	mrs	r3, PRIMASK
 80060fe:	613b      	str	r3, [r7, #16]
  return(result);
 8006100:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006104:	2301      	movs	r3, #1
 8006106:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f383 8810 	msr	PRIMASK, r3
}
 800610e:	46c0      	nop			; (mov r8, r8)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4923      	ldr	r1, [pc, #140]	; (80061a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800611c:	400a      	ands	r2, r1
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f383 8810 	msr	PRIMASK, r3
}
 800612a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800612c:	f3ef 8310 	mrs	r3, PRIMASK
 8006130:	61fb      	str	r3, [r7, #28]
  return(result);
 8006132:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
 8006136:	2301      	movs	r3, #1
 8006138:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f383 8810 	msr	PRIMASK, r3
}
 8006140:	46c0      	nop			; (mov r8, r8)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2101      	movs	r1, #1
 800614e:	438a      	bics	r2, r1
 8006150:	609a      	str	r2, [r3, #8]
 8006152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	f383 8810 	msr	PRIMASK, r3
}
 800615c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2280      	movs	r2, #128	; 0x80
 800616e:	2120      	movs	r1, #32
 8006170:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2274      	movs	r2, #116	; 0x74
 8006176:	2100      	movs	r1, #0
 8006178:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e010      	b.n	80061a0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4013      	ands	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	425a      	negs	r2, r3
 800618e:	4153      	adcs	r3, r2
 8006190:	b2db      	uxtb	r3, r3
 8006192:	001a      	movs	r2, r3
 8006194:	1dfb      	adds	r3, r7, #7
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	429a      	cmp	r2, r3
 800619a:	d100      	bne.n	800619e <UART_WaitOnFlagUntilTimeout+0x17a>
 800619c:	e74b      	b.n	8006036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b014      	add	sp, #80	; 0x50
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	fffffe5f 	.word	0xfffffe5f

080061ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	; 0x30
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	1dbb      	adds	r3, r7, #6
 80061b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1dba      	adds	r2, r7, #6
 80061c4:	2158      	movs	r1, #88	; 0x58
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1dba      	adds	r2, r7, #6
 80061ce:	215a      	movs	r1, #90	; 0x5a
 80061d0:	8812      	ldrh	r2, [r2, #0]
 80061d2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	015b      	lsls	r3, r3, #5
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d10d      	bne.n	8006202 <UART_Start_Receive_IT+0x56>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <UART_Start_Receive_IT+0x4c>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	225c      	movs	r2, #92	; 0x5c
 80061f2:	4943      	ldr	r1, [pc, #268]	; (8006300 <UART_Start_Receive_IT+0x154>)
 80061f4:	5299      	strh	r1, [r3, r2]
 80061f6:	e02e      	b.n	8006256 <UART_Start_Receive_IT+0xaa>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	225c      	movs	r2, #92	; 0x5c
 80061fc:	21ff      	movs	r1, #255	; 0xff
 80061fe:	5299      	strh	r1, [r3, r2]
 8006200:	e029      	b.n	8006256 <UART_Start_Receive_IT+0xaa>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10d      	bne.n	8006226 <UART_Start_Receive_IT+0x7a>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <UART_Start_Receive_IT+0x70>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	225c      	movs	r2, #92	; 0x5c
 8006216:	21ff      	movs	r1, #255	; 0xff
 8006218:	5299      	strh	r1, [r3, r2]
 800621a:	e01c      	b.n	8006256 <UART_Start_Receive_IT+0xaa>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	225c      	movs	r2, #92	; 0x5c
 8006220:	217f      	movs	r1, #127	; 0x7f
 8006222:	5299      	strh	r1, [r3, r2]
 8006224:	e017      	b.n	8006256 <UART_Start_Receive_IT+0xaa>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	055b      	lsls	r3, r3, #21
 800622e:	429a      	cmp	r2, r3
 8006230:	d10d      	bne.n	800624e <UART_Start_Receive_IT+0xa2>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <UART_Start_Receive_IT+0x98>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	225c      	movs	r2, #92	; 0x5c
 800623e:	217f      	movs	r1, #127	; 0x7f
 8006240:	5299      	strh	r1, [r3, r2]
 8006242:	e008      	b.n	8006256 <UART_Start_Receive_IT+0xaa>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	225c      	movs	r2, #92	; 0x5c
 8006248:	213f      	movs	r1, #63	; 0x3f
 800624a:	5299      	strh	r1, [r3, r2]
 800624c:	e003      	b.n	8006256 <UART_Start_Receive_IT+0xaa>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	225c      	movs	r2, #92	; 0x5c
 8006252:	2100      	movs	r1, #0
 8006254:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2280      	movs	r2, #128	; 0x80
 800625a:	2100      	movs	r1, #0
 800625c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2222      	movs	r2, #34	; 0x22
 8006262:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006264:	f3ef 8310 	mrs	r3, PRIMASK
 8006268:	61fb      	str	r3, [r7, #28]
  return(result);
 800626a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626e:	2301      	movs	r3, #1
 8006270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f383 8810 	msr	PRIMASK, r3
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2101      	movs	r1, #1
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	f383 8810 	msr	PRIMASK, r3
}
 8006294:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	2380      	movs	r3, #128	; 0x80
 800629c:	015b      	lsls	r3, r3, #5
 800629e:	429a      	cmp	r2, r3
 80062a0:	d107      	bne.n	80062b2 <UART_Start_Receive_IT+0x106>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <UART_Start_Receive_IT+0x158>)
 80062ae:	665a      	str	r2, [r3, #100]	; 0x64
 80062b0:	e002      	b.n	80062b8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a14      	ldr	r2, [pc, #80]	; (8006308 <UART_Start_Receive_IT+0x15c>)
 80062b6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2274      	movs	r2, #116	; 0x74
 80062bc:	2100      	movs	r1, #0
 80062be:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c0:	f3ef 8310 	mrs	r3, PRIMASK
 80062c4:	613b      	str	r3, [r7, #16]
  return(result);
 80062c6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f383 8810 	msr	PRIMASK, r3
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2190      	movs	r1, #144	; 0x90
 80062e2:	0049      	lsls	r1, r1, #1
 80062e4:	430a      	orrs	r2, r1
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f383 8810 	msr	PRIMASK, r3
}
 80062f2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b00c      	add	sp, #48	; 0x30
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	46c0      	nop			; (mov r8, r8)
 8006300:	000001ff 	.word	0x000001ff
 8006304:	080065bd 	.word	0x080065bd
 8006308:	08006455 	.word	0x08006455

0800630c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006314:	f3ef 8310 	mrs	r3, PRIMASK
 8006318:	617b      	str	r3, [r7, #20]
  return(result);
 800631a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	2301      	movs	r3, #1
 8006320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f383 8810 	msr	PRIMASK, r3
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4925      	ldr	r1, [pc, #148]	; (80063cc <UART_EndRxTransfer+0xc0>)
 8006336:	400a      	ands	r2, r1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f383 8810 	msr	PRIMASK, r3
}
 8006344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006346:	f3ef 8310 	mrs	r3, PRIMASK
 800634a:	623b      	str	r3, [r7, #32]
  return(result);
 800634c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
 8006350:	2301      	movs	r3, #1
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2101      	movs	r1, #1
 8006368:	438a      	bics	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	f383 8810 	msr	PRIMASK, r3
}
 8006376:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637c:	2b01      	cmp	r3, #1
 800637e:	d118      	bne.n	80063b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006380:	f3ef 8310 	mrs	r3, PRIMASK
 8006384:	60bb      	str	r3, [r7, #8]
  return(result);
 8006386:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638a:	2301      	movs	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f383 8810 	msr	PRIMASK, r3
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2110      	movs	r1, #16
 80063a2:	438a      	bics	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f383 8810 	msr	PRIMASK, r3
}
 80063b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b00e      	add	sp, #56	; 0x38
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	fffffedf 	.word	0xfffffedf

080063d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	225a      	movs	r2, #90	; 0x5a
 80063e2:	2100      	movs	r1, #0
 80063e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2252      	movs	r2, #82	; 0x52
 80063ea:	2100      	movs	r1, #0
 80063ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7ff fa67 	bl	80058c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b004      	add	sp, #16
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	60bb      	str	r3, [r7, #8]
  return(result);
 800640c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	2301      	movs	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2140      	movs	r1, #64	; 0x40
 8006428:	438a      	bics	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f383 8810 	msr	PRIMASK, r3
}
 8006436:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	0018      	movs	r0, r3
 8006448:	f7ff fa34 	bl	80058b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b006      	add	sp, #24
 8006452:	bd80      	pop	{r7, pc}

08006454 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b090      	sub	sp, #64	; 0x40
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800645c:	203e      	movs	r0, #62	; 0x3e
 800645e:	183b      	adds	r3, r7, r0
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	215c      	movs	r1, #92	; 0x5c
 8006464:	5a52      	ldrh	r2, [r2, r1]
 8006466:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646c:	2b22      	cmp	r3, #34	; 0x22
 800646e:	d000      	beq.n	8006472 <UART_RxISR_8BIT+0x1e>
 8006470:	e095      	b.n	800659e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006478:	213c      	movs	r1, #60	; 0x3c
 800647a:	187b      	adds	r3, r7, r1
 800647c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800647e:	187b      	adds	r3, r7, r1
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	183b      	adds	r3, r7, r0
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b2d9      	uxtb	r1, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	400a      	ands	r2, r1
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	225a      	movs	r2, #90	; 0x5a
 80064a2:	5a9b      	ldrh	r3, [r3, r2]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b299      	uxth	r1, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	225a      	movs	r2, #90	; 0x5a
 80064ae:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	225a      	movs	r2, #90	; 0x5a
 80064b4:	5a9b      	ldrh	r3, [r3, r2]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d178      	bne.n	80065ae <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064bc:	f3ef 8310 	mrs	r3, PRIMASK
 80064c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80064c2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80064c6:	2301      	movs	r3, #1
 80064c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f383 8810 	msr	PRIMASK, r3
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4936      	ldr	r1, [pc, #216]	; (80065b8 <UART_RxISR_8BIT+0x164>)
 80064de:	400a      	ands	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	f383 8810 	msr	PRIMASK, r3
}
 80064ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ee:	f3ef 8310 	mrs	r3, PRIMASK
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
 80064f8:	2301      	movs	r3, #1
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	f383 8810 	msr	PRIMASK, r3
}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2101      	movs	r1, #1
 8006510:	438a      	bics	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	2b01      	cmp	r3, #1
 8006532:	d12f      	bne.n	8006594 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800653a:	f3ef 8310 	mrs	r3, PRIMASK
 800653e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006540:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006542:	633b      	str	r3, [r7, #48]	; 0x30
 8006544:	2301      	movs	r3, #1
 8006546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2110      	movs	r1, #16
 800655c:	438a      	bics	r2, r1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f383 8810 	msr	PRIMASK, r3
}
 800656a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	2210      	movs	r2, #16
 8006574:	4013      	ands	r3, r2
 8006576:	2b10      	cmp	r3, #16
 8006578:	d103      	bne.n	8006582 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2210      	movs	r2, #16
 8006580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2258      	movs	r2, #88	; 0x58
 8006586:	5a9a      	ldrh	r2, [r3, r2]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	0011      	movs	r1, r2
 800658c:	0018      	movs	r0, r3
 800658e:	f7ff f9a1 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006592:	e00c      	b.n	80065ae <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	0018      	movs	r0, r3
 8006598:	f7fa fa68 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 800659c:	e007      	b.n	80065ae <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2108      	movs	r1, #8
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	46bd      	mov	sp, r7
 80065b2:	b010      	add	sp, #64	; 0x40
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	fffffedf 	.word	0xfffffedf

080065bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b090      	sub	sp, #64	; 0x40
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065c4:	203e      	movs	r0, #62	; 0x3e
 80065c6:	183b      	adds	r3, r7, r0
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	215c      	movs	r1, #92	; 0x5c
 80065cc:	5a52      	ldrh	r2, [r2, r1]
 80065ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d4:	2b22      	cmp	r3, #34	; 0x22
 80065d6:	d000      	beq.n	80065da <UART_RxISR_16BIT+0x1e>
 80065d8:	e095      	b.n	8006706 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065e0:	213c      	movs	r1, #60	; 0x3c
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80065ec:	187b      	adds	r3, r7, r1
 80065ee:	183a      	adds	r2, r7, r0
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	8812      	ldrh	r2, [r2, #0]
 80065f4:	4013      	ands	r3, r2
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006600:	1c9a      	adds	r2, r3, #2
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	225a      	movs	r2, #90	; 0x5a
 800660a:	5a9b      	ldrh	r3, [r3, r2]
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b299      	uxth	r1, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	225a      	movs	r2, #90	; 0x5a
 8006616:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	225a      	movs	r2, #90	; 0x5a
 800661c:	5a9b      	ldrh	r3, [r3, r2]
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d178      	bne.n	8006716 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006624:	f3ef 8310 	mrs	r3, PRIMASK
 8006628:	617b      	str	r3, [r7, #20]
  return(result);
 800662a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
 800662e:	2301      	movs	r3, #1
 8006630:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			; (mov r8, r8)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4936      	ldr	r1, [pc, #216]	; (8006720 <UART_RxISR_16BIT+0x164>)
 8006646:	400a      	ands	r2, r1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f383 8810 	msr	PRIMASK, r3
}
 8006654:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006656:	f3ef 8310 	mrs	r3, PRIMASK
 800665a:	623b      	str	r3, [r7, #32]
  return(result);
 800665c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	633b      	str	r3, [r7, #48]	; 0x30
 8006660:	2301      	movs	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2101      	movs	r1, #1
 8006678:	438a      	bics	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	f383 8810 	msr	PRIMASK, r3
}
 8006686:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	2b01      	cmp	r3, #1
 800669a:	d12f      	bne.n	80066fc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a2:	f3ef 8310 	mrs	r3, PRIMASK
 80066a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ac:	2301      	movs	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f383 8810 	msr	PRIMASK, r3
}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2110      	movs	r1, #16
 80066c4:	438a      	bics	r2, r1
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f383 8810 	msr	PRIMASK, r3
}
 80066d2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	2210      	movs	r2, #16
 80066dc:	4013      	ands	r3, r2
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d103      	bne.n	80066ea <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2210      	movs	r2, #16
 80066e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2258      	movs	r2, #88	; 0x58
 80066ee:	5a9a      	ldrh	r2, [r3, r2]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0011      	movs	r1, r2
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7ff f8ed 	bl	80058d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066fa:	e00c      	b.n	8006716 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	0018      	movs	r0, r3
 8006700:	f7fa f9b4 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8006704:	e007      	b.n	8006716 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2108      	movs	r1, #8
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	46bd      	mov	sp, r7
 800671a:	b010      	add	sp, #64	; 0x40
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	fffffedf 	.word	0xfffffedf

08006724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800672c:	46c0      	nop			; (mov r8, r8)
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}

08006734 <__errno>:
 8006734:	4b01      	ldr	r3, [pc, #4]	; (800673c <__errno+0x8>)
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	4770      	bx	lr
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	20000130 	.word	0x20000130

08006740 <__libc_init_array>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	2600      	movs	r6, #0
 8006744:	4d0c      	ldr	r5, [pc, #48]	; (8006778 <__libc_init_array+0x38>)
 8006746:	4c0d      	ldr	r4, [pc, #52]	; (800677c <__libc_init_array+0x3c>)
 8006748:	1b64      	subs	r4, r4, r5
 800674a:	10a4      	asrs	r4, r4, #2
 800674c:	42a6      	cmp	r6, r4
 800674e:	d109      	bne.n	8006764 <__libc_init_array+0x24>
 8006750:	2600      	movs	r6, #0
 8006752:	f000 fc8b 	bl	800706c <_init>
 8006756:	4d0a      	ldr	r5, [pc, #40]	; (8006780 <__libc_init_array+0x40>)
 8006758:	4c0a      	ldr	r4, [pc, #40]	; (8006784 <__libc_init_array+0x44>)
 800675a:	1b64      	subs	r4, r4, r5
 800675c:	10a4      	asrs	r4, r4, #2
 800675e:	42a6      	cmp	r6, r4
 8006760:	d105      	bne.n	800676e <__libc_init_array+0x2e>
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	00b3      	lsls	r3, r6, #2
 8006766:	58eb      	ldr	r3, [r5, r3]
 8006768:	4798      	blx	r3
 800676a:	3601      	adds	r6, #1
 800676c:	e7ee      	b.n	800674c <__libc_init_array+0xc>
 800676e:	00b3      	lsls	r3, r6, #2
 8006770:	58eb      	ldr	r3, [r5, r3]
 8006772:	4798      	blx	r3
 8006774:	3601      	adds	r6, #1
 8006776:	e7f2      	b.n	800675e <__libc_init_array+0x1e>
 8006778:	08008f00 	.word	0x08008f00
 800677c:	08008f00 	.word	0x08008f00
 8006780:	08008f00 	.word	0x08008f00
 8006784:	08008f04 	.word	0x08008f04

08006788 <memcpy>:
 8006788:	2300      	movs	r3, #0
 800678a:	b510      	push	{r4, lr}
 800678c:	429a      	cmp	r2, r3
 800678e:	d100      	bne.n	8006792 <memcpy+0xa>
 8006790:	bd10      	pop	{r4, pc}
 8006792:	5ccc      	ldrb	r4, [r1, r3]
 8006794:	54c4      	strb	r4, [r0, r3]
 8006796:	3301      	adds	r3, #1
 8006798:	e7f8      	b.n	800678c <memcpy+0x4>

0800679a <memset>:
 800679a:	0003      	movs	r3, r0
 800679c:	1882      	adds	r2, r0, r2
 800679e:	4293      	cmp	r3, r2
 80067a0:	d100      	bne.n	80067a4 <memset+0xa>
 80067a2:	4770      	bx	lr
 80067a4:	7019      	strb	r1, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	e7f9      	b.n	800679e <memset+0x4>
	...

080067ac <siprintf>:
 80067ac:	b40e      	push	{r1, r2, r3}
 80067ae:	b500      	push	{lr}
 80067b0:	490b      	ldr	r1, [pc, #44]	; (80067e0 <siprintf+0x34>)
 80067b2:	b09c      	sub	sp, #112	; 0x70
 80067b4:	ab1d      	add	r3, sp, #116	; 0x74
 80067b6:	9002      	str	r0, [sp, #8]
 80067b8:	9006      	str	r0, [sp, #24]
 80067ba:	9107      	str	r1, [sp, #28]
 80067bc:	9104      	str	r1, [sp, #16]
 80067be:	4809      	ldr	r0, [pc, #36]	; (80067e4 <siprintf+0x38>)
 80067c0:	4909      	ldr	r1, [pc, #36]	; (80067e8 <siprintf+0x3c>)
 80067c2:	cb04      	ldmia	r3!, {r2}
 80067c4:	9105      	str	r1, [sp, #20]
 80067c6:	6800      	ldr	r0, [r0, #0]
 80067c8:	a902      	add	r1, sp, #8
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f000 f870 	bl	80068b0 <_svfiprintf_r>
 80067d0:	2300      	movs	r3, #0
 80067d2:	9a02      	ldr	r2, [sp, #8]
 80067d4:	7013      	strb	r3, [r2, #0]
 80067d6:	b01c      	add	sp, #112	; 0x70
 80067d8:	bc08      	pop	{r3}
 80067da:	b003      	add	sp, #12
 80067dc:	4718      	bx	r3
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	7fffffff 	.word	0x7fffffff
 80067e4:	20000130 	.word	0x20000130
 80067e8:	ffff0208 	.word	0xffff0208

080067ec <__ssputs_r>:
 80067ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ee:	688e      	ldr	r6, [r1, #8]
 80067f0:	b085      	sub	sp, #20
 80067f2:	0007      	movs	r7, r0
 80067f4:	000c      	movs	r4, r1
 80067f6:	9203      	str	r2, [sp, #12]
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	429e      	cmp	r6, r3
 80067fc:	d83c      	bhi.n	8006878 <__ssputs_r+0x8c>
 80067fe:	2390      	movs	r3, #144	; 0x90
 8006800:	898a      	ldrh	r2, [r1, #12]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	421a      	tst	r2, r3
 8006806:	d034      	beq.n	8006872 <__ssputs_r+0x86>
 8006808:	6909      	ldr	r1, [r1, #16]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6960      	ldr	r0, [r4, #20]
 800680e:	1a5b      	subs	r3, r3, r1
 8006810:	9302      	str	r3, [sp, #8]
 8006812:	2303      	movs	r3, #3
 8006814:	4343      	muls	r3, r0
 8006816:	0fdd      	lsrs	r5, r3, #31
 8006818:	18ed      	adds	r5, r5, r3
 800681a:	9b01      	ldr	r3, [sp, #4]
 800681c:	9802      	ldr	r0, [sp, #8]
 800681e:	3301      	adds	r3, #1
 8006820:	181b      	adds	r3, r3, r0
 8006822:	106d      	asrs	r5, r5, #1
 8006824:	42ab      	cmp	r3, r5
 8006826:	d900      	bls.n	800682a <__ssputs_r+0x3e>
 8006828:	001d      	movs	r5, r3
 800682a:	0553      	lsls	r3, r2, #21
 800682c:	d532      	bpl.n	8006894 <__ssputs_r+0xa8>
 800682e:	0029      	movs	r1, r5
 8006830:	0038      	movs	r0, r7
 8006832:	f000 fb49 	bl	8006ec8 <_malloc_r>
 8006836:	1e06      	subs	r6, r0, #0
 8006838:	d109      	bne.n	800684e <__ssputs_r+0x62>
 800683a:	230c      	movs	r3, #12
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	2001      	movs	r0, #1
 8006842:	89a2      	ldrh	r2, [r4, #12]
 8006844:	4240      	negs	r0, r0
 8006846:	4313      	orrs	r3, r2
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	b005      	add	sp, #20
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	9a02      	ldr	r2, [sp, #8]
 8006850:	6921      	ldr	r1, [r4, #16]
 8006852:	f7ff ff99 	bl	8006788 <memcpy>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	4a14      	ldr	r2, [pc, #80]	; (80068ac <__ssputs_r+0xc0>)
 800685a:	401a      	ands	r2, r3
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	4313      	orrs	r3, r2
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	9b02      	ldr	r3, [sp, #8]
 8006864:	6126      	str	r6, [r4, #16]
 8006866:	18f6      	adds	r6, r6, r3
 8006868:	6026      	str	r6, [r4, #0]
 800686a:	6165      	str	r5, [r4, #20]
 800686c:	9e01      	ldr	r6, [sp, #4]
 800686e:	1aed      	subs	r5, r5, r3
 8006870:	60a5      	str	r5, [r4, #8]
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	429e      	cmp	r6, r3
 8006876:	d900      	bls.n	800687a <__ssputs_r+0x8e>
 8006878:	9e01      	ldr	r6, [sp, #4]
 800687a:	0032      	movs	r2, r6
 800687c:	9903      	ldr	r1, [sp, #12]
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	f000 faa3 	bl	8006dca <memmove>
 8006884:	68a3      	ldr	r3, [r4, #8]
 8006886:	2000      	movs	r0, #0
 8006888:	1b9b      	subs	r3, r3, r6
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	199e      	adds	r6, r3, r6
 8006890:	6026      	str	r6, [r4, #0]
 8006892:	e7da      	b.n	800684a <__ssputs_r+0x5e>
 8006894:	002a      	movs	r2, r5
 8006896:	0038      	movs	r0, r7
 8006898:	f000 fb8c 	bl	8006fb4 <_realloc_r>
 800689c:	1e06      	subs	r6, r0, #0
 800689e:	d1e0      	bne.n	8006862 <__ssputs_r+0x76>
 80068a0:	0038      	movs	r0, r7
 80068a2:	6921      	ldr	r1, [r4, #16]
 80068a4:	f000 faa4 	bl	8006df0 <_free_r>
 80068a8:	e7c7      	b.n	800683a <__ssputs_r+0x4e>
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	fffffb7f 	.word	0xfffffb7f

080068b0 <_svfiprintf_r>:
 80068b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b2:	b0a1      	sub	sp, #132	; 0x84
 80068b4:	9003      	str	r0, [sp, #12]
 80068b6:	001d      	movs	r5, r3
 80068b8:	898b      	ldrh	r3, [r1, #12]
 80068ba:	000f      	movs	r7, r1
 80068bc:	0016      	movs	r6, r2
 80068be:	061b      	lsls	r3, r3, #24
 80068c0:	d511      	bpl.n	80068e6 <_svfiprintf_r+0x36>
 80068c2:	690b      	ldr	r3, [r1, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10e      	bne.n	80068e6 <_svfiprintf_r+0x36>
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	f000 fafd 	bl	8006ec8 <_malloc_r>
 80068ce:	6038      	str	r0, [r7, #0]
 80068d0:	6138      	str	r0, [r7, #16]
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d105      	bne.n	80068e2 <_svfiprintf_r+0x32>
 80068d6:	230c      	movs	r3, #12
 80068d8:	9a03      	ldr	r2, [sp, #12]
 80068da:	3801      	subs	r0, #1
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	b021      	add	sp, #132	; 0x84
 80068e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	2300      	movs	r3, #0
 80068e8:	ac08      	add	r4, sp, #32
 80068ea:	6163      	str	r3, [r4, #20]
 80068ec:	3320      	adds	r3, #32
 80068ee:	7663      	strb	r3, [r4, #25]
 80068f0:	3310      	adds	r3, #16
 80068f2:	76a3      	strb	r3, [r4, #26]
 80068f4:	9507      	str	r5, [sp, #28]
 80068f6:	0035      	movs	r5, r6
 80068f8:	782b      	ldrb	r3, [r5, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <_svfiprintf_r+0x52>
 80068fe:	2b25      	cmp	r3, #37	; 0x25
 8006900:	d147      	bne.n	8006992 <_svfiprintf_r+0xe2>
 8006902:	1bab      	subs	r3, r5, r6
 8006904:	9305      	str	r3, [sp, #20]
 8006906:	42b5      	cmp	r5, r6
 8006908:	d00c      	beq.n	8006924 <_svfiprintf_r+0x74>
 800690a:	0032      	movs	r2, r6
 800690c:	0039      	movs	r1, r7
 800690e:	9803      	ldr	r0, [sp, #12]
 8006910:	f7ff ff6c 	bl	80067ec <__ssputs_r>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d100      	bne.n	800691a <_svfiprintf_r+0x6a>
 8006918:	e0ae      	b.n	8006a78 <_svfiprintf_r+0x1c8>
 800691a:	6962      	ldr	r2, [r4, #20]
 800691c:	9b05      	ldr	r3, [sp, #20]
 800691e:	4694      	mov	ip, r2
 8006920:	4463      	add	r3, ip
 8006922:	6163      	str	r3, [r4, #20]
 8006924:	782b      	ldrb	r3, [r5, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d100      	bne.n	800692c <_svfiprintf_r+0x7c>
 800692a:	e0a5      	b.n	8006a78 <_svfiprintf_r+0x1c8>
 800692c:	2201      	movs	r2, #1
 800692e:	2300      	movs	r3, #0
 8006930:	4252      	negs	r2, r2
 8006932:	6062      	str	r2, [r4, #4]
 8006934:	a904      	add	r1, sp, #16
 8006936:	3254      	adds	r2, #84	; 0x54
 8006938:	1852      	adds	r2, r2, r1
 800693a:	1c6e      	adds	r6, r5, #1
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	60e3      	str	r3, [r4, #12]
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	7013      	strb	r3, [r2, #0]
 8006944:	65a3      	str	r3, [r4, #88]	; 0x58
 8006946:	2205      	movs	r2, #5
 8006948:	7831      	ldrb	r1, [r6, #0]
 800694a:	4854      	ldr	r0, [pc, #336]	; (8006a9c <_svfiprintf_r+0x1ec>)
 800694c:	f000 fa32 	bl	8006db4 <memchr>
 8006950:	1c75      	adds	r5, r6, #1
 8006952:	2800      	cmp	r0, #0
 8006954:	d11f      	bne.n	8006996 <_svfiprintf_r+0xe6>
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	06d3      	lsls	r3, r2, #27
 800695a:	d504      	bpl.n	8006966 <_svfiprintf_r+0xb6>
 800695c:	2353      	movs	r3, #83	; 0x53
 800695e:	a904      	add	r1, sp, #16
 8006960:	185b      	adds	r3, r3, r1
 8006962:	2120      	movs	r1, #32
 8006964:	7019      	strb	r1, [r3, #0]
 8006966:	0713      	lsls	r3, r2, #28
 8006968:	d504      	bpl.n	8006974 <_svfiprintf_r+0xc4>
 800696a:	2353      	movs	r3, #83	; 0x53
 800696c:	a904      	add	r1, sp, #16
 800696e:	185b      	adds	r3, r3, r1
 8006970:	212b      	movs	r1, #43	; 0x2b
 8006972:	7019      	strb	r1, [r3, #0]
 8006974:	7833      	ldrb	r3, [r6, #0]
 8006976:	2b2a      	cmp	r3, #42	; 0x2a
 8006978:	d016      	beq.n	80069a8 <_svfiprintf_r+0xf8>
 800697a:	0035      	movs	r5, r6
 800697c:	2100      	movs	r1, #0
 800697e:	200a      	movs	r0, #10
 8006980:	68e3      	ldr	r3, [r4, #12]
 8006982:	782a      	ldrb	r2, [r5, #0]
 8006984:	1c6e      	adds	r6, r5, #1
 8006986:	3a30      	subs	r2, #48	; 0x30
 8006988:	2a09      	cmp	r2, #9
 800698a:	d94e      	bls.n	8006a2a <_svfiprintf_r+0x17a>
 800698c:	2900      	cmp	r1, #0
 800698e:	d111      	bne.n	80069b4 <_svfiprintf_r+0x104>
 8006990:	e017      	b.n	80069c2 <_svfiprintf_r+0x112>
 8006992:	3501      	adds	r5, #1
 8006994:	e7b0      	b.n	80068f8 <_svfiprintf_r+0x48>
 8006996:	4b41      	ldr	r3, [pc, #260]	; (8006a9c <_svfiprintf_r+0x1ec>)
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	1ac0      	subs	r0, r0, r3
 800699c:	2301      	movs	r3, #1
 800699e:	4083      	lsls	r3, r0
 80069a0:	4313      	orrs	r3, r2
 80069a2:	002e      	movs	r6, r5
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	e7ce      	b.n	8006946 <_svfiprintf_r+0x96>
 80069a8:	9b07      	ldr	r3, [sp, #28]
 80069aa:	1d19      	adds	r1, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	9107      	str	r1, [sp, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db01      	blt.n	80069b8 <_svfiprintf_r+0x108>
 80069b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80069b6:	e004      	b.n	80069c2 <_svfiprintf_r+0x112>
 80069b8:	425b      	negs	r3, r3
 80069ba:	60e3      	str	r3, [r4, #12]
 80069bc:	2302      	movs	r3, #2
 80069be:	4313      	orrs	r3, r2
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	782b      	ldrb	r3, [r5, #0]
 80069c4:	2b2e      	cmp	r3, #46	; 0x2e
 80069c6:	d10a      	bne.n	80069de <_svfiprintf_r+0x12e>
 80069c8:	786b      	ldrb	r3, [r5, #1]
 80069ca:	2b2a      	cmp	r3, #42	; 0x2a
 80069cc:	d135      	bne.n	8006a3a <_svfiprintf_r+0x18a>
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	3502      	adds	r5, #2
 80069d2:	1d1a      	adds	r2, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	9207      	str	r2, [sp, #28]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	db2b      	blt.n	8006a34 <_svfiprintf_r+0x184>
 80069dc:	9309      	str	r3, [sp, #36]	; 0x24
 80069de:	4e30      	ldr	r6, [pc, #192]	; (8006aa0 <_svfiprintf_r+0x1f0>)
 80069e0:	2203      	movs	r2, #3
 80069e2:	0030      	movs	r0, r6
 80069e4:	7829      	ldrb	r1, [r5, #0]
 80069e6:	f000 f9e5 	bl	8006db4 <memchr>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d006      	beq.n	80069fc <_svfiprintf_r+0x14c>
 80069ee:	2340      	movs	r3, #64	; 0x40
 80069f0:	1b80      	subs	r0, r0, r6
 80069f2:	4083      	lsls	r3, r0
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	3501      	adds	r5, #1
 80069f8:	4313      	orrs	r3, r2
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	7829      	ldrb	r1, [r5, #0]
 80069fe:	2206      	movs	r2, #6
 8006a00:	4828      	ldr	r0, [pc, #160]	; (8006aa4 <_svfiprintf_r+0x1f4>)
 8006a02:	1c6e      	adds	r6, r5, #1
 8006a04:	7621      	strb	r1, [r4, #24]
 8006a06:	f000 f9d5 	bl	8006db4 <memchr>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d03c      	beq.n	8006a88 <_svfiprintf_r+0x1d8>
 8006a0e:	4b26      	ldr	r3, [pc, #152]	; (8006aa8 <_svfiprintf_r+0x1f8>)
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d125      	bne.n	8006a60 <_svfiprintf_r+0x1b0>
 8006a14:	2207      	movs	r2, #7
 8006a16:	9b07      	ldr	r3, [sp, #28]
 8006a18:	3307      	adds	r3, #7
 8006a1a:	4393      	bics	r3, r2
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	6963      	ldr	r3, [r4, #20]
 8006a22:	9a04      	ldr	r2, [sp, #16]
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	6163      	str	r3, [r4, #20]
 8006a28:	e765      	b.n	80068f6 <_svfiprintf_r+0x46>
 8006a2a:	4343      	muls	r3, r0
 8006a2c:	0035      	movs	r5, r6
 8006a2e:	2101      	movs	r1, #1
 8006a30:	189b      	adds	r3, r3, r2
 8006a32:	e7a6      	b.n	8006982 <_svfiprintf_r+0xd2>
 8006a34:	2301      	movs	r3, #1
 8006a36:	425b      	negs	r3, r3
 8006a38:	e7d0      	b.n	80069dc <_svfiprintf_r+0x12c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	200a      	movs	r0, #10
 8006a3e:	001a      	movs	r2, r3
 8006a40:	3501      	adds	r5, #1
 8006a42:	6063      	str	r3, [r4, #4]
 8006a44:	7829      	ldrb	r1, [r5, #0]
 8006a46:	1c6e      	adds	r6, r5, #1
 8006a48:	3930      	subs	r1, #48	; 0x30
 8006a4a:	2909      	cmp	r1, #9
 8006a4c:	d903      	bls.n	8006a56 <_svfiprintf_r+0x1a6>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c5      	beq.n	80069de <_svfiprintf_r+0x12e>
 8006a52:	9209      	str	r2, [sp, #36]	; 0x24
 8006a54:	e7c3      	b.n	80069de <_svfiprintf_r+0x12e>
 8006a56:	4342      	muls	r2, r0
 8006a58:	0035      	movs	r5, r6
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	1852      	adds	r2, r2, r1
 8006a5e:	e7f1      	b.n	8006a44 <_svfiprintf_r+0x194>
 8006a60:	ab07      	add	r3, sp, #28
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	003a      	movs	r2, r7
 8006a66:	0021      	movs	r1, r4
 8006a68:	4b10      	ldr	r3, [pc, #64]	; (8006aac <_svfiprintf_r+0x1fc>)
 8006a6a:	9803      	ldr	r0, [sp, #12]
 8006a6c:	e000      	b.n	8006a70 <_svfiprintf_r+0x1c0>
 8006a6e:	bf00      	nop
 8006a70:	9004      	str	r0, [sp, #16]
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	d1d3      	bne.n	8006a20 <_svfiprintf_r+0x170>
 8006a78:	89bb      	ldrh	r3, [r7, #12]
 8006a7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006a7c:	065b      	lsls	r3, r3, #25
 8006a7e:	d400      	bmi.n	8006a82 <_svfiprintf_r+0x1d2>
 8006a80:	e72d      	b.n	80068de <_svfiprintf_r+0x2e>
 8006a82:	2001      	movs	r0, #1
 8006a84:	4240      	negs	r0, r0
 8006a86:	e72a      	b.n	80068de <_svfiprintf_r+0x2e>
 8006a88:	ab07      	add	r3, sp, #28
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	003a      	movs	r2, r7
 8006a8e:	0021      	movs	r1, r4
 8006a90:	4b06      	ldr	r3, [pc, #24]	; (8006aac <_svfiprintf_r+0x1fc>)
 8006a92:	9803      	ldr	r0, [sp, #12]
 8006a94:	f000 f87c 	bl	8006b90 <_printf_i>
 8006a98:	e7ea      	b.n	8006a70 <_svfiprintf_r+0x1c0>
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	08008ec4 	.word	0x08008ec4
 8006aa0:	08008eca 	.word	0x08008eca
 8006aa4:	08008ece 	.word	0x08008ece
 8006aa8:	00000000 	.word	0x00000000
 8006aac:	080067ed 	.word	0x080067ed

08006ab0 <_printf_common>:
 8006ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ab2:	0015      	movs	r5, r2
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	688a      	ldr	r2, [r1, #8]
 8006ab8:	690b      	ldr	r3, [r1, #16]
 8006aba:	000c      	movs	r4, r1
 8006abc:	9000      	str	r0, [sp, #0]
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	da00      	bge.n	8006ac4 <_printf_common+0x14>
 8006ac2:	0013      	movs	r3, r2
 8006ac4:	0022      	movs	r2, r4
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	3243      	adds	r2, #67	; 0x43
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	d001      	beq.n	8006ad4 <_printf_common+0x24>
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	069b      	lsls	r3, r3, #26
 8006ad8:	d502      	bpl.n	8006ae0 <_printf_common+0x30>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	3302      	adds	r3, #2
 8006ade:	602b      	str	r3, [r5, #0]
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	2306      	movs	r3, #6
 8006ae4:	0017      	movs	r7, r2
 8006ae6:	401f      	ands	r7, r3
 8006ae8:	421a      	tst	r2, r3
 8006aea:	d027      	beq.n	8006b3c <_printf_common+0x8c>
 8006aec:	0023      	movs	r3, r4
 8006aee:	3343      	adds	r3, #67	; 0x43
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	1e5a      	subs	r2, r3, #1
 8006af4:	4193      	sbcs	r3, r2
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	0692      	lsls	r2, r2, #26
 8006afa:	d430      	bmi.n	8006b5e <_printf_common+0xae>
 8006afc:	0022      	movs	r2, r4
 8006afe:	9901      	ldr	r1, [sp, #4]
 8006b00:	9800      	ldr	r0, [sp, #0]
 8006b02:	9e08      	ldr	r6, [sp, #32]
 8006b04:	3243      	adds	r2, #67	; 0x43
 8006b06:	47b0      	blx	r6
 8006b08:	1c43      	adds	r3, r0, #1
 8006b0a:	d025      	beq.n	8006b58 <_printf_common+0xa8>
 8006b0c:	2306      	movs	r3, #6
 8006b0e:	6820      	ldr	r0, [r4, #0]
 8006b10:	682a      	ldr	r2, [r5, #0]
 8006b12:	68e1      	ldr	r1, [r4, #12]
 8006b14:	2500      	movs	r5, #0
 8006b16:	4003      	ands	r3, r0
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d103      	bne.n	8006b24 <_printf_common+0x74>
 8006b1c:	1a8d      	subs	r5, r1, r2
 8006b1e:	43eb      	mvns	r3, r5
 8006b20:	17db      	asrs	r3, r3, #31
 8006b22:	401d      	ands	r5, r3
 8006b24:	68a3      	ldr	r3, [r4, #8]
 8006b26:	6922      	ldr	r2, [r4, #16]
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	dd01      	ble.n	8006b30 <_printf_common+0x80>
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	18ed      	adds	r5, r5, r3
 8006b30:	2700      	movs	r7, #0
 8006b32:	42bd      	cmp	r5, r7
 8006b34:	d120      	bne.n	8006b78 <_printf_common+0xc8>
 8006b36:	2000      	movs	r0, #0
 8006b38:	e010      	b.n	8006b5c <_printf_common+0xac>
 8006b3a:	3701      	adds	r7, #1
 8006b3c:	68e3      	ldr	r3, [r4, #12]
 8006b3e:	682a      	ldr	r2, [r5, #0]
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	42bb      	cmp	r3, r7
 8006b44:	ddd2      	ble.n	8006aec <_printf_common+0x3c>
 8006b46:	0022      	movs	r2, r4
 8006b48:	2301      	movs	r3, #1
 8006b4a:	9901      	ldr	r1, [sp, #4]
 8006b4c:	9800      	ldr	r0, [sp, #0]
 8006b4e:	9e08      	ldr	r6, [sp, #32]
 8006b50:	3219      	adds	r2, #25
 8006b52:	47b0      	blx	r6
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d1f0      	bne.n	8006b3a <_printf_common+0x8a>
 8006b58:	2001      	movs	r0, #1
 8006b5a:	4240      	negs	r0, r0
 8006b5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b5e:	2030      	movs	r0, #48	; 0x30
 8006b60:	18e1      	adds	r1, r4, r3
 8006b62:	3143      	adds	r1, #67	; 0x43
 8006b64:	7008      	strb	r0, [r1, #0]
 8006b66:	0021      	movs	r1, r4
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	3145      	adds	r1, #69	; 0x45
 8006b6c:	7809      	ldrb	r1, [r1, #0]
 8006b6e:	18a2      	adds	r2, r4, r2
 8006b70:	3243      	adds	r2, #67	; 0x43
 8006b72:	3302      	adds	r3, #2
 8006b74:	7011      	strb	r1, [r2, #0]
 8006b76:	e7c1      	b.n	8006afc <_printf_common+0x4c>
 8006b78:	0022      	movs	r2, r4
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	9901      	ldr	r1, [sp, #4]
 8006b7e:	9800      	ldr	r0, [sp, #0]
 8006b80:	9e08      	ldr	r6, [sp, #32]
 8006b82:	321a      	adds	r2, #26
 8006b84:	47b0      	blx	r6
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	d0e6      	beq.n	8006b58 <_printf_common+0xa8>
 8006b8a:	3701      	adds	r7, #1
 8006b8c:	e7d1      	b.n	8006b32 <_printf_common+0x82>
	...

08006b90 <_printf_i>:
 8006b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b92:	b08b      	sub	sp, #44	; 0x2c
 8006b94:	9206      	str	r2, [sp, #24]
 8006b96:	000a      	movs	r2, r1
 8006b98:	3243      	adds	r2, #67	; 0x43
 8006b9a:	9307      	str	r3, [sp, #28]
 8006b9c:	9005      	str	r0, [sp, #20]
 8006b9e:	9204      	str	r2, [sp, #16]
 8006ba0:	7e0a      	ldrb	r2, [r1, #24]
 8006ba2:	000c      	movs	r4, r1
 8006ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ba6:	2a78      	cmp	r2, #120	; 0x78
 8006ba8:	d807      	bhi.n	8006bba <_printf_i+0x2a>
 8006baa:	2a62      	cmp	r2, #98	; 0x62
 8006bac:	d809      	bhi.n	8006bc2 <_printf_i+0x32>
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	d100      	bne.n	8006bb4 <_printf_i+0x24>
 8006bb2:	e0c1      	b.n	8006d38 <_printf_i+0x1a8>
 8006bb4:	2a58      	cmp	r2, #88	; 0x58
 8006bb6:	d100      	bne.n	8006bba <_printf_i+0x2a>
 8006bb8:	e08c      	b.n	8006cd4 <_printf_i+0x144>
 8006bba:	0026      	movs	r6, r4
 8006bbc:	3642      	adds	r6, #66	; 0x42
 8006bbe:	7032      	strb	r2, [r6, #0]
 8006bc0:	e022      	b.n	8006c08 <_printf_i+0x78>
 8006bc2:	0010      	movs	r0, r2
 8006bc4:	3863      	subs	r0, #99	; 0x63
 8006bc6:	2815      	cmp	r0, #21
 8006bc8:	d8f7      	bhi.n	8006bba <_printf_i+0x2a>
 8006bca:	f7f9 faa5 	bl	8000118 <__gnu_thumb1_case_shi>
 8006bce:	0016      	.short	0x0016
 8006bd0:	fff6001f 	.word	0xfff6001f
 8006bd4:	fff6fff6 	.word	0xfff6fff6
 8006bd8:	001ffff6 	.word	0x001ffff6
 8006bdc:	fff6fff6 	.word	0xfff6fff6
 8006be0:	fff6fff6 	.word	0xfff6fff6
 8006be4:	003600a8 	.word	0x003600a8
 8006be8:	fff6009a 	.word	0xfff6009a
 8006bec:	00b9fff6 	.word	0x00b9fff6
 8006bf0:	0036fff6 	.word	0x0036fff6
 8006bf4:	fff6fff6 	.word	0xfff6fff6
 8006bf8:	009e      	.short	0x009e
 8006bfa:	0026      	movs	r6, r4
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	3642      	adds	r6, #66	; 0x42
 8006c00:	1d11      	adds	r1, r2, #4
 8006c02:	6019      	str	r1, [r3, #0]
 8006c04:	6813      	ldr	r3, [r2, #0]
 8006c06:	7033      	strb	r3, [r6, #0]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0a7      	b.n	8006d5c <_printf_i+0x1cc>
 8006c0c:	6808      	ldr	r0, [r1, #0]
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	1d0a      	adds	r2, r1, #4
 8006c12:	0605      	lsls	r5, r0, #24
 8006c14:	d50b      	bpl.n	8006c2e <_printf_i+0x9e>
 8006c16:	680d      	ldr	r5, [r1, #0]
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	da03      	bge.n	8006c26 <_printf_i+0x96>
 8006c1e:	232d      	movs	r3, #45	; 0x2d
 8006c20:	9a04      	ldr	r2, [sp, #16]
 8006c22:	426d      	negs	r5, r5
 8006c24:	7013      	strb	r3, [r2, #0]
 8006c26:	4b61      	ldr	r3, [pc, #388]	; (8006dac <_printf_i+0x21c>)
 8006c28:	270a      	movs	r7, #10
 8006c2a:	9303      	str	r3, [sp, #12]
 8006c2c:	e01b      	b.n	8006c66 <_printf_i+0xd6>
 8006c2e:	680d      	ldr	r5, [r1, #0]
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	0641      	lsls	r1, r0, #25
 8006c34:	d5f1      	bpl.n	8006c1a <_printf_i+0x8a>
 8006c36:	b22d      	sxth	r5, r5
 8006c38:	e7ef      	b.n	8006c1a <_printf_i+0x8a>
 8006c3a:	680d      	ldr	r5, [r1, #0]
 8006c3c:	6819      	ldr	r1, [r3, #0]
 8006c3e:	1d08      	adds	r0, r1, #4
 8006c40:	6018      	str	r0, [r3, #0]
 8006c42:	062e      	lsls	r6, r5, #24
 8006c44:	d501      	bpl.n	8006c4a <_printf_i+0xba>
 8006c46:	680d      	ldr	r5, [r1, #0]
 8006c48:	e003      	b.n	8006c52 <_printf_i+0xc2>
 8006c4a:	066d      	lsls	r5, r5, #25
 8006c4c:	d5fb      	bpl.n	8006c46 <_printf_i+0xb6>
 8006c4e:	680d      	ldr	r5, [r1, #0]
 8006c50:	b2ad      	uxth	r5, r5
 8006c52:	4b56      	ldr	r3, [pc, #344]	; (8006dac <_printf_i+0x21c>)
 8006c54:	2708      	movs	r7, #8
 8006c56:	9303      	str	r3, [sp, #12]
 8006c58:	2a6f      	cmp	r2, #111	; 0x6f
 8006c5a:	d000      	beq.n	8006c5e <_printf_i+0xce>
 8006c5c:	3702      	adds	r7, #2
 8006c5e:	0023      	movs	r3, r4
 8006c60:	2200      	movs	r2, #0
 8006c62:	3343      	adds	r3, #67	; 0x43
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	db03      	blt.n	8006c76 <_printf_i+0xe6>
 8006c6e:	2204      	movs	r2, #4
 8006c70:	6821      	ldr	r1, [r4, #0]
 8006c72:	4391      	bics	r1, r2
 8006c74:	6021      	str	r1, [r4, #0]
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	d102      	bne.n	8006c80 <_printf_i+0xf0>
 8006c7a:	9e04      	ldr	r6, [sp, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <_printf_i+0x10a>
 8006c80:	9e04      	ldr	r6, [sp, #16]
 8006c82:	0028      	movs	r0, r5
 8006c84:	0039      	movs	r1, r7
 8006c86:	f7f9 fad7 	bl	8000238 <__aeabi_uidivmod>
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	3e01      	subs	r6, #1
 8006c8e:	5c5b      	ldrb	r3, [r3, r1]
 8006c90:	7033      	strb	r3, [r6, #0]
 8006c92:	002b      	movs	r3, r5
 8006c94:	0005      	movs	r5, r0
 8006c96:	429f      	cmp	r7, r3
 8006c98:	d9f3      	bls.n	8006c82 <_printf_i+0xf2>
 8006c9a:	2f08      	cmp	r7, #8
 8006c9c:	d109      	bne.n	8006cb2 <_printf_i+0x122>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	07db      	lsls	r3, r3, #31
 8006ca2:	d506      	bpl.n	8006cb2 <_printf_i+0x122>
 8006ca4:	6863      	ldr	r3, [r4, #4]
 8006ca6:	6922      	ldr	r2, [r4, #16]
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	dc02      	bgt.n	8006cb2 <_printf_i+0x122>
 8006cac:	2330      	movs	r3, #48	; 0x30
 8006cae:	3e01      	subs	r6, #1
 8006cb0:	7033      	strb	r3, [r6, #0]
 8006cb2:	9b04      	ldr	r3, [sp, #16]
 8006cb4:	1b9b      	subs	r3, r3, r6
 8006cb6:	6123      	str	r3, [r4, #16]
 8006cb8:	9b07      	ldr	r3, [sp, #28]
 8006cba:	0021      	movs	r1, r4
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	9805      	ldr	r0, [sp, #20]
 8006cc0:	9b06      	ldr	r3, [sp, #24]
 8006cc2:	aa09      	add	r2, sp, #36	; 0x24
 8006cc4:	f7ff fef4 	bl	8006ab0 <_printf_common>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d14c      	bne.n	8006d66 <_printf_i+0x1d6>
 8006ccc:	2001      	movs	r0, #1
 8006cce:	4240      	negs	r0, r0
 8006cd0:	b00b      	add	sp, #44	; 0x2c
 8006cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd4:	3145      	adds	r1, #69	; 0x45
 8006cd6:	700a      	strb	r2, [r1, #0]
 8006cd8:	4a34      	ldr	r2, [pc, #208]	; (8006dac <_printf_i+0x21c>)
 8006cda:	9203      	str	r2, [sp, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	6821      	ldr	r1, [r4, #0]
 8006ce0:	ca20      	ldmia	r2!, {r5}
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	0608      	lsls	r0, r1, #24
 8006ce6:	d516      	bpl.n	8006d16 <_printf_i+0x186>
 8006ce8:	07cb      	lsls	r3, r1, #31
 8006cea:	d502      	bpl.n	8006cf2 <_printf_i+0x162>
 8006cec:	2320      	movs	r3, #32
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	6021      	str	r1, [r4, #0]
 8006cf2:	2710      	movs	r7, #16
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	d1b2      	bne.n	8006c5e <_printf_i+0xce>
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	6822      	ldr	r2, [r4, #0]
 8006cfc:	439a      	bics	r2, r3
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	e7ad      	b.n	8006c5e <_printf_i+0xce>
 8006d02:	2220      	movs	r2, #32
 8006d04:	6809      	ldr	r1, [r1, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	0022      	movs	r2, r4
 8006d0c:	2178      	movs	r1, #120	; 0x78
 8006d0e:	3245      	adds	r2, #69	; 0x45
 8006d10:	7011      	strb	r1, [r2, #0]
 8006d12:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <_printf_i+0x220>)
 8006d14:	e7e1      	b.n	8006cda <_printf_i+0x14a>
 8006d16:	0648      	lsls	r0, r1, #25
 8006d18:	d5e6      	bpl.n	8006ce8 <_printf_i+0x158>
 8006d1a:	b2ad      	uxth	r5, r5
 8006d1c:	e7e4      	b.n	8006ce8 <_printf_i+0x158>
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	680d      	ldr	r5, [r1, #0]
 8006d22:	1d10      	adds	r0, r2, #4
 8006d24:	6949      	ldr	r1, [r1, #20]
 8006d26:	6018      	str	r0, [r3, #0]
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	062e      	lsls	r6, r5, #24
 8006d2c:	d501      	bpl.n	8006d32 <_printf_i+0x1a2>
 8006d2e:	6019      	str	r1, [r3, #0]
 8006d30:	e002      	b.n	8006d38 <_printf_i+0x1a8>
 8006d32:	066d      	lsls	r5, r5, #25
 8006d34:	d5fb      	bpl.n	8006d2e <_printf_i+0x19e>
 8006d36:	8019      	strh	r1, [r3, #0]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	9e04      	ldr	r6, [sp, #16]
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	e7bb      	b.n	8006cb8 <_printf_i+0x128>
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	1d11      	adds	r1, r2, #4
 8006d44:	6019      	str	r1, [r3, #0]
 8006d46:	6816      	ldr	r6, [r2, #0]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	0030      	movs	r0, r6
 8006d4c:	6862      	ldr	r2, [r4, #4]
 8006d4e:	f000 f831 	bl	8006db4 <memchr>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d001      	beq.n	8006d5a <_printf_i+0x1ca>
 8006d56:	1b80      	subs	r0, r0, r6
 8006d58:	6060      	str	r0, [r4, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9a04      	ldr	r2, [sp, #16]
 8006d62:	7013      	strb	r3, [r2, #0]
 8006d64:	e7a8      	b.n	8006cb8 <_printf_i+0x128>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	0032      	movs	r2, r6
 8006d6a:	9906      	ldr	r1, [sp, #24]
 8006d6c:	9805      	ldr	r0, [sp, #20]
 8006d6e:	9d07      	ldr	r5, [sp, #28]
 8006d70:	47a8      	blx	r5
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d0aa      	beq.n	8006ccc <_printf_i+0x13c>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	079b      	lsls	r3, r3, #30
 8006d7a:	d415      	bmi.n	8006da8 <_printf_i+0x218>
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	68e0      	ldr	r0, [r4, #12]
 8006d80:	4298      	cmp	r0, r3
 8006d82:	daa5      	bge.n	8006cd0 <_printf_i+0x140>
 8006d84:	0018      	movs	r0, r3
 8006d86:	e7a3      	b.n	8006cd0 <_printf_i+0x140>
 8006d88:	0022      	movs	r2, r4
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	9906      	ldr	r1, [sp, #24]
 8006d8e:	9805      	ldr	r0, [sp, #20]
 8006d90:	9e07      	ldr	r6, [sp, #28]
 8006d92:	3219      	adds	r2, #25
 8006d94:	47b0      	blx	r6
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	d098      	beq.n	8006ccc <_printf_i+0x13c>
 8006d9a:	3501      	adds	r5, #1
 8006d9c:	68e3      	ldr	r3, [r4, #12]
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	42ab      	cmp	r3, r5
 8006da4:	dcf0      	bgt.n	8006d88 <_printf_i+0x1f8>
 8006da6:	e7e9      	b.n	8006d7c <_printf_i+0x1ec>
 8006da8:	2500      	movs	r5, #0
 8006daa:	e7f7      	b.n	8006d9c <_printf_i+0x20c>
 8006dac:	08008ed5 	.word	0x08008ed5
 8006db0:	08008ee6 	.word	0x08008ee6

08006db4 <memchr>:
 8006db4:	b2c9      	uxtb	r1, r1
 8006db6:	1882      	adds	r2, r0, r2
 8006db8:	4290      	cmp	r0, r2
 8006dba:	d101      	bne.n	8006dc0 <memchr+0xc>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	4770      	bx	lr
 8006dc0:	7803      	ldrb	r3, [r0, #0]
 8006dc2:	428b      	cmp	r3, r1
 8006dc4:	d0fb      	beq.n	8006dbe <memchr+0xa>
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	e7f6      	b.n	8006db8 <memchr+0x4>

08006dca <memmove>:
 8006dca:	b510      	push	{r4, lr}
 8006dcc:	4288      	cmp	r0, r1
 8006dce:	d902      	bls.n	8006dd6 <memmove+0xc>
 8006dd0:	188b      	adds	r3, r1, r2
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	d303      	bcc.n	8006dde <memmove+0x14>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e007      	b.n	8006dea <memmove+0x20>
 8006dda:	5c8b      	ldrb	r3, [r1, r2]
 8006ddc:	5483      	strb	r3, [r0, r2]
 8006dde:	3a01      	subs	r2, #1
 8006de0:	d2fb      	bcs.n	8006dda <memmove+0x10>
 8006de2:	bd10      	pop	{r4, pc}
 8006de4:	5ccc      	ldrb	r4, [r1, r3]
 8006de6:	54c4      	strb	r4, [r0, r3]
 8006de8:	3301      	adds	r3, #1
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d1fa      	bne.n	8006de4 <memmove+0x1a>
 8006dee:	e7f8      	b.n	8006de2 <memmove+0x18>

08006df0 <_free_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	0005      	movs	r5, r0
 8006df4:	2900      	cmp	r1, #0
 8006df6:	d010      	beq.n	8006e1a <_free_r+0x2a>
 8006df8:	1f0c      	subs	r4, r1, #4
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da00      	bge.n	8006e02 <_free_r+0x12>
 8006e00:	18e4      	adds	r4, r4, r3
 8006e02:	0028      	movs	r0, r5
 8006e04:	f000 f918 	bl	8007038 <__malloc_lock>
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <_free_r+0x90>)
 8006e0a:	6813      	ldr	r3, [r2, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d105      	bne.n	8006e1c <_free_r+0x2c>
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	6014      	str	r4, [r2, #0]
 8006e14:	0028      	movs	r0, r5
 8006e16:	f000 f917 	bl	8007048 <__malloc_unlock>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	d908      	bls.n	8006e32 <_free_r+0x42>
 8006e20:	6821      	ldr	r1, [r4, #0]
 8006e22:	1860      	adds	r0, r4, r1
 8006e24:	4283      	cmp	r3, r0
 8006e26:	d1f3      	bne.n	8006e10 <_free_r+0x20>
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	1841      	adds	r1, r0, r1
 8006e2e:	6021      	str	r1, [r4, #0]
 8006e30:	e7ee      	b.n	8006e10 <_free_r+0x20>
 8006e32:	001a      	movs	r2, r3
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <_free_r+0x4e>
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	d9f9      	bls.n	8006e32 <_free_r+0x42>
 8006e3e:	6811      	ldr	r1, [r2, #0]
 8006e40:	1850      	adds	r0, r2, r1
 8006e42:	42a0      	cmp	r0, r4
 8006e44:	d10b      	bne.n	8006e5e <_free_r+0x6e>
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	1809      	adds	r1, r1, r0
 8006e4a:	1850      	adds	r0, r2, r1
 8006e4c:	6011      	str	r1, [r2, #0]
 8006e4e:	4283      	cmp	r3, r0
 8006e50:	d1e0      	bne.n	8006e14 <_free_r+0x24>
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	1841      	adds	r1, r0, r1
 8006e58:	6011      	str	r1, [r2, #0]
 8006e5a:	6053      	str	r3, [r2, #4]
 8006e5c:	e7da      	b.n	8006e14 <_free_r+0x24>
 8006e5e:	42a0      	cmp	r0, r4
 8006e60:	d902      	bls.n	8006e68 <_free_r+0x78>
 8006e62:	230c      	movs	r3, #12
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	e7d5      	b.n	8006e14 <_free_r+0x24>
 8006e68:	6821      	ldr	r1, [r4, #0]
 8006e6a:	1860      	adds	r0, r4, r1
 8006e6c:	4283      	cmp	r3, r0
 8006e6e:	d103      	bne.n	8006e78 <_free_r+0x88>
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	1841      	adds	r1, r0, r1
 8006e76:	6021      	str	r1, [r4, #0]
 8006e78:	6063      	str	r3, [r4, #4]
 8006e7a:	6054      	str	r4, [r2, #4]
 8006e7c:	e7ca      	b.n	8006e14 <_free_r+0x24>
 8006e7e:	46c0      	nop			; (mov r8, r8)
 8006e80:	2000075c 	.word	0x2000075c

08006e84 <sbrk_aligned>:
 8006e84:	b570      	push	{r4, r5, r6, lr}
 8006e86:	4e0f      	ldr	r6, [pc, #60]	; (8006ec4 <sbrk_aligned+0x40>)
 8006e88:	000d      	movs	r5, r1
 8006e8a:	6831      	ldr	r1, [r6, #0]
 8006e8c:	0004      	movs	r4, r0
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	d102      	bne.n	8006e98 <sbrk_aligned+0x14>
 8006e92:	f000 f8bf 	bl	8007014 <_sbrk_r>
 8006e96:	6030      	str	r0, [r6, #0]
 8006e98:	0029      	movs	r1, r5
 8006e9a:	0020      	movs	r0, r4
 8006e9c:	f000 f8ba 	bl	8007014 <_sbrk_r>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d00a      	beq.n	8006eba <sbrk_aligned+0x36>
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	1cc5      	adds	r5, r0, #3
 8006ea8:	439d      	bics	r5, r3
 8006eaa:	42a8      	cmp	r0, r5
 8006eac:	d007      	beq.n	8006ebe <sbrk_aligned+0x3a>
 8006eae:	1a29      	subs	r1, r5, r0
 8006eb0:	0020      	movs	r0, r4
 8006eb2:	f000 f8af 	bl	8007014 <_sbrk_r>
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	d101      	bne.n	8006ebe <sbrk_aligned+0x3a>
 8006eba:	2501      	movs	r5, #1
 8006ebc:	426d      	negs	r5, r5
 8006ebe:	0028      	movs	r0, r5
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	20000760 	.word	0x20000760

08006ec8 <_malloc_r>:
 8006ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eca:	2203      	movs	r2, #3
 8006ecc:	1ccb      	adds	r3, r1, #3
 8006ece:	4393      	bics	r3, r2
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	0006      	movs	r6, r0
 8006ed4:	001f      	movs	r7, r3
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	d232      	bcs.n	8006f40 <_malloc_r+0x78>
 8006eda:	270c      	movs	r7, #12
 8006edc:	42b9      	cmp	r1, r7
 8006ede:	d831      	bhi.n	8006f44 <_malloc_r+0x7c>
 8006ee0:	0030      	movs	r0, r6
 8006ee2:	f000 f8a9 	bl	8007038 <__malloc_lock>
 8006ee6:	4d32      	ldr	r5, [pc, #200]	; (8006fb0 <_malloc_r+0xe8>)
 8006ee8:	682b      	ldr	r3, [r5, #0]
 8006eea:	001c      	movs	r4, r3
 8006eec:	2c00      	cmp	r4, #0
 8006eee:	d12e      	bne.n	8006f4e <_malloc_r+0x86>
 8006ef0:	0039      	movs	r1, r7
 8006ef2:	0030      	movs	r0, r6
 8006ef4:	f7ff ffc6 	bl	8006e84 <sbrk_aligned>
 8006ef8:	0004      	movs	r4, r0
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d11e      	bne.n	8006f3c <_malloc_r+0x74>
 8006efe:	682c      	ldr	r4, [r5, #0]
 8006f00:	0025      	movs	r5, r4
 8006f02:	2d00      	cmp	r5, #0
 8006f04:	d14a      	bne.n	8006f9c <_malloc_r+0xd4>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	0029      	movs	r1, r5
 8006f0a:	18e3      	adds	r3, r4, r3
 8006f0c:	0030      	movs	r0, r6
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	f000 f880 	bl	8007014 <_sbrk_r>
 8006f14:	9b01      	ldr	r3, [sp, #4]
 8006f16:	4283      	cmp	r3, r0
 8006f18:	d143      	bne.n	8006fa2 <_malloc_r+0xda>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	3703      	adds	r7, #3
 8006f1e:	1aff      	subs	r7, r7, r3
 8006f20:	2303      	movs	r3, #3
 8006f22:	439f      	bics	r7, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	2f0c      	cmp	r7, #12
 8006f28:	d200      	bcs.n	8006f2c <_malloc_r+0x64>
 8006f2a:	270c      	movs	r7, #12
 8006f2c:	0039      	movs	r1, r7
 8006f2e:	0030      	movs	r0, r6
 8006f30:	f7ff ffa8 	bl	8006e84 <sbrk_aligned>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d034      	beq.n	8006fa2 <_malloc_r+0xda>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	19df      	adds	r7, r3, r7
 8006f3c:	6027      	str	r7, [r4, #0]
 8006f3e:	e013      	b.n	8006f68 <_malloc_r+0xa0>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dacb      	bge.n	8006edc <_malloc_r+0x14>
 8006f44:	230c      	movs	r3, #12
 8006f46:	2500      	movs	r5, #0
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	0028      	movs	r0, r5
 8006f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f4e:	6822      	ldr	r2, [r4, #0]
 8006f50:	1bd1      	subs	r1, r2, r7
 8006f52:	d420      	bmi.n	8006f96 <_malloc_r+0xce>
 8006f54:	290b      	cmp	r1, #11
 8006f56:	d917      	bls.n	8006f88 <_malloc_r+0xc0>
 8006f58:	19e2      	adds	r2, r4, r7
 8006f5a:	6027      	str	r7, [r4, #0]
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d111      	bne.n	8006f84 <_malloc_r+0xbc>
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	6053      	str	r3, [r2, #4]
 8006f68:	0030      	movs	r0, r6
 8006f6a:	0025      	movs	r5, r4
 8006f6c:	f000 f86c 	bl	8007048 <__malloc_unlock>
 8006f70:	2207      	movs	r2, #7
 8006f72:	350b      	adds	r5, #11
 8006f74:	1d23      	adds	r3, r4, #4
 8006f76:	4395      	bics	r5, r2
 8006f78:	1aea      	subs	r2, r5, r3
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	d0e5      	beq.n	8006f4a <_malloc_r+0x82>
 8006f7e:	1b5b      	subs	r3, r3, r5
 8006f80:	50a3      	str	r3, [r4, r2]
 8006f82:	e7e2      	b.n	8006f4a <_malloc_r+0x82>
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	e7ec      	b.n	8006f62 <_malloc_r+0x9a>
 8006f88:	6862      	ldr	r2, [r4, #4]
 8006f8a:	42a3      	cmp	r3, r4
 8006f8c:	d101      	bne.n	8006f92 <_malloc_r+0xca>
 8006f8e:	602a      	str	r2, [r5, #0]
 8006f90:	e7ea      	b.n	8006f68 <_malloc_r+0xa0>
 8006f92:	605a      	str	r2, [r3, #4]
 8006f94:	e7e8      	b.n	8006f68 <_malloc_r+0xa0>
 8006f96:	0023      	movs	r3, r4
 8006f98:	6864      	ldr	r4, [r4, #4]
 8006f9a:	e7a7      	b.n	8006eec <_malloc_r+0x24>
 8006f9c:	002c      	movs	r4, r5
 8006f9e:	686d      	ldr	r5, [r5, #4]
 8006fa0:	e7af      	b.n	8006f02 <_malloc_r+0x3a>
 8006fa2:	230c      	movs	r3, #12
 8006fa4:	0030      	movs	r0, r6
 8006fa6:	6033      	str	r3, [r6, #0]
 8006fa8:	f000 f84e 	bl	8007048 <__malloc_unlock>
 8006fac:	e7cd      	b.n	8006f4a <_malloc_r+0x82>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	2000075c 	.word	0x2000075c

08006fb4 <_realloc_r>:
 8006fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb6:	0007      	movs	r7, r0
 8006fb8:	000e      	movs	r6, r1
 8006fba:	0014      	movs	r4, r2
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	d105      	bne.n	8006fcc <_realloc_r+0x18>
 8006fc0:	0011      	movs	r1, r2
 8006fc2:	f7ff ff81 	bl	8006ec8 <_malloc_r>
 8006fc6:	0005      	movs	r5, r0
 8006fc8:	0028      	movs	r0, r5
 8006fca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fcc:	2a00      	cmp	r2, #0
 8006fce:	d103      	bne.n	8006fd8 <_realloc_r+0x24>
 8006fd0:	f7ff ff0e 	bl	8006df0 <_free_r>
 8006fd4:	0025      	movs	r5, r4
 8006fd6:	e7f7      	b.n	8006fc8 <_realloc_r+0x14>
 8006fd8:	f000 f83e 	bl	8007058 <_malloc_usable_size_r>
 8006fdc:	9001      	str	r0, [sp, #4]
 8006fde:	4284      	cmp	r4, r0
 8006fe0:	d803      	bhi.n	8006fea <_realloc_r+0x36>
 8006fe2:	0035      	movs	r5, r6
 8006fe4:	0843      	lsrs	r3, r0, #1
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	d3ee      	bcc.n	8006fc8 <_realloc_r+0x14>
 8006fea:	0021      	movs	r1, r4
 8006fec:	0038      	movs	r0, r7
 8006fee:	f7ff ff6b 	bl	8006ec8 <_malloc_r>
 8006ff2:	1e05      	subs	r5, r0, #0
 8006ff4:	d0e8      	beq.n	8006fc8 <_realloc_r+0x14>
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	0022      	movs	r2, r4
 8006ffa:	429c      	cmp	r4, r3
 8006ffc:	d900      	bls.n	8007000 <_realloc_r+0x4c>
 8006ffe:	001a      	movs	r2, r3
 8007000:	0031      	movs	r1, r6
 8007002:	0028      	movs	r0, r5
 8007004:	f7ff fbc0 	bl	8006788 <memcpy>
 8007008:	0031      	movs	r1, r6
 800700a:	0038      	movs	r0, r7
 800700c:	f7ff fef0 	bl	8006df0 <_free_r>
 8007010:	e7da      	b.n	8006fc8 <_realloc_r+0x14>
	...

08007014 <_sbrk_r>:
 8007014:	2300      	movs	r3, #0
 8007016:	b570      	push	{r4, r5, r6, lr}
 8007018:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_sbrk_r+0x20>)
 800701a:	0004      	movs	r4, r0
 800701c:	0008      	movs	r0, r1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	f7fb f9ec 	bl	80023fc <_sbrk>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d103      	bne.n	8007030 <_sbrk_r+0x1c>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d000      	beq.n	8007030 <_sbrk_r+0x1c>
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	20000764 	.word	0x20000764

08007038 <__malloc_lock>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4802      	ldr	r0, [pc, #8]	; (8007044 <__malloc_lock+0xc>)
 800703c:	f000 f814 	bl	8007068 <__retarget_lock_acquire_recursive>
 8007040:	bd10      	pop	{r4, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	20000768 	.word	0x20000768

08007048 <__malloc_unlock>:
 8007048:	b510      	push	{r4, lr}
 800704a:	4802      	ldr	r0, [pc, #8]	; (8007054 <__malloc_unlock+0xc>)
 800704c:	f000 f80d 	bl	800706a <__retarget_lock_release_recursive>
 8007050:	bd10      	pop	{r4, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	20000768 	.word	0x20000768

08007058 <_malloc_usable_size_r>:
 8007058:	1f0b      	subs	r3, r1, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	1f18      	subs	r0, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	da01      	bge.n	8007066 <_malloc_usable_size_r+0xe>
 8007062:	580b      	ldr	r3, [r1, r0]
 8007064:	18c0      	adds	r0, r0, r3
 8007066:	4770      	bx	lr

08007068 <__retarget_lock_acquire_recursive>:
 8007068:	4770      	bx	lr

0800706a <__retarget_lock_release_recursive>:
 800706a:	4770      	bx	lr

0800706c <_init>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr

08007078 <_fini>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr
