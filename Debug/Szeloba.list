
Szeloba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007920  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cbc  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a69c  0800a69c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6a4  0800a6a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6a4  0800a6a4  0001a6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000084  0800a730  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800a730  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001448f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003114  00000000  00000000  0003453b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00037650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  000387d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000100cf  00000000  00000000  00039800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004f25  00000000  00000000  000498cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0004e7f4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041f4  00000000  00000000  0004e844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080079c8 	.word	0x080079c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080079c8 	.word	0x080079c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4647      	mov	r7, r8
 800045e:	b580      	push	{r7, lr}
 8000460:	0007      	movs	r7, r0
 8000462:	4699      	mov	r9, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	469c      	mov	ip, r3
 8000468:	0413      	lsls	r3, r2, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0400      	lsls	r0, r0, #16
 8000474:	0c14      	lsrs	r4, r2, #16
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	4345      	muls	r5, r0
 800047a:	434b      	muls	r3, r1
 800047c:	4360      	muls	r0, r4
 800047e:	4361      	muls	r1, r4
 8000480:	18c0      	adds	r0, r0, r3
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4372      	muls	r2, r6
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	4463      	add	r3, ip
 800049e:	042d      	lsls	r5, r5, #16
 80004a0:	0c2d      	lsrs	r5, r5, #16
 80004a2:	18c9      	adds	r1, r1, r3
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	1889      	adds	r1, r1, r2
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	469b      	mov	fp, r3
 80004ea:	d433      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ec:	465a      	mov	r2, fp
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83a      	bhi.n	8000576 <__udivmoddi4+0xc2>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e078      	b.n	80005f8 <__udivmoddi4+0x144>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e075      	b.n	80005fe <__udivmoddi4+0x14a>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e028      	b.n	800057e <__udivmoddi4+0xca>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	2320      	movs	r3, #32
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	4652      	mov	r2, sl
 800055c:	40da      	lsrs	r2, r3
 800055e:	4641      	mov	r1, r8
 8000560:	0013      	movs	r3, r2
 8000562:	464a      	mov	r2, r9
 8000564:	408a      	lsls	r2, r1
 8000566:	0017      	movs	r7, r2
 8000568:	4642      	mov	r2, r8
 800056a:	431f      	orrs	r7, r3
 800056c:	4653      	mov	r3, sl
 800056e:	4093      	lsls	r3, r2
 8000570:	001e      	movs	r6, r3
 8000572:	42af      	cmp	r7, r5
 8000574:	d9c4      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000576:	2200      	movs	r2, #0
 8000578:	2300      	movs	r3, #0
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0d9      	beq.n	8000538 <__udivmoddi4+0x84>
 8000584:	07fb      	lsls	r3, r7, #31
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	4646      	mov	r6, r8
 800058c:	087b      	lsrs	r3, r7, #1
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xfa>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xe4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xfe>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0x108>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xdc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xfa>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	465b      	mov	r3, fp
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db24      	blt.n	8000614 <__udivmoddi4+0x160>
 80005ca:	002b      	movs	r3, r5
 80005cc:	465a      	mov	r2, fp
 80005ce:	4644      	mov	r4, r8
 80005d0:	40d3      	lsrs	r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	465b      	mov	r3, fp
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2a      	blt.n	8000636 <__udivmoddi4+0x182>
 80005e0:	0026      	movs	r6, r4
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	0026      	movs	r6, r4
 80005e8:	4647      	mov	r7, r8
 80005ea:	40be      	lsls	r6, r7
 80005ec:	0032      	movs	r2, r6
 80005ee:	1a80      	subs	r0, r0, r2
 80005f0:	4199      	sbcs	r1, r3
 80005f2:	9000      	str	r0, [sp, #0]
 80005f4:	9101      	str	r1, [sp, #4]
 80005f6:	e79f      	b.n	8000538 <__udivmoddi4+0x84>
 80005f8:	42a3      	cmp	r3, r4
 80005fa:	d8bc      	bhi.n	8000576 <__udivmoddi4+0xc2>
 80005fc:	e783      	b.n	8000506 <__udivmoddi4+0x52>
 80005fe:	4642      	mov	r2, r8
 8000600:	2320      	movs	r3, #32
 8000602:	2100      	movs	r1, #0
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2200      	movs	r2, #0
 8000608:	9100      	str	r1, [sp, #0]
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	40da      	lsrs	r2, r3
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	e786      	b.n	8000522 <__udivmoddi4+0x6e>
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	4646      	mov	r6, r8
 800061e:	409a      	lsls	r2, r3
 8000620:	0023      	movs	r3, r4
 8000622:	40f3      	lsrs	r3, r6
 8000624:	4644      	mov	r4, r8
 8000626:	4313      	orrs	r3, r2
 8000628:	002a      	movs	r2, r5
 800062a:	40e2      	lsrs	r2, r4
 800062c:	001c      	movs	r4, r3
 800062e:	465b      	mov	r3, fp
 8000630:	0015      	movs	r5, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	dad4      	bge.n	80005e0 <__udivmoddi4+0x12c>
 8000636:	4642      	mov	r2, r8
 8000638:	002f      	movs	r7, r5
 800063a:	2320      	movs	r3, #32
 800063c:	0026      	movs	r6, r4
 800063e:	4097      	lsls	r7, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	40de      	lsrs	r6, r3
 8000644:	003b      	movs	r3, r7
 8000646:	4333      	orrs	r3, r6
 8000648:	e7cd      	b.n	80005e6 <__udivmoddi4+0x132>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	; (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b08b      	sub	sp, #44	; 0x2c
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	2414      	movs	r4, #20
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2314      	movs	r3, #20
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f006 fd20 	bl	80070f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <MX_GPIO_Init+0x164>)
 80006b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <MX_GPIO_Init+0x164>)
 80006bc:	2104      	movs	r1, #4
 80006be:	430a      	orrs	r2, r1
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <MX_GPIO_Init+0x164>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	2204      	movs	r2, #4
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <MX_GPIO_Init+0x164>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <MX_GPIO_Init+0x164>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <MX_GPIO_Init+0x164>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	4013      	ands	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <MX_GPIO_Init+0x164>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x164>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <MX_GPIO_Init+0x164>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <MX_GPIO_Init+0x164>)
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x164>)
 8000704:	2102      	movs	r1, #2
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <MX_GPIO_Init+0x164>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	2202      	movs	r2, #2
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_GPIO_Init+0x164>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x164>)
 800071c:	2108      	movs	r1, #8
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_GPIO_Init+0x164>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2208      	movs	r2, #8
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800072e:	193b      	adds	r3, r7, r4
 8000730:	4a35      	ldr	r2, [pc, #212]	; (8000808 <MX_GPIO_Init+0x168>)
 8000732:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <MX_GPIO_Init+0x16c>)
 8000744:	0019      	movs	r1, r3
 8000746:	0010      	movs	r0, r2
 8000748:	f003 f994 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2203      	movs	r2, #3
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800075e:	193b      	adds	r3, r7, r4
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <MX_GPIO_Init+0x170>)
 8000762:	0019      	movs	r1, r3
 8000764:	0010      	movs	r0, r2
 8000766:	f003 f985 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2210      	movs	r2, #16
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2284      	movs	r2, #132	; 0x84
 8000774:	0392      	lsls	r2, r2, #14
 8000776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2201      	movs	r2, #1
 800077c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 800077e:	193a      	adds	r2, r7, r4
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f003 f974 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800078c:	193b      	adds	r3, r7, r4
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <MX_GPIO_Init+0x174>)
 8000790:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2203      	movs	r2, #3
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	193a      	adds	r2, r7, r4
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f003 f964 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <MX_GPIO_Init+0x178>)
 80007b0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2203      	movs	r2, #3
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_GPIO_Init+0x17c>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f003 f955 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2204      	movs	r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2203      	movs	r2, #3
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_GPIO_Init+0x180>)
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f003 f945 	bl	8003a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2007      	movs	r0, #7
 80007f0:	f003 f886 	bl	8003900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007f4:	2007      	movs	r0, #7
 80007f6:	f003 f898 	bl	800392a <HAL_NVIC_EnableIRQ>

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	; 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	00003fff 	.word	0x00003fff
 800080c:	50000800 	.word	0x50000800
 8000810:	50001c00 	.word	0x50001c00
 8000814:	00009fe0 	.word	0x00009fe0
 8000818:	0000fcff 	.word	0x0000fcff
 800081c:	50000400 	.word	0x50000400
 8000820:	50000c00 	.word	0x50000c00

08000824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C1_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C1_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2C1_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f003 fabf 	bl	8003de4 <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 fb25 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2C1_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f003 fefa 	bl	800466c <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fb1c 	bl	8000eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_I2C1_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f003 ff3d 	bl	8004704 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 fb13 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000a0 	.word	0x200000a0
 800089c:	40005400 	.word	0x40005400
 80008a0:	0010061a 	.word	0x0010061a

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	240c      	movs	r4, #12
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f006 fc1d 	bl	80070f6 <memset>
  if(i2cHandle->Instance==I2C1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_I2C_MspInit+0x80>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d129      	bne.n	800091a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	22c0      	movs	r2, #192	; 0xc0
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2212      	movs	r2, #18
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2203      	movs	r2, #3
 80008f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2204      	movs	r2, #4
 80008fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	187b      	adds	r3, r7, r1
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_I2C_MspInit+0x88>)
 8000904:	0019      	movs	r1, r3
 8000906:	0010      	movs	r0, r2
 8000908:	f003 f8b4 	bl	8003a74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x84>)
 800090e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_I2C_MspInit+0x84>)
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	0389      	lsls	r1, r1, #14
 8000916:	430a      	orrs	r2, r1
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b009      	add	sp, #36	; 0x24
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	50000400 	.word	0x50000400

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	structInit();
 8000934:	f001 f920 	bl	8001b78 <structInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f002 fea2 	bl	8003680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f826 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff feae 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000944:	f002 fdf6 	bl	8003534 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000948:	f7ff ff6c 	bl	8000824 <MX_I2C1_Init>
  MX_TIM2_Init();
 800094c:	f002 fc96 	bl	800327c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000950:	f002 fcf8 	bl	8003344 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000954:	f002 fd32 	bl	80033bc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  // USART & TIMERS
  printUART("Running...\r\n");
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <main+0x54>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fab2 	bl	8000ec4 <printUART>
  // display initialization
  SSD1306_Init();
 8000960:	f000 fb6a 	bl	8001038 <SSD1306_Init>
  SSD1306_SetContrast(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f001 f843 	bl	80019f0 <SSD1306_SetContrast>
  setTheme();
 800096a:	f001 fba5 	bl	80020b8 <setTheme>
  __HAL_TIM_SET_COUNTER(&htim2, 32000);
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <main+0x58>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	22fa      	movs	r2, #250	; 0xfa
 8000974:	01d2      	lsls	r2, r2, #7
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <main+0x58>)
 800097a:	213c      	movs	r1, #60	; 0x3c
 800097c:	0018      	movs	r0, r3
 800097e:	f004 fffb 	bl	8005978 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000982:	e7fe      	b.n	8000982 <main+0x52>
 8000984:	080079e0 	.word	0x080079e0
 8000988:	20000640 	.word	0x20000640

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b09f      	sub	sp, #124	; 0x7c
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	2440      	movs	r4, #64	; 0x40
 8000994:	193b      	adds	r3, r7, r4
 8000996:	0018      	movs	r0, r3
 8000998:	2338      	movs	r3, #56	; 0x38
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f006 fbaa 	bl	80070f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a2:	232c      	movs	r3, #44	; 0x2c
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	2314      	movs	r3, #20
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f006 fba2 	bl	80070f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	0018      	movs	r0, r3
 80009b6:	2328      	movs	r3, #40	; 0x28
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f006 fb9b 	bl	80070f6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <SystemClock_Config+0xe4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <SystemClock_Config+0xe8>)
 80009c6:	401a      	ands	r2, r3
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <SystemClock_Config+0xe4>)
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	0109      	lsls	r1, r1, #4
 80009ce:	430a      	orrs	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d2:	0021      	movs	r1, r4
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	22a0      	movs	r2, #160	; 0xa0
 80009de:	02d2      	lsls	r2, r2, #11
 80009e0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2202      	movs	r2, #2
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2280      	movs	r2, #128	; 0x80
 80009ec:	0252      	lsls	r2, r2, #9
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	02d2      	lsls	r2, r2, #11
 80009f6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	03d2      	lsls	r2, r2, #15
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	0018      	movs	r0, r3
 8000a04:	f003 feca 	bl	800479c <HAL_RCC_OscConfig>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a0c:	f000 fa54 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	212c      	movs	r1, #44	; 0x2c
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	220f      	movs	r2, #15
 8000a16:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2100      	movs	r1, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f004 fa85 	bl	8004f44 <HAL_RCC_ClockConfig>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a3e:	f000 fa3b 	bl	8000eb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	220a      	movs	r2, #10
 8000a46:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	0018      	movs	r0, r3
 8000a58:	f004 fcc2 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a60:	f000 fa2a 	bl	8000eb8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a64:	f004 fbb6 	bl	80051d4 <HAL_RCC_EnableCSS>
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b01f      	add	sp, #124	; 0x7c
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	40007000 	.word	0x40007000
 8000a74:	ffffe7ff 	.word	0xffffe7ff

08000a78 <HAL_TIM_IC_CaptureCallback>:

// =========================================================================================
/* TIMERS - ENCODER */
// =========================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	05db      	lsls	r3, r3, #23
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000a8c:	250f      	movs	r5, #15
 8000a8e:	197c      	adds	r4, r7, r5
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f005 f905 	bl	8005ca2 <HAL_TIM_Base_GetState>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	7023      	strb	r3, [r4, #0]
		uint8_t encoderBusyFlag = HAL_TIM_Encoder_GetState(&htim7);
 8000a9c:	260e      	movs	r6, #14
 8000a9e:	19bc      	adds	r4, r7, r6
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f005 f909 	bl	8005cba <HAL_TIM_Encoder_GetState>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	7023      	strb	r3, [r4, #0]
		if(tim7BusyFlag == 1)
 8000aac:	197b      	adds	r3, r7, r5
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d107      	bne.n	8000ac4 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if(encoderBusyFlag == 1)
 8000ab4:	19bb      	adds	r3, r7, r6
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d103      	bne.n	8000ac4 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				HAL_TIM_Base_Start_IT(&htim7);
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_TIM_IC_CaptureCallback+0x54>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f004 fe42 	bl	8005748 <HAL_TIM_Base_Start_IT>
			}
		}
	}
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b005      	add	sp, #20
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000acc:	200006c0 	.word	0x200006c0

08000ad0 <HAL_TIM_PeriodElapsedCallback>:

// =========================================================================================
/* TIMERS - COUNTING */
// =========================================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	// ========================
	/* TIM6 - CLICK BUFFOR */
	// ========================
	if(htim->Instance == TIM6)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4ac9      	ldr	r2, [pc, #804]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d000      	beq.n	8000ae4 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ae2:	e0f9      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x208>
	{
		bool btnBusyFlag = HAL_GPIO_ReadPin(GPIOA, SET_BTN_Pin);
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	2110      	movs	r1, #16
 8000aea:	0018      	movs	r0, r3
 8000aec:	f003 f940 	bl	8003d70 <HAL_GPIO_ReadPin>
 8000af0:	0003      	movs	r3, r0
 8000af2:	001a      	movs	r2, r3
 8000af4:	240d      	movs	r4, #13
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	1e51      	subs	r1, r2, #1
 8000afa:	418a      	sbcs	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8000afe:	4bc2      	ldr	r3, [pc, #776]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f004 fe73 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		if(!btnBusyFlag)
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4053      	eors	r3, r2
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d100      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x46>
 8000b14:	e097      	b.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x176>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000b16:	4bbc      	ldr	r3, [pc, #752]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f004 fe15 	bl	8005748 <HAL_TIM_Base_Start_IT>
			if((workStep >= 2 && workStep <=5) || (workStep == 61)) pressBtnCounter++;
 8000b1e:	4bbb      	ldr	r3, [pc, #748]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d904      	bls.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x62>
 8000b28:	4bb8      	ldr	r3, [pc, #736]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b05      	cmp	r3, #5
 8000b30:	d904      	bls.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000b32:	4bb6      	ldr	r3, [pc, #728]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b3d      	cmp	r3, #61	; 0x3d
 8000b3a:	d106      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000b3c:	4bb4      	ldr	r3, [pc, #720]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4bb2      	ldr	r3, [pc, #712]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000b48:	701a      	strb	r2, [r3, #0]
			if(pressBtnCounter > PRESS_BTN_TIME)
 8000b4a:	4bb1      	ldr	r3, [pc, #708]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b0a      	cmp	r3, #10
 8000b52:	d800      	bhi.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x86>
 8000b54:	e077      	b.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x176>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 8000b56:	4bac      	ldr	r3, [pc, #688]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f004 fe47 	bl	80057ec <HAL_TIM_Base_Stop_IT>
				bool exception = 0;
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
				switch(workStep)
 8000b66:	4ba9      	ldr	r3, [pc, #676]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b3d      	cmp	r3, #61	; 0x3d
 8000b6e:	d03f      	beq.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000b70:	dc55      	bgt.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d02f      	beq.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x106>
 8000b76:	dc52      	bgt.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d01f      	beq.n	8000bbc <HAL_TIM_PeriodElapsedCallback+0xec>
 8000b7c:	dc4f      	bgt.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d002      	beq.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d00d      	beq.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0xd2>
 8000b86:	e04a      	b.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
				{
					case 2:
						width_MAIN = arrayToInt_chVal();
 8000b88:	f001 ff82 	bl	8002a90 <arrayToInt_chVal>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	001a      	movs	r2, r3
 8000b90:	4ba0      	ldr	r3, [pc, #640]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000b92:	801a      	strh	r2, [r3, #0]
						saveSetValue(width_MAIN);
 8000b94:	4b9f      	ldr	r3, [pc, #636]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f001 fff8 	bl	8002b90 <saveSetValue>
						break;
 8000ba0:	e03d      	b.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
					case 3:
						turns_MAIN = arrayToInt_chVal();
 8000ba2:	f001 ff75 	bl	8002a90 <arrayToInt_chVal>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	001a      	movs	r2, r3
 8000baa:	4b9b      	ldr	r3, [pc, #620]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bac:	801a      	strh	r2, [r3, #0]
						saveSetValue(turns_MAIN);
 8000bae:	4b9a      	ldr	r3, [pc, #616]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f001 ffeb 	bl	8002b90 <saveSetValue>
						break;
 8000bba:	e030      	b.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
					case 4:
						diameter_MAIN = arrayToInt_chVal();
 8000bbc:	f001 ff68 	bl	8002a90 <arrayToInt_chVal>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	4b95      	ldr	r3, [pc, #596]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000bc6:	801a      	strh	r2, [r3, #0]
						saveSetValue(diameter_MAIN);
 8000bc8:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 ffde 	bl	8002b90 <saveSetValue>
						break;
 8000bd4:	e023      	b.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
					case 5:
						speed_MAIN = arrayToInt_chVal();
 8000bd6:	f001 ff5b 	bl	8002a90 <arrayToInt_chVal>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	001a      	movs	r2, r3
 8000bde:	4b90      	ldr	r3, [pc, #576]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000be0:	801a      	strh	r2, [r3, #0]
						saveSetValue(speed_MAIN);
 8000be2:	4b8f      	ldr	r3, [pc, #572]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 ffd1 	bl	8002b90 <saveSetValue>
						break;
 8000bee:	e016      	b.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x14e>
					case 61:
						exception = 1;
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
						if(!selector) workStep = 7;
 8000bf8:	4b8a      	ldr	r3, [pc, #552]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x13a>
 8000c02:	4b82      	ldr	r3, [pc, #520]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e005      	b.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x146>
						else
						{
							workStep = 2;
 8000c0a:	4b80      	ldr	r3, [pc, #512]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	701a      	strb	r2, [r3, #0]
							correctionFlag = 1;
 8000c10:	4b85      	ldr	r3, [pc, #532]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
						}
						selector = 0;
 8000c16:	4b83      	ldr	r3, [pc, #524]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
						break;
 8000c1c:	46c0      	nop			; (mov r8, r8)
				}
				if(!exception)
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2201      	movs	r2, #1
 8000c26:	4053      	eors	r3, r2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x16c>
				{
					workStep++;
 8000c2e:	4b77      	ldr	r3, [pc, #476]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3301      	adds	r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b74      	ldr	r3, [pc, #464]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c3a:	701a      	strb	r2, [r3, #0]

				}
				pressBtnCounter = 0;
 8000c3c:	4b74      	ldr	r3, [pc, #464]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
				setTheme();
 8000c42:	f001 fa39 	bl	80020b8 <setTheme>
			}
		}
		if(btnBusyFlag)
 8000c46:	230d      	movs	r3, #13
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d043      	beq.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x208>
		{
			pressBtnCounter = 0;
 8000c50:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
			switch(workStep)
 8000c56:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b0b      	cmp	r3, #11
 8000c5e:	d83c      	bhi.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
 8000c60:	009a      	lsls	r2, r3, #2
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	469f      	mov	pc, r3
			{
				case 1:
					if(projectSelect == 0)
 8000c6a:	4b71      	ldr	r3, [pc, #452]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d103      	bne.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0x1ac>
					{
						workStep = 2;
 8000c74:	4b65      	ldr	r3, [pc, #404]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e002      	b.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x1b2>
					}
					else
					{
						workStep = 11;
 8000c7c:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c7e:	220b      	movs	r2, #11
 8000c80:	701a      	strb	r2, [r3, #0]
					}
					setTheme();
 8000c82:	f001 fa19 	bl	80020b8 <setTheme>
					break;
 8000c86:	e028      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
				case 11:
					workStep = 1;
 8000c88:	4b60      	ldr	r3, [pc, #384]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000c8e:	f001 fa13 	bl	80020b8 <setTheme>
					break;
 8000c92:	e022      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
				case 2:
					showValueScreen(CARCASS_WIDTH, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000c94:	2300      	movs	r3, #0
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f001 fcc2 	bl	8002624 <showValueScreen>
					break;
 8000ca0:	e01b      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
				case 3:
					showValueScreen(CARCASS_COIL_TURNS, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f001 fcbb 	bl	8002624 <showValueScreen>
					break;
 8000cae:	e014      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
				case 4:
					showValueScreen(WINDING_DIAMETER, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f001 fcb4 	bl	8002624 <showValueScreen>
					break;
 8000cbc:	e00d      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
				case 5:
					showValueScreen(WINDING_SPEED, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f001 fcad 	bl	8002624 <showValueScreen>
					break;
 8000cca:	e006      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
				case 6:
					workStep = 61;
 8000ccc:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000cce:	223d      	movs	r2, #61	; 0x3d
 8000cd0:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000cd2:	f001 f9f1 	bl	80020b8 <setTheme>
					break;
 8000cd6:	e000      	b.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x20a>
			}
		}
 8000cd8:	46c0      	nop			; (mov r8, r8)
	}

	// ========================
	/* TIM7 - BUFFOR LEFT/RIGHT */
	// ========================
	if(htim->Instance == TIM7)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d000      	beq.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x216>
 8000ce4:	e0b4      	b.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x380>
	{
		HAL_TIM_Base_Stop_IT(&htim7);
 8000ce6:	4b54      	ldr	r3, [pc, #336]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f004 fd7f 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		encoderCount = (__HAL_TIM_GET_COUNTER(&htim2) / 2);
 8000cee:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	085b      	lsrs	r3, r3, #1
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000cfa:	801a      	strh	r2, [r3, #0]
		bool direction;
		if(encoderCount != encoderCountPrev)
 8000cfc:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	4b50      	ldr	r3, [pc, #320]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d100      	bne.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x23e>
 8000d0c:	e0a0      	b.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x380>
		{
			if(encoderCount > encoderCountPrev)
 8000d0e:	4b4c      	ldr	r3, [pc, #304]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d904      	bls.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x258>
			{
				direction = 1;
 8000d1e:	230e      	movs	r3, #14
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e003      	b.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x260>
			}
			else
			{
				direction = 0;
 8000d28:	230e      	movs	r3, #14
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
			}
			encoderCountPrev = encoderCount;
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000d38:	801a      	strh	r2, [r3, #0]
			switch(workStep)
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b05      	cmp	r3, #5
 8000d42:	dc0a      	bgt.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x28a>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	dc00      	bgt.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x27a>
 8000d48:	e083      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d900      	bls.n	8000d50 <HAL_TIM_PeriodElapsedCallback+0x280>
 8000d4e:	e080      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
 8000d50:	009a      	lsls	r2, r3, #2
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	469f      	mov	pc, r3
 8000d5a:	2b3d      	cmp	r3, #61	; 0x3d
 8000d5c:	d04a      	beq.n	8000df4 <HAL_TIM_PeriodElapsedCallback+0x324>
					break;

			}
		}
	}
}
 8000d5e:	e078      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
					if(!direction)
 8000d60:	230e      	movs	r3, #14
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4053      	eors	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00c      	beq.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x2ba>
						if(projectSelect > 0)
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d015      	beq.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x2d6>
							projectSelect--;
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3b01      	subs	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e00d      	b.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x2d6>
						if((projectSelect) < PROJECT_COUNT)
 8000d8a:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d206      	bcs.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x2d6>
							projectSelect++;
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3301      	adds	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000da4:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000da6:	f001 f987 	bl	80020b8 <setTheme>
					break;
 8000daa:	e052      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
					showValueScreen(CARCASS_WIDTH, VALUE_CHANGING, direction, CONTI_RUN);
 8000dac:	230e      	movs	r3, #14
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	2300      	movs	r3, #0
 8000db4:	2101      	movs	r1, #1
 8000db6:	2000      	movs	r0, #0
 8000db8:	f001 fc34 	bl	8002624 <showValueScreen>
					break;
 8000dbc:	e049      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
					showValueScreen(CARCASS_COIL_TURNS, VALUE_CHANGING, direction, CONTI_RUN);
 8000dbe:	230e      	movs	r3, #14
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f001 fc2b 	bl	8002624 <showValueScreen>
					break;
 8000dce:	e040      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
					showValueScreen(WINDING_DIAMETER, VALUE_CHANGING, direction, CONTI_RUN);
 8000dd0:	230e      	movs	r3, #14
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f001 fc22 	bl	8002624 <showValueScreen>
					break;
 8000de0:	e037      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
					showValueScreen(WINDING_SPEED, VALUE_CHANGING, direction, CONTI_RUN);
 8000de2:	230e      	movs	r3, #14
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	2003      	movs	r0, #3
 8000dee:	f001 fc19 	bl	8002624 <showValueScreen>
					break;
 8000df2:	e02e      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
					correctnessQuery(direction, CONTI_RUN);
 8000df4:	230e      	movs	r3, #14
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 f835 	bl	8002e6c <correctnessQuery>
					break;
 8000e02:	e026      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x382>
 8000e04:	40001000 	.word	0x40001000
 8000e08:	20000680 	.word	0x20000680
 8000e0c:	200004fe 	.word	0x200004fe
 8000e10:	200000ee 	.word	0x200000ee
 8000e14:	200000f0 	.word	0x200000f0
 8000e18:	200000f2 	.word	0x200000f2
 8000e1c:	200000f4 	.word	0x200000f4
 8000e20:	200000f6 	.word	0x200000f6
 8000e24:	20000509 	.word	0x20000509
 8000e28:	20000500 	.word	0x20000500
 8000e2c:	08007bf0 	.word	0x08007bf0
 8000e30:	200004ff 	.word	0x200004ff
 8000e34:	40001400 	.word	0x40001400
 8000e38:	200006c0 	.word	0x200006c0
 8000e3c:	20000640 	.word	0x20000640
 8000e40:	200000ec 	.word	0x200000ec
 8000e44:	20000000 	.word	0x20000000
 8000e48:	08007c20 	.word	0x08007c20
 8000e4c:	08009038 	.word	0x08009038
		}
 8000e50:	46c0      	nop			; (mov r8, r8)
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b005      	add	sp, #20
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)

08000e5c <HAL_GPIO_EXTI_Callback>:

// =========================================================================================
/* GPIO */
// =========================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	0002      	movs	r2, r0
 8000e64:	1dbb      	adds	r3, r7, #6
 8000e66:	801a      	strh	r2, [r3, #0]
	uint8_t tim6BusyFlag = HAL_TIM_Base_GetState(&htim6);
 8000e68:	250f      	movs	r5, #15
 8000e6a:	197c      	adds	r4, r7, r5
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f004 ff17 	bl	8005ca2 <HAL_TIM_Base_GetState>
 8000e74:	0003      	movs	r3, r0
 8000e76:	7023      	strb	r3, [r4, #0]
	uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000e78:	260e      	movs	r6, #14
 8000e7a:	19bc      	adds	r4, r7, r6
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f004 ff0f 	bl	8005ca2 <HAL_TIM_Base_GetState>
 8000e84:	0003      	movs	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
	if((tim6BusyFlag == 1) && (tim7BusyFlag == 1))
 8000e88:	197b      	adds	r3, r7, r5
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_GPIO_EXTI_Callback+0x4c>
 8000e90:	19bb      	adds	r3, r7, r6
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d107      	bne.n	8000ea8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(GPIO_Pin == SET_BTN_Pin)
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d103      	bne.n	8000ea8 <HAL_GPIO_EXTI_Callback+0x4c>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f004 fc50 	bl	8005748 <HAL_TIM_Base_Start_IT>
		}
	}
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b005      	add	sp, #20
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	20000680 	.word	0x20000680
 8000eb4:	200006c0 	.word	0x200006c0

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <Error_Handler+0x8>
	...

08000ec4 <printUART>:

#include "misc.h"

// UART
void printUART(unsigned char * str)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	uint8_t length = strlen(str);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f7ff f91a 	bl	8000108 <strlen>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, str, length, 10);
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <printUART+0x30>)
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	f005 f828 	bl	8005f3c <HAL_UART_Transmit>
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000700 	.word	0x20000700

08000ef8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	0004      	movs	r4, r0
 8000f00:	0008      	movs	r0, r1
 8000f02:	60ba      	str	r2, [r7, #8]
 8000f04:	0019      	movs	r1, r3
 8000f06:	230e      	movs	r3, #14
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	1c22      	adds	r2, r4, #0
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	230c      	movs	r3, #12
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	1c02      	adds	r2, r0, #0
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	1dbb      	adds	r3, r7, #6
 8000f18:	1c0a      	adds	r2, r1, #0
 8000f1a:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f1c:	1dbb      	adds	r3, r7, #6
 8000f1e:	2200      	movs	r2, #0
 8000f20:	5e9b      	ldrsh	r3, [r3, r2]
 8000f22:	3307      	adds	r3, #7
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da00      	bge.n	8000f2a <SSD1306_DrawBitmap+0x32>
 8000f28:	3307      	adds	r3, #7
 8000f2a:	10db      	asrs	r3, r3, #3
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2310      	movs	r3, #16
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000f34:	2317      	movs	r3, #23
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8000f3c:	2314      	movs	r3, #20
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
 8000f44:	e068      	b.n	8001018 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8000f46:	2312      	movs	r3, #18
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
 8000f4e:	e048      	b.n	8000fe2 <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8000f50:	2312      	movs	r3, #18
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	001a      	movs	r2, r3
 8000f58:	2307      	movs	r3, #7
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d006      	beq.n	8000f6c <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8000f5e:	2317      	movs	r3, #23
 8000f60:	18fa      	adds	r2, r7, r3
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	18db      	adds	r3, r3, r3
 8000f68:	7013      	strb	r3, [r2, #0]
 8000f6a:	e019      	b.n	8000fa0 <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f6c:	2314      	movs	r3, #20
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2200      	movs	r2, #0
 8000f72:	5e9b      	ldrsh	r3, [r3, r2]
 8000f74:	2210      	movs	r2, #16
 8000f76:	18ba      	adds	r2, r7, r2
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5e52      	ldrsh	r2, [r2, r1]
 8000f7c:	435a      	muls	r2, r3
 8000f7e:	2312      	movs	r3, #18
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	5e5b      	ldrsh	r3, [r3, r1]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	da00      	bge.n	8000f8c <SSD1306_DrawBitmap+0x94>
 8000f8a:	3307      	adds	r3, #7
 8000f8c:	10db      	asrs	r3, r3, #3
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	18d3      	adds	r3, r2, r3
 8000f92:	001a      	movs	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	189a      	adds	r2, r3, r2
 8000f98:	2317      	movs	r3, #23
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000fa0:	2317      	movs	r3, #23
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da11      	bge.n	8000fd0 <SSD1306_DrawBitmap+0xd8>
 8000fac:	230e      	movs	r3, #14
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	881a      	ldrh	r2, [r3, #0]
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	b298      	uxth	r0, r3
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	8819      	ldrh	r1, [r3, #0]
 8000fc2:	232c      	movs	r3, #44	; 0x2c
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	001a      	movs	r2, r3
 8000fcc:	f000 f946 	bl	800125c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000fd0:	2112      	movs	r1, #18
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	5e9b      	ldrsh	r3, [r3, r2]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	18fa      	adds	r2, r7, r3
 8000fe6:	1dbb      	adds	r3, r7, #6
 8000fe8:	2100      	movs	r1, #0
 8000fea:	5e52      	ldrsh	r2, [r2, r1]
 8000fec:	2100      	movs	r1, #0
 8000fee:	5e5b      	ldrsh	r3, [r3, r1]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dbad      	blt.n	8000f50 <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	5e9b      	ldrsh	r3, [r3, r2]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	b29a      	uxth	r2, r3
 8001002:	187b      	adds	r3, r7, r1
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	210c      	movs	r1, #12
 8001008:	187b      	adds	r3, r7, r1
 800100a:	2200      	movs	r2, #0
 800100c:	5e9b      	ldrsh	r3, [r3, r2]
 800100e:	b29b      	uxth	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	187b      	adds	r3, r7, r1
 8001016:	801a      	strh	r2, [r3, #0]
 8001018:	2314      	movs	r3, #20
 800101a:	18fa      	adds	r2, r7, r3
 800101c:	2328      	movs	r3, #40	; 0x28
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	2100      	movs	r1, #0
 8001022:	5e52      	ldrsh	r2, [r2, r1]
 8001024:	2100      	movs	r1, #0
 8001026:	5e5b      	ldrsh	r3, [r3, r1]
 8001028:	429a      	cmp	r2, r3
 800102a:	db8c      	blt.n	8000f46 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 800102c:	46c0      	nop			; (mov r8, r8)
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b007      	add	sp, #28
 8001034:	bd90      	pop	{r4, r7, pc}
	...

08001038 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800103e:	f000 fcf3 	bl	8001a28 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001042:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <SSD1306_Init+0x178>)
 8001044:	485b      	ldr	r0, [pc, #364]	; (80011b4 <SSD1306_Init+0x17c>)
 8001046:	2201      	movs	r2, #1
 8001048:	2178      	movs	r1, #120	; 0x78
 800104a:	f003 f869 	bl	8004120 <HAL_I2C_IsDeviceReady>
 800104e:	1e03      	subs	r3, r0, #0
 8001050:	d001      	beq.n	8001056 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e0a8      	b.n	80011a8 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001056:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <SSD1306_Init+0x180>)
 8001058:	607b      	str	r3, [r7, #4]
	while(p>0)
 800105a:	e002      	b.n	8001062 <SSD1306_Init+0x2a>
		p--;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f9      	bne.n	800105c <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001068:	22ae      	movs	r2, #174	; 0xae
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fd5b 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fd56 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800107c:	2210      	movs	r2, #16
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fd51 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001086:	22b0      	movs	r2, #176	; 0xb0
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fd4c 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001090:	22c8      	movs	r2, #200	; 0xc8
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fd47 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fd42 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010a4:	2210      	movs	r2, #16
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 fd3d 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010ae:	2240      	movs	r2, #64	; 0x40
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 fd38 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010b8:	2281      	movs	r2, #129	; 0x81
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 fd33 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 fd2e 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010cc:	22a1      	movs	r2, #161	; 0xa1
 80010ce:	2100      	movs	r1, #0
 80010d0:	2078      	movs	r0, #120	; 0x78
 80010d2:	f000 fd29 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010d6:	22a6      	movs	r2, #166	; 0xa6
 80010d8:	2100      	movs	r1, #0
 80010da:	2078      	movs	r0, #120	; 0x78
 80010dc:	f000 fd24 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010e0:	22a8      	movs	r2, #168	; 0xa8
 80010e2:	2100      	movs	r1, #0
 80010e4:	2078      	movs	r0, #120	; 0x78
 80010e6:	f000 fd1f 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010ea:	223f      	movs	r2, #63	; 0x3f
 80010ec:	2100      	movs	r1, #0
 80010ee:	2078      	movs	r0, #120	; 0x78
 80010f0:	f000 fd1a 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010f4:	22a4      	movs	r2, #164	; 0xa4
 80010f6:	2100      	movs	r1, #0
 80010f8:	2078      	movs	r0, #120	; 0x78
 80010fa:	f000 fd15 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010fe:	22d3      	movs	r2, #211	; 0xd3
 8001100:	2100      	movs	r1, #0
 8001102:	2078      	movs	r0, #120	; 0x78
 8001104:	f000 fd10 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2078      	movs	r0, #120	; 0x78
 800110e:	f000 fd0b 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001112:	22d5      	movs	r2, #213	; 0xd5
 8001114:	2100      	movs	r1, #0
 8001116:	2078      	movs	r0, #120	; 0x78
 8001118:	f000 fd06 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800111c:	22f0      	movs	r2, #240	; 0xf0
 800111e:	2100      	movs	r1, #0
 8001120:	2078      	movs	r0, #120	; 0x78
 8001122:	f000 fd01 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001126:	22d9      	movs	r2, #217	; 0xd9
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	; 0x78
 800112c:	f000 fcfc 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001130:	2222      	movs	r2, #34	; 0x22
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	; 0x78
 8001136:	f000 fcf7 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800113a:	22da      	movs	r2, #218	; 0xda
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	; 0x78
 8001140:	f000 fcf2 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001144:	2212      	movs	r2, #18
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	; 0x78
 800114a:	f000 fced 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800114e:	22db      	movs	r2, #219	; 0xdb
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	; 0x78
 8001154:	f000 fce8 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001158:	2220      	movs	r2, #32
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	; 0x78
 800115e:	f000 fce3 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001162:	228d      	movs	r2, #141	; 0x8d
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	; 0x78
 8001168:	f000 fcde 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800116c:	2214      	movs	r2, #20
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	; 0x78
 8001172:	f000 fcd9 	bl	8001b28 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001176:	22af      	movs	r2, #175	; 0xaf
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	; 0x78
 800117c:	f000 fcd4 	bl	8001b28 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001180:	222e      	movs	r2, #46	; 0x2e
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	; 0x78
 8001186:	f000 fccf 	bl	8001b28 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f84c 	bl	8001228 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001190:	f000 f816 	bl	80011c0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <SSD1306_Init+0x184>)
 8001196:	2200      	movs	r2, #0
 8001198:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SSD1306_Init+0x184>)
 800119c:	2200      	movs	r2, #0
 800119e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SSD1306_Init+0x184>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	0018      	movs	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	00004e20 	.word	0x00004e20
 80011b4:	200000a0 	.word	0x200000a0
 80011b8:	000009c4 	.word	0x000009c4
 80011bc:	200004f8 	.word	0x200004f8

080011c0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e021      	b.n	8001212 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	3b50      	subs	r3, #80	; 0x50
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	001a      	movs	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fca4 	bl	8001b28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 fc9f 	bl	8001b28 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011ea:	2210      	movs	r2, #16
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 fc9a 	bl	8001b28 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	01da      	lsls	r2, r3, #7
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <SSD1306_UpdateScreen+0x64>)
 80011fc:	18d2      	adds	r2, r2, r3
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 fc24 	bl	8001a50 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	3201      	adds	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b07      	cmp	r3, #7
 8001218:	d9d9      	bls.n	80011ce <SSD1306_UpdateScreen+0xe>
	}
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000f8 	.word	0x200000f8

08001228 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	0002      	movs	r2, r0
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <SSD1306_Fill+0x18>
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <SSD1306_Fill+0x1a>
 8001240:	23ff      	movs	r3, #255	; 0xff
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	4804      	ldr	r0, [pc, #16]	; (8001258 <SSD1306_Fill+0x30>)
 8001248:	0019      	movs	r1, r3
 800124a:	f005 ff54 	bl	80070f6 <memset>
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	b002      	add	sp, #8
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	200000f8 	.word	0x200000f8

0800125c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	0004      	movs	r4, r0
 8001264:	0008      	movs	r0, r1
 8001266:	0011      	movs	r1, r2
 8001268:	1dbb      	adds	r3, r7, #6
 800126a:	1c22      	adds	r2, r4, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	1c02      	adds	r2, r0, #0
 8001272:	801a      	strh	r2, [r3, #0]
 8001274:	1cfb      	adds	r3, r7, #3
 8001276:	1c0a      	adds	r2, r1, #0
 8001278:	701a      	strb	r2, [r3, #0]
	if (
 800127a:	1dbb      	adds	r3, r7, #6
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	2b7f      	cmp	r3, #127	; 0x7f
 8001280:	d852      	bhi.n	8001328 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b3f      	cmp	r3, #63	; 0x3f
 8001288:	d84e      	bhi.n	8001328 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <SSD1306_DrawPixel+0xd4>)
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8001292:	1cfb      	adds	r3, r7, #3
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	425a      	negs	r2, r3
 8001298:	4153      	adcs	r3, r2
 800129a:	b2da      	uxtb	r2, r3
 800129c:	1cfb      	adds	r3, r7, #3
 800129e:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012a0:	1cfb      	adds	r3, r7, #3
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d11e      	bne.n	80012e6 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	881a      	ldrh	r2, [r3, #0]
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	b298      	uxth	r0, r3
 80012b4:	0003      	movs	r3, r0
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	4a1e      	ldr	r2, [pc, #120]	; (8001334 <SSD1306_DrawPixel+0xd8>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	2107      	movs	r1, #7
 80012c6:	400b      	ands	r3, r1
 80012c8:	2101      	movs	r1, #1
 80012ca:	4099      	lsls	r1, r3
 80012cc:	000b      	movs	r3, r1
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b259      	sxtb	r1, r3
 80012d4:	1dbb      	adds	r3, r7, #6
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	0003      	movs	r3, r0
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	18d3      	adds	r3, r2, r3
 80012de:	b2c9      	uxtb	r1, r1
 80012e0:	4a14      	ldr	r2, [pc, #80]	; (8001334 <SSD1306_DrawPixel+0xd8>)
 80012e2:	54d1      	strb	r1, [r2, r3]
 80012e4:	e021      	b.n	800132a <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012e6:	1dbb      	adds	r3, r7, #6
 80012e8:	881a      	ldrh	r2, [r3, #0]
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	08db      	lsrs	r3, r3, #3
 80012f0:	b298      	uxth	r0, r3
 80012f2:	0003      	movs	r3, r0
 80012f4:	01db      	lsls	r3, r3, #7
 80012f6:	18d3      	adds	r3, r2, r3
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <SSD1306_DrawPixel+0xd8>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	1d3a      	adds	r2, r7, #4
 8001300:	8812      	ldrh	r2, [r2, #0]
 8001302:	2107      	movs	r1, #7
 8001304:	400a      	ands	r2, r1
 8001306:	2101      	movs	r1, #1
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	b252      	sxtb	r2, r2
 800130e:	43d2      	mvns	r2, r2
 8001310:	b252      	sxtb	r2, r2
 8001312:	4013      	ands	r3, r2
 8001314:	b259      	sxtb	r1, r3
 8001316:	1dbb      	adds	r3, r7, #6
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	0003      	movs	r3, r0
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	18d3      	adds	r3, r2, r3
 8001320:	b2c9      	uxtb	r1, r1
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <SSD1306_DrawPixel+0xd8>)
 8001324:	54d1      	strb	r1, [r2, r3]
 8001326:	e000      	b.n	800132a <SSD1306_DrawPixel+0xce>
		return;
 8001328:	46c0      	nop			; (mov r8, r8)
	}
}
 800132a:	46bd      	mov	sp, r7
 800132c:	b003      	add	sp, #12
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	200004f8 	.word	0x200004f8
 8001334:	200000f8 	.word	0x200000f8

08001338 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	0002      	movs	r2, r0
 8001340:	1dbb      	adds	r3, r7, #6
 8001342:	801a      	strh	r2, [r3, #0]
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	1c0a      	adds	r2, r1, #0
 8001348:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <SSD1306_GotoXY+0x2c>)
 800134c:	1dba      	adds	r2, r7, #6
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SSD1306_GotoXY+0x2c>)
 8001354:	1d3a      	adds	r2, r7, #4
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	805a      	strh	r2, [r3, #2]
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	200004f8 	.word	0x200004f8

08001368 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6039      	str	r1, [r7, #0]
 8001370:	0011      	movs	r1, r2
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	1c02      	adds	r2, r0, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	1dbb      	adds	r3, r7, #6
 800137a:	1c0a      	adds	r2, r1, #0
 800137c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <SSD1306_Putc+0x100>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	001a      	movs	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	18d3      	adds	r3, r2, r3
	if (
 800138a:	2b7f      	cmp	r3, #127	; 0x7f
 800138c:	dc07      	bgt.n	800139e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <SSD1306_Putc+0x100>)
 8001390:	885b      	ldrh	r3, [r3, #2]
 8001392:	001a      	movs	r2, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800139a:	2b3f      	cmp	r3, #63	; 0x3f
 800139c:	dd01      	ble.n	80013a2 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	e05e      	b.n	8001460 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e04a      	b.n	800143e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3b20      	subs	r3, #32
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	7849      	ldrb	r1, [r1, #1]
 80013b6:	434b      	muls	r3, r1
 80013b8:	0019      	movs	r1, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	18cb      	adds	r3, r1, r3
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	e02f      	b.n	800142c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	409a      	lsls	r2, r3
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	4013      	ands	r3, r2
 80013d8:	d011      	beq.n	80013fe <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <SSD1306_Putc+0x100>)
 80013dc:	881a      	ldrh	r2, [r3, #0]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	18d3      	adds	r3, r2, r3
 80013e4:	b298      	uxth	r0, r3
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <SSD1306_Putc+0x100>)
 80013e8:	885a      	ldrh	r2, [r3, #2]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	18d3      	adds	r3, r2, r3
 80013f0:	b299      	uxth	r1, r3
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	001a      	movs	r2, r3
 80013f8:	f7ff ff30 	bl	800125c <SSD1306_DrawPixel>
 80013fc:	e013      	b.n	8001426 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <SSD1306_Putc+0x100>)
 8001400:	881a      	ldrh	r2, [r3, #0]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	b29b      	uxth	r3, r3
 8001406:	18d3      	adds	r3, r2, r3
 8001408:	b298      	uxth	r0, r3
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <SSD1306_Putc+0x100>)
 800140c:	885a      	ldrh	r2, [r3, #2]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	b29b      	uxth	r3, r3
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	b299      	uxth	r1, r3
 8001416:	1dbb      	adds	r3, r7, #6
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	425a      	negs	r2, r3
 800141c:	4153      	adcs	r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	001a      	movs	r2, r3
 8001422:	f7ff ff1b 	bl	800125c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3301      	adds	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	001a      	movs	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4293      	cmp	r3, r2
 8001436:	d3c9      	bcc.n	80013cc <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	001a      	movs	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4293      	cmp	r3, r2
 8001448:	d3ae      	bcc.n	80013a8 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <SSD1306_Putc+0x100>)
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <SSD1306_Putc+0x100>)
 800145a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781b      	ldrb	r3, [r3, #0]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200004f8 	.word	0x200004f8

0800146c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800147a:	e013      	b.n	80014a4 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	7818      	ldrb	r0, [r3, #0]
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	0019      	movs	r1, r3
 8001488:	f7ff ff6e 	bl	8001368 <SSD1306_Putc>
 800148c:	0003      	movs	r3, r0
 800148e:	001a      	movs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d002      	beq.n	800149e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	e008      	b.n	80014b0 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e7      	bne.n	800147c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	781b      	ldrb	r3, [r3, #0]
}
 80014b0:	0018      	movs	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	0005      	movs	r5, r0
 80014c0:	000c      	movs	r4, r1
 80014c2:	0010      	movs	r0, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	1dbb      	adds	r3, r7, #6
 80014c8:	1c2a      	adds	r2, r5, #0
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	1c22      	adds	r2, r4, #0
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	1cbb      	adds	r3, r7, #2
 80014d4:	1c02      	adds	r2, r0, #0
 80014d6:	801a      	strh	r2, [r3, #0]
 80014d8:	003b      	movs	r3, r7
 80014da:	1c0a      	adds	r2, r1, #0
 80014dc:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	d902      	bls.n	80014ec <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 80014e6:	1dbb      	adds	r3, r7, #6
 80014e8:	227f      	movs	r2, #127	; 0x7f
 80014ea:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 80014ec:	1cbb      	adds	r3, r7, #2
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	2b7f      	cmp	r3, #127	; 0x7f
 80014f2:	d902      	bls.n	80014fa <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 80014f4:	1cbb      	adds	r3, r7, #2
 80014f6:	227f      	movs	r2, #127	; 0x7f
 80014f8:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001500:	d902      	bls.n	8001508 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	223f      	movs	r2, #63	; 0x3f
 8001506:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001508:	003b      	movs	r3, r7
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	2b3f      	cmp	r3, #63	; 0x3f
 800150e:	d902      	bls.n	8001516 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 8001510:	003b      	movs	r3, r7
 8001512:	223f      	movs	r2, #63	; 0x3f
 8001514:	801a      	strh	r2, [r3, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001516:	1dba      	adds	r2, r7, #6
 8001518:	1cbb      	adds	r3, r7, #2
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d207      	bcs.n	8001532 <SSD1306_DrawLine+0x7a>
 8001522:	1cba      	adds	r2, r7, #2
 8001524:	1dbb      	adds	r3, r7, #6
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21b      	sxth	r3, r3
 8001530:	e006      	b.n	8001540 <SSD1306_DrawLine+0x88>
 8001532:	1dba      	adds	r2, r7, #6
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21b      	sxth	r3, r3
 8001540:	2212      	movs	r2, #18
 8001542:	18ba      	adds	r2, r7, r2
 8001544:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001546:	1d3a      	adds	r2, r7, #4
 8001548:	003b      	movs	r3, r7
 800154a:	8812      	ldrh	r2, [r2, #0]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d207      	bcs.n	8001562 <SSD1306_DrawLine+0xaa>
 8001552:	003a      	movs	r2, r7
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b29b      	uxth	r3, r3
 800155e:	b21b      	sxth	r3, r3
 8001560:	e006      	b.n	8001570 <SSD1306_DrawLine+0xb8>
 8001562:	1d3a      	adds	r2, r7, #4
 8001564:	003b      	movs	r3, r7
 8001566:	8812      	ldrh	r2, [r2, #0]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	b29b      	uxth	r3, r3
 800156e:	b21b      	sxth	r3, r3
 8001570:	2210      	movs	r2, #16
 8001572:	18ba      	adds	r2, r7, r2
 8001574:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1; 
 8001576:	1dba      	adds	r2, r7, #6
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	8812      	ldrh	r2, [r2, #0]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d201      	bcs.n	8001586 <SSD1306_DrawLine+0xce>
 8001582:	2201      	movs	r2, #1
 8001584:	e001      	b.n	800158a <SSD1306_DrawLine+0xd2>
 8001586:	2301      	movs	r3, #1
 8001588:	425a      	negs	r2, r3
 800158a:	230e      	movs	r3, #14
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1; 
 8001590:	1d3a      	adds	r2, r7, #4
 8001592:	003b      	movs	r3, r7
 8001594:	8812      	ldrh	r2, [r2, #0]
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d201      	bcs.n	80015a0 <SSD1306_DrawLine+0xe8>
 800159c:	2201      	movs	r2, #1
 800159e:	e001      	b.n	80015a4 <SSD1306_DrawLine+0xec>
 80015a0:	2301      	movs	r3, #1
 80015a2:	425a      	negs	r2, r3
 80015a4:	230c      	movs	r3, #12
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80015aa:	2112      	movs	r1, #18
 80015ac:	187a      	adds	r2, r7, r1
 80015ae:	2310      	movs	r3, #16
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2000      	movs	r0, #0
 80015b4:	5e12      	ldrsh	r2, [r2, r0]
 80015b6:	2000      	movs	r0, #0
 80015b8:	5e1b      	ldrsh	r3, [r3, r0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dd08      	ble.n	80015d0 <SSD1306_DrawLine+0x118>
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2200      	movs	r2, #0
 80015c2:	5e9b      	ldrsh	r3, [r3, r2]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da00      	bge.n	80015ca <SSD1306_DrawLine+0x112>
 80015c8:	3301      	adds	r3, #1
 80015ca:	105b      	asrs	r3, r3, #1
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	e009      	b.n	80015e4 <SSD1306_DrawLine+0x12c>
 80015d0:	2310      	movs	r3, #16
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	5e9b      	ldrsh	r3, [r3, r2]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da00      	bge.n	80015de <SSD1306_DrawLine+0x126>
 80015dc:	3301      	adds	r3, #1
 80015de:	105b      	asrs	r3, r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	2216      	movs	r2, #22
 80015e6:	18ba      	adds	r2, r7, r2
 80015e8:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 80015ea:	2312      	movs	r3, #18
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	5e9b      	ldrsh	r3, [r3, r2]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d148      	bne.n	8001688 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 80015f6:	003a      	movs	r2, r7
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d20c      	bcs.n	800161c <SSD1306_DrawLine+0x164>
			tmp = y1;
 8001602:	2108      	movs	r1, #8
 8001604:	187b      	adds	r3, r7, r1
 8001606:	003a      	movs	r2, r7
 8001608:	8812      	ldrh	r2, [r2, #0]
 800160a:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800160c:	003b      	movs	r3, r7
 800160e:	1d3a      	adds	r2, r7, #4
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	187a      	adds	r2, r7, r1
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 800161c:	1cba      	adds	r2, r7, #2
 800161e:	1dbb      	adds	r3, r7, #6
 8001620:	8812      	ldrh	r2, [r2, #0]
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d20c      	bcs.n	8001642 <SSD1306_DrawLine+0x18a>
			tmp = x1;
 8001628:	2108      	movs	r1, #8
 800162a:	187b      	adds	r3, r7, r1
 800162c:	1cba      	adds	r2, r7, #2
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8001632:	1cbb      	adds	r3, r7, #2
 8001634:	1dba      	adds	r2, r7, #6
 8001636:	8812      	ldrh	r2, [r2, #0]
 8001638:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800163a:	1dbb      	adds	r3, r7, #6
 800163c:	187a      	adds	r2, r7, r1
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	801a      	strh	r2, [r3, #0]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001642:	2314      	movs	r3, #20
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	1d3a      	adds	r2, r7, #4
 8001648:	8812      	ldrh	r2, [r2, #0]
 800164a:	801a      	strh	r2, [r3, #0]
 800164c:	e013      	b.n	8001676 <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 800164e:	2414      	movs	r4, #20
 8001650:	193b      	adds	r3, r7, r4
 8001652:	8819      	ldrh	r1, [r3, #0]
 8001654:	2328      	movs	r3, #40	; 0x28
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	1dbb      	adds	r3, r7, #6
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	f7ff fdfc 	bl	800125c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001664:	0021      	movs	r1, r4
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2200      	movs	r2, #0
 800166a:	5e9b      	ldrsh	r3, [r3, r2]
 800166c:	b29b      	uxth	r3, r3
 800166e:	3301      	adds	r3, #1
 8001670:	b29a      	uxth	r2, r3
 8001672:	187b      	adds	r3, r7, r1
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	2314      	movs	r3, #20
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2200      	movs	r2, #0
 800167c:	5e9a      	ldrsh	r2, [r3, r2]
 800167e:	003b      	movs	r3, r7
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	dde3      	ble.n	800164e <SSD1306_DrawLine+0x196>
		}
		
		/* Return from function */
		return;
 8001686:	e0a3      	b.n	80017d0 <SSD1306_DrawLine+0x318>
	}
	
	if (dy == 0) {
 8001688:	2310      	movs	r3, #16
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2200      	movs	r2, #0
 800168e:	5e9b      	ldrsh	r3, [r3, r2]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d148      	bne.n	8001726 <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 8001694:	003a      	movs	r2, r7
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	8812      	ldrh	r2, [r2, #0]
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d20c      	bcs.n	80016ba <SSD1306_DrawLine+0x202>
			tmp = y1;
 80016a0:	2108      	movs	r1, #8
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	003a      	movs	r2, r7
 80016a6:	8812      	ldrh	r2, [r2, #0]
 80016a8:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80016aa:	003b      	movs	r3, r7
 80016ac:	1d3a      	adds	r2, r7, #4
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	187a      	adds	r2, r7, r1
 80016b6:	8812      	ldrh	r2, [r2, #0]
 80016b8:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 80016ba:	1cba      	adds	r2, r7, #2
 80016bc:	1dbb      	adds	r3, r7, #6
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20c      	bcs.n	80016e0 <SSD1306_DrawLine+0x228>
			tmp = x1;
 80016c6:	2108      	movs	r1, #8
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	1cba      	adds	r2, r7, #2
 80016cc:	8812      	ldrh	r2, [r2, #0]
 80016ce:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80016d0:	1cbb      	adds	r3, r7, #2
 80016d2:	1dba      	adds	r2, r7, #6
 80016d4:	8812      	ldrh	r2, [r2, #0]
 80016d6:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	187a      	adds	r2, r7, r1
 80016dc:	8812      	ldrh	r2, [r2, #0]
 80016de:	801a      	strh	r2, [r3, #0]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80016e0:	2314      	movs	r3, #20
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	1dba      	adds	r2, r7, #6
 80016e6:	8812      	ldrh	r2, [r2, #0]
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	e013      	b.n	8001714 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 80016ec:	2414      	movs	r4, #20
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	8818      	ldrh	r0, [r3, #0]
 80016f2:	2328      	movs	r3, #40	; 0x28
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	0019      	movs	r1, r3
 80016fe:	f7ff fdad 	bl	800125c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001702:	0021      	movs	r1, r4
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	5e9b      	ldrsh	r3, [r3, r2]
 800170a:	b29b      	uxth	r3, r3
 800170c:	3301      	adds	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	187b      	adds	r3, r7, r1
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	2314      	movs	r3, #20
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	2200      	movs	r2, #0
 800171a:	5e9a      	ldrsh	r2, [r3, r2]
 800171c:	1cbb      	adds	r3, r7, #2
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	dde3      	ble.n	80016ec <SSD1306_DrawLine+0x234>
		}
		
		/* Return from function */
		return;
 8001724:	e054      	b.n	80017d0 <SSD1306_DrawLine+0x318>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001726:	2328      	movs	r3, #40	; 0x28
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781a      	ldrb	r2, [r3, #0]
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	8819      	ldrh	r1, [r3, #0]
 8001730:	1dbb      	adds	r3, r7, #6
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fd91 	bl	800125c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800173a:	1dba      	adds	r2, r7, #6
 800173c:	1cbb      	adds	r3, r7, #2
 800173e:	8812      	ldrh	r2, [r2, #0]
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d105      	bne.n	8001752 <SSD1306_DrawLine+0x29a>
 8001746:	1d3a      	adds	r2, r7, #4
 8001748:	003b      	movs	r3, r7
 800174a:	8812      	ldrh	r2, [r2, #0]
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d03d      	beq.n	80017ce <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err; 
 8001752:	200a      	movs	r0, #10
 8001754:	183b      	adds	r3, r7, r0
 8001756:	2116      	movs	r1, #22
 8001758:	187a      	adds	r2, r7, r1
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 800175e:	183b      	adds	r3, r7, r0
 8001760:	2200      	movs	r2, #0
 8001762:	5e9a      	ldrsh	r2, [r3, r2]
 8001764:	2312      	movs	r3, #18
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2000      	movs	r0, #0
 800176a:	5e1b      	ldrsh	r3, [r3, r0]
 800176c:	425b      	negs	r3, r3
 800176e:	429a      	cmp	r2, r3
 8001770:	dd10      	ble.n	8001794 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 8001772:	187b      	adds	r3, r7, r1
 8001774:	881a      	ldrh	r2, [r3, #0]
 8001776:	2310      	movs	r3, #16
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	187b      	adds	r3, r7, r1
 8001782:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8001784:	230e      	movs	r3, #14
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	8819      	ldrh	r1, [r3, #0]
 800178a:	1dbb      	adds	r3, r7, #6
 800178c:	1dba      	adds	r2, r7, #6
 800178e:	8812      	ldrh	r2, [r2, #0]
 8001790:	188a      	adds	r2, r1, r2
 8001792:	801a      	strh	r2, [r3, #0]
		} 
		if (e2 < dy) {
 8001794:	230a      	movs	r3, #10
 8001796:	18fa      	adds	r2, r7, r3
 8001798:	2310      	movs	r3, #16
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2100      	movs	r1, #0
 800179e:	5e52      	ldrsh	r2, [r2, r1]
 80017a0:	2100      	movs	r1, #0
 80017a2:	5e5b      	ldrsh	r3, [r3, r1]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dabe      	bge.n	8001726 <SSD1306_DrawLine+0x26e>
			err += dx;
 80017a8:	2116      	movs	r1, #22
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	2312      	movs	r3, #18
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	18d3      	adds	r3, r2, r3
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 80017bc:	230c      	movs	r3, #12
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	8819      	ldrh	r1, [r3, #0]
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	1d3a      	adds	r2, r7, #4
 80017c6:	8812      	ldrh	r2, [r2, #0]
 80017c8:	188a      	adds	r2, r1, r2
 80017ca:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 80017cc:	e7ab      	b.n	8001726 <SSD1306_DrawLine+0x26e>
			break;
 80017ce:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b006      	add	sp, #24
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}

080017d6 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80017d6:	b5b0      	push	{r4, r5, r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af02      	add	r7, sp, #8
 80017dc:	0005      	movs	r5, r0
 80017de:	000c      	movs	r4, r1
 80017e0:	0010      	movs	r0, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	1dbb      	adds	r3, r7, #6
 80017e6:	1c2a      	adds	r2, r5, #0
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	1c22      	adds	r2, r4, #0
 80017ee:	801a      	strh	r2, [r3, #0]
 80017f0:	1cbb      	adds	r3, r7, #2
 80017f2:	1c02      	adds	r2, r0, #0
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	003b      	movs	r3, r7
 80017f8:	1c0a      	adds	r2, r1, #0
 80017fa:	801a      	strh	r2, [r3, #0]
	/* Check input parameters */
	if (
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	2b7f      	cmp	r3, #127	; 0x7f
 8001802:	d900      	bls.n	8001806 <SSD1306_DrawRectangle+0x30>
 8001804:	e07a      	b.n	80018fc <SSD1306_DrawRectangle+0x126>
		x >= SSD1306_WIDTH ||
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b3f      	cmp	r3, #63	; 0x3f
 800180c:	d900      	bls.n	8001810 <SSD1306_DrawRectangle+0x3a>
 800180e:	e075      	b.n	80018fc <SSD1306_DrawRectangle+0x126>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	18d3      	adds	r3, r2, r3
 800181a:	2b7f      	cmp	r3, #127	; 0x7f
 800181c:	dd05      	ble.n	800182a <SSD1306_DrawRectangle+0x54>
		w = SSD1306_WIDTH - x;
 800181e:	1cbb      	adds	r3, r7, #2
 8001820:	1dba      	adds	r2, r7, #6
 8001822:	8812      	ldrh	r2, [r2, #0]
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	1a8a      	subs	r2, r1, r2
 8001828:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	881a      	ldrh	r2, [r3, #0]
 800182e:	003b      	movs	r3, r7
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	18d3      	adds	r3, r2, r3
 8001834:	2b3f      	cmp	r3, #63	; 0x3f
 8001836:	dd05      	ble.n	8001844 <SSD1306_DrawRectangle+0x6e>
		h = SSD1306_HEIGHT - y;
 8001838:	003b      	movs	r3, r7
 800183a:	1d3a      	adds	r2, r7, #4
 800183c:	8812      	ldrh	r2, [r2, #0]
 800183e:	2140      	movs	r1, #64	; 0x40
 8001840:	1a8a      	subs	r2, r1, r2
 8001842:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001844:	1dba      	adds	r2, r7, #6
 8001846:	1cbb      	adds	r3, r7, #2
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	b29a      	uxth	r2, r3
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	881c      	ldrh	r4, [r3, #0]
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	8819      	ldrh	r1, [r3, #0]
 8001858:	1dbb      	adds	r3, r7, #6
 800185a:	8818      	ldrh	r0, [r3, #0]
 800185c:	2518      	movs	r5, #24
 800185e:	197b      	adds	r3, r7, r5
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	0023      	movs	r3, r4
 8001866:	f7ff fe27 	bl	80014b8 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800186a:	1d3a      	adds	r2, r7, #4
 800186c:	003b      	movs	r3, r7
 800186e:	8812      	ldrh	r2, [r2, #0]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	b299      	uxth	r1, r3
 8001876:	1dba      	adds	r2, r7, #6
 8001878:	1cbb      	adds	r3, r7, #2
 800187a:	8812      	ldrh	r2, [r2, #0]
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	18d3      	adds	r3, r2, r3
 8001880:	b29c      	uxth	r4, r3
 8001882:	1d3a      	adds	r2, r7, #4
 8001884:	003b      	movs	r3, r7
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	b29a      	uxth	r2, r3
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	8818      	ldrh	r0, [r3, #0]
 8001892:	197b      	adds	r3, r7, r5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	0013      	movs	r3, r2
 800189a:	0022      	movs	r2, r4
 800189c:	f7ff fe0c 	bl	80014b8 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80018a0:	1d3a      	adds	r2, r7, #4
 80018a2:	003b      	movs	r3, r7
 80018a4:	8812      	ldrh	r2, [r2, #0]
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	1dbb      	adds	r3, r7, #6
 80018ae:	881a      	ldrh	r2, [r3, #0]
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	8819      	ldrh	r1, [r3, #0]
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	8818      	ldrh	r0, [r3, #0]
 80018b8:	197b      	adds	r3, r7, r5
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	0023      	movs	r3, r4
 80018c0:	f7ff fdfa 	bl	80014b8 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80018c4:	1dba      	adds	r2, r7, #6
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	8812      	ldrh	r2, [r2, #0]
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	18d3      	adds	r3, r2, r3
 80018ce:	b298      	uxth	r0, r3
 80018d0:	1dba      	adds	r2, r7, #6
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	b29c      	uxth	r4, r3
 80018dc:	1d3a      	adds	r2, r7, #4
 80018de:	003b      	movs	r3, r7
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	8819      	ldrh	r1, [r3, #0]
 80018ec:	197b      	adds	r3, r7, r5
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	0013      	movs	r3, r2
 80018f4:	0022      	movs	r2, r4
 80018f6:	f7ff fddf 	bl	80014b8 <SSD1306_DrawLine>
 80018fa:	e000      	b.n	80018fe <SSD1306_DrawRectangle+0x128>
		return;
 80018fc:	46c0      	nop			; (mov r8, r8)
}
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bdb0      	pop	{r4, r5, r7, pc}

08001904 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	0005      	movs	r5, r0
 800190c:	000c      	movs	r4, r1
 800190e:	0010      	movs	r0, r2
 8001910:	0019      	movs	r1, r3
 8001912:	1dbb      	adds	r3, r7, #6
 8001914:	1c2a      	adds	r2, r5, #0
 8001916:	801a      	strh	r2, [r3, #0]
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	1c22      	adds	r2, r4, #0
 800191c:	801a      	strh	r2, [r3, #0]
 800191e:	1cbb      	adds	r3, r7, #2
 8001920:	1c02      	adds	r2, r0, #0
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	003b      	movs	r3, r7
 8001926:	1c0a      	adds	r2, r1, #0
 8001928:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	2b7f      	cmp	r3, #127	; 0x7f
 8001930:	d850      	bhi.n	80019d4 <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2b3f      	cmp	r3, #63	; 0x3f
 8001938:	d84c      	bhi.n	80019d4 <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800193a:	1dbb      	adds	r3, r7, #6
 800193c:	881a      	ldrh	r2, [r3, #0]
 800193e:	1cbb      	adds	r3, r7, #2
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	2b7f      	cmp	r3, #127	; 0x7f
 8001946:	dd05      	ble.n	8001954 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 8001948:	1cbb      	adds	r3, r7, #2
 800194a:	1dba      	adds	r2, r7, #6
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	1a8a      	subs	r2, r1, r2
 8001952:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	003b      	movs	r3, r7
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	18d3      	adds	r3, r2, r3
 800195e:	2b3f      	cmp	r3, #63	; 0x3f
 8001960:	dd05      	ble.n	800196e <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 8001962:	003b      	movs	r3, r7
 8001964:	1d3a      	adds	r2, r7, #4
 8001966:	8812      	ldrh	r2, [r2, #0]
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	1a8a      	subs	r2, r1, r2
 800196c:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800196e:	230f      	movs	r3, #15
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	e024      	b.n	80019c2 <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001978:	200f      	movs	r0, #15
 800197a:	183b      	adds	r3, r7, r0
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	b299      	uxth	r1, r3
 8001988:	1dba      	adds	r2, r7, #6
 800198a:	1cbb      	adds	r3, r7, #2
 800198c:	8812      	ldrh	r2, [r2, #0]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	18d3      	adds	r3, r2, r3
 8001992:	b29c      	uxth	r4, r3
 8001994:	0005      	movs	r5, r0
 8001996:	183b      	adds	r3, r7, r0
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29a      	uxth	r2, r3
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	1dbb      	adds	r3, r7, #6
 80019a6:	8818      	ldrh	r0, [r3, #0]
 80019a8:	2320      	movs	r3, #32
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	0013      	movs	r3, r2
 80019b2:	0022      	movs	r2, r4
 80019b4:	f7ff fd80 	bl	80014b8 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80019b8:	197b      	adds	r3, r7, r5
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	197b      	adds	r3, r7, r5
 80019be:	3201      	adds	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	230f      	movs	r3, #15
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	003a      	movs	r2, r7
 80019cc:	8812      	ldrh	r2, [r2, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d2d2      	bcs.n	8001978 <SSD1306_DrawFilledRectangle+0x74>
 80019d2:	e000      	b.n	80019d6 <SSD1306_DrawFilledRectangle+0xd2>
		return;
 80019d4:	46c0      	nop			; (mov r8, r8)
	}
}
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bdb0      	pop	{r4, r5, r7, pc}

080019dc <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fc21 	bl	8001228 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019e6:	f7ff fbeb 	bl	80011c0 <SSD1306_UpdateScreen>
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <SSD1306_SetContrast>:
	SSD1306_WRITECOMMAND(0x8D);  
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}

void SSD1306_SetContrast(const uint8_t value) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	0002      	movs	r2, r0
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019fc:	210f      	movs	r1, #15
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2281      	movs	r2, #129	; 0x81
 8001a02:	701a      	strb	r2, [r3, #0]
    SSD1306_WRITECOMMAND(kSetContrastControlRegister);
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	001a      	movs	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2078      	movs	r0, #120	; 0x78
 8001a0e:	f000 f88b 	bl	8001b28 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(value);
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	001a      	movs	r2, r3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2078      	movs	r0, #120	; 0x78
 8001a1c:	f000 f884 	bl	8001b28 <ssd1306_I2C_Write>
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <ssd1306_I2C_Init+0x24>)
 8001a30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a32:	e002      	b.n	8001a3a <ssd1306_I2C_Init+0x12>
		p--;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f9      	bne.n	8001a34 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	0003d090 	.word	0x0003d090

08001a50 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b0c6      	sub	sp, #280	; 0x118
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	0004      	movs	r4, r0
 8001a58:	0008      	movs	r0, r1
 8001a5a:	603a      	str	r2, [r7, #0]
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <ssd1306_I2C_WriteMulti+0xc4>)
 8001a60:	2588      	movs	r5, #136	; 0x88
 8001a62:	006d      	lsls	r5, r5, #1
 8001a64:	195b      	adds	r3, r3, r5
 8001a66:	19db      	adds	r3, r3, r7
 8001a68:	1c22      	adds	r2, r4, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a6e:	002c      	movs	r4, r5
 8001a70:	191b      	adds	r3, r3, r4
 8001a72:	19db      	adds	r3, r3, r7
 8001a74:	1c02      	adds	r2, r0, #0
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <ssd1306_I2C_WriteMulti+0xcc>)
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	181b      	adds	r3, r3, r0
 8001a7e:	19db      	adds	r3, r3, r7
 8001a80:	1c0a      	adds	r2, r1, #0
 8001a82:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <ssd1306_I2C_WriteMulti+0xd0>)
 8001a86:	181b      	adds	r3, r3, r0
 8001a88:	19db      	adds	r3, r3, r7
 8001a8a:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a8c:	1812      	adds	r2, r2, r0
 8001a8e:	19d2      	adds	r2, r2, r7
 8001a90:	7812      	ldrb	r2, [r2, #0]
 8001a92:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a94:	2310      	movs	r3, #16
 8001a96:	33ff      	adds	r3, #255	; 0xff
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e014      	b.n	8001aca <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8001aa0:	2010      	movs	r0, #16
 8001aa2:	30ff      	adds	r0, #255	; 0xff
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	18d2      	adds	r2, r2, r3
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	7811      	ldrb	r1, [r2, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <ssd1306_I2C_WriteMulti+0xd0>)
 8001ab6:	2488      	movs	r4, #136	; 0x88
 8001ab8:	0064      	lsls	r4, r4, #1
 8001aba:	1912      	adds	r2, r2, r4
 8001abc:	19d2      	adds	r2, r2, r7
 8001abe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	3201      	adds	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	2310      	movs	r3, #16
 8001acc:	33ff      	adds	r3, #255	; 0xff
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <ssd1306_I2C_WriteMulti+0xcc>)
 8001ad6:	2188      	movs	r1, #136	; 0x88
 8001ad8:	0049      	lsls	r1, r1, #1
 8001ada:	1852      	adds	r2, r2, r1
 8001adc:	19d2      	adds	r2, r2, r7
 8001ade:	8812      	ldrh	r2, [r2, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d8dd      	bhi.n	8001aa0 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <ssd1306_I2C_WriteMulti+0xc4>)
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	189b      	adds	r3, r3, r2
 8001aea:	19db      	adds	r3, r3, r7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b299      	uxth	r1, r3
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <ssd1306_I2C_WriteMulti+0xcc>)
 8001af2:	189b      	adds	r3, r3, r2
 8001af4:	19db      	adds	r3, r3, r7
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	220c      	movs	r2, #12
 8001afe:	18ba      	adds	r2, r7, r2
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <ssd1306_I2C_WriteMulti+0xd4>)
 8001b02:	240a      	movs	r4, #10
 8001b04:	9400      	str	r4, [sp, #0]
 8001b06:	f002 fa03 	bl	8003f10 <HAL_I2C_Master_Transmit>
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b044      	add	sp, #272	; 0x110
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	fffffef7 	.word	0xfffffef7
 8001b18:	fffffef6 	.word	0xfffffef6
 8001b1c:	fffffef4 	.word	0xfffffef4
 8001b20:	fffffefc 	.word	0xfffffefc
 8001b24:	200000a0 	.word	0x200000a0

08001b28 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	0004      	movs	r4, r0
 8001b30:	0008      	movs	r0, r1
 8001b32:	0011      	movs	r1, r2
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	1c22      	adds	r2, r4, #0
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	1dbb      	adds	r3, r7, #6
 8001b3c:	1c02      	adds	r2, r0, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	1d7b      	adds	r3, r7, #5
 8001b42:	1c0a      	adds	r2, r1, #0
 8001b44:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001b46:	200c      	movs	r0, #12
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	1dba      	adds	r2, r7, #6
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	1d7a      	adds	r2, r7, #5
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	183a      	adds	r2, r7, r0
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <ssd1306_I2C_Write+0x4c>)
 8001b62:	230a      	movs	r3, #10
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2302      	movs	r3, #2
 8001b68:	f002 f9d2 	bl	8003f10 <HAL_I2C_Master_Transmit>
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b005      	add	sp, #20
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	200000a0 	.word	0x200000a0

08001b78 <structInit>:
// STRUCT
ProjectManager Details[4];
Step Settings[4];

void structInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

	// STEPS
	// ============================================================
	// STEP WIDTH
	Settings[i].minValue = CARCASS_MIN_WIDTH;
 8001b84:	1dfb      	adds	r3, r7, #7
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	4bfd      	ldr	r3, [pc, #1012]	; (8001f80 <structInit+0x408>)
 8001b8a:	00d2      	lsls	r2, r2, #3
 8001b8c:	2132      	movs	r1, #50	; 0x32
 8001b8e:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001b90:	1dfb      	adds	r3, r7, #7
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4afa      	ldr	r2, [pc, #1000]	; (8001f80 <structInit+0x408>)
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = CARCASS_MAX_WIDTH;
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4af6      	ldr	r2, [pc, #984]	; (8001f80 <structInit+0x408>)
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	3304      	adds	r3, #4
 8001bac:	4af5      	ldr	r2, [pc, #980]	; (8001f84 <structInit+0x40c>)
 8001bae:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 4;
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4af2      	ldr	r2, [pc, #968]	; (8001f80 <structInit+0x408>)
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	3306      	adds	r3, #6
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 1;
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4aee      	ldr	r2, [pc, #952]	; (8001f80 <structInit+0x408>)
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	3307      	adds	r3, #7
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
	i++;
 8001bd0:	1dfb      	adds	r3, r7, #7
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	3201      	adds	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]

	// STEP TURNS
	Settings[i].minValue = CARCASS_MIN_TURNS;
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	4be8      	ldr	r3, [pc, #928]	; (8001f80 <structInit+0x408>)
 8001be0:	00d2      	lsls	r2, r2, #3
 8001be2:	210a      	movs	r1, #10
 8001be4:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4ae5      	ldr	r2, [pc, #916]	; (8001f80 <structInit+0x408>)
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = CARCASS_MAX_TURNS;
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	4ae1      	ldr	r2, [pc, #900]	; (8001f80 <structInit+0x408>)
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	3304      	adds	r3, #4
 8001c02:	4ae1      	ldr	r2, [pc, #900]	; (8001f88 <structInit+0x410>)
 8001c04:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 4;
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	4add      	ldr	r2, [pc, #884]	; (8001f80 <structInit+0x408>)
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	18d3      	adds	r3, r2, r3
 8001c10:	3306      	adds	r3, #6
 8001c12:	2204      	movs	r2, #4
 8001c14:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 0;
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4ad9      	ldr	r2, [pc, #868]	; (8001f80 <structInit+0x408>)
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	3307      	adds	r3, #7
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
	i++;
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	1dfb      	adds	r3, r7, #7
 8001c2c:	3201      	adds	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]

	// STEP DIAMETER
	Settings[i].minValue = WINDING_MIN_DIAMETER;
 8001c30:	1dfb      	adds	r3, r7, #7
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	4bd2      	ldr	r3, [pc, #840]	; (8001f80 <structInit+0x408>)
 8001c36:	00d2      	lsls	r2, r2, #3
 8001c38:	2101      	movs	r1, #1
 8001c3a:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4acf      	ldr	r2, [pc, #828]	; (8001f80 <structInit+0x408>)
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	3302      	adds	r3, #2
 8001c48:	2200      	movs	r2, #0
 8001c4a:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = WINDING_MAX_DIAMETER;
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4acb      	ldr	r2, [pc, #812]	; (8001f80 <structInit+0x408>)
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	18d3      	adds	r3, r2, r3
 8001c56:	3304      	adds	r3, #4
 8001c58:	22fa      	movs	r2, #250	; 0xfa
 8001c5a:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 3;
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4ac7      	ldr	r2, [pc, #796]	; (8001f80 <structInit+0x408>)
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	18d3      	adds	r3, r2, r3
 8001c66:	3306      	adds	r3, #6
 8001c68:	2203      	movs	r2, #3
 8001c6a:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 2;
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4ac3      	ldr	r2, [pc, #780]	; (8001f80 <structInit+0x408>)
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	3307      	adds	r3, #7
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
	i++;
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	3201      	adds	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]

	// STEP SPEED
	Settings[i].minValue = WINDING_MIN_SPEED;
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	4bbd      	ldr	r3, [pc, #756]	; (8001f80 <structInit+0x408>)
 8001c8c:	00d2      	lsls	r2, r2, #3
 8001c8e:	2101      	movs	r1, #1
 8001c90:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4aba      	ldr	r2, [pc, #744]	; (8001f80 <structInit+0x408>)
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = WINDING_MAX_SPEED;
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4ab6      	ldr	r2, [pc, #728]	; (8001f80 <structInit+0x408>)
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	18d3      	adds	r3, r2, r3
 8001cac:	3304      	adds	r3, #4
 8001cae:	2209      	movs	r2, #9
 8001cb0:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 1;
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4ab2      	ldr	r2, [pc, #712]	; (8001f80 <structInit+0x408>)
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	18d3      	adds	r3, r2, r3
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 0;
 8001cc2:	1dfb      	adds	r3, r7, #7
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4aae      	ldr	r2, [pc, #696]	; (8001f80 <structInit+0x408>)
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	18d3      	adds	r3, r2, r3
 8001ccc:	3307      	adds	r3, #7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
	i=0;
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]

	// PROJECT
	// ============================================================
	//PROJECT - PEAVEY CLASSIC 30 - MAIN TRANSFORMER
	Details[i].fullName		= "Peavey-C30-Main";
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	49ab      	ldr	r1, [pc, #684]	; (8001f8c <structInit+0x414>)
 8001cde:	0013      	movs	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	189b      	adds	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4aaa      	ldr	r2, [pc, #680]	; (8001f90 <structInit+0x418>)
 8001ce8:	505a      	str	r2, [r3, r1]
	Details[i].shortName	= "P-C30-M";
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	49a7      	ldr	r1, [pc, #668]	; (8001f8c <structInit+0x414>)
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	18cb      	adds	r3, r1, r3
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4aa5      	ldr	r2, [pc, #660]	; (8001f94 <structInit+0x41c>)
 8001cfe:	601a      	str	r2, [r3, #0]
	Details[i].descShort_1	= "230V";
 8001d00:	1dfb      	adds	r3, r7, #7
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	49a1      	ldr	r1, [pc, #644]	; (8001f8c <structInit+0x414>)
 8001d06:	0013      	movs	r3, r2
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	189b      	adds	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	18cb      	adds	r3, r1, r3
 8001d10:	3308      	adds	r3, #8
 8001d12:	4aa1      	ldr	r2, [pc, #644]	; (8001f98 <structInit+0x420>)
 8001d14:	601a      	str	r2, [r3, #0]
	Details[i].descShort_2	= "270,30V";
 8001d16:	1dfb      	adds	r3, r7, #7
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	499c      	ldr	r1, [pc, #624]	; (8001f8c <structInit+0x414>)
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	189b      	adds	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	18cb      	adds	r3, r1, r3
 8001d26:	330c      	adds	r3, #12
 8001d28:	4a9c      	ldr	r2, [pc, #624]	; (8001f9c <structInit+0x424>)
 8001d2a:	601a      	str	r2, [r3, #0]
	Details[i].descFull_1	= "PRI: 230V";
 8001d2c:	1dfb      	adds	r3, r7, #7
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4996      	ldr	r1, [pc, #600]	; (8001f8c <structInit+0x414>)
 8001d32:	0013      	movs	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	18cb      	adds	r3, r1, r3
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <structInit+0x428>)
 8001d40:	601a      	str	r2, [r3, #0]
	Details[i].descFull_2 	= "SEC: 230V, 30V";
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4991      	ldr	r1, [pc, #580]	; (8001f8c <structInit+0x414>)
 8001d48:	0013      	movs	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	189b      	adds	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	18cb      	adds	r3, r1, r3
 8001d52:	3314      	adds	r3, #20
 8001d54:	4a93      	ldr	r2, [pc, #588]	; (8001fa4 <structInit+0x42c>)
 8001d56:	601a      	str	r2, [r3, #0]
	Details[i].width		= 1150;
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	781a      	ldrb	r2, [r3, #0]
 8001d5c:	498b      	ldr	r1, [pc, #556]	; (8001f8c <structInit+0x414>)
 8001d5e:	0013      	movs	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	189b      	adds	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	18cb      	adds	r3, r1, r3
 8001d68:	3318      	adds	r3, #24
 8001d6a:	4a8f      	ldr	r2, [pc, #572]	; (8001fa8 <structInit+0x430>)
 8001d6c:	801a      	strh	r2, [r3, #0]
	Details[i].turns[0]		= 1100;
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4986      	ldr	r1, [pc, #536]	; (8001f8c <structInit+0x414>)
 8001d74:	0013      	movs	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	189b      	adds	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	18cb      	adds	r3, r1, r3
 8001d7e:	331a      	adds	r3, #26
 8001d80:	4a8a      	ldr	r2, [pc, #552]	; (8001fac <structInit+0x434>)
 8001d82:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[0]	= 10;
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	4980      	ldr	r1, [pc, #512]	; (8001f8c <structInit+0x414>)
 8001d8a:	0013      	movs	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	189b      	adds	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	18cb      	adds	r3, r1, r3
 8001d94:	332e      	adds	r3, #46	; 0x2e
 8001d96:	220a      	movs	r2, #10
 8001d98:	801a      	strh	r2, [r3, #0]
	Details[i].turns[1]		= 900;
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	497b      	ldr	r1, [pc, #492]	; (8001f8c <structInit+0x414>)
 8001da0:	0013      	movs	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	18cb      	adds	r3, r1, r3
 8001daa:	331c      	adds	r3, #28
 8001dac:	22e1      	movs	r2, #225	; 0xe1
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[1]	= 15;
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4975      	ldr	r1, [pc, #468]	; (8001f8c <structInit+0x414>)
 8001db8:	0013      	movs	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	189b      	adds	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	18cb      	adds	r3, r1, r3
 8001dc2:	3330      	adds	r3, #48	; 0x30
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	801a      	strh	r2, [r3, #0]
	Details[i].turns[2]		= 200;
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	496f      	ldr	r1, [pc, #444]	; (8001f8c <structInit+0x414>)
 8001dce:	0013      	movs	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	18cb      	adds	r3, r1, r3
 8001dd8:	331e      	adds	r3, #30
 8001dda:	22c8      	movs	r2, #200	; 0xc8
 8001ddc:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[2]	= 100;
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	496a      	ldr	r1, [pc, #424]	; (8001f8c <structInit+0x414>)
 8001de4:	0013      	movs	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	189b      	adds	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	18cb      	adds	r3, r1, r3
 8001dee:	3332      	adds	r3, #50	; 0x32
 8001df0:	2264      	movs	r2, #100	; 0x64
 8001df2:	801a      	strh	r2, [r3, #0]
	i++;
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	3201      	adds	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]

	//PROJECT - PEAVEY CLASSIC 30 - SPEAKER TRANSFORMER
	Details[i].fullName 	= "Peavey-C30-SPK";
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4962      	ldr	r1, [pc, #392]	; (8001f8c <structInit+0x414>)
 8001e04:	0013      	movs	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	189b      	adds	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4a68      	ldr	r2, [pc, #416]	; (8001fb0 <structInit+0x438>)
 8001e0e:	505a      	str	r2, [r3, r1]
	Details[i].shortName	= "P-C30-S";
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	495d      	ldr	r1, [pc, #372]	; (8001f8c <structInit+0x414>)
 8001e16:	0013      	movs	r3, r2
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	189b      	adds	r3, r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	18cb      	adds	r3, r1, r3
 8001e20:	3304      	adds	r3, #4
 8001e22:	4a64      	ldr	r2, [pc, #400]	; (8001fb4 <structInit+0x43c>)
 8001e24:	601a      	str	r2, [r3, #0]
	Details[i].descShort_1	= "4xEL84";
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781a      	ldrb	r2, [r3, #0]
 8001e2a:	4958      	ldr	r1, [pc, #352]	; (8001f8c <structInit+0x414>)
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	189b      	adds	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	18cb      	adds	r3, r1, r3
 8001e36:	3308      	adds	r3, #8
 8001e38:	4a5f      	ldr	r2, [pc, #380]	; (8001fb8 <structInit+0x440>)
 8001e3a:	601a      	str	r2, [r3, #0]
	Details[i].descShort_2	= "16 Ohms";
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4952      	ldr	r1, [pc, #328]	; (8001f8c <structInit+0x414>)
 8001e42:	0013      	movs	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	189b      	adds	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	18cb      	adds	r3, r1, r3
 8001e4c:	330c      	adds	r3, #12
 8001e4e:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <structInit+0x444>)
 8001e50:	601a      	str	r2, [r3, #0]
	Details[i].descFull_1	= "4xEL84 | 3.4k";
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	494d      	ldr	r1, [pc, #308]	; (8001f8c <structInit+0x414>)
 8001e58:	0013      	movs	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	189b      	adds	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	18cb      	adds	r3, r1, r3
 8001e62:	3310      	adds	r3, #16
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <structInit+0x448>)
 8001e66:	601a      	str	r2, [r3, #0]
	Details[i].descFull_2 	= "OUT: 16 Ohms";
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4947      	ldr	r1, [pc, #284]	; (8001f8c <structInit+0x414>)
 8001e6e:	0013      	movs	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	189b      	adds	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	18cb      	adds	r3, r1, r3
 8001e78:	3314      	adds	r3, #20
 8001e7a:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <structInit+0x44c>)
 8001e7c:	601a      	str	r2, [r3, #0]
	Details[i].width		= 650;
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	4942      	ldr	r1, [pc, #264]	; (8001f8c <structInit+0x414>)
 8001e84:	0013      	movs	r3, r2
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	18cb      	adds	r3, r1, r3
 8001e8e:	3318      	adds	r3, #24
 8001e90:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <structInit+0x450>)
 8001e92:	801a      	strh	r2, [r3, #0]
	Details[i].turns[0]		= 900;
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	493c      	ldr	r1, [pc, #240]	; (8001f8c <structInit+0x414>)
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	189b      	adds	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	18cb      	adds	r3, r1, r3
 8001ea4:	331a      	adds	r3, #26
 8001ea6:	22e1      	movs	r2, #225	; 0xe1
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[0]	= 20;
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	4936      	ldr	r1, [pc, #216]	; (8001f8c <structInit+0x414>)
 8001eb2:	0013      	movs	r3, r2
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	18cb      	adds	r3, r1, r3
 8001ebc:	332e      	adds	r3, #46	; 0x2e
 8001ebe:	2214      	movs	r2, #20
 8001ec0:	801a      	strh	r2, [r3, #0]
	Details[i].turns[1]		= 600;
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	4931      	ldr	r1, [pc, #196]	; (8001f8c <structInit+0x414>)
 8001ec8:	0013      	movs	r3, r2
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	189b      	adds	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	18cb      	adds	r3, r1, r3
 8001ed2:	331c      	adds	r3, #28
 8001ed4:	2296      	movs	r2, #150	; 0x96
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[1]	= 120;
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	492b      	ldr	r1, [pc, #172]	; (8001f8c <structInit+0x414>)
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	189b      	adds	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	18cb      	adds	r3, r1, r3
 8001eea:	3330      	adds	r3, #48	; 0x30
 8001eec:	2278      	movs	r2, #120	; 0x78
 8001eee:	801a      	strh	r2, [r3, #0]
	i++;
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	3201      	adds	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]

	//PROJECT - TEST
	Details[i].fullName 	= "TEST-FULL";
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	4923      	ldr	r1, [pc, #140]	; (8001f8c <structInit+0x414>)
 8001f00:	0013      	movs	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	189b      	adds	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <structInit+0x454>)
 8001f0a:	505a      	str	r2, [r3, r1]
	Details[i].shortName	= "TEST-SH";
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781a      	ldrb	r2, [r3, #0]
 8001f10:	491e      	ldr	r1, [pc, #120]	; (8001f8c <structInit+0x414>)
 8001f12:	0013      	movs	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	189b      	adds	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	18cb      	adds	r3, r1, r3
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <structInit+0x458>)
 8001f20:	601a      	str	r2, [r3, #0]
	Details[i].descShort_1	= "2XEL84";
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4919      	ldr	r1, [pc, #100]	; (8001f8c <structInit+0x414>)
 8001f28:	0013      	movs	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	189b      	adds	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	18cb      	adds	r3, r1, r3
 8001f32:	3308      	adds	r3, #8
 8001f34:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <structInit+0x45c>)
 8001f36:	601a      	str	r2, [r3, #0]
	Details[i].descShort_2	= "4-8-16";
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	4913      	ldr	r1, [pc, #76]	; (8001f8c <structInit+0x414>)
 8001f3e:	0013      	movs	r3, r2
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	189b      	adds	r3, r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	18cb      	adds	r3, r1, r3
 8001f48:	330c      	adds	r3, #12
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <structInit+0x460>)
 8001f4c:	601a      	str	r2, [r3, #0]
	Details[i].descFull_1	= "2XEL84 | 8.2k";
 8001f4e:	1dfb      	adds	r3, r7, #7
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	490e      	ldr	r1, [pc, #56]	; (8001f8c <structInit+0x414>)
 8001f54:	0013      	movs	r3, r2
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	189b      	adds	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	18cb      	adds	r3, r1, r3
 8001f5e:	3310      	adds	r3, #16
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <structInit+0x464>)
 8001f62:	601a      	str	r2, [r3, #0]
	Details[i].descFull_2 	= "OUT: 4-8-16 Ohms";
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4908      	ldr	r1, [pc, #32]	; (8001f8c <structInit+0x414>)
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	189b      	adds	r3, r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	18cb      	adds	r3, r1, r3
 8001f74:	3314      	adds	r3, #20
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <structInit+0x468>)
 8001f78:	601a      	str	r2, [r3, #0]
	Details[i].width		= 800;
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	e031      	b.n	8001fe4 <structInit+0x46c>
 8001f80:	2000061c 	.word	0x2000061c
 8001f84:	000004e2 	.word	0x000004e2
 8001f88:	000009c4 	.word	0x000009c4
 8001f8c:	2000050c 	.word	0x2000050c
 8001f90:	080079f0 	.word	0x080079f0
 8001f94:	08007a00 	.word	0x08007a00
 8001f98:	08007a08 	.word	0x08007a08
 8001f9c:	08007a10 	.word	0x08007a10
 8001fa0:	08007a18 	.word	0x08007a18
 8001fa4:	08007a24 	.word	0x08007a24
 8001fa8:	0000047e 	.word	0x0000047e
 8001fac:	0000044c 	.word	0x0000044c
 8001fb0:	08007a34 	.word	0x08007a34
 8001fb4:	08007a44 	.word	0x08007a44
 8001fb8:	08007a4c 	.word	0x08007a4c
 8001fbc:	08007a54 	.word	0x08007a54
 8001fc0:	08007a5c 	.word	0x08007a5c
 8001fc4:	08007a6c 	.word	0x08007a6c
 8001fc8:	0000028a 	.word	0x0000028a
 8001fcc:	08007a7c 	.word	0x08007a7c
 8001fd0:	08007a88 	.word	0x08007a88
 8001fd4:	08007a90 	.word	0x08007a90
 8001fd8:	08007a98 	.word	0x08007a98
 8001fdc:	08007aa0 	.word	0x08007aa0
 8001fe0:	08007ab0 	.word	0x08007ab0
 8001fe4:	4932      	ldr	r1, [pc, #200]	; (80020b0 <structInit+0x538>)
 8001fe6:	0013      	movs	r3, r2
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	189b      	adds	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	18cb      	adds	r3, r1, r3
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	22c8      	movs	r2, #200	; 0xc8
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	801a      	strh	r2, [r3, #0]
	Details[i].turns[0]		= 2500;
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	492c      	ldr	r1, [pc, #176]	; (80020b0 <structInit+0x538>)
 8001ffe:	0013      	movs	r3, r2
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	189b      	adds	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	18cb      	adds	r3, r1, r3
 8002008:	331a      	adds	r3, #26
 800200a:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <structInit+0x53c>)
 800200c:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[0]	= 250;
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <structInit+0x538>)
 8002014:	0013      	movs	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	189b      	adds	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	18cb      	adds	r3, r1, r3
 800201e:	332e      	adds	r3, #46	; 0x2e
 8002020:	22fa      	movs	r2, #250	; 0xfa
 8002022:	801a      	strh	r2, [r3, #0]
	Details[i].turns[1]		= 10;
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4921      	ldr	r1, [pc, #132]	; (80020b0 <structInit+0x538>)
 800202a:	0013      	movs	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	189b      	adds	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	18cb      	adds	r3, r1, r3
 8002034:	331c      	adds	r3, #28
 8002036:	220a      	movs	r2, #10
 8002038:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[1]	= 1;
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	491c      	ldr	r1, [pc, #112]	; (80020b0 <structInit+0x538>)
 8002040:	0013      	movs	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	189b      	adds	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	18cb      	adds	r3, r1, r3
 800204a:	3330      	adds	r3, #48	; 0x30
 800204c:	2201      	movs	r2, #1
 800204e:	801a      	strh	r2, [r3, #0]
	Details[i].turns[2]		= 2500;
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	4916      	ldr	r1, [pc, #88]	; (80020b0 <structInit+0x538>)
 8002056:	0013      	movs	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	189b      	adds	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	18cb      	adds	r3, r1, r3
 8002060:	331e      	adds	r3, #30
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <structInit+0x53c>)
 8002064:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[2]	= 1;
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4911      	ldr	r1, [pc, #68]	; (80020b0 <structInit+0x538>)
 800206c:	0013      	movs	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	189b      	adds	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	18cb      	adds	r3, r1, r3
 8002076:	3332      	adds	r3, #50	; 0x32
 8002078:	2201      	movs	r2, #1
 800207a:	801a      	strh	r2, [r3, #0]
	Details[i].turns[3]		= 10;
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	490b      	ldr	r1, [pc, #44]	; (80020b0 <structInit+0x538>)
 8002082:	0013      	movs	r3, r2
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	189b      	adds	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	18cb      	adds	r3, r1, r3
 800208c:	3320      	adds	r3, #32
 800208e:	220a      	movs	r2, #10
 8002090:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[3]	= 250;
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	4906      	ldr	r1, [pc, #24]	; (80020b0 <structInit+0x538>)
 8002098:	0013      	movs	r3, r2
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	189b      	adds	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	18cb      	adds	r3, r1, r3
 80020a2:	3334      	adds	r3, #52	; 0x34
 80020a4:	22fa      	movs	r2, #250	; 0xfa
 80020a6:	801a      	strh	r2, [r3, #0]
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b002      	add	sp, #8
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2000050c 	.word	0x2000050c
 80020b4:	000009c4 	.word	0x000009c4

080020b8 <setTheme>:

void setTheme(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b094      	sub	sp, #80	; 0x50
 80020bc:	af02      	add	r7, sp, #8
	clearContent();
 80020be:	f000 ffdb 	bl	8003078 <clearContent>
	switch (workStep)
 80020c2:	4b70      	ldr	r3, [pc, #448]	; (8002284 <setTheme+0x1cc>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b3d      	cmp	r3, #61	; 0x3d
 80020ca:	d900      	bls.n	80020ce <setTheme+0x16>
 80020cc:	e0d4      	b.n	8002278 <setTheme+0x1c0>
 80020ce:	009a      	lsls	r2, r3, #2
 80020d0:	4b6d      	ldr	r3, [pc, #436]	; (8002288 <setTheme+0x1d0>)
 80020d2:	18d3      	adds	r3, r2, r3
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	469f      	mov	pc, r3
	{
		case 0: // wyświetla logo
			SSD1306_DrawBitmap(0, 0, IMG_LOGO, 128, 64, 1);
 80020d8:	4a6c      	ldr	r2, [pc, #432]	; (800228c <setTheme+0x1d4>)
 80020da:	2301      	movs	r3, #1
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2340      	movs	r3, #64	; 0x40
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	2100      	movs	r1, #0
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7fe ff06 	bl	8000ef8 <SSD1306_DrawBitmap>
			workStep++;
 80020ec:	4b65      	ldr	r3, [pc, #404]	; (8002284 <setTheme+0x1cc>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <setTheme+0x1cc>)
 80020f8:	701a      	strb	r2, [r3, #0]
			SSD1306_UpdateScreen();
 80020fa:	f7ff f861 	bl	80011c0 <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 80020fe:	23fa      	movs	r3, #250	; 0xfa
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	0018      	movs	r0, r3
 8002104:	f001 fb2c 	bl	8003760 <HAL_Delay>
			SSD1306_Clear();
 8002108:	f7ff fc68 	bl	80019dc <SSD1306_Clear>
			SSD1306_UpdateScreen();
 800210c:	f7ff f858 	bl	80011c0 <SSD1306_UpdateScreen>
			setTheme();
 8002110:	f7ff ffd2 	bl	80020b8 <setTheme>
			break;
 8002114:	e0b0      	b.n	8002278 <setTheme+0x1c0>
		case 1: // wybór projektu - nowy lub istniejacy
			showLabelBar(DISP_PROJECT_LABEL);
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <setTheme+0x1d8>)
 8002118:	0018      	movs	r0, r3
 800211a:	f000 ff91 	bl	8003040 <showLabelBar>
			progressBarWidth = (128 / ((PROJECT_COUNT + 1) / 2) + ((PROJECT_COUNT + 1) % 2));
 800211e:	2303      	movs	r3, #3
 8002120:	3301      	adds	r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	da00      	bge.n	8002128 <setTheme+0x70>
 8002126:	3301      	adds	r3, #1
 8002128:	105b      	asrs	r3, r3, #1
 800212a:	0019      	movs	r1, r3
 800212c:	2080      	movs	r0, #128	; 0x80
 800212e:	f7fe f887 	bl	8000240 <__divsi3>
 8002132:	0003      	movs	r3, r0
 8002134:	b2da      	uxtb	r2, r3
 8002136:	2303      	movs	r3, #3
 8002138:	3301      	adds	r3, #1
 800213a:	4956      	ldr	r1, [pc, #344]	; (8002294 <setTheme+0x1dc>)
 800213c:	400b      	ands	r3, r1
 800213e:	d504      	bpl.n	800214a <setTheme+0x92>
 8002140:	3b01      	subs	r3, #1
 8002142:	2102      	movs	r1, #2
 8002144:	4249      	negs	r1, r1
 8002146:	430b      	orrs	r3, r1
 8002148:	3301      	adds	r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	18d3      	adds	r3, r2, r3
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <setTheme+0x1e0>)
 8002152:	701a      	strb	r2, [r3, #0]
			progressBarStep = projectSelect / 2;
 8002154:	4b51      	ldr	r3, [pc, #324]	; (800229c <setTheme+0x1e4>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <setTheme+0x1e8>)
 8002160:	701a      	strb	r2, [r3, #0]
			paginationBar(progressBarWidth, progressBarStep);
 8002162:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <setTheme+0x1e0>)
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <setTheme+0x1e8>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	0019      	movs	r1, r3
 800216c:	0010      	movs	r0, r2
 800216e:	f000 ff91 	bl	8003094 <paginationBar>
			showProjectSelectMenu();
 8002172:	f000 f8a7 	bl	80022c4 <showProjectSelectMenu>
			break;
 8002176:	e07f      	b.n	8002278 <setTheme+0x1c0>
		case 11:; // szczegoly projektu
			ProjectManager Handler = Details[projectSelect - 1];
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <setTheme+0x1e4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	1e5a      	subs	r2, r3, #1
 8002180:	1d38      	adds	r0, r7, #4
 8002182:	4948      	ldr	r1, [pc, #288]	; (80022a4 <setTheme+0x1ec>)
 8002184:	0013      	movs	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	189b      	adds	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	18cb      	adds	r3, r1, r3
 800218e:	2244      	movs	r2, #68	; 0x44
 8002190:	0019      	movs	r1, r3
 8002192:	f004 ffa7 	bl	80070e4 <memcpy>
			showProjectDetails(&Handler);
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f9c7 	bl	800252c <showProjectDetails>
			break;
 800219e:	e06b      	b.n	8002278 <setTheme+0x1c0>
		case 2: // ustawienie szerokości karkasu
			showLabelBar(DISP_SET_WIDTH_LABEL);
 80021a0:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <setTheme+0x1f0>)
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 ff4c 	bl	8003040 <showLabelBar>
			if(!correctionFlag) showValueScreen(CARCASS_WIDTH, 0, 0, FIRST_RUN);
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <setTheme+0x1f4>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <setTheme+0x108>
 80021b2:	2301      	movs	r3, #1
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2000      	movs	r0, #0
 80021ba:	f000 fa33 	bl	8002624 <showValueScreen>
			else showValueScreen(CARCASS_WIDTH, 0, 0, EDIT_RUN);
			break;
 80021be:	e05b      	b.n	8002278 <setTheme+0x1c0>
			else showValueScreen(CARCASS_WIDTH, 0, 0, EDIT_RUN);
 80021c0:	2302      	movs	r3, #2
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 fa2c 	bl	8002624 <showValueScreen>
			break;
 80021cc:	e054      	b.n	8002278 <setTheme+0x1c0>
		case 3: // ustawienie ilosci zwojow
			showLabelBar(DISP_SET_TURNS_LABEL);
 80021ce:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <setTheme+0x1f8>)
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 ff35 	bl	8003040 <showLabelBar>
			if(!correctionFlag) showValueScreen(CARCASS_COIL_TURNS, 0, 0, FIRST_RUN);
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <setTheme+0x1f4>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <setTheme+0x136>
 80021e0:	2301      	movs	r3, #1
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2001      	movs	r0, #1
 80021e8:	f000 fa1c 	bl	8002624 <showValueScreen>
			else showValueScreen(CARCASS_COIL_TURNS, 0, 0, EDIT_RUN);
			break;
 80021ec:	e044      	b.n	8002278 <setTheme+0x1c0>
			else showValueScreen(CARCASS_COIL_TURNS, 0, 0, EDIT_RUN);
 80021ee:	2302      	movs	r3, #2
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 fa15 	bl	8002624 <showValueScreen>
			break;
 80021fa:	e03d      	b.n	8002278 <setTheme+0x1c0>
		case 4: // srednica uzwojenia
			showLabelBar(DISP_SET_DIAMETER_LABEL);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <setTheme+0x1fc>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f000 ff1e 	bl	8003040 <showLabelBar>
			if(!correctionFlag) showValueScreen(WINDING_DIAMETER, 0, 0, FIRST_RUN);
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <setTheme+0x1f4>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <setTheme+0x164>
 800220e:	2301      	movs	r3, #1
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2002      	movs	r0, #2
 8002216:	f000 fa05 	bl	8002624 <showValueScreen>
			else showValueScreen(WINDING_DIAMETER, 0, 0, EDIT_RUN);
			break;
 800221a:	e02d      	b.n	8002278 <setTheme+0x1c0>
			else showValueScreen(WINDING_DIAMETER, 0, 0, EDIT_RUN);
 800221c:	2302      	movs	r3, #2
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2002      	movs	r0, #2
 8002224:	f000 f9fe 	bl	8002624 <showValueScreen>
			break;
 8002228:	e026      	b.n	8002278 <setTheme+0x1c0>
		case 5: // szybkosc nawijania
			showLabelBar(DISP_SET_SPEED_LABEL);
 800222a:	4b23      	ldr	r3, [pc, #140]	; (80022b8 <setTheme+0x200>)
 800222c:	0018      	movs	r0, r3
 800222e:	f000 ff07 	bl	8003040 <showLabelBar>
			if(!correctionFlag) showValueScreen(WINDING_SPEED, 0, 0, FIRST_RUN);
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <setTheme+0x1f4>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <setTheme+0x192>
 800223c:	2301      	movs	r3, #1
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2003      	movs	r0, #3
 8002244:	f000 f9ee 	bl	8002624 <showValueScreen>
			else showValueScreen(WINDING_SPEED, 0, 0, EDIT_RUN);
			break;
 8002248:	e016      	b.n	8002278 <setTheme+0x1c0>
			else showValueScreen(WINDING_SPEED, 0, 0, EDIT_RUN);
 800224a:	2302      	movs	r3, #2
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2003      	movs	r0, #3
 8002252:	f000 f9e7 	bl	8002624 <showValueScreen>
			break;
 8002256:	e00f      	b.n	8002278 <setTheme+0x1c0>
		case 6: // podsumowanie
			showLabelBar(DISP_SET_SUMMARY_LABEL);
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <setTheme+0x204>)
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fef0 	bl	8003040 <showLabelBar>
			showSummary();
 8002260:	f000 fd18 	bl	8002c94 <showSummary>
			break;
 8002264:	e008      	b.n	8002278 <setTheme+0x1c0>
		case 61: // podsumowanie
			showLabelBar(DISP_CORRECTNESS_QUERY);
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <setTheme+0x208>)
 8002268:	0018      	movs	r0, r3
 800226a:	f000 fee9 	bl	8003040 <showLabelBar>
			correctnessQuery(0, FIRST_RUN);
 800226e:	2101      	movs	r1, #1
 8002270:	2000      	movs	r0, #0
 8002272:	f000 fdfb 	bl	8002e6c <correctnessQuery>
			break;
 8002276:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_UpdateScreen();
 8002278:	f7fe ffa2 	bl	80011c0 <SSD1306_UpdateScreen>
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b012      	add	sp, #72	; 0x48
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200004fe 	.word	0x200004fe
 8002288:	0800903c 	.word	0x0800903c
 800228c:	08007c38 	.word	0x08007c38
 8002290:	08007ac4 	.word	0x08007ac4
 8002294:	80000001 	.word	0x80000001
 8002298:	20000501 	.word	0x20000501
 800229c:	200004ff 	.word	0x200004ff
 80022a0:	20000502 	.word	0x20000502
 80022a4:	2000050c 	.word	0x2000050c
 80022a8:	08007ad8 	.word	0x08007ad8
 80022ac:	20000500 	.word	0x20000500
 80022b0:	08007ae8 	.word	0x08007ae8
 80022b4:	08007af8 	.word	0x08007af8
 80022b8:	08007b08 	.word	0x08007b08
 80022bc:	08007b1c 	.word	0x08007b1c
 80022c0:	08007b2c 	.word	0x08007b2c

080022c4 <showProjectSelectMenu>:

// wybór projektu - 1
// -------------------------------------------------------------------------------------
void showProjectSelectMenu(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af00      	add	r7, sp, #0
	uint8_t leftMargin = BOX_LEFT; // left margin
 80022ca:	2347      	movs	r3, #71	; 0x47
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2205      	movs	r2, #5
 80022d0:	701a      	strb	r2, [r3, #0]
	uint8_t renderingBlock = projectSelect - 1;
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <showProjectSelectMenu+0x12c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	2346      	movs	r3, #70	; 0x46
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	3a01      	subs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
	uint8_t renderingStep = 0;
 80022e0:	2345      	movs	r3, #69	; 0x45
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]

		if(projectSelect < 2)
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <showProjectSelectMenu+0x12c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d875      	bhi.n	80023de <showProjectSelectMenu+0x11a>
		{
			newTaskElement();
 80022f2:	f000 f881 	bl	80023f8 <newTaskElement>
			ProjectManager Handler = Details[0];
 80022f6:	003a      	movs	r2, r7
 80022f8:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <showProjectSelectMenu+0x130>)
 80022fa:	0010      	movs	r0, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	2344      	movs	r3, #68	; 0x44
 8002300:	001a      	movs	r2, r3
 8002302:	f004 feef 	bl	80070e4 <memcpy>
			showProjectElements(&Handler, 68);
 8002306:	003b      	movs	r3, r7
 8002308:	2144      	movs	r1, #68	; 0x44
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f8bc 	bl	8002488 <showProjectElements>
					showProjectElements(&Handler, leftMargin);
				}
				renderingStep++;
			}
		}
}
 8002310:	e06a      	b.n	80023e8 <showProjectSelectMenu+0x124>
				if(!renderingStep)
 8002312:	2345      	movs	r3, #69	; 0x45
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d127      	bne.n	800236c <showProjectSelectMenu+0xa8>
					if(projectSelect % 2)
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <showProjectSelectMenu+0x12c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2201      	movs	r2, #1
 8002324:	4013      	ands	r3, r2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <showProjectSelectMenu+0x72>
						leftMargin = BOX_RIGHT;
 800232c:	2347      	movs	r3, #71	; 0x47
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2244      	movs	r2, #68	; 0x44
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e003      	b.n	800233e <showProjectSelectMenu+0x7a>
						leftMargin = BOX_LEFT;
 8002336:	2347      	movs	r3, #71	; 0x47
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2205      	movs	r2, #5
 800233c:	701a      	strb	r2, [r3, #0]
					ProjectManager Handler = Details[renderingBlock];
 800233e:	2346      	movs	r3, #70	; 0x46
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	781a      	ldrb	r2, [r3, #0]
 8002344:	0038      	movs	r0, r7
 8002346:	492b      	ldr	r1, [pc, #172]	; (80023f4 <showProjectSelectMenu+0x130>)
 8002348:	0013      	movs	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	189b      	adds	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	18cb      	adds	r3, r1, r3
 8002352:	2244      	movs	r2, #68	; 0x44
 8002354:	0019      	movs	r1, r3
 8002356:	f004 fec5 	bl	80070e4 <memcpy>
					showProjectElements(&Handler, leftMargin);
 800235a:	2347      	movs	r3, #71	; 0x47
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	003b      	movs	r3, r7
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f88f 	bl	8002488 <showProjectElements>
 800236a:	e032      	b.n	80023d2 <showProjectSelectMenu+0x10e>
					if(projectSelect % 2)
 800236c:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <showProjectSelectMenu+0x12c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2201      	movs	r2, #1
 8002374:	4013      	ands	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <showProjectSelectMenu+0xce>
						renderingBlock--;
 800237c:	2146      	movs	r1, #70	; 0x46
 800237e:	187b      	adds	r3, r7, r1
 8002380:	781a      	ldrb	r2, [r3, #0]
 8002382:	187b      	adds	r3, r7, r1
 8002384:	3a01      	subs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
						leftMargin = BOX_LEFT;
 8002388:	2347      	movs	r3, #71	; 0x47
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2205      	movs	r2, #5
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e009      	b.n	80023a6 <showProjectSelectMenu+0xe2>
						renderingBlock++;
 8002392:	2146      	movs	r1, #70	; 0x46
 8002394:	187b      	adds	r3, r7, r1
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	187b      	adds	r3, r7, r1
 800239a:	3201      	adds	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
						leftMargin = BOX_RIGHT;
 800239e:	2347      	movs	r3, #71	; 0x47
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2244      	movs	r2, #68	; 0x44
 80023a4:	701a      	strb	r2, [r3, #0]
					ProjectManager Handler = Details[renderingBlock];
 80023a6:	2346      	movs	r3, #70	; 0x46
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	0038      	movs	r0, r7
 80023ae:	4911      	ldr	r1, [pc, #68]	; (80023f4 <showProjectSelectMenu+0x130>)
 80023b0:	0013      	movs	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	189b      	adds	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	18cb      	adds	r3, r1, r3
 80023ba:	2244      	movs	r2, #68	; 0x44
 80023bc:	0019      	movs	r1, r3
 80023be:	f004 fe91 	bl	80070e4 <memcpy>
					showProjectElements(&Handler, leftMargin);
 80023c2:	2347      	movs	r3, #71	; 0x47
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	003b      	movs	r3, r7
 80023ca:	0011      	movs	r1, r2
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f85b 	bl	8002488 <showProjectElements>
				renderingStep++;
 80023d2:	2145      	movs	r1, #69	; 0x45
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	3201      	adds	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
			while(renderingStep < 2)
 80023de:	2345      	movs	r3, #69	; 0x45
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d994      	bls.n	8002312 <showProjectSelectMenu+0x4e>
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b012      	add	sp, #72	; 0x48
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200004ff 	.word	0x200004ff
 80023f4:	2000050c 	.word	0x2000050c

080023f8 <newTaskElement>:

void newTaskElement(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af02      	add	r7, sp, #8
	bool color = 0;
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
	if((projectSelect + 3) % 2)
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <newTaskElement+0x80>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3303      	adds	r3, #3
 800240c:	001a      	movs	r2, r3
 800240e:	2301      	movs	r3, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d00b      	beq.n	800242c <newTaskElement+0x34>
	{
		SSD1306_DrawFilledRectangle(5, 25, 56, 47, 1);
 8002414:	2301      	movs	r3, #1
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	232f      	movs	r3, #47	; 0x2f
 800241a:	2238      	movs	r2, #56	; 0x38
 800241c:	2119      	movs	r1, #25
 800241e:	2005      	movs	r0, #5
 8002420:	f7ff fa70 	bl	8001904 <SSD1306_DrawFilledRectangle>
		color = 0;
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e00a      	b.n	8002442 <newTaskElement+0x4a>
	}
	else
	{
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
 800242c:	2301      	movs	r3, #1
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	232f      	movs	r3, #47	; 0x2f
 8002432:	2238      	movs	r2, #56	; 0x38
 8002434:	2119      	movs	r1, #25
 8002436:	2005      	movs	r0, #5
 8002438:	f7ff f9cd 	bl	80017d6 <SSD1306_DrawRectangle>
		color = 1;
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
	}

	SSD1306_GotoXY(18, 33);
 8002442:	2121      	movs	r1, #33	; 0x21
 8002444:	2012      	movs	r0, #18
 8002446:	f7fe ff77 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts("Nowe", &Font_7x10, color);
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	490b      	ldr	r1, [pc, #44]	; (800247c <newTaskElement+0x84>)
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <newTaskElement+0x88>)
 8002452:	0018      	movs	r0, r3
 8002454:	f7ff f80a 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(9, 46);
 8002458:	212e      	movs	r1, #46	; 0x2e
 800245a:	2009      	movs	r0, #9
 800245c:	f7fe ff6c 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts("zadanie", &Font_7x10, color);
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	4905      	ldr	r1, [pc, #20]	; (800247c <newTaskElement+0x84>)
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <newTaskElement+0x8c>)
 8002468:	0018      	movs	r0, r3
 800246a:	f7fe ffff 	bl	800146c <SSD1306_Puts>
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b002      	add	sp, #8
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	200004ff 	.word	0x200004ff
 800247c:	20000004 	.word	0x20000004
 8002480:	08007b38 	.word	0x08007b38
 8002484:	08007b40 	.word	0x08007b40

08002488 <showProjectElements>:

void showProjectElements(ProjectManager * details, uint8_t margin)
{
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	000a      	movs	r2, r1
 8002492:	1cfb      	adds	r3, r7, #3
 8002494:	701a      	strb	r2, [r3, #0]
	bool color = 0;
 8002496:	250f      	movs	r5, #15
 8002498:	197b      	adds	r3, r7, r5
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
	color = showSelectBoxes(margin, projectSelect);
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <showProjectElements+0x9c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	197c      	adds	r4, r7, r5
 80024a6:	1cfb      	adds	r3, r7, #3
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 fd73 	bl	8002f98 <showSelectBoxes>
 80024b2:	0003      	movs	r3, r0
 80024b4:	7023      	strb	r3, [r4, #0]
	margin += 4;
 80024b6:	1cfb      	adds	r3, r7, #3
 80024b8:	1cfa      	adds	r2, r7, #3
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	3204      	adds	r2, #4
 80024be:	701a      	strb	r2, [r3, #0]
	SSD1306_GotoXY(margin, 29);
 80024c0:	1cfb      	adds	r3, r7, #3
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	211d      	movs	r1, #29
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe ff35 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(details->shortName, &Font_7x10, color);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6858      	ldr	r0, [r3, #4]
 80024d2:	197b      	adds	r3, r7, r5
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <showProjectElements+0xa0>)
 80024d8:	0019      	movs	r1, r3
 80024da:	f7fe ffc7 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(margin, 40);
 80024de:	1cfb      	adds	r3, r7, #3
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2128      	movs	r1, #40	; 0x28
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7fe ff26 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(details->descShort_1, &Font_7x10, color);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6898      	ldr	r0, [r3, #8]
 80024f0:	197b      	adds	r3, r7, r5
 80024f2:	781a      	ldrb	r2, [r3, #0]
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <showProjectElements+0xa0>)
 80024f6:	0019      	movs	r1, r3
 80024f8:	f7fe ffb8 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(margin, 51);
 80024fc:	1cfb      	adds	r3, r7, #3
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	2133      	movs	r1, #51	; 0x33
 8002504:	0018      	movs	r0, r3
 8002506:	f7fe ff17 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(details->descShort_2, &Font_7x10, color);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68d8      	ldr	r0, [r3, #12]
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <showProjectElements+0xa0>)
 8002514:	0019      	movs	r1, r3
 8002516:	f7fe ffa9 	bl	800146c <SSD1306_Puts>
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bdb0      	pop	{r4, r5, r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	200004ff 	.word	0x200004ff
 8002528:	20000004 	.word	0x20000004

0800252c <showProjectDetails>:

// project details - 11
// -------------------------------------------------------------------------------------

void showProjectDetails(ProjectManager * details)
{
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	char width[10];
	sprintf(width, "%i.%imm", details->width / 10, details->width % 10);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8b1b      	ldrh	r3, [r3, #24]
 8002538:	210a      	movs	r1, #10
 800253a:	0018      	movs	r0, r3
 800253c:	f7fd fdf6 	bl	800012c <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	b29b      	uxth	r3, r3
 8002544:	001c      	movs	r4, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	8b1b      	ldrh	r3, [r3, #24]
 800254a:	210a      	movs	r1, #10
 800254c:	0018      	movs	r0, r3
 800254e:	f7fd fe73 	bl	8000238 <__aeabi_uidivmod>
 8002552:	000b      	movs	r3, r1
 8002554:	b29b      	uxth	r3, r3
 8002556:	492e      	ldr	r1, [pc, #184]	; (8002610 <showProjectDetails+0xe4>)
 8002558:	250c      	movs	r5, #12
 800255a:	1978      	adds	r0, r7, r5
 800255c:	0022      	movs	r2, r4
 800255e:	f004 fdd3 	bl	8007108 <siprintf>
	showLabelBar(details->fullName);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	f000 fd6a 	bl	8003040 <showLabelBar>
	SSD1306_GotoXY(0, 20);
 800256c:	2114      	movs	r1, #20
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fee2 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 8002574:	4927      	ldr	r1, [pc, #156]	; (8002614 <showProjectDetails+0xe8>)
 8002576:	4b28      	ldr	r3, [pc, #160]	; (8002618 <showProjectDetails+0xec>)
 8002578:	2201      	movs	r2, #1
 800257a:	0018      	movs	r0, r3
 800257c:	f7fe ff76 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8002580:	2114      	movs	r1, #20
 8002582:	2046      	movs	r0, #70	; 0x46
 8002584:	f7fe fed8 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 8002588:	4922      	ldr	r1, [pc, #136]	; (8002614 <showProjectDetails+0xe8>)
 800258a:	197b      	adds	r3, r7, r5
 800258c:	2201      	movs	r2, #1
 800258e:	0018      	movs	r0, r3
 8002590:	f7fe ff6c 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 8002594:	211f      	movs	r1, #31
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fece 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(TASK_NO_LABEL, &Font_7x10, 1);
 800259c:	491d      	ldr	r1, [pc, #116]	; (8002614 <showProjectDetails+0xe8>)
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <showProjectDetails+0xf0>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7fe ff62 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(70, 31);
 80025a8:	211f      	movs	r1, #31
 80025aa:	2046      	movs	r0, #70	; 0x46
 80025ac:	f7fe fec4 	bl	8001338 <SSD1306_GotoXY>
	uint8_t count = countArray(details);
 80025b0:	2617      	movs	r6, #23
 80025b2:	19bc      	adds	r4, r7, r6
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fd8d 	bl	80030d6 <countArray>
 80025bc:	0003      	movs	r3, r0
 80025be:	7023      	strb	r3, [r4, #0]
	sprintf(width, "%i", count);
 80025c0:	19bb      	adds	r3, r7, r6
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <showProjectDetails+0xf4>)
 80025c6:	197b      	adds	r3, r7, r5
 80025c8:	0018      	movs	r0, r3
 80025ca:	f004 fd9d 	bl	8007108 <siprintf>
	SSD1306_Puts(width, &Font_7x10, 1);
 80025ce:	4911      	ldr	r1, [pc, #68]	; (8002614 <showProjectDetails+0xe8>)
 80025d0:	197b      	adds	r3, r7, r5
 80025d2:	2201      	movs	r2, #1
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fe ff49 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(0, 42);
 80025da:	212a      	movs	r1, #42	; 0x2a
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe feab 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(details->descFull_1, &Font_7x10, 1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	490b      	ldr	r1, [pc, #44]	; (8002614 <showProjectDetails+0xe8>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7fe ff3e 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 80025f0:	2135      	movs	r1, #53	; 0x35
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe fea0 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(details->descFull_2, &Font_7x10, 1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	4905      	ldr	r1, [pc, #20]	; (8002614 <showProjectDetails+0xe8>)
 80025fe:	2201      	movs	r2, #1
 8002600:	0018      	movs	r0, r3
 8002602:	f7fe ff33 	bl	800146c <SSD1306_Puts>
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b007      	add	sp, #28
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	08007b48 	.word	0x08007b48
 8002614:	20000004 	.word	0x20000004
 8002618:	08007b50 	.word	0x08007b50
 800261c:	08007b5c 	.word	0x08007b5c
 8002620:	08007b68 	.word	0x08007b68

08002624 <showValueScreen>:

// ustawianie wartosci - 2++
// -------------------------------------------------------------------------------------
void showValueScreen(VALUE_TYPE type, uint8_t runMode, bool direction, uint8_t runCount)
{
 8002624:	b5b0      	push	{r4, r5, r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	0005      	movs	r5, r0
 800262c:	000c      	movs	r4, r1
 800262e:	0010      	movs	r0, r2
 8002630:	0019      	movs	r1, r3
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	1c2a      	adds	r2, r5, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	1c22      	adds	r2, r4, #0
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	1d7b      	adds	r3, r7, #5
 8002640:	1c02      	adds	r2, r0, #0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	1c0a      	adds	r2, r1, #0
 8002648:	701a      	strb	r2, [r3, #0]
	char valueLettering[10];
	if(runCount)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d057      	beq.n	8002702 <showValueScreen+0xde>
	{
		markerPosition = 0;
 8002652:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <showValueScreen+0x21c>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
		switch (type)
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d029      	beq.n	80026b4 <showValueScreen+0x90>
 8002660:	dc33      	bgt.n	80026ca <showValueScreen+0xa6>
 8002662:	2b02      	cmp	r3, #2
 8002664:	d01b      	beq.n	800269e <showValueScreen+0x7a>
 8002666:	dc30      	bgt.n	80026ca <showValueScreen+0xa6>
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <showValueScreen+0x4e>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d00b      	beq.n	8002688 <showValueScreen+0x64>
 8002670:	e02b      	b.n	80026ca <showValueScreen+0xa6>
		{
			case 0: SSD1306_DrawBitmap(0, 0, IMG_WIDTH, 128, 64, 1);
 8002672:	4a74      	ldr	r2, [pc, #464]	; (8002844 <showValueScreen+0x220>)
 8002674:	2301      	movs	r3, #1
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	2100      	movs	r1, #0
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe fc39 	bl	8000ef8 <SSD1306_DrawBitmap>
				break;
 8002686:	e020      	b.n	80026ca <showValueScreen+0xa6>
			case 1: SSD1306_DrawBitmap(0, 0, IMG_TURNS, 128, 64, 1);
 8002688:	4a6f      	ldr	r2, [pc, #444]	; (8002848 <showValueScreen+0x224>)
 800268a:	2301      	movs	r3, #1
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2340      	movs	r3, #64	; 0x40
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	2100      	movs	r1, #0
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fc2e 	bl	8000ef8 <SSD1306_DrawBitmap>
				break;
 800269c:	e015      	b.n	80026ca <showValueScreen+0xa6>
			case 2: SSD1306_DrawBitmap(0, 0, IMG_DIAMETER, 128, 64, 1);
 800269e:	4a6b      	ldr	r2, [pc, #428]	; (800284c <showValueScreen+0x228>)
 80026a0:	2301      	movs	r3, #1
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	2100      	movs	r1, #0
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe fc23 	bl	8000ef8 <SSD1306_DrawBitmap>
				break;
 80026b2:	e00a      	b.n	80026ca <showValueScreen+0xa6>
			case 3: SSD1306_DrawBitmap(0, 0, IMG_SPEED, 128, 64, 1);
 80026b4:	4a66      	ldr	r2, [pc, #408]	; (8002850 <showValueScreen+0x22c>)
 80026b6:	2301      	movs	r3, #1
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2340      	movs	r3, #64	; 0x40
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	2100      	movs	r1, #0
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe fc18 	bl	8000ef8 <SSD1306_DrawBitmap>
				break;
 80026c8:	46c0      	nop			; (mov r8, r8)
		}
		if(runCount == FIRST_RUN) intToArray_chVal(Settings[type].minValue);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <showValueScreen+0xc0>
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <showValueScreen+0x230>)
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	5ad3      	ldrh	r3, [r2, r3]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fa11 	bl	8002b04 <intToArray_chVal>
 80026e2:	e033      	b.n	800274c <showValueScreen+0x128>
		else if(runCount == EDIT_RUN) intToArray_chVal(Settings[type].setValue);
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d12f      	bne.n	800274c <showValueScreen+0x128>
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <showValueScreen+0x230>)
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	18d3      	adds	r3, r2, r3
 80026f6:	3302      	adds	r3, #2
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fa02 	bl	8002b04 <intToArray_chVal>
 8002700:	e024      	b.n	800274c <showValueScreen+0x128>
	}
	else
	{
		if(runMode) changeValue(direction, markerPosition, Settings[type].minValue, Settings[type].maxValue);
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <showValueScreen+0x114>
 800270a:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <showValueScreen+0x21c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b25b      	sxtb	r3, r3
 8002710:	b2d9      	uxtb	r1, r3
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <showValueScreen+0x230>)
 8002718:	00d2      	lsls	r2, r2, #3
 800271a:	5ad4      	ldrh	r4, [r2, r3]
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4a4c      	ldr	r2, [pc, #304]	; (8002854 <showValueScreen+0x230>)
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	18d3      	adds	r3, r2, r3
 8002726:	3304      	adds	r3, #4
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	1d7b      	adds	r3, r7, #5
 800272c:	7818      	ldrb	r0, [r3, #0]
 800272e:	0013      	movs	r3, r2
 8002730:	0022      	movs	r2, r4
 8002732:	f000 f8f5 	bl	8002920 <changeValue>
 8002736:	e009      	b.n	800274c <showValueScreen+0x128>
		else moveMarker(Settings[type].digitsCount);
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4a45      	ldr	r2, [pc, #276]	; (8002854 <showValueScreen+0x230>)
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	18d3      	adds	r3, r2, r3
 8002742:	3306      	adds	r3, #6
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f8ca 	bl	80028e0 <moveMarker>
	}
	setMarkerPosition(Settings[type].dotPosition);
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4a40      	ldr	r2, [pc, #256]	; (8002854 <showValueScreen+0x230>)
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	3307      	adds	r3, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f888 	bl	8002870 <setMarkerPosition>
	switch (type)
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d04d      	beq.n	8002804 <showValueScreen+0x1e0>
 8002768:	dc57      	bgt.n	800281a <showValueScreen+0x1f6>
 800276a:	2b02      	cmp	r3, #2
 800276c:	d037      	beq.n	80027de <showValueScreen+0x1ba>
 800276e:	dc54      	bgt.n	800281a <showValueScreen+0x1f6>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <showValueScreen+0x156>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d019      	beq.n	80027ac <showValueScreen+0x188>
 8002778:	e04f      	b.n	800281a <showValueScreen+0x1f6>
	{
		case 0: sprintf(valueLettering, "%i%i%i.%imm", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <showValueScreen+0x234>)
 800277c:	78db      	ldrb	r3, [r3, #3]
 800277e:	b25b      	sxtb	r3, r3
 8002780:	001c      	movs	r4, r3
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <showValueScreen+0x234>)
 8002784:	789b      	ldrb	r3, [r3, #2]
 8002786:	b25b      	sxtb	r3, r3
 8002788:	001d      	movs	r5, r3
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <showValueScreen+0x234>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	b25b      	sxtb	r3, r3
 8002790:	001a      	movs	r2, r3
 8002792:	4b31      	ldr	r3, [pc, #196]	; (8002858 <showValueScreen+0x234>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4930      	ldr	r1, [pc, #192]	; (800285c <showValueScreen+0x238>)
 800279a:	200c      	movs	r0, #12
 800279c:	1838      	adds	r0, r7, r0
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	9200      	str	r2, [sp, #0]
 80027a2:	002b      	movs	r3, r5
 80027a4:	0022      	movs	r2, r4
 80027a6:	f004 fcaf 	bl	8007108 <siprintf>
			break;
 80027aa:	e036      	b.n	800281a <showValueScreen+0x1f6>
		case 1: sprintf(valueLettering, "%i%i%i%izw.", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <showValueScreen+0x234>)
 80027ae:	78db      	ldrb	r3, [r3, #3]
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	001c      	movs	r4, r3
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <showValueScreen+0x234>)
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	001d      	movs	r5, r3
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <showValueScreen+0x234>)
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	001a      	movs	r2, r3
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <showValueScreen+0x234>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	4925      	ldr	r1, [pc, #148]	; (8002860 <showValueScreen+0x23c>)
 80027cc:	200c      	movs	r0, #12
 80027ce:	1838      	adds	r0, r7, r0
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	9200      	str	r2, [sp, #0]
 80027d4:	002b      	movs	r3, r5
 80027d6:	0022      	movs	r2, r4
 80027d8:	f004 fc96 	bl	8007108 <siprintf>
			break;
 80027dc:	e01d      	b.n	800281a <showValueScreen+0x1f6>
		case 2: sprintf(valueLettering, "~%i.%i%imm", arrayToken[2], arrayToken[1], arrayToken[0]);
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <showValueScreen+0x234>)
 80027e0:	789b      	ldrb	r3, [r3, #2]
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	001a      	movs	r2, r3
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <showValueScreen+0x234>)
 80027e8:	785b      	ldrb	r3, [r3, #1]
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	001c      	movs	r4, r3
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <showValueScreen+0x234>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	491b      	ldr	r1, [pc, #108]	; (8002864 <showValueScreen+0x240>)
 80027f6:	200c      	movs	r0, #12
 80027f8:	1838      	adds	r0, r7, r0
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	0023      	movs	r3, r4
 80027fe:	f004 fc83 	bl	8007108 <siprintf>
			break;
 8002802:	e00a      	b.n	800281a <showValueScreen+0x1f6>
		case 3: sprintf(valueLettering, "   %i", arrayToken[0]);
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <showValueScreen+0x234>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b25b      	sxtb	r3, r3
 800280a:	001a      	movs	r2, r3
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <showValueScreen+0x244>)
 800280e:	230c      	movs	r3, #12
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	0018      	movs	r0, r3
 8002814:	f004 fc78 	bl	8007108 <siprintf>
			break;
 8002818:	46c0      	nop			; (mov r8, r8)
	}

	clearValue();
 800281a:	f000 fa2c 	bl	8002c76 <clearValue>
	SSD1306_GotoXY(25, 20);
 800281e:	2114      	movs	r1, #20
 8002820:	2019      	movs	r0, #25
 8002822:	f7fe fd89 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(valueLettering, &Font_11x18, 1);
 8002826:	4911      	ldr	r1, [pc, #68]	; (800286c <showValueScreen+0x248>)
 8002828:	230c      	movs	r3, #12
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2201      	movs	r2, #1
 800282e:	0018      	movs	r0, r3
 8002830:	f7fe fe1c 	bl	800146c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002834:	f7fe fcc4 	bl	80011c0 <SSD1306_UpdateScreen>
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	b006      	add	sp, #24
 800283e:	bdb0      	pop	{r4, r5, r7, pc}
 8002840:	20000503 	.word	0x20000503
 8002844:	08008038 	.word	0x08008038
 8002848:	08008438 	.word	0x08008438
 800284c:	08008838 	.word	0x08008838
 8002850:	08008c38 	.word	0x08008c38
 8002854:	2000061c 	.word	0x2000061c
 8002858:	20000504 	.word	0x20000504
 800285c:	08007b6c 	.word	0x08007b6c
 8002860:	08007b78 	.word	0x08007b78
 8002864:	08007b84 	.word	0x08007b84
 8002868:	08007b90 	.word	0x08007b90
 800286c:	2000000c 	.word	0x2000000c

08002870 <setMarkerPosition>:

void setMarkerPosition(uint8_t divider)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	0002      	movs	r2, r0
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	701a      	strb	r2, [r3, #0]
	clearMarker();
 800287c:	f000 f9ed 	bl	8002c5a <clearMarker>
	uint8_t correction = 0;
 8002880:	210f      	movs	r1, #15
 8002882:	187b      	adds	r3, r7, r1
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= divider)
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <setMarkerPosition+0x6c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	b25b      	sxtb	r3, r3
 800288e:	001a      	movs	r2, r3
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	db02      	blt.n	800289e <setMarkerPosition+0x2e>
	{
		correction = 11;
 8002898:	187b      	adds	r3, r7, r1
 800289a:	220b      	movs	r2, #11
 800289c:	701a      	strb	r2, [r3, #0]
	}
	char margin = (73 - ((markerPosition * 11) + correction));
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <setMarkerPosition+0x6c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	1c1a      	adds	r2, r3, #0
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	18d2      	adds	r2, r2, r3
 80028ac:	1892      	adds	r2, r2, r2
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	230f      	movs	r3, #15
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	200e      	movs	r0, #14
 80028be:	183b      	adds	r3, r7, r0
 80028c0:	2149      	movs	r1, #73	; 0x49
 80028c2:	1a8a      	subs	r2, r1, r2
 80028c4:	701a      	strb	r2, [r3, #0]
	drawMarker(margin, 39);
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2127      	movs	r1, #39	; 0x27
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f979 	bl	8002bc4 <drawMarker>
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b004      	add	sp, #16
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	20000503 	.word	0x20000503

080028e0 <moveMarker>:

void moveMarker(uint8_t range)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	0002      	movs	r2, r0
 80028e8:	1dfb      	adds	r3, r7, #7
 80028ea:	701a      	strb	r2, [r3, #0]
	markerPosition++;
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <moveMarker+0x3c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	b25a      	sxtb	r2, r3
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <moveMarker+0x3c>)
 80028fc:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= range) {markerPosition = 0;}
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <moveMarker+0x3c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	001a      	movs	r2, r3
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	db02      	blt.n	8002914 <moveMarker+0x34>
 800290e:	4b03      	ldr	r3, [pc, #12]	; (800291c <moveMarker+0x3c>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000503 	.word	0x20000503

08002920 <changeValue>:

void changeValue(bool set, uint8_t position, uint16_t min, uint16_t max)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	0005      	movs	r5, r0
 8002928:	000c      	movs	r4, r1
 800292a:	0010      	movs	r0, r2
 800292c:	0019      	movs	r1, r3
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	1c2a      	adds	r2, r5, #0
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	1c22      	adds	r2, r4, #0
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	1c02      	adds	r2, r0, #0
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	1cbb      	adds	r3, r7, #2
 8002942:	1c0a      	adds	r2, r1, #0
 8002944:	801a      	strh	r2, [r3, #0]
	uint16_t value;
	uint16_t valueToken = arrayToInt_chVal();
 8002946:	2310      	movs	r3, #16
 8002948:	18fc      	adds	r4, r7, r3
 800294a:	f000 f8a1 	bl	8002a90 <arrayToInt_chVal>
 800294e:	0003      	movs	r3, r0
 8002950:	8023      	strh	r3, [r4, #0]
	uint16_t expo 		= 1;
 8002952:	2314      	movs	r3, #20
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2201      	movs	r2, #1
 8002958:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < position; i++)
 800295a:	2313      	movs	r3, #19
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e00e      	b.n	8002982 <changeValue+0x62>
	{
		expo *= 10;
 8002964:	2314      	movs	r3, #20
 8002966:	18fa      	adds	r2, r7, r3
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	1c19      	adds	r1, r3, #0
 800296e:	0089      	lsls	r1, r1, #2
 8002970:	18cb      	adds	r3, r1, r3
 8002972:	18db      	adds	r3, r3, r3
 8002974:	8013      	strh	r3, [r2, #0]
	for(uint8_t i = 0; i < position; i++)
 8002976:	2113      	movs	r1, #19
 8002978:	187b      	adds	r3, r7, r1
 800297a:	781a      	ldrb	r2, [r3, #0]
 800297c:	187b      	adds	r3, r7, r1
 800297e:	3201      	adds	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	2313      	movs	r3, #19
 8002984:	18fa      	adds	r2, r7, r3
 8002986:	1dbb      	adds	r3, r7, #6
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3e9      	bcc.n	8002964 <changeValue+0x44>
	}

	uint8_t overflowFlag = arrayToken[position] = (valueToken / expo) % 10; // określa wartość cyfry nad markerem wyboru
 8002990:	2410      	movs	r4, #16
 8002992:	193a      	adds	r2, r7, r4
 8002994:	2514      	movs	r5, #20
 8002996:	197b      	adds	r3, r7, r5
 8002998:	8812      	ldrh	r2, [r2, #0]
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	0019      	movs	r1, r3
 800299e:	0010      	movs	r0, r2
 80029a0:	f7fd fbc4 	bl	800012c <__udivsi3>
 80029a4:	0003      	movs	r3, r0
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	210a      	movs	r1, #10
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd fc44 	bl	8000238 <__aeabi_uidivmod>
 80029b0:	000b      	movs	r3, r1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b251      	sxtb	r1, r2
 80029ba:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <changeValue+0x16c>)
 80029bc:	1c08      	adds	r0, r1, #0
 80029be:	54d0      	strb	r0, [r2, r3]
 80029c0:	200f      	movs	r0, #15
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	1c0a      	adds	r2, r1, #0
 80029c6:	701a      	strb	r2, [r3, #0]

	if(set)
 80029c8:	1dfb      	adds	r3, r7, #7
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01d      	beq.n	8002a0c <changeValue+0xec>
	{
		if(overflowFlag >= 9)
 80029d0:	183b      	adds	r3, r7, r0
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d90e      	bls.n	80029f6 <changeValue+0xd6>
		{
			value = valueToken - (expo * 9);
 80029d8:	197b      	adds	r3, r7, r5
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	1c1a      	adds	r2, r3, #0
 80029de:	0352      	lsls	r2, r2, #13
 80029e0:	1ad2      	subs	r2, r2, r3
 80029e2:	00d2      	lsls	r2, r2, #3
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	b299      	uxth	r1, r3
 80029e8:	2316      	movs	r3, #22
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	193a      	adds	r2, r7, r4
 80029ee:	8812      	ldrh	r2, [r2, #0]
 80029f0:	188a      	adds	r2, r1, r2
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e028      	b.n	8002a48 <changeValue+0x128>
		}
		else
		{
			value = valueToken + expo;
 80029f6:	2316      	movs	r3, #22
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2210      	movs	r2, #16
 80029fc:	18b9      	adds	r1, r7, r2
 80029fe:	2214      	movs	r2, #20
 8002a00:	18ba      	adds	r2, r7, r2
 8002a02:	8809      	ldrh	r1, [r1, #0]
 8002a04:	8812      	ldrh	r2, [r2, #0]
 8002a06:	188a      	adds	r2, r1, r2
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	e01d      	b.n	8002a48 <changeValue+0x128>
		}
	}
	else
	{
		if(overflowFlag <= 0)
 8002a0c:	230f      	movs	r3, #15
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10e      	bne.n	8002a34 <changeValue+0x114>
		{
			value = valueToken + (expo * 9);
 8002a16:	2314      	movs	r3, #20
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	1c1a      	adds	r2, r3, #0
 8002a1e:	00d2      	lsls	r2, r2, #3
 8002a20:	18d3      	adds	r3, r2, r3
 8002a22:	b299      	uxth	r1, r3
 8002a24:	2316      	movs	r3, #22
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2210      	movs	r2, #16
 8002a2a:	18ba      	adds	r2, r7, r2
 8002a2c:	8812      	ldrh	r2, [r2, #0]
 8002a2e:	188a      	adds	r2, r1, r2
 8002a30:	801a      	strh	r2, [r3, #0]
 8002a32:	e009      	b.n	8002a48 <changeValue+0x128>
		}
		else
		{
			value = valueToken - expo;
 8002a34:	2316      	movs	r3, #22
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2210      	movs	r2, #16
 8002a3a:	18b9      	adds	r1, r7, r2
 8002a3c:	2214      	movs	r2, #20
 8002a3e:	18ba      	adds	r2, r7, r2
 8002a40:	8809      	ldrh	r1, [r1, #0]
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	1a8a      	subs	r2, r1, r2
 8002a46:	801a      	strh	r2, [r3, #0]
		}
	}
	if(value < min){value = valueToken;}
 8002a48:	2116      	movs	r1, #22
 8002a4a:	187a      	adds	r2, r7, r1
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	8812      	ldrh	r2, [r2, #0]
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d204      	bcs.n	8002a60 <changeValue+0x140>
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2210      	movs	r2, #16
 8002a5a:	18ba      	adds	r2, r7, r2
 8002a5c:	8812      	ldrh	r2, [r2, #0]
 8002a5e:	801a      	strh	r2, [r3, #0]
	if(value > max){value = valueToken;}
 8002a60:	2116      	movs	r1, #22
 8002a62:	187a      	adds	r2, r7, r1
 8002a64:	1cbb      	adds	r3, r7, #2
 8002a66:	8812      	ldrh	r2, [r2, #0]
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d904      	bls.n	8002a78 <changeValue+0x158>
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	2210      	movs	r2, #16
 8002a72:	18ba      	adds	r2, r7, r2
 8002a74:	8812      	ldrh	r2, [r2, #0]
 8002a76:	801a      	strh	r2, [r3, #0]
	intToArray_chVal(value);
 8002a78:	2316      	movs	r3, #22
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f840 	bl	8002b04 <intToArray_chVal>
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b006      	add	sp, #24
 8002a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8c:	20000504 	.word	0x20000504

08002a90 <arrayToInt_chVal>:

uint16_t arrayToInt_chVal(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
	uint16_t expo;
	uint16_t value = 0;
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < 5; i++)
 8002a9c:	1cfb      	adds	r3, r7, #3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e023      	b.n	8002aec <arrayToInt_chVal+0x5c>
	{
		if(!i){expo = 1;}
 8002aa4:	1cfb      	adds	r3, r7, #3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <arrayToInt_chVal+0x24>
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	2201      	movs	r2, #1
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	e007      	b.n	8002ac4 <arrayToInt_chVal+0x34>
		else{expo *= 10;}
 8002ab4:	1dba      	adds	r2, r7, #6
 8002ab6:	1dbb      	adds	r3, r7, #6
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	1c19      	adds	r1, r3, #0
 8002abc:	0089      	lsls	r1, r1, #2
 8002abe:	18cb      	adds	r3, r1, r3
 8002ac0:	18db      	adds	r3, r3, r3
 8002ac2:	8013      	strh	r3, [r2, #0]
		value = value + (expo * arrayToken[i]);
 8002ac4:	1cfb      	adds	r3, r7, #3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <arrayToInt_chVal+0x70>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	1dba      	adds	r2, r7, #6
 8002ad2:	8812      	ldrh	r2, [r2, #0]
 8002ad4:	4353      	muls	r3, r2
 8002ad6:	b299      	uxth	r1, r3
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	1d3a      	adds	r2, r7, #4
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	188a      	adds	r2, r1, r2
 8002ae0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8002ae2:	1cfb      	adds	r3, r7, #3
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	1cfb      	adds	r3, r7, #3
 8002ae8:	3201      	adds	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	1cfb      	adds	r3, r7, #3
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d9d7      	bls.n	8002aa4 <arrayToInt_chVal+0x14>
	}
	return value;
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	881b      	ldrh	r3, [r3, #0]
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000504 	.word	0x20000504

08002b04 <intToArray_chVal>:

void intToArray_chVal(uint16_t value)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	1dbb      	adds	r3, r7, #6
 8002b0e:	801a      	strh	r2, [r3, #0]
	uint16_t expo;
	for(uint8_t i = 0; i < 5; i++)
 8002b10:	230d      	movs	r3, #13
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e02e      	b.n	8002b78 <intToArray_chVal+0x74>
	{
		if(!i){expo = 1;}
 8002b1a:	230d      	movs	r3, #13
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d104      	bne.n	8002b2e <intToArray_chVal+0x2a>
 8002b24:	230e      	movs	r3, #14
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2201      	movs	r2, #1
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e008      	b.n	8002b40 <intToArray_chVal+0x3c>
		else{expo *= 10;}
 8002b2e:	230e      	movs	r3, #14
 8002b30:	18fa      	adds	r2, r7, r3
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	1c19      	adds	r1, r3, #0
 8002b38:	0089      	lsls	r1, r1, #2
 8002b3a:	18cb      	adds	r3, r1, r3
 8002b3c:	18db      	adds	r3, r3, r3
 8002b3e:	8013      	strh	r3, [r2, #0]
		arrayToken[i] = (value / expo) % 10;
 8002b40:	1dba      	adds	r2, r7, #6
 8002b42:	230e      	movs	r3, #14
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	0010      	movs	r0, r2
 8002b4e:	f7fd faed 	bl	800012c <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	210a      	movs	r1, #10
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7fd fb6d 	bl	8000238 <__aeabi_uidivmod>
 8002b5e:	000b      	movs	r3, r1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	200d      	movs	r0, #13
 8002b64:	183b      	adds	r3, r7, r0
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b251      	sxtb	r1, r2
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <intToArray_chVal+0x88>)
 8002b6c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 8002b6e:	183b      	adds	r3, r7, r0
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	183b      	adds	r3, r7, r0
 8002b74:	3201      	adds	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	230d      	movs	r3, #13
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d9cb      	bls.n	8002b1a <intToArray_chVal+0x16>
	}
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000504 	.word	0x20000504

08002b90 <saveSetValue>:

void saveSetValue(uint16_t value)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	1dbb      	adds	r3, r7, #6
 8002b9a:	801a      	strh	r2, [r3, #0]
	Settings[workStep - 2].setValue = value;
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <saveSetValue+0x2c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3b02      	subs	r3, #2
 8002ba4:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <saveSetValue+0x30>)
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	18d3      	adds	r3, r2, r3
 8002baa:	3302      	adds	r3, #2
 8002bac:	1dba      	adds	r2, r7, #6
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	801a      	strh	r2, [r3, #0]
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b002      	add	sp, #8
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	200004fe 	.word	0x200004fe
 8002bc0:	2000061c 	.word	0x2000061c

08002bc4 <drawMarker>:

void drawMarker(uint8_t width, uint8_t height)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	0002      	movs	r2, r0
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	1dbb      	adds	r3, r7, #6
 8002bd2:	1c0a      	adds	r2, r1, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	for(uint8_t h = 0; h < 5; h++)
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e032      	b.n	8002c46 <drawMarker+0x82>
	{
		uint8_t w = 0;
 8002be0:	230e      	movs	r3, #14
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002be8:	e01f      	b.n	8002c2a <drawMarker+0x66>
		{
			SSD1306_DrawPixel(((width - h) + w), height + h, 1);
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	240e      	movs	r4, #14
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	b298      	uxth	r0, r3
 8002c08:	1dbb      	adds	r3, r7, #6
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2201      	movs	r2, #1
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	f7fe fb1e 	bl	800125c <SSD1306_DrawPixel>
			w++;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	3201      	adds	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002c2a:	230e      	movs	r3, #14
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	210f      	movs	r1, #15
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	ddd6      	ble.n	8002bea <drawMarker+0x26>
	for(uint8_t h = 0; h < 5; h++)
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	781a      	ldrb	r2, [r3, #0]
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	3201      	adds	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	230f      	movs	r3, #15
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	d9c7      	bls.n	8002be0 <drawMarker+0x1c>
		}
	}
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b005      	add	sp, #20
 8002c58:	bd90      	pop	{r4, r7, pc}

08002c5a <clearMarker>:
void clearMarker(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 39, 80, 5, 0);
 8002c60:	2300      	movs	r3, #0
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2305      	movs	r3, #5
 8002c66:	2250      	movs	r2, #80	; 0x50
 8002c68:	2127      	movs	r1, #39	; 0x27
 8002c6a:	2014      	movs	r0, #20
 8002c6c:	f7fe fe4a 	bl	8001904 <SSD1306_DrawFilledRectangle>
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <clearValue>:
void clearValue(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 20, 100, 18, 0);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2312      	movs	r3, #18
 8002c82:	2264      	movs	r2, #100	; 0x64
 8002c84:	2114      	movs	r1, #20
 8002c86:	2014      	movs	r0, #20
 8002c88:	f7fe fe3c 	bl	8001904 <SSD1306_DrawFilledRectangle>
}
 8002c8c:	46c0      	nop			; (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <showSummary>:

// summary - 6
// -------------------------------------------------------------------------------------
void showSummary(void)
{
 8002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c96:	b091      	sub	sp, #68	; 0x44
 8002c98:	af02      	add	r7, sp, #8
	char width[10], turns[10],diameter[10], speed[10];
	uint8_t diameterArr[4];
	uint16_t expo = 0;
 8002c9a:	2336      	movs	r3, #54	; 0x36
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8002ca2:	2335      	movs	r3, #53	; 0x35
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e02f      	b.n	8002d0c <showSummary+0x78>
	{
		if(!i) expo = 1;
 8002cac:	2335      	movs	r3, #53	; 0x35
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <showSummary+0x2c>
 8002cb6:	2336      	movs	r3, #54	; 0x36
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	2201      	movs	r2, #1
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	e008      	b.n	8002cd2 <showSummary+0x3e>
		else expo *= 10;
 8002cc0:	2336      	movs	r3, #54	; 0x36
 8002cc2:	18fa      	adds	r2, r7, r3
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	1c19      	adds	r1, r3, #0
 8002cca:	0089      	lsls	r1, r1, #2
 8002ccc:	18cb      	adds	r3, r1, r3
 8002cce:	18db      	adds	r3, r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]
		diameterArr[i] = (diameter_MAIN / expo) % 10;
 8002cd2:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <showSummary+0x1a4>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	2336      	movs	r3, #54	; 0x36
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	0019      	movs	r1, r3
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	f7fd fa23 	bl	800012c <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	210a      	movs	r1, #10
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7fd faa3 	bl	8000238 <__aeabi_uidivmod>
 8002cf2:	000b      	movs	r3, r1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	2035      	movs	r0, #53	; 0x35
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2d1      	uxtb	r1, r2
 8002cfe:	003a      	movs	r2, r7
 8002d00:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	183b      	adds	r3, r7, r0
 8002d08:	3201      	adds	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	2335      	movs	r3, #53	; 0x35
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d9ca      	bls.n	8002cac <showSummary+0x18>
	}
	sprintf(width, "%i.%i mm", width_MAIN / 10, width_MAIN % 10);
 8002d16:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <showSummary+0x1a8>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	210a      	movs	r1, #10
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f7fd fa04 	bl	800012c <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	001c      	movs	r4, r3
 8002d2a:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <showSummary+0x1a8>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	210a      	movs	r1, #10
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7fd fa80 	bl	8000238 <__aeabi_uidivmod>
 8002d38:	000b      	movs	r3, r1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4940      	ldr	r1, [pc, #256]	; (8002e40 <showSummary+0x1ac>)
 8002d3e:	2528      	movs	r5, #40	; 0x28
 8002d40:	1978      	adds	r0, r7, r5
 8002d42:	0022      	movs	r2, r4
 8002d44:	f004 f9e0 	bl	8007108 <siprintf>
	sprintf(turns, " %i zw.", turns_MAIN);
 8002d48:	4b3e      	ldr	r3, [pc, #248]	; (8002e44 <showSummary+0x1b0>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	001a      	movs	r2, r3
 8002d50:	493d      	ldr	r1, [pc, #244]	; (8002e48 <showSummary+0x1b4>)
 8002d52:	261c      	movs	r6, #28
 8002d54:	19bb      	adds	r3, r7, r6
 8002d56:	0018      	movs	r0, r3
 8002d58:	f004 f9d6 	bl	8007108 <siprintf>
	sprintf(diameter, " %i.%i%i mm", diameterArr[2], diameterArr[1], diameterArr[0]);
 8002d5c:	003b      	movs	r3, r7
 8002d5e:	789b      	ldrb	r3, [r3, #2]
 8002d60:	001a      	movs	r2, r3
 8002d62:	003b      	movs	r3, r7
 8002d64:	785b      	ldrb	r3, [r3, #1]
 8002d66:	001c      	movs	r4, r3
 8002d68:	003b      	movs	r3, r7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4937      	ldr	r1, [pc, #220]	; (8002e4c <showSummary+0x1b8>)
 8002d6e:	2010      	movs	r0, #16
 8002d70:	1838      	adds	r0, r7, r0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	0023      	movs	r3, r4
 8002d76:	f004 f9c7 	bl	8007108 <siprintf>
	sprintf(speed, " %i", speed_MAIN);
 8002d7a:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <showSummary+0x1bc>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	001a      	movs	r2, r3
 8002d82:	4934      	ldr	r1, [pc, #208]	; (8002e54 <showSummary+0x1c0>)
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	0018      	movs	r0, r3
 8002d88:	f004 f9be 	bl	8007108 <siprintf>
	SSD1306_GotoXY(0, 20);
 8002d8c:	2114      	movs	r1, #20
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7fe fad2 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 8002d94:	4930      	ldr	r1, [pc, #192]	; (8002e58 <showSummary+0x1c4>)
 8002d96:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <showSummary+0x1c8>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7fe fb66 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8002da0:	2114      	movs	r1, #20
 8002da2:	2046      	movs	r0, #70	; 0x46
 8002da4:	f7fe fac8 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 8002da8:	492b      	ldr	r1, [pc, #172]	; (8002e58 <showSummary+0x1c4>)
 8002daa:	197b      	adds	r3, r7, r5
 8002dac:	2201      	movs	r2, #1
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7fe fb5c 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 8002db4:	211f      	movs	r1, #31
 8002db6:	2000      	movs	r0, #0
 8002db8:	f7fe fabe 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(TURNS_LABEL, &Font_7x10, 1);
 8002dbc:	4926      	ldr	r1, [pc, #152]	; (8002e58 <showSummary+0x1c4>)
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <showSummary+0x1cc>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7fe fb52 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(42, 31);
 8002dc8:	211f      	movs	r1, #31
 8002dca:	202a      	movs	r0, #42	; 0x2a
 8002dcc:	f7fe fab4 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(turns, &Font_7x10, 1);
 8002dd0:	4921      	ldr	r1, [pc, #132]	; (8002e58 <showSummary+0x1c4>)
 8002dd2:	19bb      	adds	r3, r7, r6
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7fe fb48 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(0, 42);
 8002ddc:	212a      	movs	r1, #42	; 0x2a
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe faaa 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(DIAMETER_LABEL, &Font_7x10, 1);
 8002de4:	491c      	ldr	r1, [pc, #112]	; (8002e58 <showSummary+0x1c4>)
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <showSummary+0x1d0>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	0018      	movs	r0, r3
 8002dec:	f7fe fb3e 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(63, 42);
 8002df0:	212a      	movs	r1, #42	; 0x2a
 8002df2:	203f      	movs	r0, #63	; 0x3f
 8002df4:	f7fe faa0 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(diameter, &Font_7x10, 1);
 8002df8:	4917      	ldr	r1, [pc, #92]	; (8002e58 <showSummary+0x1c4>)
 8002dfa:	2010      	movs	r0, #16
 8002dfc:	183b      	adds	r3, r7, r0
 8002dfe:	2201      	movs	r2, #1
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fe fb33 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 8002e06:	2135      	movs	r1, #53	; 0x35
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fe fa95 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(SPEED_LABEL, &Font_7x10, 1);
 8002e0e:	4912      	ldr	r1, [pc, #72]	; (8002e58 <showSummary+0x1c4>)
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <showSummary+0x1d4>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fe fb29 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(63, 53);
 8002e1a:	2135      	movs	r1, #53	; 0x35
 8002e1c:	203f      	movs	r0, #63	; 0x3f
 8002e1e:	f7fe fa8b 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(speed, &Font_7x10, 1);
 8002e22:	490d      	ldr	r1, [pc, #52]	; (8002e58 <showSummary+0x1c4>)
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	2201      	movs	r2, #1
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f7fe fb1f 	bl	800146c <SSD1306_Puts>
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b00f      	add	sp, #60	; 0x3c
 8002e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	200000f4 	.word	0x200000f4
 8002e3c:	200000f0 	.word	0x200000f0
 8002e40:	08007b98 	.word	0x08007b98
 8002e44:	200000f2 	.word	0x200000f2
 8002e48:	08007ba4 	.word	0x08007ba4
 8002e4c:	08007bac 	.word	0x08007bac
 8002e50:	200000f6 	.word	0x200000f6
 8002e54:	08007bb8 	.word	0x08007bb8
 8002e58:	20000004 	.word	0x20000004
 8002e5c:	08007b50 	.word	0x08007b50
 8002e60:	08007bbc 	.word	0x08007bbc
 8002e64:	08007bc4 	.word	0x08007bc4
 8002e68:	08007bd0 	.word	0x08007bd0

08002e6c <correctnessQuery>:

// correctness query - 61
// -------------------------------------------------------------------------------------
void correctnessQuery(bool direction, uint8_t runCount)
{
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	0002      	movs	r2, r0
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	1dbb      	adds	r3, r7, #6
 8002e7a:	1c0a      	adds	r2, r1, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
	clearContent();
 8002e7e:	f000 f8fb 	bl	8003078 <clearContent>
	if(runCount == CONTI_RUN)
 8002e82:	1dbb      	adds	r3, r7, #6
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d127      	bne.n	8002eda <correctnessQuery+0x6e>
	{
		if(direction) selector++;
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <correctnessQuery+0x36>
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <correctnessQuery+0x110>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <correctnessQuery+0x110>)
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e006      	b.n	8002eb0 <correctnessQuery+0x44>
		else selector--;
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <correctnessQuery+0x110>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <correctnessQuery+0x110>)
 8002eae:	701a      	strb	r2, [r3, #0]
		if(selector > 1 && selector < 10) selector = 1;
 8002eb0:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <correctnessQuery+0x110>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d907      	bls.n	8002eca <correctnessQuery+0x5e>
 8002eba:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <correctnessQuery+0x110>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d802      	bhi.n	8002eca <correctnessQuery+0x5e>
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <correctnessQuery+0x110>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
		if(selector > 10) selector = 0;
 8002eca:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <correctnessQuery+0x110>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b0a      	cmp	r3, #10
 8002ed2:	d902      	bls.n	8002eda <correctnessQuery+0x6e>
 8002ed4:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <correctnessQuery+0x110>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
	}
	bool color = 0;
 8002eda:	240f      	movs	r4, #15
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
	color = showSelectBoxes(BOX_LEFT, selector);
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <correctnessQuery+0x110>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	0025      	movs	r5, r4
 8002eea:	193c      	adds	r4, r7, r4
 8002eec:	0019      	movs	r1, r3
 8002eee:	2005      	movs	r0, #5
 8002ef0:	f000 f852 	bl	8002f98 <showSelectBoxes>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	7023      	strb	r3, [r4, #0]
	SSD1306_GotoXY(18, 29);
 8002ef8:	211d      	movs	r1, #29
 8002efa:	2012      	movs	r0, #18
 8002efc:	f7fe fa1c 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(YES_LABEL, &Font_11x18, color);
 8002f00:	002c      	movs	r4, r5
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	491e      	ldr	r1, [pc, #120]	; (8002f80 <correctnessQuery+0x114>)
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <correctnessQuery+0x118>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fe faae 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(28, 50);
 8002f10:	2132      	movs	r1, #50	; 0x32
 8002f12:	201c      	movs	r0, #28
 8002f14:	f7fe fa10 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts("OK", &Font_7x10, color);
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	491a      	ldr	r1, [pc, #104]	; (8002f88 <correctnessQuery+0x11c>)
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <correctnessQuery+0x120>)
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fe faa3 	bl	800146c <SSD1306_Puts>
	color = showSelectBoxes(BOX_RIGHT, selector);
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <correctnessQuery+0x110>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	0025      	movs	r5, r4
 8002f2e:	193c      	adds	r4, r7, r4
 8002f30:	0019      	movs	r1, r3
 8002f32:	2044      	movs	r0, #68	; 0x44
 8002f34:	f000 f830 	bl	8002f98 <showSelectBoxes>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	7023      	strb	r3, [r4, #0]
	SSD1306_GotoXY(80, 29);
 8002f3c:	211d      	movs	r1, #29
 8002f3e:	2050      	movs	r0, #80	; 0x50
 8002f40:	f7fe f9fa 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(NO_LABEL, &Font_11x18, color);
 8002f44:	197b      	adds	r3, r7, r5
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	490d      	ldr	r1, [pc, #52]	; (8002f80 <correctnessQuery+0x114>)
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <correctnessQuery+0x124>)
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7fe fa8d 	bl	800146c <SSD1306_Puts>
	SSD1306_GotoXY(76, 50);
 8002f52:	2132      	movs	r1, #50	; 0x32
 8002f54:	204c      	movs	r0, #76	; 0x4c
 8002f56:	f7fe f9ef 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts("POPRAW", &Font_7x10, color);
 8002f5a:	197b      	adds	r3, r7, r5
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	490a      	ldr	r1, [pc, #40]	; (8002f88 <correctnessQuery+0x11c>)
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <correctnessQuery+0x128>)
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7fe fa82 	bl	800146c <SSD1306_Puts>
	if(runCount == CONTI_RUN) SSD1306_UpdateScreen();
 8002f68:	1dbb      	adds	r3, r7, #6
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <correctnessQuery+0x108>
 8002f70:	f7fe f926 	bl	80011c0 <SSD1306_UpdateScreen>
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b004      	add	sp, #16
 8002f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7c:	20000509 	.word	0x20000509
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	08007bdc 	.word	0x08007bdc
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	08007be0 	.word	0x08007be0
 8002f90:	08007be4 	.word	0x08007be4
 8002f94:	08007be8 	.word	0x08007be8

08002f98 <showSelectBoxes>:

bool showSelectBoxes(uint8_t margin, uint8_t pointer)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	1dbb      	adds	r3, r7, #6
 8002fa6:	1c0a      	adds	r2, r1, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
	pointer += 3;
 8002faa:	1dbb      	adds	r3, r7, #6
 8002fac:	1dba      	adds	r2, r7, #6
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	3203      	adds	r2, #3
 8002fb2:	701a      	strb	r2, [r3, #0]
	if(margin == BOX_LEFT)
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d11e      	bne.n	8002ffa <showSelectBoxes+0x62>
	{
		if((pointer) % 2)
 8002fbc:	1dbb      	adds	r3, r7, #6
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <showSelectBoxes+0x4a>
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b298      	uxth	r0, r3
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	232f      	movs	r3, #47	; 0x2f
 8002fd6:	2238      	movs	r2, #56	; 0x38
 8002fd8:	2119      	movs	r1, #25
 8002fda:	f7fe fc93 	bl	8001904 <SSD1306_DrawFilledRectangle>
			return 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e029      	b.n	8003036 <showSelectBoxes+0x9e>
		}
		else
		{
			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	b298      	uxth	r0, r3
 8002fe8:	2301      	movs	r3, #1
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	232f      	movs	r3, #47	; 0x2f
 8002fee:	2238      	movs	r2, #56	; 0x38
 8002ff0:	2119      	movs	r1, #25
 8002ff2:	f7fe fbf0 	bl	80017d6 <SSD1306_DrawRectangle>
			return 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e01d      	b.n	8003036 <showSelectBoxes+0x9e>
		}
	}
	else
	{
		if(pointer % 2)
 8002ffa:	1dbb      	adds	r3, r7, #6
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <showSelectBoxes+0x88>
		{

			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8003008:	1dfb      	adds	r3, r7, #7
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b298      	uxth	r0, r3
 800300e:	2301      	movs	r3, #1
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	232f      	movs	r3, #47	; 0x2f
 8003014:	2238      	movs	r2, #56	; 0x38
 8003016:	2119      	movs	r1, #25
 8003018:	f7fe fbdd 	bl	80017d6 <SSD1306_DrawRectangle>
			return 1;
 800301c:	2301      	movs	r3, #1
 800301e:	e00a      	b.n	8003036 <showSelectBoxes+0x9e>
		}
		else
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b298      	uxth	r0, r3
 8003026:	2301      	movs	r3, #1
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	232f      	movs	r3, #47	; 0x2f
 800302c:	2238      	movs	r2, #56	; 0x38
 800302e:	2119      	movs	r1, #25
 8003030:	f7fe fc68 	bl	8001904 <SSD1306_DrawFilledRectangle>
			return 0;
 8003034:	2300      	movs	r3, #0
		}
	}
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <showLabelBar>:

// uniwersalne
// -------------------------------------------------------------------------------------
void showLabelBar(char* label)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
	SSD1306_DrawFilledRectangle(0, 0, 128, 16, 1);
 8003048:	2301      	movs	r3, #1
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2310      	movs	r3, #16
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	2100      	movs	r1, #0
 8003052:	2000      	movs	r0, #0
 8003054:	f7fe fc56 	bl	8001904 <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY(4, 4);
 8003058:	2104      	movs	r1, #4
 800305a:	2004      	movs	r0, #4
 800305c:	f7fe f96c 	bl	8001338 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, 0);
 8003060:	4904      	ldr	r1, [pc, #16]	; (8003074 <showLabelBar+0x34>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	0018      	movs	r0, r3
 8003068:	f7fe fa00 	bl	800146c <SSD1306_Puts>
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000004 	.word	0x20000004

08003078 <clearContent>:


void clearContent(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 18, 128, 46, 0);
 800307e:	2300      	movs	r3, #0
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	232e      	movs	r3, #46	; 0x2e
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	2112      	movs	r1, #18
 8003088:	2000      	movs	r0, #0
 800308a:	f7fe fc3b 	bl	8001904 <SSD1306_DrawFilledRectangle>
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <paginationBar>:

void paginationBar(uint8_t pageBarWidth, uint8_t pageNo)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	0002      	movs	r2, r0
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	1dbb      	adds	r3, r7, #6
 80030a2:	1c0a      	adds	r2, r1, #0
 80030a4:	701a      	strb	r2, [r3, #0]
	uint8_t pageBarMargin = pageBarWidth * pageNo;
 80030a6:	200f      	movs	r0, #15
 80030a8:	183b      	adds	r3, r7, r0
 80030aa:	1dfa      	adds	r2, r7, #7
 80030ac:	1db9      	adds	r1, r7, #6
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	7809      	ldrb	r1, [r1, #0]
 80030b2:	434a      	muls	r2, r1
 80030b4:	701a      	strb	r2, [r3, #0]
	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 80030b6:	183b      	adds	r3, r7, r0
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b298      	uxth	r0, r3
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	2301      	movs	r3, #1
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2303      	movs	r3, #3
 80030c8:	2112      	movs	r1, #18
 80030ca:	f7fe fc1b 	bl	8001904 <SSD1306_DrawFilledRectangle>
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <countArray>:

uint8_t countArray(ProjectManager * details)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 80030de:	230f      	movs	r3, #15
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 80030e6:	230e      	movs	r3, #14
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e016      	b.n	800311e <countArray+0x48>
	{
		if(details->turns[i] > 0)
 80030f0:	230e      	movs	r3, #14
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	330c      	adds	r3, #12
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	18d3      	adds	r3, r2, r3
 80030fe:	3302      	adds	r3, #2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <countArray+0x3c>
		{
			count++;
 8003106:	210f      	movs	r1, #15
 8003108:	187b      	adds	r3, r7, r1
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	187b      	adds	r3, r7, r1
 800310e:	3201      	adds	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 8003112:	210e      	movs	r1, #14
 8003114:	187b      	adds	r3, r7, r1
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	187b      	adds	r3, r7, r1
 800311a:	3201      	adds	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	230e      	movs	r3, #14
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b09      	cmp	r3, #9
 8003126:	d9e3      	bls.n	80030f0 <countArray+0x1a>
		}
	}
	return count;
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	781b      	ldrb	r3, [r3, #0]
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_MspInit+0x24>)
 800313e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_MspInit+0x24>)
 8003142:	2101      	movs	r1, #1
 8003144:	430a      	orrs	r2, r1
 8003146:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_MspInit+0x24>)
 800314a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_MspInit+0x24>)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0549      	lsls	r1, r1, #21
 8003152:	430a      	orrs	r2, r1
 8003154:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000

08003160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003164:	f002 f920 	bl	80053a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <NMI_Handler+0x8>

0800316a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316e:	e7fe      	b.n	800316e <HardFault_Handler+0x4>

08003170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003188:	f000 face 	bl	8003728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 8003196:	2010      	movs	r0, #16
 8003198:	f000 fe08 	bl	8003dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <TIM2_IRQHandler+0x14>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f002 fc79 	bl	8005aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000640 	.word	0x20000640

080031bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <TIM6_DAC_IRQHandler+0x14>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f002 fc6d 	bl	8005aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	20000680 	.word	0x20000680

080031d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <TIM7_IRQHandler+0x14>)
 80031da:	0018      	movs	r0, r3
 80031dc:	f002 fc61 	bl	8005aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	200006c0 	.word	0x200006c0

080031ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <USART2_IRQHandler+0x14>)
 80031f2:	0018      	movs	r0, r3
 80031f4:	f002 ff4a 	bl	800608c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20000700 	.word	0x20000700

08003204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <_sbrk+0x5c>)
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <_sbrk+0x60>)
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <_sbrk+0x64>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <_sbrk+0x64>)
 8003222:	4a12      	ldr	r2, [pc, #72]	; (800326c <_sbrk+0x68>)
 8003224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d207      	bcs.n	8003244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003234:	f003 ff2c 	bl	8007090 <__errno>
 8003238:	0003      	movs	r3, r0
 800323a:	220c      	movs	r2, #12
 800323c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800323e:	2301      	movs	r3, #1
 8003240:	425b      	negs	r3, r3
 8003242:	e009      	b.n	8003258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	18d2      	adds	r2, r2, r3
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <_sbrk+0x64>)
 8003254:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b006      	add	sp, #24
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20005000 	.word	0x20005000
 8003264:	00000400 	.word	0x00000400
 8003268:	2000063c 	.word	0x2000063c
 800326c:	20000798 	.word	0x20000798

08003270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b08d      	sub	sp, #52	; 0x34
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003282:	240c      	movs	r4, #12
 8003284:	193b      	adds	r3, r7, r4
 8003286:	0018      	movs	r0, r3
 8003288:	2324      	movs	r3, #36	; 0x24
 800328a:	001a      	movs	r2, r3
 800328c:	2100      	movs	r1, #0
 800328e:	f003 ff32 	bl	80070f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	0018      	movs	r0, r3
 8003296:	2308      	movs	r3, #8
 8003298:	001a      	movs	r2, r3
 800329a:	2100      	movs	r1, #0
 800329c:	f003 ff2b 	bl	80070f6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <MX_TIM2_Init+0xc0>)
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	05d2      	lsls	r2, r2, #23
 80032a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <MX_TIM2_Init+0xc0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ae:	4b23      	ldr	r3, [pc, #140]	; (800333c <MX_TIM2_Init+0xc0>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <MX_TIM2_Init+0xc0>)
 80032b6:	4a22      	ldr	r2, [pc, #136]	; (8003340 <MX_TIM2_Init+0xc4>)
 80032b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <MX_TIM2_Init+0xc0>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <MX_TIM2_Init+0xc0>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032c6:	0021      	movs	r1, r4
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2201      	movs	r2, #1
 80032d8:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	220f      	movs	r2, #15
 80032e4:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032e6:	187b      	adds	r3, r7, r1
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2201      	movs	r2, #1
 80032f0:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	220f      	movs	r2, #15
 80032fc:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80032fe:	187a      	adds	r2, r7, r1
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_TIM2_Init+0xc0>)
 8003302:	0011      	movs	r1, r2
 8003304:	0018      	movs	r0, r3
 8003306:	f002 fa97 	bl	8005838 <HAL_TIM_Encoder_Init>
 800330a:	1e03      	subs	r3, r0, #0
 800330c:	d001      	beq.n	8003312 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800330e:	f7fd fdd3 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	2200      	movs	r2, #0
 800331c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800331e:	1d3a      	adds	r2, r7, #4
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_TIM2_Init+0xc0>)
 8003322:	0011      	movs	r1, r2
 8003324:	0018      	movs	r0, r3
 8003326:	f002 fd57 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800332a:	1e03      	subs	r3, r0, #0
 800332c:	d001      	beq.n	8003332 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800332e:	f7fd fdc3 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b00d      	add	sp, #52	; 0x34
 8003338:	bd90      	pop	{r4, r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	20000640 	.word	0x20000640
 8003340:	0000ffff 	.word	0x0000ffff

08003344 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800334a:	003b      	movs	r3, r7
 800334c:	0018      	movs	r0, r3
 800334e:	2308      	movs	r3, #8
 8003350:	001a      	movs	r2, r3
 8003352:	2100      	movs	r1, #0
 8003354:	f003 fecf 	bl	80070f6 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <MX_TIM6_Init+0x6c>)
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <MX_TIM6_Init+0x70>)
 800335c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <MX_TIM6_Init+0x6c>)
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <MX_TIM6_Init+0x74>)
 8003362:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <MX_TIM6_Init+0x6c>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_TIM6_Init+0x6c>)
 800336c:	22c7      	movs	r2, #199	; 0xc7
 800336e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <MX_TIM6_Init+0x6c>)
 8003372:	2200      	movs	r2, #0
 8003374:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_TIM6_Init+0x6c>)
 8003378:	0018      	movs	r0, r3
 800337a:	f002 f9a5 	bl	80056c8 <HAL_TIM_Base_Init>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003382:	f7fd fd99 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	003b      	movs	r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338c:	003b      	movs	r3, r7
 800338e:	2200      	movs	r2, #0
 8003390:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003392:	003a      	movs	r2, r7
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <MX_TIM6_Init+0x6c>)
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f002 fd1d 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80033a2:	f7fd fd89 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	20000680 	.word	0x20000680
 80033b4:	40001000 	.word	0x40001000
 80033b8:	00001f3f 	.word	0x00001f3f

080033bc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033c2:	003b      	movs	r3, r7
 80033c4:	0018      	movs	r0, r3
 80033c6:	2308      	movs	r3, #8
 80033c8:	001a      	movs	r2, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	f003 fe93 	bl	80070f6 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <MX_TIM7_Init+0x6c>)
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <MX_TIM7_Init+0x70>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <MX_TIM7_Init+0x6c>)
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <MX_TIM7_Init+0x74>)
 80033da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <MX_TIM7_Init+0x6c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_TIM7_Init+0x6c>)
 80033e4:	22c7      	movs	r2, #199	; 0xc7
 80033e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <MX_TIM7_Init+0x6c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_TIM7_Init+0x6c>)
 80033f0:	0018      	movs	r0, r3
 80033f2:	f002 f969 	bl	80056c8 <HAL_TIM_Base_Init>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80033fa:	f7fd fd5d 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fe:	003b      	movs	r3, r7
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003404:	003b      	movs	r3, r7
 8003406:	2200      	movs	r2, #0
 8003408:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800340a:	003a      	movs	r2, r7
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <MX_TIM7_Init+0x6c>)
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f002 fce1 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800341a:	f7fd fd4d 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	200006c0 	.word	0x200006c0
 800342c:	40001400 	.word	0x40001400
 8003430:	00001f3f 	.word	0x00001f3f

08003434 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	240c      	movs	r4, #12
 800343e:	193b      	adds	r3, r7, r4
 8003440:	0018      	movs	r0, r3
 8003442:	2314      	movs	r3, #20
 8003444:	001a      	movs	r2, r3
 8003446:	2100      	movs	r1, #0
 8003448:	f003 fe55 	bl	80070f6 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	05db      	lsls	r3, r3, #23
 8003454:	429a      	cmp	r2, r3
 8003456:	d130      	bne.n	80034ba <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800345a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800345e:	2101      	movs	r1, #1
 8003460:	430a      	orrs	r2, r1
 8003462:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800346a:	2101      	movs	r1, #1
 800346c:	430a      	orrs	r2, r1
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	2201      	movs	r2, #1
 8003476:	4013      	ands	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800347c:	0021      	movs	r1, r4
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2203      	movs	r2, #3
 8003482:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2202      	movs	r2, #2
 8003488:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	187b      	adds	r3, r7, r1
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003496:	187b      	adds	r3, r7, r1
 8003498:	2202      	movs	r2, #2
 800349a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349c:	187a      	adds	r2, r7, r1
 800349e:	23a0      	movs	r3, #160	; 0xa0
 80034a0:	05db      	lsls	r3, r3, #23
 80034a2:	0011      	movs	r1, r2
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fae5 	bl	8003a74 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2100      	movs	r1, #0
 80034ae:	200f      	movs	r0, #15
 80034b0:	f000 fa26 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034b4:	200f      	movs	r0, #15
 80034b6:	f000 fa38 	bl	800392a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b009      	add	sp, #36	; 0x24
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_TIM_Base_MspInit+0x60>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_TIM_Base_MspInit+0x64>)
 80034dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_TIM_Base_MspInit+0x64>)
 80034e0:	2110      	movs	r1, #16
 80034e2:	430a      	orrs	r2, r1
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2100      	movs	r1, #0
 80034ea:	2011      	movs	r0, #17
 80034ec:	f000 fa08 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034f0:	2011      	movs	r0, #17
 80034f2:	f000 fa1a 	bl	800392a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80034f6:	e012      	b.n	800351e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <HAL_TIM_Base_MspInit+0x68>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10d      	bne.n	800351e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <HAL_TIM_Base_MspInit+0x64>)
 8003504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_TIM_Base_MspInit+0x64>)
 8003508:	2120      	movs	r1, #32
 800350a:	430a      	orrs	r2, r1
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2012      	movs	r0, #18
 8003514:	f000 f9f4 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003518:	2012      	movs	r0, #18
 800351a:	f000 fa06 	bl	800392a <HAL_NVIC_EnableIRQ>
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	40001000 	.word	0x40001000
 800352c:	40021000 	.word	0x40021000
 8003530:	40001400 	.word	0x40001400

08003534 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003538:	4b14      	ldr	r3, [pc, #80]	; (800358c <MX_USART2_UART_Init+0x58>)
 800353a:	4a15      	ldr	r2, [pc, #84]	; (8003590 <MX_USART2_UART_Init+0x5c>)
 800353c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003540:	22e1      	movs	r2, #225	; 0xe1
 8003542:	0252      	lsls	r2, r2, #9
 8003544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <MX_USART2_UART_Init+0x58>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <MX_USART2_UART_Init+0x58>)
 800355a:	220c      	movs	r2, #12
 800355c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <MX_USART2_UART_Init+0x58>)
 800356c:	2200      	movs	r2, #0
 800356e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003572:	2200      	movs	r2, #0
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <MX_USART2_UART_Init+0x58>)
 8003578:	0018      	movs	r0, r3
 800357a:	f002 fc8b 	bl	8005e94 <HAL_UART_Init>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d001      	beq.n	8003586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003582:	f7fd fc99 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000700 	.word	0x20000700
 8003590:	40004400 	.word	0x40004400

08003594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	240c      	movs	r4, #12
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	0018      	movs	r0, r3
 80035a2:	2314      	movs	r3, #20
 80035a4:	001a      	movs	r2, r3
 80035a6:	2100      	movs	r1, #0
 80035a8:	f003 fda5 	bl	80070f6 <memset>
  if(uartHandle->Instance==USART2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_UART_MspInit+0x90>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d131      	bne.n	800361a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_UART_MspInit+0x94>)
 80035b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_UART_MspInit+0x94>)
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	0289      	lsls	r1, r1, #10
 80035c0:	430a      	orrs	r2, r1
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_UART_MspInit+0x94>)
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_UART_MspInit+0x94>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	430a      	orrs	r2, r1
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80035d0:	4b15      	ldr	r3, [pc, #84]	; (8003628 <HAL_UART_MspInit+0x94>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035dc:	0021      	movs	r1, r4
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	220c      	movs	r2, #12
 80035e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	2202      	movs	r2, #2
 80035e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2203      	movs	r2, #3
 80035f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2204      	movs	r2, #4
 80035fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fc:	187a      	adds	r2, r7, r1
 80035fe:	23a0      	movs	r3, #160	; 0xa0
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	0011      	movs	r1, r2
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fa35 	bl	8003a74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	201c      	movs	r0, #28
 8003610:	f000 f976 	bl	8003900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003614:	201c      	movs	r0, #28
 8003616:	f000 f988 	bl	800392a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b009      	add	sp, #36	; 0x24
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	40004400 	.word	0x40004400
 8003628:	40021000 	.word	0x40021000

0800362c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800362c:	480d      	ldr	r0, [pc, #52]	; (8003664 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800362e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003630:	480d      	ldr	r0, [pc, #52]	; (8003668 <LoopForever+0x6>)
  ldr r1, =_edata
 8003632:	490e      	ldr	r1, [pc, #56]	; (800366c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003634:	4a0e      	ldr	r2, [pc, #56]	; (8003670 <LoopForever+0xe>)
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003638:	e002      	b.n	8003640 <LoopCopyDataInit>

0800363a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800363a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800363c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800363e:	3304      	adds	r3, #4

08003640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003644:	d3f9      	bcc.n	800363a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003648:	4c0b      	ldr	r4, [pc, #44]	; (8003678 <LoopForever+0x16>)
  movs r3, #0
 800364a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800364c:	e001      	b.n	8003652 <LoopFillZerobss>

0800364e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800364e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003650:	3204      	adds	r2, #4

08003652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003654:	d3fb      	bcc.n	800364e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003656:	f7ff fe0b 	bl	8003270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800365a:	f003 fd1f 	bl	800709c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800365e:	f7fd f967 	bl	8000930 <main>

08003662 <LoopForever>:

LoopForever:
    b LoopForever
 8003662:	e7fe      	b.n	8003662 <LoopForever>
   ldr   r0, =_estack
 8003664:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800366c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003670:	0800a6ac 	.word	0x0800a6ac
  ldr r2, =_sbss
 8003674:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8003678:	20000798 	.word	0x20000798

0800367c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800367c:	e7fe      	b.n	800367c <ADC1_COMP_IRQHandler>
	...

08003680 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003686:	1dfb      	adds	r3, r7, #7
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_Init+0x3c>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Init+0x3c>)
 8003692:	2140      	movs	r1, #64	; 0x40
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003698:	2000      	movs	r0, #0
 800369a:	f000 f811 	bl	80036c0 <HAL_InitTick>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d003      	beq.n	80036aa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e001      	b.n	80036ae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036aa:	f7ff fd45 	bl	8003138 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ae:	1dfb      	adds	r3, r7, #7
 80036b0:	781b      	ldrb	r3, [r3, #0]
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40022000 	.word	0x40022000

080036c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_InitTick+0x5c>)
 80036ca:	681c      	ldr	r4, [r3, #0]
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_InitTick+0x60>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	0019      	movs	r1, r3
 80036d2:	23fa      	movs	r3, #250	; 0xfa
 80036d4:	0098      	lsls	r0, r3, #2
 80036d6:	f7fc fd29 	bl	800012c <__udivsi3>
 80036da:	0003      	movs	r3, r0
 80036dc:	0019      	movs	r1, r3
 80036de:	0020      	movs	r0, r4
 80036e0:	f7fc fd24 	bl	800012c <__udivsi3>
 80036e4:	0003      	movs	r3, r0
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f92f 	bl	800394a <HAL_SYSTICK_Config>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e00f      	b.n	8003714 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d80b      	bhi.n	8003712 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	2301      	movs	r3, #1
 80036fe:	425b      	negs	r3, r3
 8003700:	2200      	movs	r2, #0
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f8fc 	bl	8003900 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_InitTick+0x64>)
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b003      	add	sp, #12
 800371a:	bd90      	pop	{r4, r7, pc}
 800371c:	20000014 	.word	0x20000014
 8003720:	2000001c 	.word	0x2000001c
 8003724:	20000018 	.word	0x20000018

08003728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_IncTick+0x1c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	001a      	movs	r2, r3
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_IncTick+0x20>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	18d2      	adds	r2, r2, r3
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_IncTick+0x20>)
 800373a:	601a      	str	r2, [r3, #0]
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	2000001c 	.word	0x2000001c
 8003748:	20000784 	.word	0x20000784

0800374c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  return uwTick;
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <HAL_GetTick+0x10>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000784 	.word	0x20000784

08003760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff fff0 	bl	800374c <HAL_GetTick>
 800376c:	0003      	movs	r3, r0
 800376e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3301      	adds	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_Delay+0x44>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	001a      	movs	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	189b      	adds	r3, r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	f7ff ffe0 	bl	800374c <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	46bd      	mov	sp, r7
 800379e:	b004      	add	sp, #16
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	2000001c 	.word	0x2000001c

080037a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	0002      	movs	r2, r0
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b7f      	cmp	r3, #127	; 0x7f
 80037ba:	d809      	bhi.n	80037d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	001a      	movs	r2, r3
 80037c2:	231f      	movs	r3, #31
 80037c4:	401a      	ands	r2, r3
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <__NVIC_EnableIRQ+0x30>)
 80037c8:	2101      	movs	r1, #1
 80037ca:	4091      	lsls	r1, r2
 80037cc:	000a      	movs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
  }
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	0002      	movs	r2, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b7f      	cmp	r3, #127	; 0x7f
 80037f0:	d828      	bhi.n	8003844 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037f2:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <__NVIC_SetPriority+0xd4>)
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b25b      	sxtb	r3, r3
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	33c0      	adds	r3, #192	; 0xc0
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	589b      	ldr	r3, [r3, r2]
 8003802:	1dfa      	adds	r2, r7, #7
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	0011      	movs	r1, r2
 8003808:	2203      	movs	r2, #3
 800380a:	400a      	ands	r2, r1
 800380c:	00d2      	lsls	r2, r2, #3
 800380e:	21ff      	movs	r1, #255	; 0xff
 8003810:	4091      	lsls	r1, r2
 8003812:	000a      	movs	r2, r1
 8003814:	43d2      	mvns	r2, r2
 8003816:	401a      	ands	r2, r3
 8003818:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	22ff      	movs	r2, #255	; 0xff
 8003820:	401a      	ands	r2, r3
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	0018      	movs	r0, r3
 8003828:	2303      	movs	r3, #3
 800382a:	4003      	ands	r3, r0
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003830:	481f      	ldr	r0, [pc, #124]	; (80038b0 <__NVIC_SetPriority+0xd4>)
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b25b      	sxtb	r3, r3
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	430a      	orrs	r2, r1
 800383c:	33c0      	adds	r3, #192	; 0xc0
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003842:	e031      	b.n	80038a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <__NVIC_SetPriority+0xd8>)
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	0019      	movs	r1, r3
 800384c:	230f      	movs	r3, #15
 800384e:	400b      	ands	r3, r1
 8003850:	3b08      	subs	r3, #8
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3306      	adds	r3, #6
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	18d3      	adds	r3, r2, r3
 800385a:	3304      	adds	r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1dfa      	adds	r2, r7, #7
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	0011      	movs	r1, r2
 8003864:	2203      	movs	r2, #3
 8003866:	400a      	ands	r2, r1
 8003868:	00d2      	lsls	r2, r2, #3
 800386a:	21ff      	movs	r1, #255	; 0xff
 800386c:	4091      	lsls	r1, r2
 800386e:	000a      	movs	r2, r1
 8003870:	43d2      	mvns	r2, r2
 8003872:	401a      	ands	r2, r3
 8003874:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	22ff      	movs	r2, #255	; 0xff
 800387c:	401a      	ands	r2, r3
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	0018      	movs	r0, r3
 8003884:	2303      	movs	r3, #3
 8003886:	4003      	ands	r3, r0
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <__NVIC_SetPriority+0xd8>)
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	001c      	movs	r4, r3
 8003894:	230f      	movs	r3, #15
 8003896:	4023      	ands	r3, r4
 8003898:	3b08      	subs	r3, #8
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	430a      	orrs	r2, r1
 800389e:	3306      	adds	r3, #6
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	18c3      	adds	r3, r0, r3
 80038a4:	3304      	adds	r3, #4
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b003      	add	sp, #12
 80038ae:	bd90      	pop	{r4, r7, pc}
 80038b0:	e000e100 	.word	0xe000e100
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	045b      	lsls	r3, r3, #17
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d301      	bcc.n	80038d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038cc:	2301      	movs	r3, #1
 80038ce:	e010      	b.n	80038f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <SysTick_Config+0x44>)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	3a01      	subs	r2, #1
 80038d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d8:	2301      	movs	r3, #1
 80038da:	425b      	negs	r3, r3
 80038dc:	2103      	movs	r1, #3
 80038de:	0018      	movs	r0, r3
 80038e0:	f7ff ff7c 	bl	80037dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <SysTick_Config+0x44>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ea:	4b04      	ldr	r3, [pc, #16]	; (80038fc <SysTick_Config+0x44>)
 80038ec:	2207      	movs	r2, #7
 80038ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	e000e010 	.word	0xe000e010

08003900 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	210f      	movs	r1, #15
 800390c:	187b      	adds	r3, r7, r1
 800390e:	1c02      	adds	r2, r0, #0
 8003910:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	187b      	adds	r3, r7, r1
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff ff5d 	bl	80037dc <__NVIC_SetPriority>
}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	0002      	movs	r2, r0
 8003932:	1dfb      	adds	r3, r7, #7
 8003934:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003936:	1dfb      	adds	r3, r7, #7
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b25b      	sxtb	r3, r3
 800393c:	0018      	movs	r0, r3
 800393e:	f7ff ff33 	bl	80037a8 <__NVIC_EnableIRQ>
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff ffaf 	bl	80038b8 <SysTick_Config>
 800395a:	0003      	movs	r3, r0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	230f      	movs	r3, #15
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2225      	movs	r2, #37	; 0x25
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d008      	beq.n	8003992 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2224      	movs	r2, #36	; 0x24
 800398a:	2100      	movs	r1, #0
 800398c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e024      	b.n	80039dc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	210e      	movs	r1, #14
 800399e:	438a      	bics	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	438a      	bics	r2, r1
 80039b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	221c      	movs	r2, #28
 80039b8:	401a      	ands	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2101      	movs	r1, #1
 80039c0:	4091      	lsls	r1, r2
 80039c2:	000a      	movs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2225      	movs	r2, #37	; 0x25
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	; 0x24
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

    return status;
 80039d6:	230f      	movs	r3, #15
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	210f      	movs	r1, #15
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2225      	movs	r2, #37	; 0x25
 80039f8:	5c9b      	ldrb	r3, [r3, r2]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d006      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a06:	187b      	adds	r3, r7, r1
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e02a      	b.n	8003a64 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	210e      	movs	r1, #14
 8003a1a:	438a      	bics	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	438a      	bics	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	221c      	movs	r2, #28
 8003a34:	401a      	ands	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4091      	lsls	r1, r2
 8003a3e:	000a      	movs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2225      	movs	r2, #37	; 0x25
 8003a46:	2101      	movs	r1, #1
 8003a48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2224      	movs	r2, #36	; 0x24
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	0010      	movs	r0, r2
 8003a62:	4798      	blx	r3
    }
  }
  return status;
 8003a64:	230f      	movs	r3, #15
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	781b      	ldrb	r3, [r3, #0]
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b004      	add	sp, #16
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a8a:	e155      	b.n	8003d38 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4091      	lsls	r1, r2
 8003a96:	000a      	movs	r2, r1
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d100      	bne.n	8003aa4 <HAL_GPIO_Init+0x30>
 8003aa2:	e146      	b.n	8003d32 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d005      	beq.n	8003abc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d130      	bne.n	8003b1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	0013      	movs	r3, r2
 8003acc:	43da      	mvns	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	409a      	lsls	r2, r3
 8003ade:	0013      	movs	r3, r2
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af2:	2201      	movs	r2, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
 8003af8:	0013      	movs	r3, r2
 8003afa:	43da      	mvns	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	2201      	movs	r2, #1
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	409a      	lsls	r2, r3
 8003b38:	0013      	movs	r3, r2
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d123      	bne.n	8003bae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	0092      	lsls	r2, r2, #2
 8003b70:	58d3      	ldr	r3, [r2, r3]
 8003b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2207      	movs	r2, #7
 8003b78:	4013      	ands	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	0013      	movs	r3, r2
 8003b82:	43da      	mvns	r2, r3
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2107      	movs	r1, #7
 8003b92:	400b      	ands	r3, r1
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	409a      	lsls	r2, r3
 8003b98:	0013      	movs	r3, r2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	0092      	lsls	r2, r2, #2
 8003baa:	6939      	ldr	r1, [r7, #16]
 8003bac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	0013      	movs	r3, r2
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	401a      	ands	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	0013      	movs	r3, r2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	23c0      	movs	r3, #192	; 0xc0
 8003be8:	029b      	lsls	r3, r3, #10
 8003bea:	4013      	ands	r3, r2
 8003bec:	d100      	bne.n	8003bf0 <HAL_GPIO_Init+0x17c>
 8003bee:	e0a0      	b.n	8003d32 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf0:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <HAL_GPIO_Init+0x2dc>)
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <HAL_GPIO_Init+0x2dc>)
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfc:	4a55      	ldr	r2, [pc, #340]	; (8003d54 <HAL_GPIO_Init+0x2e0>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	589b      	ldr	r3, [r3, r2]
 8003c08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	23a0      	movs	r3, #160	; 0xa0
 8003c24:	05db      	lsls	r3, r3, #23
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d01f      	beq.n	8003c6a <HAL_GPIO_Init+0x1f6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_GPIO_Init+0x2e4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d019      	beq.n	8003c66 <HAL_GPIO_Init+0x1f2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a49      	ldr	r2, [pc, #292]	; (8003d5c <HAL_GPIO_Init+0x2e8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_GPIO_Init+0x1ee>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a48      	ldr	r2, [pc, #288]	; (8003d60 <HAL_GPIO_Init+0x2ec>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00d      	beq.n	8003c5e <HAL_GPIO_Init+0x1ea>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a47      	ldr	r2, [pc, #284]	; (8003d64 <HAL_GPIO_Init+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <HAL_GPIO_Init+0x1e6>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a46      	ldr	r2, [pc, #280]	; (8003d68 <HAL_GPIO_Init+0x2f4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_GPIO_Init+0x1e2>
 8003c52:	2305      	movs	r3, #5
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c56:	2306      	movs	r3, #6
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	2103      	movs	r1, #3
 8003c70:	400a      	ands	r2, r1
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x2e0>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c8a:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43da      	mvns	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	025b      	lsls	r3, r3, #9
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cae:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	029b      	lsls	r3, r3, #10
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cde:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	035b      	lsls	r3, r3, #13
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	039b      	lsls	r3, r3, #14
 8003d20:	4013      	ands	r3, r2
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3301      	adds	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	40da      	lsrs	r2, r3
 8003d40:	1e13      	subs	r3, r2, #0
 8003d42:	d000      	beq.n	8003d46 <HAL_GPIO_Init+0x2d2>
 8003d44:	e6a2      	b.n	8003a8c <HAL_GPIO_Init+0x18>
  }
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b006      	add	sp, #24
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40010000 	.word	0x40010000
 8003d58:	50000400 	.word	0x50000400
 8003d5c:	50000800 	.word	0x50000800
 8003d60:	50000c00 	.word	0x50000c00
 8003d64:	50001000 	.word	0x50001000
 8003d68:	50001c00 	.word	0x50001c00
 8003d6c:	40010400 	.word	0x40010400

08003d70 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	000a      	movs	r2, r1
 8003d7a:	1cbb      	adds	r3, r7, #2
 8003d7c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	1cba      	adds	r2, r7, #2
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	4013      	ands	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d8a:	230f      	movs	r3, #15
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e003      	b.n	8003d9c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d9c:	230f      	movs	r3, #15
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	0002      	movs	r2, r0
 8003db4:	1dbb      	adds	r3, r7, #6
 8003db6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	1dba      	adds	r2, r7, #6
 8003dbe:	8812      	ldrh	r2, [r2, #0]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d008      	beq.n	8003dd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003dc6:	1dba      	adds	r2, r7, #6
 8003dc8:	8812      	ldrh	r2, [r2, #0]
 8003dca:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dcc:	1dbb      	adds	r3, r7, #6
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7fd f843 	bl	8000e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	40010400 	.word	0x40010400

08003de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e082      	b.n	8003efc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2241      	movs	r2, #65	; 0x41
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fc fd49 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2241      	movs	r2, #65	; 0x41
 8003e16:	2124      	movs	r1, #36	; 0x24
 8003e18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2101      	movs	r1, #1
 8003e26:	438a      	bics	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4934      	ldr	r1, [pc, #208]	; (8003f04 <HAL_I2C_Init+0x120>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4931      	ldr	r1, [pc, #196]	; (8003f08 <HAL_I2C_Init+0x124>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d108      	bne.n	8003e62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0209      	lsls	r1, r1, #8
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e007      	b.n	8003e72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2184      	movs	r1, #132	; 0x84
 8003e6c:	0209      	lsls	r1, r1, #8
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d104      	bne.n	8003e84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	491f      	ldr	r1, [pc, #124]	; (8003f0c <HAL_I2C_Init+0x128>)
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	491a      	ldr	r1, [pc, #104]	; (8003f08 <HAL_I2C_Init+0x124>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69d9      	ldr	r1, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	430a      	orrs	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2241      	movs	r2, #65	; 0x41
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2242      	movs	r2, #66	; 0x42
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	0018      	movs	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	f0ffffff 	.word	0xf0ffffff
 8003f08:	ffff7fff 	.word	0xffff7fff
 8003f0c:	02008000 	.word	0x02008000

08003f10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	0008      	movs	r0, r1
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	230a      	movs	r3, #10
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	1c02      	adds	r2, r0, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	2308      	movs	r3, #8
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	1c0a      	adds	r2, r1, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2241      	movs	r2, #65	; 0x41
 8003f32:	5c9b      	ldrb	r3, [r3, r2]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d000      	beq.n	8003f3c <HAL_I2C_Master_Transmit+0x2c>
 8003f3a:	e0e7      	b.n	800410c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Master_Transmit+0x3a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e0e1      	b.n	800410e <HAL_I2C_Master_Transmit+0x1fe>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f52:	f7ff fbfb 	bl	800374c <HAL_GetTick>
 8003f56:	0003      	movs	r3, r0
 8003f58:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	0219      	lsls	r1, r3, #8
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2319      	movs	r3, #25
 8003f66:	2201      	movs	r2, #1
 8003f68:	f000 fa16 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cc      	b.n	800410e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2241      	movs	r2, #65	; 0x41
 8003f78:	2121      	movs	r1, #33	; 0x21
 8003f7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2242      	movs	r2, #66	; 0x42
 8003f80:	2110      	movs	r1, #16
 8003f82:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2208      	movs	r2, #8
 8003f94:	18ba      	adds	r2, r7, r2
 8003f96:	8812      	ldrh	r2, [r2, #0]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2bff      	cmp	r3, #255	; 0xff
 8003fa8:	d911      	bls.n	8003fce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	045c      	lsls	r4, r3, #17
 8003fba:	230a      	movs	r3, #10
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	8819      	ldrh	r1, [r3, #0]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	4b55      	ldr	r3, [pc, #340]	; (8004118 <HAL_I2C_Master_Transmit+0x208>)
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	0023      	movs	r3, r4
 8003fc8:	f000 fb1a 	bl	8004600 <I2C_TransferConfig>
 8003fcc:	e075      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	049c      	lsls	r4, r3, #18
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	8819      	ldrh	r1, [r3, #0]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <HAL_I2C_Master_Transmit+0x208>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	0023      	movs	r3, r4
 8003ff0:	f000 fb06 	bl	8004600 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ff4:	e061      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f000 fa0a 	bl	8004416 <I2C_WaitOnTXISFlagUntilTimeout>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e081      	b.n	800410e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	781a      	ldrb	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d03a      	beq.n	80040ba <HAL_I2C_Master_Transmit+0x1aa>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d136      	bne.n	80040ba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800404c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	0013      	movs	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	f000 f99d 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 800405e:	1e03      	subs	r3, r0, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e053      	b.n	800410e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	2bff      	cmp	r3, #255	; 0xff
 800406e:	d911      	bls.n	8004094 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	b2da      	uxtb	r2, r3
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	045c      	lsls	r4, r3, #17
 8004080:	230a      	movs	r3, #10
 8004082:	18fb      	adds	r3, r7, r3
 8004084:	8819      	ldrh	r1, [r3, #0]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	2300      	movs	r3, #0
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	0023      	movs	r3, r4
 800408e:	f000 fab7 	bl	8004600 <I2C_TransferConfig>
 8004092:	e012      	b.n	80040ba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	049c      	lsls	r4, r3, #18
 80040a8:	230a      	movs	r3, #10
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	8819      	ldrh	r1, [r3, #0]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	2300      	movs	r3, #0
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	0023      	movs	r3, r4
 80040b6:	f000 faa3 	bl	8004600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d198      	bne.n	8003ff6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f9e2 	bl	8004494 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e01a      	b.n	800410e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2220      	movs	r2, #32
 80040de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	490c      	ldr	r1, [pc, #48]	; (800411c <HAL_I2C_Master_Transmit+0x20c>)
 80040ec:	400a      	ands	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2241      	movs	r2, #65	; 0x41
 80040f4:	2120      	movs	r1, #32
 80040f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2242      	movs	r2, #66	; 0x42
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b007      	add	sp, #28
 8004114:	bd90      	pop	{r4, r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	80002000 	.word	0x80002000
 800411c:	fe00e800 	.word	0xfe00e800

08004120 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	230a      	movs	r3, #10
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	1c0a      	adds	r2, r1, #0
 8004132:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2241      	movs	r2, #65	; 0x41
 800413c:	5c9b      	ldrb	r3, [r3, r2]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	d000      	beq.n	8004146 <HAL_I2C_IsDeviceReady+0x26>
 8004144:	e0fe      	b.n	8004344 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	401a      	ands	r2, r3
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	429a      	cmp	r2, r3
 8004158:	d101      	bne.n	800415e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	e0f3      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_I2C_IsDeviceReady+0x4c>
 8004168:	2302      	movs	r3, #2
 800416a:	e0ec      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	2101      	movs	r1, #1
 8004172:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2241      	movs	r2, #65	; 0x41
 8004178:	2124      	movs	r1, #36	; 0x24
 800417a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_I2C_IsDeviceReady+0x7a>
 800418a:	230a      	movs	r3, #10
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	059b      	lsls	r3, r3, #22
 8004192:	0d9b      	lsrs	r3, r3, #22
 8004194:	4a6e      	ldr	r2, [pc, #440]	; (8004350 <HAL_I2C_IsDeviceReady+0x230>)
 8004196:	431a      	orrs	r2, r3
 8004198:	e007      	b.n	80041aa <HAL_I2C_IsDeviceReady+0x8a>
 800419a:	230a      	movs	r3, #10
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	059b      	lsls	r3, r3, #22
 80041a2:	0d9b      	lsrs	r3, r3, #22
 80041a4:	22a0      	movs	r2, #160	; 0xa0
 80041a6:	0192      	lsls	r2, r2, #6
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041b0:	f7ff facc 	bl	800374c <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2220      	movs	r2, #32
 80041c0:	4013      	ands	r3, r2
 80041c2:	3b20      	subs	r3, #32
 80041c4:	425a      	negs	r2, r3
 80041c6:	4153      	adcs	r3, r2
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	231f      	movs	r3, #31
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2210      	movs	r2, #16
 80041d8:	4013      	ands	r3, r2
 80041da:	3b10      	subs	r3, #16
 80041dc:	425a      	negs	r2, r3
 80041de:	4153      	adcs	r3, r2
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	231e      	movs	r3, #30
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041e8:	e035      	b.n	8004256 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	d01a      	beq.n	8004226 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7ff faac 	bl	800374c <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <HAL_I2C_IsDeviceReady+0xe6>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10f      	bne.n	8004226 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2241      	movs	r2, #65	; 0x41
 800420a:	2120      	movs	r1, #32
 800420c:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	2220      	movs	r2, #32
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	2100      	movs	r1, #0
 8004220:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e08f      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2220      	movs	r2, #32
 800422e:	4013      	ands	r3, r2
 8004230:	3b20      	subs	r3, #32
 8004232:	425a      	negs	r2, r3
 8004234:	4153      	adcs	r3, r2
 8004236:	b2da      	uxtb	r2, r3
 8004238:	231f      	movs	r3, #31
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2210      	movs	r2, #16
 8004246:	4013      	ands	r3, r2
 8004248:	3b10      	subs	r3, #16
 800424a:	425a      	negs	r2, r3
 800424c:	4153      	adcs	r3, r2
 800424e:	b2da      	uxtb	r2, r3
 8004250:	231e      	movs	r3, #30
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004256:	231f      	movs	r3, #31
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_I2C_IsDeviceReady+0x14a>
 8004260:	231e      	movs	r3, #30
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0bf      	beq.n	80041ea <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	2210      	movs	r2, #16
 8004272:	4013      	ands	r3, r2
 8004274:	2b10      	cmp	r3, #16
 8004276:	d01a      	beq.n	80042ae <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	0013      	movs	r3, r2
 8004282:	2200      	movs	r2, #0
 8004284:	2120      	movs	r1, #32
 8004286:	f000 f887 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 800428a:	1e03      	subs	r3, r0, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e059      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2220      	movs	r2, #32
 8004298:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2241      	movs	r2, #65	; 0x41
 800429e:	2120      	movs	r1, #32
 80042a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2240      	movs	r2, #64	; 0x40
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e04b      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	0013      	movs	r3, r2
 80042b8:	2200      	movs	r2, #0
 80042ba:	2120      	movs	r1, #32
 80042bc:	f000 f86c 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e03e      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2210      	movs	r2, #16
 80042ce:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2220      	movs	r2, #32
 80042d6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d119      	bne.n	8004314 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2180      	movs	r1, #128	; 0x80
 80042ec:	01c9      	lsls	r1, r1, #7
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	0013      	movs	r3, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	2120      	movs	r1, #32
 8004300:	f000 f84a 	bl	8004398 <I2C_WaitOnFlagUntilTimeout>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e01c      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2220      	movs	r2, #32
 8004312:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	3301      	adds	r3, #1
 8004318:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d900      	bls.n	8004324 <HAL_I2C_IsDeviceReady+0x204>
 8004322:	e72e      	b.n	8004182 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2241      	movs	r2, #65	; 0x41
 8004328:	2120      	movs	r1, #32
 800432a:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	2220      	movs	r2, #32
 8004332:	431a      	orrs	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	2100      	movs	r1, #0
 800433e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e000      	b.n	8004346 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b008      	add	sp, #32
 800434c:	bd80      	pop	{r7, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	02002000 	.word	0x02002000

08004354 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d103      	bne.n	8004372 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2201      	movs	r2, #1
 800437a:	4013      	ands	r3, r2
 800437c:	2b01      	cmp	r3, #1
 800437e:	d007      	beq.n	8004390 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
  }
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a8:	e021      	b.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	d01e      	beq.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b0:	f7ff f9cc 	bl	800374c <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d113      	bne.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	2220      	movs	r2, #32
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2241      	movs	r2, #65	; 0x41
 80043d6:	2120      	movs	r1, #32
 80043d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2242      	movs	r2, #66	; 0x42
 80043de:	2100      	movs	r1, #0
 80043e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2240      	movs	r2, #64	; 0x40
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00f      	b.n	800440e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	425a      	negs	r2, r3
 80043fe:	4153      	adcs	r3, r2
 8004400:	b2db      	uxtb	r3, r3
 8004402:	001a      	movs	r2, r3
 8004404:	1dfb      	adds	r3, r7, #7
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d0ce      	beq.n	80043aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b004      	add	sp, #16
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004422:	e02b      	b.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	0018      	movs	r0, r3
 800442c:	f000 f86e 	bl	800450c <I2C_IsAcknowledgeFailed>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d001      	beq.n	8004438 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e029      	b.n	800448c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	3301      	adds	r3, #1
 800443c:	d01e      	beq.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7ff f985 	bl	800374c <HAL_GetTick>
 8004442:	0002      	movs	r2, r0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d113      	bne.n	800447c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	2220      	movs	r2, #32
 800445a:	431a      	orrs	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2241      	movs	r2, #65	; 0x41
 8004464:	2120      	movs	r1, #32
 8004466:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2242      	movs	r2, #66	; 0x42
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2202      	movs	r2, #2
 8004484:	4013      	ands	r3, r2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d1cc      	bne.n	8004424 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b004      	add	sp, #16
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044a0:	e028      	b.n	80044f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f82f 	bl	800450c <I2C_IsAcknowledgeFailed>
 80044ae:	1e03      	subs	r3, r0, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e026      	b.n	8004504 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7ff f949 	bl	800374c <HAL_GetTick>
 80044ba:	0002      	movs	r2, r0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d113      	bne.n	80044f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	2220      	movs	r2, #32
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2241      	movs	r2, #65	; 0x41
 80044dc:	2120      	movs	r1, #32
 80044de:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2242      	movs	r2, #66	; 0x42
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2240      	movs	r2, #64	; 0x40
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e007      	b.n	8004504 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2220      	movs	r2, #32
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d1cf      	bne.n	80044a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b004      	add	sp, #16
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2210      	movs	r2, #16
 8004520:	4013      	ands	r3, r2
 8004522:	2b10      	cmp	r3, #16
 8004524:	d164      	bne.n	80045f0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	049b      	lsls	r3, r3, #18
 8004530:	401a      	ands	r2, r3
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	049b      	lsls	r3, r3, #18
 8004536:	429a      	cmp	r2, r3
 8004538:	d02b      	beq.n	8004592 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	01c9      	lsls	r1, r1, #7
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800454c:	e021      	b.n	8004592 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3301      	adds	r3, #1
 8004552:	d01e      	beq.n	8004592 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004554:	f7ff f8fa 	bl	800374c <HAL_GetTick>
 8004558:	0002      	movs	r2, r0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <I2C_IsAcknowledgeFailed+0x5e>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d113      	bne.n	8004592 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	2220      	movs	r2, #32
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2241      	movs	r2, #65	; 0x41
 800457a:	2120      	movs	r1, #32
 800457c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2242      	movs	r2, #66	; 0x42
 8004582:	2100      	movs	r1, #0
 8004584:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e02f      	b.n	80045f2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2220      	movs	r2, #32
 800459a:	4013      	ands	r3, r2
 800459c:	2b20      	cmp	r3, #32
 800459e:	d1d6      	bne.n	800454e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2210      	movs	r2, #16
 80045a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2220      	movs	r2, #32
 80045ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff fece 	bl	8004354 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	490e      	ldr	r1, [pc, #56]	; (80045fc <I2C_IsAcknowledgeFailed+0xf0>)
 80045c4:	400a      	ands	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	2204      	movs	r2, #4
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2241      	movs	r2, #65	; 0x41
 80045d8:	2120      	movs	r1, #32
 80045da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2242      	movs	r2, #66	; 0x42
 80045e0:	2100      	movs	r1, #0
 80045e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	2100      	movs	r1, #0
 80045ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b004      	add	sp, #16
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	fe00e800 	.word	0xfe00e800

08004600 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	0008      	movs	r0, r1
 800460a:	0011      	movs	r1, r2
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	240a      	movs	r4, #10
 8004610:	193b      	adds	r3, r7, r4
 8004612:	1c02      	adds	r2, r0, #0
 8004614:	801a      	strh	r2, [r3, #0]
 8004616:	2009      	movs	r0, #9
 8004618:	183b      	adds	r3, r7, r0
 800461a:	1c0a      	adds	r2, r1, #0
 800461c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	0d51      	lsrs	r1, r2, #21
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	00d2      	lsls	r2, r2, #3
 800462c:	400a      	ands	r2, r1
 800462e:	490e      	ldr	r1, [pc, #56]	; (8004668 <I2C_TransferConfig+0x68>)
 8004630:	430a      	orrs	r2, r1
 8004632:	43d2      	mvns	r2, r2
 8004634:	401a      	ands	r2, r3
 8004636:	0011      	movs	r1, r2
 8004638:	193b      	adds	r3, r7, r4
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	059b      	lsls	r3, r3, #22
 800463e:	0d9a      	lsrs	r2, r3, #22
 8004640:	183b      	adds	r3, r7, r0
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	0418      	lsls	r0, r3, #16
 8004646:	23ff      	movs	r3, #255	; 0xff
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	4003      	ands	r3, r0
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	431a      	orrs	r2, r3
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b005      	add	sp, #20
 8004664:	bd90      	pop	{r4, r7, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	03ff63ff 	.word	0x03ff63ff

0800466c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2241      	movs	r2, #65	; 0x41
 800467a:	5c9b      	ldrb	r3, [r3, r2]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b20      	cmp	r3, #32
 8004680:	d138      	bne.n	80046f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2240      	movs	r2, #64	; 0x40
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800468c:	2302      	movs	r3, #2
 800468e:	e032      	b.n	80046f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2241      	movs	r2, #65	; 0x41
 800469c:	2124      	movs	r1, #36	; 0x24
 800469e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2101      	movs	r1, #1
 80046ac:	438a      	bics	r2, r1
 80046ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4911      	ldr	r1, [pc, #68]	; (8004700 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2101      	movs	r1, #1
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2241      	movs	r2, #65	; 0x41
 80046e4:	2120      	movs	r1, #32
 80046e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	ffffefff 	.word	0xffffefff

08004704 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2241      	movs	r2, #65	; 0x41
 8004712:	5c9b      	ldrb	r3, [r3, r2]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b20      	cmp	r3, #32
 8004718:	d139      	bne.n	800478e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2240      	movs	r2, #64	; 0x40
 800471e:	5c9b      	ldrb	r3, [r3, r2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004724:	2302      	movs	r3, #2
 8004726:	e033      	b.n	8004790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2240      	movs	r2, #64	; 0x40
 800472c:	2101      	movs	r1, #1
 800472e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2241      	movs	r2, #65	; 0x41
 8004734:	2124      	movs	r1, #36	; 0x24
 8004736:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2101      	movs	r1, #1
 8004744:	438a      	bics	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a11      	ldr	r2, [pc, #68]	; (8004798 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2101      	movs	r1, #1
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2241      	movs	r2, #65	; 0x41
 800477e:	2120      	movs	r1, #32
 8004780:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2240      	movs	r2, #64	; 0x40
 8004786:	2100      	movs	r1, #0
 8004788:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}
 8004798:	fffff0ff 	.word	0xfffff0ff

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b5b0      	push	{r4, r5, r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f000 fbbf 	bl	8004f2e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b0:	4bc9      	ldr	r3, [pc, #804]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	220c      	movs	r2, #12
 80047b6:	4013      	ands	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ba:	4bc7      	ldr	r3, [pc, #796]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	025b      	lsls	r3, r3, #9
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4013      	ands	r3, r2
 80047ce:	d100      	bne.n	80047d2 <HAL_RCC_OscConfig+0x36>
 80047d0:	e07e      	b.n	80048d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d007      	beq.n	80047e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d112      	bne.n	8004804 <HAL_RCC_OscConfig+0x68>
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	025b      	lsls	r3, r3, #9
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d10d      	bne.n	8004804 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	4bbb      	ldr	r3, [pc, #748]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	029b      	lsls	r3, r3, #10
 80047f0:	4013      	ands	r3, r2
 80047f2:	d100      	bne.n	80047f6 <HAL_RCC_OscConfig+0x5a>
 80047f4:	e06b      	b.n	80048ce <HAL_RCC_OscConfig+0x132>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d167      	bne.n	80048ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f000 fb95 	bl	8004f2e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	429a      	cmp	r2, r3
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x84>
 8004810:	4bb1      	ldr	r3, [pc, #708]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4bb0      	ldr	r3, [pc, #704]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	0249      	lsls	r1, r1, #9
 800481a:	430a      	orrs	r2, r1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e027      	b.n	8004870 <HAL_RCC_OscConfig+0xd4>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	23a0      	movs	r3, #160	; 0xa0
 8004826:	02db      	lsls	r3, r3, #11
 8004828:	429a      	cmp	r2, r3
 800482a:	d10e      	bne.n	800484a <HAL_RCC_OscConfig+0xae>
 800482c:	4baa      	ldr	r3, [pc, #680]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4ba9      	ldr	r3, [pc, #676]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	02c9      	lsls	r1, r1, #11
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	4ba7      	ldr	r3, [pc, #668]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4ba6      	ldr	r3, [pc, #664]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	0249      	lsls	r1, r1, #9
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e012      	b.n	8004870 <HAL_RCC_OscConfig+0xd4>
 800484a:	4ba3      	ldr	r3, [pc, #652]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4ba2      	ldr	r3, [pc, #648]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004850:	49a2      	ldr	r1, [pc, #648]	; (8004adc <HAL_RCC_OscConfig+0x340>)
 8004852:	400a      	ands	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	4ba0      	ldr	r3, [pc, #640]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	025b      	lsls	r3, r3, #9
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4b9c      	ldr	r3, [pc, #624]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b9b      	ldr	r3, [pc, #620]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800486a:	499d      	ldr	r1, [pc, #628]	; (8004ae0 <HAL_RCC_OscConfig+0x344>)
 800486c:	400a      	ands	r2, r1
 800486e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d015      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fe ff68 	bl	800374c <HAL_GetTick>
 800487c:	0003      	movs	r3, r0
 800487e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004880:	e009      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004882:	f7fe ff63 	bl	800374c <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b64      	cmp	r3, #100	; 0x64
 800488e:	d902      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	f000 fb4c 	bl	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004896:	4b90      	ldr	r3, [pc, #576]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	029b      	lsls	r3, r3, #10
 800489e:	4013      	ands	r3, r2
 80048a0:	d0ef      	beq.n	8004882 <HAL_RCC_OscConfig+0xe6>
 80048a2:	e015      	b.n	80048d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7fe ff52 	bl	800374c <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ae:	f7fe ff4d 	bl	800374c <HAL_GetTick>
 80048b2:	0002      	movs	r2, r0
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b64      	cmp	r3, #100	; 0x64
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e336      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048c0:	4b85      	ldr	r3, [pc, #532]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	4013      	ands	r3, r2
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x112>
 80048cc:	e000      	b.n	80048d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d100      	bne.n	80048dc <HAL_RCC_OscConfig+0x140>
 80048da:	e099      	b.n	8004a10 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	2220      	movs	r2, #32
 80048e6:	4013      	ands	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80048ea:	4b7b      	ldr	r3, [pc, #492]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b7a      	ldr	r3, [pc, #488]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80048f0:	2120      	movs	r1, #32
 80048f2:	430a      	orrs	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2220      	movs	r2, #32
 80048fa:	4393      	bics	r3, r2
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d13e      	bne.n	8004988 <HAL_RCC_OscConfig+0x1ec>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d13b      	bne.n	8004988 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004910:	4b71      	ldr	r3, [pc, #452]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2204      	movs	r2, #4
 8004916:	4013      	ands	r3, r2
 8004918:	d004      	beq.n	8004924 <HAL_RCC_OscConfig+0x188>
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e304      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b6c      	ldr	r3, [pc, #432]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x348>)
 800492a:	4013      	ands	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800493a:	4b67      	ldr	r3, [pc, #412]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2209      	movs	r2, #9
 8004940:	4393      	bics	r3, r2
 8004942:	0019      	movs	r1, r3
 8004944:	4b64      	ldr	r3, [pc, #400]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800494c:	f000 fc50 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8004950:	0001      	movs	r1, r0
 8004952:	4b61      	ldr	r3, [pc, #388]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	220f      	movs	r2, #15
 800495a:	4013      	ands	r3, r2
 800495c:	4a62      	ldr	r2, [pc, #392]	; (8004ae8 <HAL_RCC_OscConfig+0x34c>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	000a      	movs	r2, r1
 8004962:	40da      	lsrs	r2, r3
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_RCC_OscConfig+0x350>)
 8004966:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004968:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_OscConfig+0x354>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2513      	movs	r5, #19
 800496e:	197c      	adds	r4, r7, r5
 8004970:	0018      	movs	r0, r3
 8004972:	f7fe fea5 	bl	80036c0 <HAL_InitTick>
 8004976:	0003      	movs	r3, r0
 8004978:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800497a:	197b      	adds	r3, r7, r5
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d046      	beq.n	8004a10 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004982:	197b      	adds	r3, r7, r5
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	e2d2      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d027      	beq.n	80049de <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800498e:	4b52      	ldr	r3, [pc, #328]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2209      	movs	r2, #9
 8004994:	4393      	bics	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fe fed4 	bl	800374c <HAL_GetTick>
 80049a4:	0003      	movs	r3, r0
 80049a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049a8:	e008      	b.n	80049bc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049aa:	f7fe fecf 	bl	800374c <HAL_GetTick>
 80049ae:	0002      	movs	r2, r0
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e2b8      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049bc:	4b46      	ldr	r3, [pc, #280]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2204      	movs	r2, #4
 80049c2:	4013      	ands	r3, r2
 80049c4:	d0f1      	beq.n	80049aa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c6:	4b44      	ldr	r3, [pc, #272]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4a46      	ldr	r2, [pc, #280]	; (8004ae4 <HAL_RCC_OscConfig+0x348>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	021a      	lsls	r2, r3, #8
 80049d6:	4b40      	ldr	r3, [pc, #256]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80049d8:	430a      	orrs	r2, r1
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	e018      	b.n	8004a10 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049de:	4b3e      	ldr	r3, [pc, #248]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	438a      	bics	r2, r1
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fe feaf 	bl	800374c <HAL_GetTick>
 80049ee:	0003      	movs	r3, r0
 80049f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f4:	f7fe feaa 	bl	800374c <HAL_GetTick>
 80049f8:	0002      	movs	r2, r0
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e293      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a06:	4b34      	ldr	r3, [pc, #208]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d1f1      	bne.n	80049f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2210      	movs	r2, #16
 8004a16:	4013      	ands	r3, r2
 8004a18:	d100      	bne.n	8004a1c <HAL_RCC_OscConfig+0x280>
 8004a1a:	e0a2      	b.n	8004b62 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d140      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d005      	beq.n	8004a3a <HAL_RCC_OscConfig+0x29e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e279      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a3a:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4a2d      	ldr	r2, [pc, #180]	; (8004af4 <HAL_RCC_OscConfig+0x358>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a48:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a4e:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	0a19      	lsrs	r1, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	061a      	lsls	r2, r3, #24
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	0b5b      	lsrs	r3, r3, #13
 8004a68:	3301      	adds	r3, #1
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	0212      	lsls	r2, r2, #8
 8004a6e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	210f      	movs	r1, #15
 8004a78:	400b      	ands	r3, r1
 8004a7a:	491b      	ldr	r1, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x34c>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCC_OscConfig+0x350>)
 8004a82:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004a84:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <HAL_RCC_OscConfig+0x354>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2513      	movs	r5, #19
 8004a8a:	197c      	adds	r4, r7, r5
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7fe fe17 	bl	80036c0 <HAL_InitTick>
 8004a92:	0003      	movs	r3, r0
 8004a94:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004a96:	197b      	adds	r3, r7, r5
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d061      	beq.n	8004b62 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004a9e:	197b      	adds	r3, r7, r5
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	e244      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d040      	beq.n	8004b2e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <HAL_RCC_OscConfig+0x33c>)
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	0049      	lsls	r1, r1, #1
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aba:	f7fe fe47 	bl	800374c <HAL_GetTick>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ac2:	e019      	b.n	8004af8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac4:	f7fe fe42 	bl	800374c <HAL_GetTick>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d912      	bls.n	8004af8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e22b      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	fffeffff 	.word	0xfffeffff
 8004ae0:	fffbffff 	.word	0xfffbffff
 8004ae4:	ffffe0ff 	.word	0xffffe0ff
 8004ae8:	0800a5fc 	.word	0x0800a5fc
 8004aec:	20000014 	.word	0x20000014
 8004af0:	20000018 	.word	0x20000018
 8004af4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004af8:	4bca      	ldr	r3, [pc, #808]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4013      	ands	r3, r2
 8004b02:	d0df      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b04:	4bc7      	ldr	r3, [pc, #796]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4ac7      	ldr	r2, [pc, #796]	; (8004e28 <HAL_RCC_OscConfig+0x68c>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b12:	4bc4      	ldr	r3, [pc, #784]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b14:	430a      	orrs	r2, r1
 8004b16:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b18:	4bc2      	ldr	r3, [pc, #776]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	0a19      	lsrs	r1, r3, #8
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	061a      	lsls	r2, r3, #24
 8004b26:	4bbf      	ldr	r3, [pc, #764]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	e019      	b.n	8004b62 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b2e:	4bbd      	ldr	r3, [pc, #756]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4bbc      	ldr	r3, [pc, #752]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b34:	49bd      	ldr	r1, [pc, #756]	; (8004e2c <HAL_RCC_OscConfig+0x690>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fe fe07 	bl	800374c <HAL_GetTick>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b44:	f7fe fe02 	bl	800374c <HAL_GetTick>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e1eb      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004b56:	4bb3      	ldr	r3, [pc, #716]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2208      	movs	r2, #8
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d036      	beq.n	8004bda <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b74:	4bab      	ldr	r3, [pc, #684]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b78:	4baa      	ldr	r3, [pc, #680]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b80:	f7fe fde4 	bl	800374c <HAL_GetTick>
 8004b84:	0003      	movs	r3, r0
 8004b86:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8a:	f7fe fddf 	bl	800374c <HAL_GetTick>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e1c8      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b9c:	4ba1      	ldr	r3, [pc, #644]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d0f1      	beq.n	8004b8a <HAL_RCC_OscConfig+0x3ee>
 8004ba6:	e018      	b.n	8004bda <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba8:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bac:	4b9d      	ldr	r3, [pc, #628]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	438a      	bics	r2, r1
 8004bb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb4:	f7fe fdca 	bl	800374c <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bbe:	f7fe fdc5 	bl	800374c <HAL_GetTick>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e1ae      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bd0:	4b94      	ldr	r3, [pc, #592]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d1f1      	bne.n	8004bbe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2204      	movs	r2, #4
 8004be0:	4013      	ands	r3, r2
 8004be2:	d100      	bne.n	8004be6 <HAL_RCC_OscConfig+0x44a>
 8004be4:	e0ae      	b.n	8004d44 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be6:	2023      	movs	r0, #35	; 0x23
 8004be8:	183b      	adds	r3, r7, r0
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bee:	4b8d      	ldr	r3, [pc, #564]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	055b      	lsls	r3, r3, #21
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d109      	bne.n	8004c0e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	4b8a      	ldr	r3, [pc, #552]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfe:	4b89      	ldr	r3, [pc, #548]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0549      	lsls	r1, r1, #21
 8004c04:	430a      	orrs	r2, r1
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c08:	183b      	adds	r3, r7, r0
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0e:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCC_OscConfig+0x694>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4013      	ands	r3, r2
 8004c18:	d11a      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c1a:	4b85      	ldr	r3, [pc, #532]	; (8004e30 <HAL_RCC_OscConfig+0x694>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b84      	ldr	r3, [pc, #528]	; (8004e30 <HAL_RCC_OscConfig+0x694>)
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	0049      	lsls	r1, r1, #1
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c28:	f7fe fd90 	bl	800374c <HAL_GetTick>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c32:	f7fe fd8b 	bl	800374c <HAL_GetTick>
 8004c36:	0002      	movs	r2, r0
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b64      	cmp	r3, #100	; 0x64
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e174      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	4b7a      	ldr	r3, [pc, #488]	; (8004e30 <HAL_RCC_OscConfig+0x694>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4d0>
 8004c5c:	4b71      	ldr	r3, [pc, #452]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c60:	4b70      	ldr	r3, [pc, #448]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	0049      	lsls	r1, r1, #1
 8004c66:	430a      	orrs	r2, r1
 8004c68:	651a      	str	r2, [r3, #80]	; 0x50
 8004c6a:	e031      	b.n	8004cd0 <HAL_RCC_OscConfig+0x534>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10c      	bne.n	8004c8e <HAL_RCC_OscConfig+0x4f2>
 8004c74:	4b6b      	ldr	r3, [pc, #428]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c78:	4b6a      	ldr	r3, [pc, #424]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c7a:	496c      	ldr	r1, [pc, #432]	; (8004e2c <HAL_RCC_OscConfig+0x690>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8004c80:	4b68      	ldr	r3, [pc, #416]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c84:	4b67      	ldr	r3, [pc, #412]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c86:	496b      	ldr	r1, [pc, #428]	; (8004e34 <HAL_RCC_OscConfig+0x698>)
 8004c88:	400a      	ands	r2, r1
 8004c8a:	651a      	str	r2, [r3, #80]	; 0x50
 8004c8c:	e020      	b.n	8004cd0 <HAL_RCC_OscConfig+0x534>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	23a0      	movs	r3, #160	; 0xa0
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d10e      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x51c>
 8004c9a:	4b62      	ldr	r3, [pc, #392]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c9e:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004ca0:	2180      	movs	r1, #128	; 0x80
 8004ca2:	00c9      	lsls	r1, r1, #3
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004caa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cac:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	0049      	lsls	r1, r1, #1
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x534>
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cbc:	4b59      	ldr	r3, [pc, #356]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004cbe:	495b      	ldr	r1, [pc, #364]	; (8004e2c <HAL_RCC_OscConfig+0x690>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
 8004cc4:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc8:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004cca:	495a      	ldr	r1, [pc, #360]	; (8004e34 <HAL_RCC_OscConfig+0x698>)
 8004ccc:	400a      	ands	r2, r1
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd8:	f7fe fd38 	bl	800374c <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce0:	e009      	b.n	8004cf6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fe fd33 	bl	800374c <HAL_GetTick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	4a52      	ldr	r2, [pc, #328]	; (8004e38 <HAL_RCC_OscConfig+0x69c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e11b      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf6:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	d0ef      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x546>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d04:	f7fe fd22 	bl	800374c <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d0c:	e009      	b.n	8004d22 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fe fd1d 	bl	800374c <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	4a47      	ldr	r2, [pc, #284]	; (8004e38 <HAL_RCC_OscConfig+0x69c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e105      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d22:	4b40      	ldr	r3, [pc, #256]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d1ef      	bne.n	8004d0e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d2e:	2323      	movs	r3, #35	; 0x23
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d3e:	493f      	ldr	r1, [pc, #252]	; (8004e3c <HAL_RCC_OscConfig+0x6a0>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d049      	beq.n	8004de2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d026      	beq.n	8004da4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004d56:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d66:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d68:	2101      	movs	r1, #1
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d6e:	4b34      	ldr	r3, [pc, #208]	; (8004e40 <HAL_RCC_OscConfig+0x6a4>)
 8004d70:	6a1a      	ldr	r2, [r3, #32]
 8004d72:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <HAL_RCC_OscConfig+0x6a4>)
 8004d74:	2180      	movs	r1, #128	; 0x80
 8004d76:	0189      	lsls	r1, r1, #6
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fce6 	bl	800374c <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d86:	f7fe fce1 	bl	800374c <HAL_GetTick>
 8004d8a:	0002      	movs	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e0ca      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d98:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d0f1      	beq.n	8004d86 <HAL_RCC_OscConfig+0x5ea>
 8004da2:	e01e      	b.n	8004de2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004daa:	2101      	movs	r1, #1
 8004dac:	438a      	bics	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_RCC_OscConfig+0x6a4>)
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <HAL_RCC_OscConfig+0x6a4>)
 8004db6:	4923      	ldr	r1, [pc, #140]	; (8004e44 <HAL_RCC_OscConfig+0x6a8>)
 8004db8:	400a      	ands	r2, r1
 8004dba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fcc6 	bl	800374c <HAL_GetTick>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc6:	f7fe fcc1 	bl	800374c <HAL_GetTick>
 8004dca:	0002      	movs	r2, r0
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e0aa      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	4013      	ands	r3, r2
 8004de0:	d1f1      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d100      	bne.n	8004dec <HAL_RCC_OscConfig+0x650>
 8004dea:	e09f      	b.n	8004f2c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b0c      	cmp	r3, #12
 8004df0:	d100      	bne.n	8004df4 <HAL_RCC_OscConfig+0x658>
 8004df2:	e078      	b.n	8004ee6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d159      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <HAL_RCC_OscConfig+0x688>)
 8004e02:	4911      	ldr	r1, [pc, #68]	; (8004e48 <HAL_RCC_OscConfig+0x6ac>)
 8004e04:	400a      	ands	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e08:	f7fe fca0 	bl	800374c <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e10:	e01c      	b.n	8004e4c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fe fc9b 	bl	800374c <HAL_GetTick>
 8004e16:	0002      	movs	r2, r0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d915      	bls.n	8004e4c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e084      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
 8004e24:	40021000 	.word	0x40021000
 8004e28:	ffff1fff 	.word	0xffff1fff
 8004e2c:	fffffeff 	.word	0xfffffeff
 8004e30:	40007000 	.word	0x40007000
 8004e34:	fffffbff 	.word	0xfffffbff
 8004e38:	00001388 	.word	0x00001388
 8004e3c:	efffffff 	.word	0xefffffff
 8004e40:	40010000 	.word	0x40010000
 8004e44:	ffffdfff 	.word	0xffffdfff
 8004e48:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004e4c:	4b3a      	ldr	r3, [pc, #232]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	049b      	lsls	r3, r3, #18
 8004e54:	4013      	ands	r3, r2
 8004e56:	d1dc      	bne.n	8004e12 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e58:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a37      	ldr	r2, [pc, #220]	; (8004f3c <HAL_RCC_OscConfig+0x7a0>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	431a      	orrs	r2, r3
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004e74:	430a      	orrs	r2, r1
 8004e76:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e78:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	0449      	lsls	r1, r1, #17
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fe fc61 	bl	800374c <HAL_GetTick>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe fc5c 	bl	800374c <HAL_GetTick>
 8004e94:	0002      	movs	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e045      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ea2:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	049b      	lsls	r3, r3, #18
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x6f4>
 8004eae:	e03d      	b.n	8004f2c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004eb6:	4922      	ldr	r1, [pc, #136]	; (8004f40 <HAL_RCC_OscConfig+0x7a4>)
 8004eb8:	400a      	ands	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fc46 	bl	800374c <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fe fc41 	bl	800374c <HAL_GetTick>
 8004eca:	0002      	movs	r2, r0
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e02a      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004ed8:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	049b      	lsls	r3, r3, #18
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x72a>
 8004ee4:	e022      	b.n	8004f2c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e01d      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <HAL_RCC_OscConfig+0x79c>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	025b      	lsls	r3, r3, #9
 8004efe:	401a      	ands	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d10f      	bne.n	8004f28 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	23f0      	movs	r3, #240	; 0xf0
 8004f0c:	039b      	lsls	r3, r3, #14
 8004f0e:	401a      	ands	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	23c0      	movs	r3, #192	; 0xc0
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	401a      	ands	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b00a      	add	sp, #40	; 0x28
 8004f34:	bdb0      	pop	{r4, r5, r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	ff02ffff 	.word	0xff02ffff
 8004f40:	feffffff 	.word	0xfeffffff

08004f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f44:	b5b0      	push	{r4, r5, r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e128      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f58:	4b96      	ldr	r3, [pc, #600]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	4013      	ands	r3, r2
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d91e      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b93      	ldr	r3, [pc, #588]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4393      	bics	r3, r2
 8004f6e:	0019      	movs	r1, r3
 8004f70:	4b90      	ldr	r3, [pc, #576]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f78:	f7fe fbe8 	bl	800374c <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f80:	e009      	b.n	8004f96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f82:	f7fe fbe3 	bl	800374c <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	4a8a      	ldr	r2, [pc, #552]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e109      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b87      	ldr	r3, [pc, #540]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d1ee      	bne.n	8004f82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	4013      	ands	r3, r2
 8004fac:	d009      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fae:	4b83      	ldr	r3, [pc, #524]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	22f0      	movs	r2, #240	; 0xf0
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4b7f      	ldr	r3, [pc, #508]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d100      	bne.n	8004fce <HAL_RCC_ClockConfig+0x8a>
 8004fcc:	e089      	b.n	80050e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fd6:	4b79      	ldr	r3, [pc, #484]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d120      	bne.n	8005024 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0e1      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fee:	4b73      	ldr	r3, [pc, #460]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	049b      	lsls	r3, r3, #18
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d114      	bne.n	8005024 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0d5      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d106      	bne.n	8005014 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005006:	4b6d      	ldr	r3, [pc, #436]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2204      	movs	r2, #4
 800500c:	4013      	ands	r3, r2
 800500e:	d109      	bne.n	8005024 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0ca      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005014:	4b69      	ldr	r3, [pc, #420]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0c2      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005024:	4b65      	ldr	r3, [pc, #404]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2203      	movs	r2, #3
 800502a:	4393      	bics	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	4b62      	ldr	r3, [pc, #392]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005034:	430a      	orrs	r2, r1
 8005036:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005038:	f7fe fb88 	bl	800374c <HAL_GetTick>
 800503c:	0003      	movs	r3, r0
 800503e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d111      	bne.n	800506c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005048:	e009      	b.n	800505e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504a:	f7fe fb7f 	bl	800374c <HAL_GetTick>
 800504e:	0002      	movs	r2, r0
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	4a58      	ldr	r2, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0a5      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800505e:	4b57      	ldr	r3, [pc, #348]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	220c      	movs	r2, #12
 8005064:	4013      	ands	r3, r2
 8005066:	2b08      	cmp	r3, #8
 8005068:	d1ef      	bne.n	800504a <HAL_RCC_ClockConfig+0x106>
 800506a:	e03a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d111      	bne.n	8005098 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005074:	e009      	b.n	800508a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f7fe fb69 	bl	800374c <HAL_GetTick>
 800507a:	0002      	movs	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e08f      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508a:	4b4c      	ldr	r3, [pc, #304]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	220c      	movs	r2, #12
 8005090:	4013      	ands	r3, r2
 8005092:	2b0c      	cmp	r3, #12
 8005094:	d1ef      	bne.n	8005076 <HAL_RCC_ClockConfig+0x132>
 8005096:	e024      	b.n	80050e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d11b      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050a0:	e009      	b.n	80050b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a2:	f7fe fb53 	bl	800374c <HAL_GetTick>
 80050a6:	0002      	movs	r2, r0
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	4a42      	ldr	r2, [pc, #264]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e079      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050b6:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	220c      	movs	r2, #12
 80050bc:	4013      	ands	r3, r2
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d1ef      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x15e>
 80050c2:	e00e      	b.n	80050e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fe fb42 	bl	800374c <HAL_GetTick>
 80050c8:	0002      	movs	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e068      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050d8:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	220c      	movs	r2, #12
 80050de:	4013      	ands	r3, r2
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e2:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	4013      	ands	r3, r2
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d21e      	bcs.n	800512e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f0:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2201      	movs	r2, #1
 80050f6:	4393      	bics	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005102:	f7fe fb23 	bl	800374c <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	e009      	b.n	8005120 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fe fb1e 	bl	800374c <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	4a28      	ldr	r2, [pc, #160]	; (80051b8 <HAL_RCC_ClockConfig+0x274>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e044      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005120:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <HAL_RCC_ClockConfig+0x270>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	4013      	ands	r3, r2
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d1ee      	bne.n	800510c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2204      	movs	r2, #4
 8005134:	4013      	ands	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005138:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <HAL_RCC_ClockConfig+0x27c>)
 800513e:	4013      	ands	r3, r2
 8005140:	0019      	movs	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005148:	430a      	orrs	r2, r1
 800514a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2208      	movs	r2, #8
 8005152:	4013      	ands	r3, r2
 8005154:	d00a      	beq.n	800516c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005156:	4b19      	ldr	r3, [pc, #100]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	4a1a      	ldr	r2, [pc, #104]	; (80051c4 <HAL_RCC_ClockConfig+0x280>)
 800515c:	4013      	ands	r3, r2
 800515e:	0019      	movs	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	00da      	lsls	r2, r3, #3
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800516c:	f000 f840 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8005170:	0001      	movs	r1, r0
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_RCC_ClockConfig+0x278>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	220f      	movs	r2, #15
 800517a:	4013      	ands	r3, r2
 800517c:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x284>)
 800517e:	5cd3      	ldrb	r3, [r2, r3]
 8005180:	000a      	movs	r2, r1
 8005182:	40da      	lsrs	r2, r3
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_RCC_ClockConfig+0x288>)
 8005186:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005188:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_RCC_ClockConfig+0x28c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	250b      	movs	r5, #11
 800518e:	197c      	adds	r4, r7, r5
 8005190:	0018      	movs	r0, r3
 8005192:	f7fe fa95 	bl	80036c0 <HAL_InitTick>
 8005196:	0003      	movs	r3, r0
 8005198:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800519a:	197b      	adds	r3, r7, r5
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80051a2:	197b      	adds	r3, r7, r5
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	e000      	b.n	80051aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b004      	add	sp, #16
 80051b0:	bdb0      	pop	{r4, r5, r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	40022000 	.word	0x40022000
 80051b8:	00001388 	.word	0x00001388
 80051bc:	40021000 	.word	0x40021000
 80051c0:	fffff8ff 	.word	0xfffff8ff
 80051c4:	ffffc7ff 	.word	0xffffc7ff
 80051c8:	0800a5fc 	.word	0x0800a5fc
 80051cc:	20000014 	.word	0x20000014
 80051d0:	20000018 	.word	0x20000018

080051d4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <HAL_RCC_EnableCSS+0x18>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <HAL_RCC_EnableCSS+0x18>)
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	0309      	lsls	r1, r1, #12
 80051e2:	430a      	orrs	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000

080051f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b08e      	sub	sp, #56	; 0x38
 80051f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80051f6:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <HAL_RCC_GetSysClockFreq+0x138>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fe:	230c      	movs	r3, #12
 8005200:	4013      	ands	r3, r2
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d014      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x40>
 8005206:	d900      	bls.n	800520a <HAL_RCC_GetSysClockFreq+0x1a>
 8005208:	e07b      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x112>
 800520a:	2b04      	cmp	r3, #4
 800520c:	d002      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x24>
 800520e:	2b08      	cmp	r3, #8
 8005210:	d00b      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x3a>
 8005212:	e076      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005214:	4b44      	ldr	r3, [pc, #272]	; (8005328 <HAL_RCC_GetSysClockFreq+0x138>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2210      	movs	r2, #16
 800521a:	4013      	ands	r3, r2
 800521c:	d002      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800521e:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005220:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005222:	e07c      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005224:	4b42      	ldr	r3, [pc, #264]	; (8005330 <HAL_RCC_GetSysClockFreq+0x140>)
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005228:	e079      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800522a:	4b42      	ldr	r3, [pc, #264]	; (8005334 <HAL_RCC_GetSysClockFreq+0x144>)
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800522e:	e076      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	0c9a      	lsrs	r2, r3, #18
 8005234:	230f      	movs	r3, #15
 8005236:	401a      	ands	r2, r3
 8005238:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCC_GetSysClockFreq+0x148>)
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	0d9a      	lsrs	r2, r3, #22
 8005242:	2303      	movs	r3, #3
 8005244:	4013      	ands	r3, r2
 8005246:	3301      	adds	r3, #1
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800524a:	4b37      	ldr	r3, [pc, #220]	; (8005328 <HAL_RCC_GetSysClockFreq+0x138>)
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	025b      	lsls	r3, r3, #9
 8005252:	4013      	ands	r3, r2
 8005254:	d01a      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	4a35      	ldr	r2, [pc, #212]	; (8005334 <HAL_RCC_GetSysClockFreq+0x144>)
 8005260:	2300      	movs	r3, #0
 8005262:	69b8      	ldr	r0, [r7, #24]
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	f7fb f8f7 	bl	8000458 <__aeabi_lmul>
 800526a:	0002      	movs	r2, r0
 800526c:	000b      	movs	r3, r1
 800526e:	0010      	movs	r0, r2
 8005270:	0019      	movs	r1, r3
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f7fb f8cb 	bl	8000418 <__aeabi_uldivmod>
 8005282:	0002      	movs	r2, r0
 8005284:	000b      	movs	r3, r1
 8005286:	0013      	movs	r3, r2
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	e037      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800528c:	4b26      	ldr	r3, [pc, #152]	; (8005328 <HAL_RCC_GetSysClockFreq+0x138>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2210      	movs	r2, #16
 8005292:	4013      	ands	r3, r2
 8005294:	d01a      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	4a23      	ldr	r2, [pc, #140]	; (800532c <HAL_RCC_GetSysClockFreq+0x13c>)
 80052a0:	2300      	movs	r3, #0
 80052a2:	68b8      	ldr	r0, [r7, #8]
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	f7fb f8d7 	bl	8000458 <__aeabi_lmul>
 80052aa:	0002      	movs	r2, r0
 80052ac:	000b      	movs	r3, r1
 80052ae:	0010      	movs	r0, r2
 80052b0:	0019      	movs	r1, r3
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f7fb f8ab 	bl	8000418 <__aeabi_uldivmod>
 80052c2:	0002      	movs	r2, r0
 80052c4:	000b      	movs	r3, r1
 80052c6:	0013      	movs	r3, r2
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	e017      	b.n	80052fc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	0018      	movs	r0, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	0019      	movs	r1, r3
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <HAL_RCC_GetSysClockFreq+0x140>)
 80052d6:	2300      	movs	r3, #0
 80052d8:	f7fb f8be 	bl	8000458 <__aeabi_lmul>
 80052dc:	0002      	movs	r2, r0
 80052de:	000b      	movs	r3, r1
 80052e0:	0010      	movs	r0, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	001c      	movs	r4, r3
 80052e8:	2300      	movs	r3, #0
 80052ea:	001d      	movs	r5, r3
 80052ec:	0022      	movs	r2, r4
 80052ee:	002b      	movs	r3, r5
 80052f0:	f7fb f892 	bl	8000418 <__aeabi_uldivmod>
 80052f4:	0002      	movs	r2, r0
 80052f6:	000b      	movs	r3, r1
 80052f8:	0013      	movs	r3, r2
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005300:	e00d      	b.n	800531e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_RCC_GetSysClockFreq+0x138>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	0b5b      	lsrs	r3, r3, #13
 8005308:	2207      	movs	r2, #7
 800530a:	4013      	ands	r3, r2
 800530c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	3301      	adds	r3, #1
 8005312:	2280      	movs	r2, #128	; 0x80
 8005314:	0212      	lsls	r2, r2, #8
 8005316:	409a      	lsls	r2, r3
 8005318:	0013      	movs	r3, r2
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800531c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b00e      	add	sp, #56	; 0x38
 8005326:	bdb0      	pop	{r4, r5, r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	003d0900 	.word	0x003d0900
 8005330:	00f42400 	.word	0x00f42400
 8005334:	007a1200 	.word	0x007a1200
 8005338:	0800a614 	.word	0x0800a614

0800533c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005340:	4b02      	ldr	r3, [pc, #8]	; (800534c <HAL_RCC_GetHCLKFreq+0x10>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	0018      	movs	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	20000014 	.word	0x20000014

08005350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005354:	f7ff fff2 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8005358:	0001      	movs	r1, r0
 800535a:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	2207      	movs	r2, #7
 8005362:	4013      	ands	r3, r2
 8005364:	4a04      	ldr	r2, [pc, #16]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005366:	5cd3      	ldrb	r3, [r2, r3]
 8005368:	40d9      	lsrs	r1, r3
 800536a:	000b      	movs	r3, r1
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	40021000 	.word	0x40021000
 8005378:	0800a60c 	.word	0x0800a60c

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005380:	f7ff ffdc 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8005384:	0001      	movs	r1, r0
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	0adb      	lsrs	r3, r3, #11
 800538c:	2207      	movs	r2, #7
 800538e:	4013      	ands	r3, r2
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	40d9      	lsrs	r1, r3
 8005396:	000b      	movs	r3, r1
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	40021000 	.word	0x40021000
 80053a4:	0800a60c 	.word	0x0800a60c

080053a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCC_NMI_IRQHandler+0x28>)
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	401a      	ands	r2, r3
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d105      	bne.n	80053ca <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80053be:	f000 f809 	bl	80053d4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80053c2:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <HAL_RCC_NMI_IRQHandler+0x28>)
 80053c4:	2280      	movs	r2, #128	; 0x80
 80053c6:	0052      	lsls	r2, r2, #1
 80053c8:	619a      	str	r2, [r3, #24]
  }
}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000

080053d4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80053d8:	46c0      	nop			; (mov r8, r8)
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80053e8:	2317      	movs	r3, #23
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2220      	movs	r2, #32
 80053f6:	4013      	ands	r3, r2
 80053f8:	d106      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	2380      	movs	r3, #128	; 0x80
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	4013      	ands	r3, r2
 8005404:	d100      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005406:	e0d9      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005408:	4ba4      	ldr	r3, [pc, #656]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800540a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	055b      	lsls	r3, r3, #21
 8005410:	4013      	ands	r3, r2
 8005412:	d10a      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005414:	4ba1      	ldr	r3, [pc, #644]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005418:	4ba0      	ldr	r3, [pc, #640]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	0549      	lsls	r1, r1, #21
 800541e:	430a      	orrs	r2, r1
 8005420:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005422:	2317      	movs	r3, #23
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	2201      	movs	r2, #1
 8005428:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800542a:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4013      	ands	r3, r2
 8005434:	d11a      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005436:	4b9a      	ldr	r3, [pc, #616]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	4b99      	ldr	r3, [pc, #612]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	0049      	lsls	r1, r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005444:	f7fe f982 	bl	800374c <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544c:	e008      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544e:	f7fe f97d 	bl	800374c <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b64      	cmp	r3, #100	; 0x64
 800545a:	d901      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e118      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005460:	4b8f      	ldr	r3, [pc, #572]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4013      	ands	r3, r2
 800546a:	d0f0      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800546c:	4b8b      	ldr	r3, [pc, #556]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	23c0      	movs	r3, #192	; 0xc0
 8005472:	039b      	lsls	r3, r3, #14
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	23c0      	movs	r3, #192	; 0xc0
 800547e:	039b      	lsls	r3, r3, #14
 8005480:	4013      	ands	r3, r2
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	429a      	cmp	r2, r3
 8005486:	d107      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	23c0      	movs	r3, #192	; 0xc0
 800548e:	039b      	lsls	r3, r3, #14
 8005490:	4013      	ands	r3, r2
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	429a      	cmp	r2, r3
 8005496:	d013      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	23c0      	movs	r3, #192	; 0xc0
 800549e:	029b      	lsls	r3, r3, #10
 80054a0:	401a      	ands	r2, r3
 80054a2:	23c0      	movs	r3, #192	; 0xc0
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d10a      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054aa:	4b7c      	ldr	r3, [pc, #496]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	401a      	ands	r2, r3
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	029b      	lsls	r3, r3, #10
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d101      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0e8      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80054c0:	4b76      	ldr	r3, [pc, #472]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80054c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054c4:	23c0      	movs	r3, #192	; 0xc0
 80054c6:	029b      	lsls	r3, r3, #10
 80054c8:	4013      	ands	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d049      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	23c0      	movs	r3, #192	; 0xc0
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	4013      	ands	r3, r2
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d004      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2220      	movs	r2, #32
 80054e8:	4013      	ands	r3, r2
 80054ea:	d10d      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	23c0      	movs	r3, #192	; 0xc0
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	4013      	ands	r3, r2
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d034      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	4013      	ands	r3, r2
 8005506:	d02e      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005508:	4b64      	ldr	r3, [pc, #400]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	4a65      	ldr	r2, [pc, #404]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800550e:	4013      	ands	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005512:	4b62      	ldr	r3, [pc, #392]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005516:	4b61      	ldr	r3, [pc, #388]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	0309      	lsls	r1, r1, #12
 800551c:	430a      	orrs	r2, r1
 800551e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005520:	4b5e      	ldr	r3, [pc, #376]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005524:	4b5d      	ldr	r3, [pc, #372]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005526:	4960      	ldr	r1, [pc, #384]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005528:	400a      	ands	r2, r1
 800552a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800552c:	4b5b      	ldr	r3, [pc, #364]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	4013      	ands	r3, r2
 800553a:	d014      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fe f906 	bl	800374c <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005544:	e009      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005546:	f7fe f901 	bl	800374c <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	4a56      	ldr	r2, [pc, #344]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e09b      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800555a:	4b50      	ldr	r3, [pc, #320]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800555c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4013      	ands	r3, r2
 8005564:	d0ef      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	23c0      	movs	r3, #192	; 0xc0
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	401a      	ands	r2, r3
 8005570:	23c0      	movs	r3, #192	; 0xc0
 8005572:	029b      	lsls	r3, r3, #10
 8005574:	429a      	cmp	r2, r3
 8005576:	d10c      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005578:	4b48      	ldr	r3, [pc, #288]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a4c      	ldr	r2, [pc, #304]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800557e:	4013      	ands	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	23c0      	movs	r3, #192	; 0xc0
 8005588:	039b      	lsls	r3, r3, #14
 800558a:	401a      	ands	r2, r3
 800558c:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	4b42      	ldr	r3, [pc, #264]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005594:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	23c0      	movs	r3, #192	; 0xc0
 800559c:	029b      	lsls	r3, r3, #10
 800559e:	401a      	ands	r2, r3
 80055a0:	4b3e      	ldr	r3, [pc, #248]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055a2:	430a      	orrs	r2, r1
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055a6:	2317      	movs	r3, #23
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b0:	4b3a      	ldr	r3, [pc, #232]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055b6:	493f      	ldr	r1, [pc, #252]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055b8:	400a      	ands	r2, r1
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2201      	movs	r2, #1
 80055c2:	4013      	ands	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055c6:	4b35      	ldr	r3, [pc, #212]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ca:	2203      	movs	r2, #3
 80055cc:	4393      	bics	r3, r2
 80055ce:	0019      	movs	r1, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	4b31      	ldr	r3, [pc, #196]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055d6:	430a      	orrs	r2, r1
 80055d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2202      	movs	r2, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055e4:	4b2d      	ldr	r3, [pc, #180]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e8:	220c      	movs	r2, #12
 80055ea:	4393      	bics	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	4b2a      	ldr	r3, [pc, #168]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055f4:	430a      	orrs	r2, r1
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2204      	movs	r2, #4
 80055fe:	4013      	ands	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005602:	4b26      	ldr	r3, [pc, #152]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005606:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005608:	4013      	ands	r3, r2
 800560a:	0019      	movs	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	4b22      	ldr	r3, [pc, #136]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005612:	430a      	orrs	r2, r1
 8005614:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2208      	movs	r2, #8
 800561c:	4013      	ands	r3, r2
 800561e:	d009      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005624:	4a25      	ldr	r2, [pc, #148]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005626:	4013      	ands	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	4b1b      	ldr	r3, [pc, #108]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005630:	430a      	orrs	r2, r1
 8005632:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4013      	ands	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005644:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005646:	4013      	ands	r3, r2
 8005648:	0019      	movs	r1, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	4b13      	ldr	r3, [pc, #76]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005650:	430a      	orrs	r2, r1
 8005652:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2240      	movs	r2, #64	; 0x40
 800565a:	4013      	ands	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005664:	4013      	ands	r3, r2
 8005666:	0019      	movs	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800566e:	430a      	orrs	r2, r1
 8005670:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2280      	movs	r2, #128	; 0x80
 8005678:	4013      	ands	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800567c:	4b07      	ldr	r3, [pc, #28]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800567e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005680:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005682:	4013      	ands	r3, r2
 8005684:	0019      	movs	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800568c:	430a      	orrs	r2, r1
 800568e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b006      	add	sp, #24
 8005698:	bd80      	pop	{r7, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	40021000 	.word	0x40021000
 80056a0:	40007000 	.word	0x40007000
 80056a4:	fffcffff 	.word	0xfffcffff
 80056a8:	fff7ffff 	.word	0xfff7ffff
 80056ac:	00001388 	.word	0x00001388
 80056b0:	ffcfffff 	.word	0xffcfffff
 80056b4:	efffffff 	.word	0xefffffff
 80056b8:	fffff3ff 	.word	0xfffff3ff
 80056bc:	ffffcfff 	.word	0xffffcfff
 80056c0:	fbffffff 	.word	0xfbffffff
 80056c4:	fff3ffff 	.word	0xfff3ffff

080056c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e032      	b.n	8005740 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2239      	movs	r2, #57	; 0x39
 80056de:	5c9b      	ldrb	r3, [r3, r2]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2238      	movs	r2, #56	; 0x38
 80056ea:	2100      	movs	r1, #0
 80056ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f7fd fee9 	bl	80034c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2239      	movs	r2, #57	; 0x39
 80056fa:	2102      	movs	r1, #2
 80056fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	0019      	movs	r1, r3
 8005708:	0010      	movs	r0, r2
 800570a:	f000 fae3 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	223e      	movs	r2, #62	; 0x3e
 8005712:	2101      	movs	r1, #1
 8005714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	223a      	movs	r2, #58	; 0x3a
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	223b      	movs	r2, #59	; 0x3b
 8005722:	2101      	movs	r1, #1
 8005724:	5499      	strb	r1, [r3, r2]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	223c      	movs	r2, #60	; 0x3c
 800572a:	2101      	movs	r1, #1
 800572c:	5499      	strb	r1, [r3, r2]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	223d      	movs	r2, #61	; 0x3d
 8005732:	2101      	movs	r1, #1
 8005734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2239      	movs	r2, #57	; 0x39
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b002      	add	sp, #8
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2239      	movs	r2, #57	; 0x39
 8005754:	5c9b      	ldrb	r3, [r3, r2]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d001      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e03b      	b.n	80057d8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2239      	movs	r2, #57	; 0x39
 8005764:	2102      	movs	r1, #2
 8005766:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2101      	movs	r1, #1
 8005774:	430a      	orrs	r2, r1
 8005776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	2380      	movs	r3, #128	; 0x80
 800577e:	05db      	lsls	r3, r3, #23
 8005780:	429a      	cmp	r2, r3
 8005782:	d00e      	beq.n	80057a2 <HAL_TIM_Base_Start_IT+0x5a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <HAL_TIM_Base_Start_IT+0x98>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d009      	beq.n	80057a2 <HAL_TIM_Base_Start_IT+0x5a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_TIM_Base_Start_IT+0x5a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d111      	bne.n	80057c6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2207      	movs	r2, #7
 80057aa:	4013      	ands	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b06      	cmp	r3, #6
 80057b2:	d010      	beq.n	80057d6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2101      	movs	r1, #1
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c4:	e007      	b.n	80057d6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2101      	movs	r1, #1
 80057d2:	430a      	orrs	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b004      	add	sp, #16
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40000400 	.word	0x40000400
 80057e4:	40010800 	.word	0x40010800
 80057e8:	40011400 	.word	0x40011400

080057ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	438a      	bics	r2, r1
 8005802:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <HAL_TIM_Base_Stop_IT+0x48>)
 800580c:	4013      	ands	r3, r2
 800580e:	d107      	bne.n	8005820 <HAL_TIM_Base_Stop_IT+0x34>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2101      	movs	r1, #1
 800581c:	438a      	bics	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2239      	movs	r2, #57	; 0x39
 8005824:	2101      	movs	r1, #1
 8005826:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	0018      	movs	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	b002      	add	sp, #8
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	00001111 	.word	0x00001111

08005838 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e088      	b.n	800595e <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2239      	movs	r2, #57	; 0x39
 8005850:	5c9b      	ldrb	r3, [r3, r2]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d107      	bne.n	8005868 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2238      	movs	r2, #56	; 0x38
 800585c:	2100      	movs	r1, #0
 800585e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0018      	movs	r0, r3
 8005864:	f7fd fde6 	bl	8003434 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2239      	movs	r2, #57	; 0x39
 800586c:	2102      	movs	r1, #2
 800586e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	493b      	ldr	r1, [pc, #236]	; (8005968 <HAL_TIM_Encoder_Init+0x130>)
 800587c:	400a      	ands	r2, r1
 800587e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	0019      	movs	r1, r3
 800588a:	0010      	movs	r0, r2
 800588c:	f000 fa22 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_TIM_Encoder_Init+0x134>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	4313      	orrs	r3, r2
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4a28      	ldr	r2, [pc, #160]	; (8005970 <HAL_TIM_Encoder_Init+0x138>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4a27      	ldr	r2, [pc, #156]	; (8005974 <HAL_TIM_Encoder_Init+0x13c>)
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	4313      	orrs	r3, r2
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	011a      	lsls	r2, r3, #4
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	4313      	orrs	r3, r2
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2222      	movs	r2, #34	; 0x22
 8005906:	4393      	bics	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2288      	movs	r2, #136	; 0x88
 800590e:	4393      	bics	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	4313      	orrs	r3, r2
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	223e      	movs	r2, #62	; 0x3e
 8005940:	2101      	movs	r1, #1
 8005942:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	223a      	movs	r2, #58	; 0x3a
 8005948:	2101      	movs	r1, #1
 800594a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	223b      	movs	r2, #59	; 0x3b
 8005950:	2101      	movs	r1, #1
 8005952:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2239      	movs	r2, #57	; 0x39
 8005958:	2101      	movs	r1, #1
 800595a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b006      	add	sp, #24
 8005964:	bd80      	pop	{r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	ffffbff8 	.word	0xffffbff8
 800596c:	fffffcfc 	.word	0xfffffcfc
 8005970:	fffff3f3 	.word	0xfffff3f3
 8005974:	ffff0f0f 	.word	0xffff0f0f

08005978 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005982:	200f      	movs	r0, #15
 8005984:	183b      	adds	r3, r7, r0
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	213a      	movs	r1, #58	; 0x3a
 800598a:	5c52      	ldrb	r2, [r2, r1]
 800598c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800598e:	230e      	movs	r3, #14
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	213b      	movs	r1, #59	; 0x3b
 8005996:	5c52      	ldrb	r2, [r2, r1]
 8005998:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <HAL_TIM_Encoder_Start_IT+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059a0:	183b      	adds	r3, r7, r0
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Encoder_Start_IT+0x34>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e076      	b.n	8005a9a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	223a      	movs	r2, #58	; 0x3a
 80059b0:	2102      	movs	r1, #2
 80059b2:	5499      	strb	r1, [r3, r2]
 80059b4:	e022      	b.n	80059fc <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d10b      	bne.n	80059d4 <HAL_TIM_Encoder_Start_IT+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059bc:	230e      	movs	r3, #14
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d001      	beq.n	80059ca <HAL_TIM_Encoder_Start_IT+0x52>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e067      	b.n	8005a9a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	223b      	movs	r2, #59	; 0x3b
 80059ce:	2102      	movs	r1, #2
 80059d0:	5499      	strb	r1, [r3, r2]
 80059d2:	e013      	b.n	80059fc <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059d4:	230f      	movs	r3, #15
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d104      	bne.n	80059e8 <HAL_TIM_Encoder_Start_IT+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059de:	230e      	movs	r3, #14
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d001      	beq.n	80059ec <HAL_TIM_Encoder_Start_IT+0x74>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e056      	b.n	8005a9a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	223a      	movs	r2, #58	; 0x3a
 80059f0:	2102      	movs	r1, #2
 80059f2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	223b      	movs	r2, #59	; 0x3b
 80059f8:	2102      	movs	r1, #2
 80059fa:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_Encoder_Start_IT+0x92>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d010      	beq.n	8005a2a <HAL_TIM_Encoder_Start_IT+0xb2>
 8005a08:	e01f      	b.n	8005a4a <HAL_TIM_Encoder_Start_IT+0xd2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	2100      	movs	r1, #0
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f9bc 	bl	8005d90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2102      	movs	r1, #2
 8005a24:	430a      	orrs	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]
      break;
 8005a28:	e02e      	b.n	8005a88 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	2104      	movs	r1, #4
 8005a32:	0018      	movs	r0, r3
 8005a34:	f000 f9ac 	bl	8005d90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2104      	movs	r1, #4
 8005a44:	430a      	orrs	r2, r1
 8005a46:	60da      	str	r2, [r3, #12]
      break;
 8005a48:	e01e      	b.n	8005a88 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2100      	movs	r1, #0
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 f99c 	bl	8005d90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	2104      	movs	r1, #4
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 f995 	bl	8005d90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2102      	movs	r1, #2
 8005a72:	430a      	orrs	r2, r1
 8005a74:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2104      	movs	r1, #4
 8005a82:	430a      	orrs	r2, r1
 8005a84:	60da      	str	r2, [r3, #12]
      break;
 8005a86:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2101      	movs	r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b004      	add	sp, #16
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d124      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d11d      	bne.n	8005b02 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2203      	movs	r2, #3
 8005acc:	4252      	negs	r2, r2
 8005ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2203      	movs	r2, #3
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7fa ffc7 	bl	8000a78 <HAL_TIM_IC_CaptureCallback>
 8005aea:	e007      	b.n	8005afc <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 f8bf 	bl	8005c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f000 f8c3 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d125      	bne.n	8005b5c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2204      	movs	r2, #4
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d11e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2205      	movs	r2, #5
 8005b24:	4252      	negs	r2, r2
 8005b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	23c0      	movs	r3, #192	; 0xc0
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f7fa ff9a 	bl	8000a78 <HAL_TIM_IC_CaptureCallback>
 8005b44:	e007      	b.n	8005b56 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f892 	bl	8005c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 f896 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2208      	movs	r2, #8
 8005b64:	4013      	ands	r3, r2
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d124      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2208      	movs	r2, #8
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d11d      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2209      	movs	r2, #9
 8005b7e:	4252      	negs	r2, r2
 8005b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	4013      	ands	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7fa ff6e 	bl	8000a78 <HAL_TIM_IC_CaptureCallback>
 8005b9c:	e007      	b.n	8005bae <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f000 f866 	bl	8005c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f000 f86a 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2210      	movs	r2, #16
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b10      	cmp	r3, #16
 8005bc0:	d125      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2210      	movs	r2, #16
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d11e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2211      	movs	r2, #17
 8005bd6:	4252      	negs	r2, r2
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69da      	ldr	r2, [r3, #28]
 8005be6:	23c0      	movs	r3, #192	; 0xc0
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4013      	ands	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7fa ff41 	bl	8000a78 <HAL_TIM_IC_CaptureCallback>
 8005bf6:	e007      	b.n	8005c08 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 f839 	bl	8005c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 f83d 	bl	8005c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2201      	movs	r2, #1
 8005c16:	4013      	ands	r3, r2
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10f      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d108      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4252      	negs	r2, r2
 8005c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0018      	movs	r0, r3
 8005c38:	f7fa ff4a 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2240      	movs	r2, #64	; 0x40
 8005c44:	4013      	ands	r3, r2
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d10f      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d108      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2241      	movs	r2, #65	; 0x41
 8005c5e:	4252      	negs	r2, r2
 8005c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0018      	movs	r0, r3
 8005c66:	f000 f814 	bl	8005c92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b002      	add	sp, #8
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b002      	add	sp, #8
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b002      	add	sp, #8
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2239      	movs	r2, #57	; 0x39
 8005cae:	5c9b      	ldrb	r3, [r3, r2]
 8005cb0:	b2db      	uxtb	r3, r3
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b002      	add	sp, #8
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2239      	movs	r2, #57	; 0x39
 8005cc6:	5c9b      	ldrb	r3, [r3, r2]
 8005cc8:	b2db      	uxtb	r3, r3
}
 8005cca:	0018      	movs	r0, r3
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b002      	add	sp, #8
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	05db      	lsls	r3, r3, #23
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0x32>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <TIM_Base_SetConfig+0xac>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0x32>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <TIM_Base_SetConfig+0xb0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0x32>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <TIM_Base_SetConfig+0xb4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2270      	movs	r2, #112	; 0x70
 8005d0a:	4393      	bics	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	05db      	lsls	r3, r3, #23
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0x66>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <TIM_Base_SetConfig+0xac>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0x66>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TIM_Base_SetConfig+0xb0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0x66>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <TIM_Base_SetConfig+0xb4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <TIM_Base_SetConfig+0xb8>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2280      	movs	r2, #128	; 0x80
 8005d50:	4393      	bics	r3, r2
 8005d52:	001a      	movs	r2, r3
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	615a      	str	r2, [r3, #20]
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b004      	add	sp, #16
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40010800 	.word	0x40010800
 8005d88:	40011400 	.word	0x40011400
 8005d8c:	fffffcff 	.word	0xfffffcff

08005d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	221f      	movs	r2, #31
 8005da0:	4013      	ands	r3, r2
 8005da2:	2201      	movs	r2, #1
 8005da4:	409a      	lsls	r2, r3
 8005da6:	0013      	movs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	43d2      	mvns	r2, r2
 8005db2:	401a      	ands	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a1a      	ldr	r2, [r3, #32]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	211f      	movs	r1, #31
 8005dc0:	400b      	ands	r3, r1
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4099      	lsls	r1, r3
 8005dc6:	000b      	movs	r3, r1
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b006      	add	sp, #24
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2238      	movs	r2, #56	; 0x38
 8005de6:	5c9b      	ldrb	r3, [r3, r2]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e047      	b.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2238      	movs	r2, #56	; 0x38
 8005df4:	2101      	movs	r1, #1
 8005df6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2239      	movs	r2, #57	; 0x39
 8005dfc:	2102      	movs	r1, #2
 8005dfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2270      	movs	r2, #112	; 0x70
 8005e14:	4393      	bics	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	05db      	lsls	r3, r3, #23
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d00e      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a11      	ldr	r2, [pc, #68]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10c      	bne.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	4393      	bics	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2239      	movs	r2, #57	; 0x39
 8005e72:	2101      	movs	r1, #1
 8005e74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2238      	movs	r2, #56	; 0x38
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b004      	add	sp, #16
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40010800 	.word	0x40010800
 8005e90:	40011400 	.word	0x40011400

08005e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e044      	b.n	8005f30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2274      	movs	r2, #116	; 0x74
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f7fd fb6b 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2224      	movs	r2, #36	; 0x24
 8005ec2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2101      	movs	r1, #1
 8005ed0:	438a      	bics	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 fbce 	bl	8006678 <UART_SetConfig>
 8005edc:	0003      	movs	r3, r0
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e024      	b.n	8005f30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 fe61 	bl	8006bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	490d      	ldr	r1, [pc, #52]	; (8005f38 <HAL_UART_Init+0xa4>)
 8005f02:	400a      	ands	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	212a      	movs	r1, #42	; 0x2a
 8005f12:	438a      	bics	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2101      	movs	r1, #1
 8005f22:	430a      	orrs	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 fef9 	bl	8006d20 <UART_CheckIdleState>
 8005f2e:	0003      	movs	r3, r0
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b002      	add	sp, #8
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	ffffb7ff 	.word	0xffffb7ff

08005f3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	; 0x28
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	1dbb      	adds	r3, r7, #6
 8005f4a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d000      	beq.n	8005f56 <HAL_UART_Transmit+0x1a>
 8005f54:	e095      	b.n	8006082 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_UART_Transmit+0x28>
 8005f5c:	1dbb      	adds	r3, r7, #6
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e08d      	b.n	8006084 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	015b      	lsls	r3, r3, #5
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d109      	bne.n	8005f88 <HAL_UART_Transmit+0x4c>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	4013      	ands	r3, r2
 8005f82:	d001      	beq.n	8005f88 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e07d      	b.n	8006084 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2274      	movs	r2, #116	; 0x74
 8005f8c:	5c9b      	ldrb	r3, [r3, r2]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Transmit+0x5a>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e076      	b.n	8006084 <HAL_UART_Transmit+0x148>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2274      	movs	r2, #116	; 0x74
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2221      	movs	r2, #33	; 0x21
 8005faa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fac:	f7fd fbce 	bl	800374c <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1dba      	adds	r2, r7, #6
 8005fb8:	2150      	movs	r1, #80	; 0x50
 8005fba:	8812      	ldrh	r2, [r2, #0]
 8005fbc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1dba      	adds	r2, r7, #6
 8005fc2:	2152      	movs	r1, #82	; 0x52
 8005fc4:	8812      	ldrh	r2, [r2, #0]
 8005fc6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	015b      	lsls	r3, r3, #5
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d108      	bne.n	8005fe6 <HAL_UART_Transmit+0xaa>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e003      	b.n	8005fee <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2274      	movs	r2, #116	; 0x74
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005ff6:	e02c      	b.n	8006052 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	0013      	movs	r3, r2
 8006002:	2200      	movs	r2, #0
 8006004:	2180      	movs	r1, #128	; 0x80
 8006006:	f000 fed3 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 800600a:	1e03      	subs	r3, r0, #0
 800600c:	d001      	beq.n	8006012 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e038      	b.n	8006084 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	001a      	movs	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	05d2      	lsls	r2, r2, #23
 8006024:	0dd2      	lsrs	r2, r2, #23
 8006026:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	3302      	adds	r3, #2
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e007      	b.n	8006040 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	3301      	adds	r3, #1
 800603e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2252      	movs	r2, #82	; 0x52
 8006044:	5a9b      	ldrh	r3, [r3, r2]
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b299      	uxth	r1, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2252      	movs	r2, #82	; 0x52
 8006050:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2252      	movs	r2, #82	; 0x52
 8006056:	5a9b      	ldrh	r3, [r3, r2]
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1cc      	bne.n	8005ff8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	0013      	movs	r3, r2
 8006068:	2200      	movs	r2, #0
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	f000 fea0 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 8006070:	1e03      	subs	r3, r0, #0
 8006072:	d001      	beq.n	8006078 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e005      	b.n	8006084 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	e000      	b.n	8006084 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006082:	2302      	movs	r3, #2
  }
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b008      	add	sp, #32
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b0ab      	sub	sp, #172	; 0xac
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	22a4      	movs	r2, #164	; 0xa4
 800609c:	18b9      	adds	r1, r7, r2
 800609e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	20a0      	movs	r0, #160	; 0xa0
 80060a8:	1839      	adds	r1, r7, r0
 80060aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	219c      	movs	r1, #156	; 0x9c
 80060b4:	1879      	adds	r1, r7, r1
 80060b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060b8:	0011      	movs	r1, r2
 80060ba:	18bb      	adds	r3, r7, r2
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a99      	ldr	r2, [pc, #612]	; (8006324 <HAL_UART_IRQHandler+0x298>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	2298      	movs	r2, #152	; 0x98
 80060c4:	18bc      	adds	r4, r7, r2
 80060c6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80060c8:	18bb      	adds	r3, r7, r2
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d114      	bne.n	80060fa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060d0:	187b      	adds	r3, r7, r1
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2220      	movs	r2, #32
 80060d6:	4013      	ands	r3, r2
 80060d8:	d00f      	beq.n	80060fa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060da:	183b      	adds	r3, r7, r0
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2220      	movs	r2, #32
 80060e0:	4013      	ands	r3, r2
 80060e2:	d00a      	beq.n	80060fa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d100      	bne.n	80060ee <HAL_UART_IRQHandler+0x62>
 80060ec:	e298      	b.n	8006620 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	0010      	movs	r0, r2
 80060f6:	4798      	blx	r3
      }
      return;
 80060f8:	e292      	b.n	8006620 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060fa:	2398      	movs	r3, #152	; 0x98
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d100      	bne.n	8006106 <HAL_UART_IRQHandler+0x7a>
 8006104:	e114      	b.n	8006330 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006106:	239c      	movs	r3, #156	; 0x9c
 8006108:	18fb      	adds	r3, r7, r3
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	4013      	ands	r3, r2
 8006110:	d106      	bne.n	8006120 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006112:	23a0      	movs	r3, #160	; 0xa0
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a83      	ldr	r2, [pc, #524]	; (8006328 <HAL_UART_IRQHandler+0x29c>)
 800611a:	4013      	ands	r3, r2
 800611c:	d100      	bne.n	8006120 <HAL_UART_IRQHandler+0x94>
 800611e:	e107      	b.n	8006330 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006120:	23a4      	movs	r3, #164	; 0xa4
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2201      	movs	r2, #1
 8006128:	4013      	ands	r3, r2
 800612a:	d012      	beq.n	8006152 <HAL_UART_IRQHandler+0xc6>
 800612c:	23a0      	movs	r3, #160	; 0xa0
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	4013      	ands	r3, r2
 8006138:	d00b      	beq.n	8006152 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	589b      	ldr	r3, [r3, r2]
 8006148:	2201      	movs	r2, #1
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006152:	23a4      	movs	r3, #164	; 0xa4
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2202      	movs	r2, #2
 800615a:	4013      	ands	r3, r2
 800615c:	d011      	beq.n	8006182 <HAL_UART_IRQHandler+0xf6>
 800615e:	239c      	movs	r3, #156	; 0x9c
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2201      	movs	r2, #1
 8006166:	4013      	ands	r3, r2
 8006168:	d00b      	beq.n	8006182 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2202      	movs	r2, #2
 8006170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2280      	movs	r2, #128	; 0x80
 8006176:	589b      	ldr	r3, [r3, r2]
 8006178:	2204      	movs	r2, #4
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2180      	movs	r1, #128	; 0x80
 8006180:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006182:	23a4      	movs	r3, #164	; 0xa4
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2204      	movs	r2, #4
 800618a:	4013      	ands	r3, r2
 800618c:	d011      	beq.n	80061b2 <HAL_UART_IRQHandler+0x126>
 800618e:	239c      	movs	r3, #156	; 0x9c
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	4013      	ands	r3, r2
 8006198:	d00b      	beq.n	80061b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2204      	movs	r2, #4
 80061a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2280      	movs	r2, #128	; 0x80
 80061a6:	589b      	ldr	r3, [r3, r2]
 80061a8:	2202      	movs	r2, #2
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061b2:	23a4      	movs	r3, #164	; 0xa4
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2208      	movs	r2, #8
 80061ba:	4013      	ands	r3, r2
 80061bc:	d017      	beq.n	80061ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061be:	23a0      	movs	r3, #160	; 0xa0
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2220      	movs	r2, #32
 80061c6:	4013      	ands	r3, r2
 80061c8:	d105      	bne.n	80061d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061ca:	239c      	movs	r3, #156	; 0x9c
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2201      	movs	r2, #1
 80061d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061d4:	d00b      	beq.n	80061ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2208      	movs	r2, #8
 80061dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2280      	movs	r2, #128	; 0x80
 80061e2:	589b      	ldr	r3, [r3, r2]
 80061e4:	2208      	movs	r2, #8
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2180      	movs	r1, #128	; 0x80
 80061ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061ee:	23a4      	movs	r3, #164	; 0xa4
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4013      	ands	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_UART_IRQHandler+0x198>
 80061fc:	23a0      	movs	r3, #160	; 0xa0
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	04db      	lsls	r3, r3, #19
 8006206:	4013      	ands	r3, r2
 8006208:	d00c      	beq.n	8006224 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	0112      	lsls	r2, r2, #4
 8006212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2280      	movs	r2, #128	; 0x80
 8006218:	589b      	ldr	r3, [r3, r2]
 800621a:	2220      	movs	r2, #32
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2180      	movs	r1, #128	; 0x80
 8006222:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	589b      	ldr	r3, [r3, r2]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d100      	bne.n	8006230 <HAL_UART_IRQHandler+0x1a4>
 800622e:	e1f9      	b.n	8006624 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006230:	23a4      	movs	r3, #164	; 0xa4
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2220      	movs	r2, #32
 8006238:	4013      	ands	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800623c:	23a0      	movs	r3, #160	; 0xa0
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2220      	movs	r2, #32
 8006244:	4013      	ands	r3, r2
 8006246:	d008      	beq.n	800625a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	0010      	movs	r0, r2
 8006258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2280      	movs	r2, #128	; 0x80
 800625e:	589b      	ldr	r3, [r3, r2]
 8006260:	2194      	movs	r1, #148	; 0x94
 8006262:	187a      	adds	r2, r7, r1
 8006264:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2240      	movs	r2, #64	; 0x40
 800626e:	4013      	ands	r3, r2
 8006270:	2b40      	cmp	r3, #64	; 0x40
 8006272:	d004      	beq.n	800627e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006274:	187b      	adds	r3, r7, r1
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2228      	movs	r2, #40	; 0x28
 800627a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800627c:	d047      	beq.n	800630e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	0018      	movs	r0, r3
 8006282:	f000 fe59 	bl	8006f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2240      	movs	r2, #64	; 0x40
 800628e:	4013      	ands	r3, r2
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d137      	bne.n	8006304 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006294:	f3ef 8310 	mrs	r3, PRIMASK
 8006298:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800629a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629c:	2090      	movs	r0, #144	; 0x90
 800629e:	183a      	adds	r2, r7, r0
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	2301      	movs	r3, #1
 80062a4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a8:	f383 8810 	msr	PRIMASK, r3
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2140      	movs	r1, #64	; 0x40
 80062ba:	438a      	bics	r2, r1
 80062bc:	609a      	str	r2, [r3, #8]
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062c6:	f383 8810 	msr	PRIMASK, r3
}
 80062ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d012      	beq.n	80062fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	4a14      	ldr	r2, [pc, #80]	; (800632c <HAL_UART_IRQHandler+0x2a0>)
 80062da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7fd fb7f 	bl	80039e4 <HAL_DMA_Abort_IT>
 80062e6:	1e03      	subs	r3, r0, #0
 80062e8:	d01a      	beq.n	8006320 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f4:	0018      	movs	r0, r3
 80062f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	e012      	b.n	8006320 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	0018      	movs	r0, r3
 80062fe:	f000 f9a7 	bl	8006650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006302:	e00d      	b.n	8006320 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	f000 f9a2 	bl	8006650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	e008      	b.n	8006320 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	0018      	movs	r0, r3
 8006312:	f000 f99d 	bl	8006650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	2100      	movs	r1, #0
 800631c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800631e:	e181      	b.n	8006624 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	46c0      	nop			; (mov r8, r8)
    return;
 8006322:	e17f      	b.n	8006624 <HAL_UART_IRQHandler+0x598>
 8006324:	0000080f 	.word	0x0000080f
 8006328:	04000120 	.word	0x04000120
 800632c:	08006ffd 	.word	0x08006ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006334:	2b01      	cmp	r3, #1
 8006336:	d000      	beq.n	800633a <HAL_UART_IRQHandler+0x2ae>
 8006338:	e133      	b.n	80065a2 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800633a:	23a4      	movs	r3, #164	; 0xa4
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2210      	movs	r2, #16
 8006342:	4013      	ands	r3, r2
 8006344:	d100      	bne.n	8006348 <HAL_UART_IRQHandler+0x2bc>
 8006346:	e12c      	b.n	80065a2 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006348:	23a0      	movs	r3, #160	; 0xa0
 800634a:	18fb      	adds	r3, r7, r3
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2210      	movs	r2, #16
 8006350:	4013      	ands	r3, r2
 8006352:	d100      	bne.n	8006356 <HAL_UART_IRQHandler+0x2ca>
 8006354:	e125      	b.n	80065a2 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2210      	movs	r2, #16
 800635c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	4013      	ands	r3, r2
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d000      	beq.n	800636e <HAL_UART_IRQHandler+0x2e2>
 800636c:	e09d      	b.n	80064aa <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	217e      	movs	r1, #126	; 0x7e
 8006378:	187b      	adds	r3, r7, r1
 800637a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800637c:	187b      	adds	r3, r7, r1
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d100      	bne.n	8006386 <HAL_UART_IRQHandler+0x2fa>
 8006384:	e150      	b.n	8006628 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2258      	movs	r2, #88	; 0x58
 800638a:	5a9b      	ldrh	r3, [r3, r2]
 800638c:	187a      	adds	r2, r7, r1
 800638e:	8812      	ldrh	r2, [r2, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d300      	bcc.n	8006396 <HAL_UART_IRQHandler+0x30a>
 8006394:	e148      	b.n	8006628 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	187a      	adds	r2, r7, r1
 800639a:	215a      	movs	r1, #90	; 0x5a
 800639c:	8812      	ldrh	r2, [r2, #0]
 800639e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2220      	movs	r2, #32
 80063aa:	4013      	ands	r3, r2
 80063ac:	d16e      	bne.n	800648c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ae:	f3ef 8310 	mrs	r3, PRIMASK
 80063b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80063b8:	2301      	movs	r3, #1
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	f383 8810 	msr	PRIMASK, r3
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	499a      	ldr	r1, [pc, #616]	; (8006638 <HAL_UART_IRQHandler+0x5ac>)
 80063d0:	400a      	ands	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f383 8810 	msr	PRIMASK, r3
}
 80063de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e0:	f3ef 8310 	mrs	r3, PRIMASK
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e8:	677b      	str	r3, [r7, #116]	; 0x74
 80063ea:	2301      	movs	r3, #1
 80063ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f0:	f383 8810 	msr	PRIMASK, r3
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2101      	movs	r1, #1
 8006402:	438a      	bics	r2, r1
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006408:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800640a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800640c:	f383 8810 	msr	PRIMASK, r3
}
 8006410:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006412:	f3ef 8310 	mrs	r3, PRIMASK
 8006416:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006418:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641a:	673b      	str	r3, [r7, #112]	; 0x70
 800641c:	2301      	movs	r3, #1
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006422:	f383 8810 	msr	PRIMASK, r3
}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2140      	movs	r1, #64	; 0x40
 8006434:	438a      	bics	r2, r1
 8006436:	609a      	str	r2, [r3, #8]
 8006438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800643a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800643e:	f383 8810 	msr	PRIMASK, r3
}
 8006442:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006450:	f3ef 8310 	mrs	r3, PRIMASK
 8006454:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006456:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800645a:	2301      	movs	r3, #1
 800645c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006460:	f383 8810 	msr	PRIMASK, r3
}
 8006464:	46c0      	nop			; (mov r8, r8)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2110      	movs	r1, #16
 8006472:	438a      	bics	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006478:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647c:	f383 8810 	msr	PRIMASK, r3
}
 8006480:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	0018      	movs	r0, r3
 8006488:	f7fd fa6c 	bl	8003964 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2258      	movs	r2, #88	; 0x58
 8006490:	5a9a      	ldrh	r2, [r3, r2]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	215a      	movs	r1, #90	; 0x5a
 8006496:	5a5b      	ldrh	r3, [r3, r1]
 8006498:	b29b      	uxth	r3, r3
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	b29a      	uxth	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	0011      	movs	r1, r2
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 f8dc 	bl	8006660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064a8:	e0be      	b.n	8006628 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2258      	movs	r2, #88	; 0x58
 80064ae:	5a99      	ldrh	r1, [r3, r2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	225a      	movs	r2, #90	; 0x5a
 80064b4:	5a9b      	ldrh	r3, [r3, r2]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	208e      	movs	r0, #142	; 0x8e
 80064ba:	183b      	adds	r3, r7, r0
 80064bc:	1a8a      	subs	r2, r1, r2
 80064be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	225a      	movs	r2, #90	; 0x5a
 80064c4:	5a9b      	ldrh	r3, [r3, r2]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d100      	bne.n	80064ce <HAL_UART_IRQHandler+0x442>
 80064cc:	e0ae      	b.n	800662c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80064ce:	183b      	adds	r3, r7, r0
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d100      	bne.n	80064d8 <HAL_UART_IRQHandler+0x44c>
 80064d6:	e0a9      	b.n	800662c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d8:	f3ef 8310 	mrs	r3, PRIMASK
 80064dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80064de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064e0:	2488      	movs	r4, #136	; 0x88
 80064e2:	193a      	adds	r2, r7, r4
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	2301      	movs	r3, #1
 80064e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f383 8810 	msr	PRIMASK, r3
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	494f      	ldr	r1, [pc, #316]	; (800663c <HAL_UART_IRQHandler+0x5b0>)
 80064fe:	400a      	ands	r2, r1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	193b      	adds	r3, r7, r4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f383 8810 	msr	PRIMASK, r3
}
 800650e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006510:	f3ef 8310 	mrs	r3, PRIMASK
 8006514:	61bb      	str	r3, [r7, #24]
  return(result);
 8006516:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006518:	2484      	movs	r4, #132	; 0x84
 800651a:	193a      	adds	r2, r7, r4
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	2301      	movs	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f383 8810 	msr	PRIMASK, r3
}
 8006528:	46c0      	nop			; (mov r8, r8)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2101      	movs	r1, #1
 8006536:	438a      	bics	r2, r1
 8006538:	609a      	str	r2, [r3, #8]
 800653a:	193b      	adds	r3, r7, r4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f383 8810 	msr	PRIMASK, r3
}
 8006546:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655a:	f3ef 8310 	mrs	r3, PRIMASK
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006562:	2480      	movs	r4, #128	; 0x80
 8006564:	193a      	adds	r2, r7, r4
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	2301      	movs	r3, #1
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	f383 8810 	msr	PRIMASK, r3
}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2110      	movs	r1, #16
 8006580:	438a      	bics	r2, r1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	193b      	adds	r3, r7, r4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006592:	183b      	adds	r3, r7, r0
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0011      	movs	r1, r2
 800659a:	0018      	movs	r0, r3
 800659c:	f000 f860 	bl	8006660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065a0:	e044      	b.n	800662c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065a2:	23a4      	movs	r3, #164	; 0xa4
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	035b      	lsls	r3, r3, #13
 80065ac:	4013      	ands	r3, r2
 80065ae:	d010      	beq.n	80065d2 <HAL_UART_IRQHandler+0x546>
 80065b0:	239c      	movs	r3, #156	; 0x9c
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	03db      	lsls	r3, r3, #15
 80065ba:	4013      	ands	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2280      	movs	r2, #128	; 0x80
 80065c4:	0352      	lsls	r2, r2, #13
 80065c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 fd58 	bl	8007080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065d0:	e02f      	b.n	8006632 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065d2:	23a4      	movs	r3, #164	; 0xa4
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	4013      	ands	r3, r2
 80065dc:	d00f      	beq.n	80065fe <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065de:	23a0      	movs	r3, #160	; 0xa0
 80065e0:	18fb      	adds	r3, r7, r3
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	4013      	ands	r3, r2
 80065e8:	d009      	beq.n	80065fe <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01e      	beq.n	8006630 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	0010      	movs	r0, r2
 80065fa:	4798      	blx	r3
    }
    return;
 80065fc:	e018      	b.n	8006630 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065fe:	23a4      	movs	r3, #164	; 0xa4
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2240      	movs	r2, #64	; 0x40
 8006606:	4013      	ands	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_UART_IRQHandler+0x5a6>
 800660a:	23a0      	movs	r3, #160	; 0xa0
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2240      	movs	r2, #64	; 0x40
 8006612:	4013      	ands	r3, r2
 8006614:	d00d      	beq.n	8006632 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 fd06 	bl	800702a <UART_EndTransmit_IT>
    return;
 800661e:	e008      	b.n	8006632 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	e006      	b.n	8006632 <HAL_UART_IRQHandler+0x5a6>
    return;
 8006624:	46c0      	nop			; (mov r8, r8)
 8006626:	e004      	b.n	8006632 <HAL_UART_IRQHandler+0x5a6>
      return;
 8006628:	46c0      	nop			; (mov r8, r8)
 800662a:	e002      	b.n	8006632 <HAL_UART_IRQHandler+0x5a6>
      return;
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	e000      	b.n	8006632 <HAL_UART_IRQHandler+0x5a6>
    return;
 8006630:	46c0      	nop			; (mov r8, r8)
  }

}
 8006632:	46bd      	mov	sp, r7
 8006634:	b02b      	add	sp, #172	; 0xac
 8006636:	bd90      	pop	{r4, r7, pc}
 8006638:	fffffeff 	.word	0xfffffeff
 800663c:	fffffedf 	.word	0xfffffedf

08006640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	46bd      	mov	sp, r7
 800664c:	b002      	add	sp, #8
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	46bd      	mov	sp, r7
 800665c:	b002      	add	sp, #8
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	000a      	movs	r2, r1
 800666a:	1cbb      	adds	r3, r7, #2
 800666c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	46bd      	mov	sp, r7
 8006672:	b002      	add	sp, #8
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006678:	b5b0      	push	{r4, r5, r7, lr}
 800667a:	b08e      	sub	sp, #56	; 0x38
 800667c:	af00      	add	r7, sp, #0
 800667e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006680:	231a      	movs	r3, #26
 8006682:	2218      	movs	r2, #24
 8006684:	189b      	adds	r3, r3, r2
 8006686:	19db      	adds	r3, r3, r7
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	431a      	orrs	r2, r3
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	431a      	orrs	r2, r3
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4ac3      	ldr	r2, [pc, #780]	; (80069b8 <UART_SetConfig+0x340>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	0019      	movs	r1, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b6:	430a      	orrs	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4abe      	ldr	r2, [pc, #760]	; (80069bc <UART_SetConfig+0x344>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	0019      	movs	r1, r3
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4ab8      	ldr	r2, [pc, #736]	; (80069c0 <UART_SetConfig+0x348>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e8:	4313      	orrs	r3, r2
 80066ea:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	4ab4      	ldr	r2, [pc, #720]	; (80069c4 <UART_SetConfig+0x34c>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	0019      	movs	r1, r3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fe:	430a      	orrs	r2, r1
 8006700:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4ab0      	ldr	r2, [pc, #704]	; (80069c8 <UART_SetConfig+0x350>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d131      	bne.n	8006770 <UART_SetConfig+0xf8>
 800670c:	4baf      	ldr	r3, [pc, #700]	; (80069cc <UART_SetConfig+0x354>)
 800670e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006710:	2203      	movs	r2, #3
 8006712:	4013      	ands	r3, r2
 8006714:	2b03      	cmp	r3, #3
 8006716:	d01d      	beq.n	8006754 <UART_SetConfig+0xdc>
 8006718:	d823      	bhi.n	8006762 <UART_SetConfig+0xea>
 800671a:	2b02      	cmp	r3, #2
 800671c:	d00c      	beq.n	8006738 <UART_SetConfig+0xc0>
 800671e:	d820      	bhi.n	8006762 <UART_SetConfig+0xea>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <UART_SetConfig+0xb2>
 8006724:	2b01      	cmp	r3, #1
 8006726:	d00e      	beq.n	8006746 <UART_SetConfig+0xce>
 8006728:	e01b      	b.n	8006762 <UART_SetConfig+0xea>
 800672a:	231b      	movs	r3, #27
 800672c:	2218      	movs	r2, #24
 800672e:	189b      	adds	r3, r3, r2
 8006730:	19db      	adds	r3, r3, r7
 8006732:	2201      	movs	r2, #1
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	e0b4      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006738:	231b      	movs	r3, #27
 800673a:	2218      	movs	r2, #24
 800673c:	189b      	adds	r3, r3, r2
 800673e:	19db      	adds	r3, r3, r7
 8006740:	2202      	movs	r2, #2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e0ad      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006746:	231b      	movs	r3, #27
 8006748:	2218      	movs	r2, #24
 800674a:	189b      	adds	r3, r3, r2
 800674c:	19db      	adds	r3, r3, r7
 800674e:	2204      	movs	r2, #4
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	e0a6      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006754:	231b      	movs	r3, #27
 8006756:	2218      	movs	r2, #24
 8006758:	189b      	adds	r3, r3, r2
 800675a:	19db      	adds	r3, r3, r7
 800675c:	2208      	movs	r2, #8
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	e09f      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006762:	231b      	movs	r3, #27
 8006764:	2218      	movs	r2, #24
 8006766:	189b      	adds	r3, r3, r2
 8006768:	19db      	adds	r3, r3, r7
 800676a:	2210      	movs	r2, #16
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e098      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a96      	ldr	r2, [pc, #600]	; (80069d0 <UART_SetConfig+0x358>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d131      	bne.n	80067de <UART_SetConfig+0x166>
 800677a:	4b94      	ldr	r3, [pc, #592]	; (80069cc <UART_SetConfig+0x354>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	220c      	movs	r2, #12
 8006780:	4013      	ands	r3, r2
 8006782:	2b0c      	cmp	r3, #12
 8006784:	d01d      	beq.n	80067c2 <UART_SetConfig+0x14a>
 8006786:	d823      	bhi.n	80067d0 <UART_SetConfig+0x158>
 8006788:	2b08      	cmp	r3, #8
 800678a:	d00c      	beq.n	80067a6 <UART_SetConfig+0x12e>
 800678c:	d820      	bhi.n	80067d0 <UART_SetConfig+0x158>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <UART_SetConfig+0x120>
 8006792:	2b04      	cmp	r3, #4
 8006794:	d00e      	beq.n	80067b4 <UART_SetConfig+0x13c>
 8006796:	e01b      	b.n	80067d0 <UART_SetConfig+0x158>
 8006798:	231b      	movs	r3, #27
 800679a:	2218      	movs	r2, #24
 800679c:	189b      	adds	r3, r3, r2
 800679e:	19db      	adds	r3, r3, r7
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e07d      	b.n	80068a2 <UART_SetConfig+0x22a>
 80067a6:	231b      	movs	r3, #27
 80067a8:	2218      	movs	r2, #24
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	19db      	adds	r3, r3, r7
 80067ae:	2202      	movs	r2, #2
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e076      	b.n	80068a2 <UART_SetConfig+0x22a>
 80067b4:	231b      	movs	r3, #27
 80067b6:	2218      	movs	r2, #24
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	19db      	adds	r3, r3, r7
 80067bc:	2204      	movs	r2, #4
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	e06f      	b.n	80068a2 <UART_SetConfig+0x22a>
 80067c2:	231b      	movs	r3, #27
 80067c4:	2218      	movs	r2, #24
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	2208      	movs	r2, #8
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e068      	b.n	80068a2 <UART_SetConfig+0x22a>
 80067d0:	231b      	movs	r3, #27
 80067d2:	2218      	movs	r2, #24
 80067d4:	189b      	adds	r3, r3, r2
 80067d6:	19db      	adds	r3, r3, r7
 80067d8:	2210      	movs	r2, #16
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e061      	b.n	80068a2 <UART_SetConfig+0x22a>
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7c      	ldr	r2, [pc, #496]	; (80069d4 <UART_SetConfig+0x35c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d106      	bne.n	80067f6 <UART_SetConfig+0x17e>
 80067e8:	231b      	movs	r3, #27
 80067ea:	2218      	movs	r2, #24
 80067ec:	189b      	adds	r3, r3, r2
 80067ee:	19db      	adds	r3, r3, r7
 80067f0:	2200      	movs	r2, #0
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e055      	b.n	80068a2 <UART_SetConfig+0x22a>
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a77      	ldr	r2, [pc, #476]	; (80069d8 <UART_SetConfig+0x360>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d106      	bne.n	800680e <UART_SetConfig+0x196>
 8006800:	231b      	movs	r3, #27
 8006802:	2218      	movs	r2, #24
 8006804:	189b      	adds	r3, r3, r2
 8006806:	19db      	adds	r3, r3, r7
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e049      	b.n	80068a2 <UART_SetConfig+0x22a>
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a6b      	ldr	r2, [pc, #428]	; (80069c0 <UART_SetConfig+0x348>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d13e      	bne.n	8006896 <UART_SetConfig+0x21e>
 8006818:	4b6c      	ldr	r3, [pc, #432]	; (80069cc <UART_SetConfig+0x354>)
 800681a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800681c:	23c0      	movs	r3, #192	; 0xc0
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	4013      	ands	r3, r2
 8006822:	22c0      	movs	r2, #192	; 0xc0
 8006824:	0112      	lsls	r2, r2, #4
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <UART_SetConfig+0x202>
 800682a:	22c0      	movs	r2, #192	; 0xc0
 800682c:	0112      	lsls	r2, r2, #4
 800682e:	4293      	cmp	r3, r2
 8006830:	d82a      	bhi.n	8006888 <UART_SetConfig+0x210>
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	0112      	lsls	r2, r2, #4
 8006836:	4293      	cmp	r3, r2
 8006838:	d011      	beq.n	800685e <UART_SetConfig+0x1e6>
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	0112      	lsls	r2, r2, #4
 800683e:	4293      	cmp	r3, r2
 8006840:	d822      	bhi.n	8006888 <UART_SetConfig+0x210>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <UART_SetConfig+0x1d8>
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	00d2      	lsls	r2, r2, #3
 800684a:	4293      	cmp	r3, r2
 800684c:	d00e      	beq.n	800686c <UART_SetConfig+0x1f4>
 800684e:	e01b      	b.n	8006888 <UART_SetConfig+0x210>
 8006850:	231b      	movs	r3, #27
 8006852:	2218      	movs	r2, #24
 8006854:	189b      	adds	r3, r3, r2
 8006856:	19db      	adds	r3, r3, r7
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e021      	b.n	80068a2 <UART_SetConfig+0x22a>
 800685e:	231b      	movs	r3, #27
 8006860:	2218      	movs	r2, #24
 8006862:	189b      	adds	r3, r3, r2
 8006864:	19db      	adds	r3, r3, r7
 8006866:	2202      	movs	r2, #2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e01a      	b.n	80068a2 <UART_SetConfig+0x22a>
 800686c:	231b      	movs	r3, #27
 800686e:	2218      	movs	r2, #24
 8006870:	189b      	adds	r3, r3, r2
 8006872:	19db      	adds	r3, r3, r7
 8006874:	2204      	movs	r2, #4
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e013      	b.n	80068a2 <UART_SetConfig+0x22a>
 800687a:	231b      	movs	r3, #27
 800687c:	2218      	movs	r2, #24
 800687e:	189b      	adds	r3, r3, r2
 8006880:	19db      	adds	r3, r3, r7
 8006882:	2208      	movs	r2, #8
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e00c      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006888:	231b      	movs	r3, #27
 800688a:	2218      	movs	r2, #24
 800688c:	189b      	adds	r3, r3, r2
 800688e:	19db      	adds	r3, r3, r7
 8006890:	2210      	movs	r2, #16
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	e005      	b.n	80068a2 <UART_SetConfig+0x22a>
 8006896:	231b      	movs	r3, #27
 8006898:	2218      	movs	r2, #24
 800689a:	189b      	adds	r3, r3, r2
 800689c:	19db      	adds	r3, r3, r7
 800689e:	2210      	movs	r2, #16
 80068a0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a46      	ldr	r2, [pc, #280]	; (80069c0 <UART_SetConfig+0x348>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d000      	beq.n	80068ae <UART_SetConfig+0x236>
 80068ac:	e09a      	b.n	80069e4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ae:	231b      	movs	r3, #27
 80068b0:	2218      	movs	r2, #24
 80068b2:	189b      	adds	r3, r3, r2
 80068b4:	19db      	adds	r3, r3, r7
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d01d      	beq.n	80068f8 <UART_SetConfig+0x280>
 80068bc:	dc20      	bgt.n	8006900 <UART_SetConfig+0x288>
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d015      	beq.n	80068ee <UART_SetConfig+0x276>
 80068c2:	dc1d      	bgt.n	8006900 <UART_SetConfig+0x288>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <UART_SetConfig+0x256>
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d005      	beq.n	80068d8 <UART_SetConfig+0x260>
 80068cc:	e018      	b.n	8006900 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ce:	f7fe fd3f 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 80068d2:	0003      	movs	r3, r0
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068d6:	e01c      	b.n	8006912 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068d8:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <UART_SetConfig+0x354>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2210      	movs	r2, #16
 80068de:	4013      	ands	r3, r2
 80068e0:	d002      	beq.n	80068e8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068e2:	4b3e      	ldr	r3, [pc, #248]	; (80069dc <UART_SetConfig+0x364>)
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068e6:	e014      	b.n	8006912 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80068e8:	4b3d      	ldr	r3, [pc, #244]	; (80069e0 <UART_SetConfig+0x368>)
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068ec:	e011      	b.n	8006912 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ee:	f7fe fc7f 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 80068f2:	0003      	movs	r3, r0
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068f6:	e00c      	b.n	8006912 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068fe:	e008      	b.n	8006912 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006904:	231a      	movs	r3, #26
 8006906:	2218      	movs	r2, #24
 8006908:	189b      	adds	r3, r3, r2
 800690a:	19db      	adds	r3, r3, r7
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
        break;
 8006910:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d100      	bne.n	800691a <UART_SetConfig+0x2a2>
 8006918:	e134      	b.n	8006b84 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	0013      	movs	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	189b      	adds	r3, r3, r2
 8006924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006926:	429a      	cmp	r2, r3
 8006928:	d305      	bcc.n	8006936 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006932:	429a      	cmp	r2, r3
 8006934:	d906      	bls.n	8006944 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006936:	231a      	movs	r3, #26
 8006938:	2218      	movs	r2, #24
 800693a:	189b      	adds	r3, r3, r2
 800693c:	19db      	adds	r3, r3, r7
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	e11f      	b.n	8006b84 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	6939      	ldr	r1, [r7, #16]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	000b      	movs	r3, r1
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	0010      	movs	r0, r2
 8006956:	0205      	lsls	r5, r0, #8
 8006958:	431d      	orrs	r5, r3
 800695a:	000b      	movs	r3, r1
 800695c:	021c      	lsls	r4, r3, #8
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	085b      	lsrs	r3, r3, #1
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	68b8      	ldr	r0, [r7, #8]
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	1900      	adds	r0, r0, r4
 8006970:	4169      	adcs	r1, r5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	2300      	movs	r3, #0
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f7f9 fd4a 	bl	8000418 <__aeabi_uldivmod>
 8006984:	0002      	movs	r2, r0
 8006986:	000b      	movs	r3, r1
 8006988:	0013      	movs	r3, r2
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800698c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800698e:	23c0      	movs	r3, #192	; 0xc0
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	429a      	cmp	r2, r3
 8006994:	d309      	bcc.n	80069aa <UART_SetConfig+0x332>
 8006996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	035b      	lsls	r3, r3, #13
 800699c:	429a      	cmp	r2, r3
 800699e:	d204      	bcs.n	80069aa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a6:	60da      	str	r2, [r3, #12]
 80069a8:	e0ec      	b.n	8006b84 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80069aa:	231a      	movs	r3, #26
 80069ac:	2218      	movs	r2, #24
 80069ae:	189b      	adds	r3, r3, r2
 80069b0:	19db      	adds	r3, r3, r7
 80069b2:	2201      	movs	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	e0e5      	b.n	8006b84 <UART_SetConfig+0x50c>
 80069b8:	efff69f3 	.word	0xefff69f3
 80069bc:	ffffcfff 	.word	0xffffcfff
 80069c0:	40004800 	.word	0x40004800
 80069c4:	fffff4ff 	.word	0xfffff4ff
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40004400 	.word	0x40004400
 80069d4:	40004c00 	.word	0x40004c00
 80069d8:	40005000 	.word	0x40005000
 80069dc:	003d0900 	.word	0x003d0900
 80069e0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d000      	beq.n	80069f2 <UART_SetConfig+0x37a>
 80069f0:	e071      	b.n	8006ad6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80069f2:	231b      	movs	r3, #27
 80069f4:	2218      	movs	r2, #24
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	19db      	adds	r3, r3, r7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d822      	bhi.n	8006a46 <UART_SetConfig+0x3ce>
 8006a00:	009a      	lsls	r2, r3, #2
 8006a02:	4b68      	ldr	r3, [pc, #416]	; (8006ba4 <UART_SetConfig+0x52c>)
 8006a04:	18d3      	adds	r3, r2, r3
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a0a:	f7fe fca1 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a12:	e021      	b.n	8006a58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a14:	f7fe fcb2 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a1c:	e01c      	b.n	8006a58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a1e:	4b62      	ldr	r3, [pc, #392]	; (8006ba8 <UART_SetConfig+0x530>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2210      	movs	r2, #16
 8006a24:	4013      	ands	r3, r2
 8006a26:	d002      	beq.n	8006a2e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a28:	4b60      	ldr	r3, [pc, #384]	; (8006bac <UART_SetConfig+0x534>)
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a2c:	e014      	b.n	8006a58 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006a2e:	4b60      	ldr	r3, [pc, #384]	; (8006bb0 <UART_SetConfig+0x538>)
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a32:	e011      	b.n	8006a58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a34:	f7fe fbdc 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a3c:	e00c      	b.n	8006a58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a44:	e008      	b.n	8006a58 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a4a:	231a      	movs	r3, #26
 8006a4c:	2218      	movs	r2, #24
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	19db      	adds	r3, r3, r7
 8006a52:	2201      	movs	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
        break;
 8006a56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d100      	bne.n	8006a60 <UART_SetConfig+0x3e8>
 8006a5e:	e091      	b.n	8006b84 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	005a      	lsls	r2, r3, #1
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	18d2      	adds	r2, r2, r3
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	0019      	movs	r1, r3
 8006a72:	0010      	movs	r0, r2
 8006a74:	f7f9 fb5a 	bl	800012c <__udivsi3>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	2b0f      	cmp	r3, #15
 8006a82:	d921      	bls.n	8006ac8 <UART_SetConfig+0x450>
 8006a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d21c      	bcs.n	8006ac8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	200e      	movs	r0, #14
 8006a94:	2418      	movs	r4, #24
 8006a96:	1903      	adds	r3, r0, r4
 8006a98:	19db      	adds	r3, r3, r7
 8006a9a:	210f      	movs	r1, #15
 8006a9c:	438a      	bics	r2, r1
 8006a9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2207      	movs	r2, #7
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	b299      	uxth	r1, r3
 8006aac:	1903      	adds	r3, r0, r4
 8006aae:	19db      	adds	r3, r3, r7
 8006ab0:	1902      	adds	r2, r0, r4
 8006ab2:	19d2      	adds	r2, r2, r7
 8006ab4:	8812      	ldrh	r2, [r2, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	1902      	adds	r2, r0, r4
 8006ac0:	19d2      	adds	r2, r2, r7
 8006ac2:	8812      	ldrh	r2, [r2, #0]
 8006ac4:	60da      	str	r2, [r3, #12]
 8006ac6:	e05d      	b.n	8006b84 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ac8:	231a      	movs	r3, #26
 8006aca:	2218      	movs	r2, #24
 8006acc:	189b      	adds	r3, r3, r2
 8006ace:	19db      	adds	r3, r3, r7
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e056      	b.n	8006b84 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad6:	231b      	movs	r3, #27
 8006ad8:	2218      	movs	r2, #24
 8006ada:	189b      	adds	r3, r3, r2
 8006adc:	19db      	adds	r3, r3, r7
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d822      	bhi.n	8006b2a <UART_SetConfig+0x4b2>
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	4b33      	ldr	r3, [pc, #204]	; (8006bb4 <UART_SetConfig+0x53c>)
 8006ae8:	18d3      	adds	r3, r2, r3
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aee:	f7fe fc2f 	bl	8005350 <HAL_RCC_GetPCLK1Freq>
 8006af2:	0003      	movs	r3, r0
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006af6:	e021      	b.n	8006b3c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af8:	f7fe fc40 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8006afc:	0003      	movs	r3, r0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b00:	e01c      	b.n	8006b3c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b02:	4b29      	ldr	r3, [pc, #164]	; (8006ba8 <UART_SetConfig+0x530>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2210      	movs	r2, #16
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d002      	beq.n	8006b12 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b0c:	4b27      	ldr	r3, [pc, #156]	; (8006bac <UART_SetConfig+0x534>)
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b10:	e014      	b.n	8006b3c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8006b12:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <UART_SetConfig+0x538>)
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b16:	e011      	b.n	8006b3c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b18:	f7fe fb6a 	bl	80051f0 <HAL_RCC_GetSysClockFreq>
 8006b1c:	0003      	movs	r3, r0
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b20:	e00c      	b.n	8006b3c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b28:	e008      	b.n	8006b3c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b2e:	231a      	movs	r3, #26
 8006b30:	2218      	movs	r2, #24
 8006b32:	189b      	adds	r3, r3, r2
 8006b34:	19db      	adds	r3, r3, r7
 8006b36:	2201      	movs	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
        break;
 8006b3a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d020      	beq.n	8006b84 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	085a      	lsrs	r2, r3, #1
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	18d2      	adds	r2, r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	0019      	movs	r1, r3
 8006b52:	0010      	movs	r0, r2
 8006b54:	f7f9 faea 	bl	800012c <__udivsi3>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	2b0f      	cmp	r3, #15
 8006b62:	d909      	bls.n	8006b78 <UART_SetConfig+0x500>
 8006b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	025b      	lsls	r3, r3, #9
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d204      	bcs.n	8006b78 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	e005      	b.n	8006b84 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b78:	231a      	movs	r3, #26
 8006b7a:	2218      	movs	r2, #24
 8006b7c:	189b      	adds	r3, r3, r2
 8006b7e:	19db      	adds	r3, r3, r7
 8006b80:	2201      	movs	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	2200      	movs	r2, #0
 8006b88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b90:	231a      	movs	r3, #26
 8006b92:	2218      	movs	r2, #24
 8006b94:	189b      	adds	r3, r3, r2
 8006b96:	19db      	adds	r3, r3, r7
 8006b98:	781b      	ldrb	r3, [r3, #0]
}
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b00e      	add	sp, #56	; 0x38
 8006ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	0800a620 	.word	0x0800a620
 8006ba8:	40021000 	.word	0x40021000
 8006bac:	003d0900 	.word	0x003d0900
 8006bb0:	00f42400 	.word	0x00f42400
 8006bb4:	0800a644 	.word	0x0800a644

08006bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d00b      	beq.n	8006be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4a4a      	ldr	r2, [pc, #296]	; (8006cfc <UART_AdvFeatureConfig+0x144>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	0019      	movs	r1, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	2202      	movs	r2, #2
 8006be8:	4013      	ands	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4a43      	ldr	r2, [pc, #268]	; (8006d00 <UART_AdvFeatureConfig+0x148>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	0019      	movs	r1, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	2204      	movs	r2, #4
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4a3b      	ldr	r2, [pc, #236]	; (8006d04 <UART_AdvFeatureConfig+0x14c>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	0019      	movs	r1, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d00b      	beq.n	8006c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4a34      	ldr	r2, [pc, #208]	; (8006d08 <UART_AdvFeatureConfig+0x150>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4a2c      	ldr	r2, [pc, #176]	; (8006d0c <UART_AdvFeatureConfig+0x154>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	0019      	movs	r1, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2220      	movs	r2, #32
 8006c70:	4013      	ands	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <UART_AdvFeatureConfig+0x158>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	0019      	movs	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2240      	movs	r2, #64	; 0x40
 8006c92:	4013      	ands	r3, r2
 8006c94:	d01d      	beq.n	8006cd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4a1d      	ldr	r2, [pc, #116]	; (8006d14 <UART_AdvFeatureConfig+0x15c>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	0019      	movs	r1, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cb2:	2380      	movs	r3, #128	; 0x80
 8006cb4:	035b      	lsls	r3, r3, #13
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d10b      	bne.n	8006cd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <UART_AdvFeatureConfig+0x160>)
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d00b      	beq.n	8006cf4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4a0e      	ldr	r2, [pc, #56]	; (8006d1c <UART_AdvFeatureConfig+0x164>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	0019      	movs	r1, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
  }
}
 8006cf4:	46c0      	nop			; (mov r8, r8)
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b002      	add	sp, #8
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	fffdffff 	.word	0xfffdffff
 8006d00:	fffeffff 	.word	0xfffeffff
 8006d04:	fffbffff 	.word	0xfffbffff
 8006d08:	ffff7fff 	.word	0xffff7fff
 8006d0c:	ffffefff 	.word	0xffffefff
 8006d10:	ffffdfff 	.word	0xffffdfff
 8006d14:	ffefffff 	.word	0xffefffff
 8006d18:	ff9fffff 	.word	0xff9fffff
 8006d1c:	fff7ffff 	.word	0xfff7ffff

08006d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2280      	movs	r2, #128	; 0x80
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d30:	f7fc fd0c 	bl	800374c <HAL_GetTick>
 8006d34:	0003      	movs	r3, r0
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2208      	movs	r2, #8
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d10c      	bne.n	8006d60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	0391      	lsls	r1, r2, #14
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4a17      	ldr	r2, [pc, #92]	; (8006dac <UART_CheckIdleState+0x8c>)
 8006d50:	9200      	str	r2, [sp, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f000 f82c 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 8006d58:	1e03      	subs	r3, r0, #0
 8006d5a:	d001      	beq.n	8006d60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e021      	b.n	8006da4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2204      	movs	r2, #4
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d10c      	bne.n	8006d88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	03d1      	lsls	r1, r2, #15
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4a0d      	ldr	r2, [pc, #52]	; (8006dac <UART_CheckIdleState+0x8c>)
 8006d78:	9200      	str	r2, [sp, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f000 f818 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 8006d80:	1e03      	subs	r3, r0, #0
 8006d82:	d001      	beq.n	8006d88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e00d      	b.n	8006da4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2274      	movs	r2, #116	; 0x74
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b004      	add	sp, #16
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	01ffffff 	.word	0x01ffffff

08006db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b094      	sub	sp, #80	; 0x50
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	1dfb      	adds	r3, r7, #7
 8006dbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc0:	e0a3      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	d100      	bne.n	8006dca <UART_WaitOnFlagUntilTimeout+0x1a>
 8006dc8:	e09f      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dca:	f7fc fcbf 	bl	800374c <HAL_GetTick>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d302      	bcc.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d13d      	bne.n	8006e5c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de0:	f3ef 8310 	mrs	r3, PRIMASK
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006de8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dea:	2301      	movs	r3, #1
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	494c      	ldr	r1, [pc, #304]	; (8006f34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006e02:	400a      	ands	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e12:	f3ef 8310 	mrs	r3, PRIMASK
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f383 8810 	msr	PRIMASK, r3
}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2101      	movs	r1, #1
 8006e34:	438a      	bics	r2, r1
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3e:	f383 8810 	msr	PRIMASK, r3
}
 8006e42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2274      	movs	r2, #116	; 0x74
 8006e54:	2100      	movs	r1, #0
 8006e56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e067      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2204      	movs	r2, #4
 8006e64:	4013      	ands	r3, r2
 8006e66:	d050      	beq.n	8006f0a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	69da      	ldr	r2, [r3, #28]
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	401a      	ands	r2, r3
 8006e74:	2380      	movs	r3, #128	; 0x80
 8006e76:	011b      	lsls	r3, r3, #4
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d146      	bne.n	8006f0a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2280      	movs	r2, #128	; 0x80
 8006e82:	0112      	lsls	r2, r2, #4
 8006e84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e86:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8a:	613b      	str	r3, [r7, #16]
  return(result);
 8006e8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f383 8810 	msr	PRIMASK, r3
}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4923      	ldr	r1, [pc, #140]	; (8006f34 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006ea8:	400a      	ands	r2, r1
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f383 8810 	msr	PRIMASK, r3
}
 8006eb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ebc:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ebe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2101      	movs	r1, #1
 8006eda:	438a      	bics	r2, r1
 8006edc:	609a      	str	r2, [r3, #8]
 8006ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	f383 8810 	msr	PRIMASK, r3
}
 8006ee8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2280      	movs	r2, #128	; 0x80
 8006efa:	2120      	movs	r1, #32
 8006efc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2274      	movs	r2, #116	; 0x74
 8006f02:	2100      	movs	r1, #0
 8006f04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e010      	b.n	8006f2c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	4013      	ands	r3, r2
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	425a      	negs	r2, r3
 8006f1a:	4153      	adcs	r3, r2
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	001a      	movs	r2, r3
 8006f20:	1dfb      	adds	r3, r7, #7
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d100      	bne.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006f28:	e74b      	b.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b014      	add	sp, #80	; 0x50
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	fffffe5f 	.word	0xfffffe5f

08006f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08e      	sub	sp, #56	; 0x38
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f40:	f3ef 8310 	mrs	r3, PRIMASK
 8006f44:	617b      	str	r3, [r7, #20]
  return(result);
 8006f46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	f383 8810 	msr	PRIMASK, r3
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4925      	ldr	r1, [pc, #148]	; (8006ff8 <UART_EndRxTransfer+0xc0>)
 8006f62:	400a      	ands	r2, r1
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f383 8810 	msr	PRIMASK, r3
}
 8006f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f72:	f3ef 8310 	mrs	r3, PRIMASK
 8006f76:	623b      	str	r3, [r7, #32]
  return(result);
 8006f78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	f383 8810 	msr	PRIMASK, r3
}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2101      	movs	r1, #1
 8006f94:	438a      	bics	r2, r1
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d118      	bne.n	8006fde <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fac:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f383 8810 	msr	PRIMASK, r3
}
 8006fc0:	46c0      	nop			; (mov r8, r8)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2110      	movs	r1, #16
 8006fce:	438a      	bics	r2, r1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f383 8810 	msr	PRIMASK, r3
}
 8006fdc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ff0:	46c0      	nop			; (mov r8, r8)
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	b00e      	add	sp, #56	; 0x38
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	fffffedf 	.word	0xfffffedf

08006ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	225a      	movs	r2, #90	; 0x5a
 800700e:	2100      	movs	r1, #0
 8007010:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2252      	movs	r2, #82	; 0x52
 8007016:	2100      	movs	r1, #0
 8007018:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	0018      	movs	r0, r3
 800701e:	f7ff fb17 	bl	8006650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	b004      	add	sp, #16
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b086      	sub	sp, #24
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007032:	f3ef 8310 	mrs	r3, PRIMASK
 8007036:	60bb      	str	r3, [r7, #8]
  return(result);
 8007038:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	2301      	movs	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f383 8810 	msr	PRIMASK, r3
}
 8007046:	46c0      	nop			; (mov r8, r8)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2140      	movs	r1, #64	; 0x40
 8007054:	438a      	bics	r2, r1
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f383 8810 	msr	PRIMASK, r3
}
 8007062:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	0018      	movs	r0, r3
 8007074:	f7ff fae4 	bl	8006640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007078:	46c0      	nop			; (mov r8, r8)
 800707a:	46bd      	mov	sp, r7
 800707c:	b006      	add	sp, #24
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007088:	46c0      	nop			; (mov r8, r8)
 800708a:	46bd      	mov	sp, r7
 800708c:	b002      	add	sp, #8
 800708e:	bd80      	pop	{r7, pc}

08007090 <__errno>:
 8007090:	4b01      	ldr	r3, [pc, #4]	; (8007098 <__errno+0x8>)
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	4770      	bx	lr
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	20000020 	.word	0x20000020

0800709c <__libc_init_array>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	2600      	movs	r6, #0
 80070a0:	4d0c      	ldr	r5, [pc, #48]	; (80070d4 <__libc_init_array+0x38>)
 80070a2:	4c0d      	ldr	r4, [pc, #52]	; (80070d8 <__libc_init_array+0x3c>)
 80070a4:	1b64      	subs	r4, r4, r5
 80070a6:	10a4      	asrs	r4, r4, #2
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	d109      	bne.n	80070c0 <__libc_init_array+0x24>
 80070ac:	2600      	movs	r6, #0
 80070ae:	f000 fc8b 	bl	80079c8 <_init>
 80070b2:	4d0a      	ldr	r5, [pc, #40]	; (80070dc <__libc_init_array+0x40>)
 80070b4:	4c0a      	ldr	r4, [pc, #40]	; (80070e0 <__libc_init_array+0x44>)
 80070b6:	1b64      	subs	r4, r4, r5
 80070b8:	10a4      	asrs	r4, r4, #2
 80070ba:	42a6      	cmp	r6, r4
 80070bc:	d105      	bne.n	80070ca <__libc_init_array+0x2e>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	00b3      	lsls	r3, r6, #2
 80070c2:	58eb      	ldr	r3, [r5, r3]
 80070c4:	4798      	blx	r3
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7ee      	b.n	80070a8 <__libc_init_array+0xc>
 80070ca:	00b3      	lsls	r3, r6, #2
 80070cc:	58eb      	ldr	r3, [r5, r3]
 80070ce:	4798      	blx	r3
 80070d0:	3601      	adds	r6, #1
 80070d2:	e7f2      	b.n	80070ba <__libc_init_array+0x1e>
 80070d4:	0800a6a4 	.word	0x0800a6a4
 80070d8:	0800a6a4 	.word	0x0800a6a4
 80070dc:	0800a6a4 	.word	0x0800a6a4
 80070e0:	0800a6a8 	.word	0x0800a6a8

080070e4 <memcpy>:
 80070e4:	2300      	movs	r3, #0
 80070e6:	b510      	push	{r4, lr}
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d100      	bne.n	80070ee <memcpy+0xa>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	5ccc      	ldrb	r4, [r1, r3]
 80070f0:	54c4      	strb	r4, [r0, r3]
 80070f2:	3301      	adds	r3, #1
 80070f4:	e7f8      	b.n	80070e8 <memcpy+0x4>

080070f6 <memset>:
 80070f6:	0003      	movs	r3, r0
 80070f8:	1882      	adds	r2, r0, r2
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d100      	bne.n	8007100 <memset+0xa>
 80070fe:	4770      	bx	lr
 8007100:	7019      	strb	r1, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	e7f9      	b.n	80070fa <memset+0x4>
	...

08007108 <siprintf>:
 8007108:	b40e      	push	{r1, r2, r3}
 800710a:	b500      	push	{lr}
 800710c:	490b      	ldr	r1, [pc, #44]	; (800713c <siprintf+0x34>)
 800710e:	b09c      	sub	sp, #112	; 0x70
 8007110:	ab1d      	add	r3, sp, #116	; 0x74
 8007112:	9002      	str	r0, [sp, #8]
 8007114:	9006      	str	r0, [sp, #24]
 8007116:	9107      	str	r1, [sp, #28]
 8007118:	9104      	str	r1, [sp, #16]
 800711a:	4809      	ldr	r0, [pc, #36]	; (8007140 <siprintf+0x38>)
 800711c:	4909      	ldr	r1, [pc, #36]	; (8007144 <siprintf+0x3c>)
 800711e:	cb04      	ldmia	r3!, {r2}
 8007120:	9105      	str	r1, [sp, #20]
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	a902      	add	r1, sp, #8
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	f000 f870 	bl	800720c <_svfiprintf_r>
 800712c:	2300      	movs	r3, #0
 800712e:	9a02      	ldr	r2, [sp, #8]
 8007130:	7013      	strb	r3, [r2, #0]
 8007132:	b01c      	add	sp, #112	; 0x70
 8007134:	bc08      	pop	{r3}
 8007136:	b003      	add	sp, #12
 8007138:	4718      	bx	r3
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	7fffffff 	.word	0x7fffffff
 8007140:	20000020 	.word	0x20000020
 8007144:	ffff0208 	.word	0xffff0208

08007148 <__ssputs_r>:
 8007148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714a:	688e      	ldr	r6, [r1, #8]
 800714c:	b085      	sub	sp, #20
 800714e:	0007      	movs	r7, r0
 8007150:	000c      	movs	r4, r1
 8007152:	9203      	str	r2, [sp, #12]
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	429e      	cmp	r6, r3
 8007158:	d83c      	bhi.n	80071d4 <__ssputs_r+0x8c>
 800715a:	2390      	movs	r3, #144	; 0x90
 800715c:	898a      	ldrh	r2, [r1, #12]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	421a      	tst	r2, r3
 8007162:	d034      	beq.n	80071ce <__ssputs_r+0x86>
 8007164:	6909      	ldr	r1, [r1, #16]
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	6960      	ldr	r0, [r4, #20]
 800716a:	1a5b      	subs	r3, r3, r1
 800716c:	9302      	str	r3, [sp, #8]
 800716e:	2303      	movs	r3, #3
 8007170:	4343      	muls	r3, r0
 8007172:	0fdd      	lsrs	r5, r3, #31
 8007174:	18ed      	adds	r5, r5, r3
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	9802      	ldr	r0, [sp, #8]
 800717a:	3301      	adds	r3, #1
 800717c:	181b      	adds	r3, r3, r0
 800717e:	106d      	asrs	r5, r5, #1
 8007180:	42ab      	cmp	r3, r5
 8007182:	d900      	bls.n	8007186 <__ssputs_r+0x3e>
 8007184:	001d      	movs	r5, r3
 8007186:	0553      	lsls	r3, r2, #21
 8007188:	d532      	bpl.n	80071f0 <__ssputs_r+0xa8>
 800718a:	0029      	movs	r1, r5
 800718c:	0038      	movs	r0, r7
 800718e:	f000 fb49 	bl	8007824 <_malloc_r>
 8007192:	1e06      	subs	r6, r0, #0
 8007194:	d109      	bne.n	80071aa <__ssputs_r+0x62>
 8007196:	230c      	movs	r3, #12
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	2001      	movs	r0, #1
 800719e:	89a2      	ldrh	r2, [r4, #12]
 80071a0:	4240      	negs	r0, r0
 80071a2:	4313      	orrs	r3, r2
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	b005      	add	sp, #20
 80071a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071aa:	9a02      	ldr	r2, [sp, #8]
 80071ac:	6921      	ldr	r1, [r4, #16]
 80071ae:	f7ff ff99 	bl	80070e4 <memcpy>
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	4a14      	ldr	r2, [pc, #80]	; (8007208 <__ssputs_r+0xc0>)
 80071b6:	401a      	ands	r2, r3
 80071b8:	2380      	movs	r3, #128	; 0x80
 80071ba:	4313      	orrs	r3, r2
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	9b02      	ldr	r3, [sp, #8]
 80071c0:	6126      	str	r6, [r4, #16]
 80071c2:	18f6      	adds	r6, r6, r3
 80071c4:	6026      	str	r6, [r4, #0]
 80071c6:	6165      	str	r5, [r4, #20]
 80071c8:	9e01      	ldr	r6, [sp, #4]
 80071ca:	1aed      	subs	r5, r5, r3
 80071cc:	60a5      	str	r5, [r4, #8]
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	429e      	cmp	r6, r3
 80071d2:	d900      	bls.n	80071d6 <__ssputs_r+0x8e>
 80071d4:	9e01      	ldr	r6, [sp, #4]
 80071d6:	0032      	movs	r2, r6
 80071d8:	9903      	ldr	r1, [sp, #12]
 80071da:	6820      	ldr	r0, [r4, #0]
 80071dc:	f000 faa3 	bl	8007726 <memmove>
 80071e0:	68a3      	ldr	r3, [r4, #8]
 80071e2:	2000      	movs	r0, #0
 80071e4:	1b9b      	subs	r3, r3, r6
 80071e6:	60a3      	str	r3, [r4, #8]
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	199e      	adds	r6, r3, r6
 80071ec:	6026      	str	r6, [r4, #0]
 80071ee:	e7da      	b.n	80071a6 <__ssputs_r+0x5e>
 80071f0:	002a      	movs	r2, r5
 80071f2:	0038      	movs	r0, r7
 80071f4:	f000 fb8c 	bl	8007910 <_realloc_r>
 80071f8:	1e06      	subs	r6, r0, #0
 80071fa:	d1e0      	bne.n	80071be <__ssputs_r+0x76>
 80071fc:	0038      	movs	r0, r7
 80071fe:	6921      	ldr	r1, [r4, #16]
 8007200:	f000 faa4 	bl	800774c <_free_r>
 8007204:	e7c7      	b.n	8007196 <__ssputs_r+0x4e>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	fffffb7f 	.word	0xfffffb7f

0800720c <_svfiprintf_r>:
 800720c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720e:	b0a1      	sub	sp, #132	; 0x84
 8007210:	9003      	str	r0, [sp, #12]
 8007212:	001d      	movs	r5, r3
 8007214:	898b      	ldrh	r3, [r1, #12]
 8007216:	000f      	movs	r7, r1
 8007218:	0016      	movs	r6, r2
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	d511      	bpl.n	8007242 <_svfiprintf_r+0x36>
 800721e:	690b      	ldr	r3, [r1, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10e      	bne.n	8007242 <_svfiprintf_r+0x36>
 8007224:	2140      	movs	r1, #64	; 0x40
 8007226:	f000 fafd 	bl	8007824 <_malloc_r>
 800722a:	6038      	str	r0, [r7, #0]
 800722c:	6138      	str	r0, [r7, #16]
 800722e:	2800      	cmp	r0, #0
 8007230:	d105      	bne.n	800723e <_svfiprintf_r+0x32>
 8007232:	230c      	movs	r3, #12
 8007234:	9a03      	ldr	r2, [sp, #12]
 8007236:	3801      	subs	r0, #1
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	b021      	add	sp, #132	; 0x84
 800723c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	2300      	movs	r3, #0
 8007244:	ac08      	add	r4, sp, #32
 8007246:	6163      	str	r3, [r4, #20]
 8007248:	3320      	adds	r3, #32
 800724a:	7663      	strb	r3, [r4, #25]
 800724c:	3310      	adds	r3, #16
 800724e:	76a3      	strb	r3, [r4, #26]
 8007250:	9507      	str	r5, [sp, #28]
 8007252:	0035      	movs	r5, r6
 8007254:	782b      	ldrb	r3, [r5, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <_svfiprintf_r+0x52>
 800725a:	2b25      	cmp	r3, #37	; 0x25
 800725c:	d147      	bne.n	80072ee <_svfiprintf_r+0xe2>
 800725e:	1bab      	subs	r3, r5, r6
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	42b5      	cmp	r5, r6
 8007264:	d00c      	beq.n	8007280 <_svfiprintf_r+0x74>
 8007266:	0032      	movs	r2, r6
 8007268:	0039      	movs	r1, r7
 800726a:	9803      	ldr	r0, [sp, #12]
 800726c:	f7ff ff6c 	bl	8007148 <__ssputs_r>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d100      	bne.n	8007276 <_svfiprintf_r+0x6a>
 8007274:	e0ae      	b.n	80073d4 <_svfiprintf_r+0x1c8>
 8007276:	6962      	ldr	r2, [r4, #20]
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	4694      	mov	ip, r2
 800727c:	4463      	add	r3, ip
 800727e:	6163      	str	r3, [r4, #20]
 8007280:	782b      	ldrb	r3, [r5, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d100      	bne.n	8007288 <_svfiprintf_r+0x7c>
 8007286:	e0a5      	b.n	80073d4 <_svfiprintf_r+0x1c8>
 8007288:	2201      	movs	r2, #1
 800728a:	2300      	movs	r3, #0
 800728c:	4252      	negs	r2, r2
 800728e:	6062      	str	r2, [r4, #4]
 8007290:	a904      	add	r1, sp, #16
 8007292:	3254      	adds	r2, #84	; 0x54
 8007294:	1852      	adds	r2, r2, r1
 8007296:	1c6e      	adds	r6, r5, #1
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	60e3      	str	r3, [r4, #12]
 800729c:	60a3      	str	r3, [r4, #8]
 800729e:	7013      	strb	r3, [r2, #0]
 80072a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80072a2:	2205      	movs	r2, #5
 80072a4:	7831      	ldrb	r1, [r6, #0]
 80072a6:	4854      	ldr	r0, [pc, #336]	; (80073f8 <_svfiprintf_r+0x1ec>)
 80072a8:	f000 fa32 	bl	8007710 <memchr>
 80072ac:	1c75      	adds	r5, r6, #1
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d11f      	bne.n	80072f2 <_svfiprintf_r+0xe6>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	06d3      	lsls	r3, r2, #27
 80072b6:	d504      	bpl.n	80072c2 <_svfiprintf_r+0xb6>
 80072b8:	2353      	movs	r3, #83	; 0x53
 80072ba:	a904      	add	r1, sp, #16
 80072bc:	185b      	adds	r3, r3, r1
 80072be:	2120      	movs	r1, #32
 80072c0:	7019      	strb	r1, [r3, #0]
 80072c2:	0713      	lsls	r3, r2, #28
 80072c4:	d504      	bpl.n	80072d0 <_svfiprintf_r+0xc4>
 80072c6:	2353      	movs	r3, #83	; 0x53
 80072c8:	a904      	add	r1, sp, #16
 80072ca:	185b      	adds	r3, r3, r1
 80072cc:	212b      	movs	r1, #43	; 0x2b
 80072ce:	7019      	strb	r1, [r3, #0]
 80072d0:	7833      	ldrb	r3, [r6, #0]
 80072d2:	2b2a      	cmp	r3, #42	; 0x2a
 80072d4:	d016      	beq.n	8007304 <_svfiprintf_r+0xf8>
 80072d6:	0035      	movs	r5, r6
 80072d8:	2100      	movs	r1, #0
 80072da:	200a      	movs	r0, #10
 80072dc:	68e3      	ldr	r3, [r4, #12]
 80072de:	782a      	ldrb	r2, [r5, #0]
 80072e0:	1c6e      	adds	r6, r5, #1
 80072e2:	3a30      	subs	r2, #48	; 0x30
 80072e4:	2a09      	cmp	r2, #9
 80072e6:	d94e      	bls.n	8007386 <_svfiprintf_r+0x17a>
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d111      	bne.n	8007310 <_svfiprintf_r+0x104>
 80072ec:	e017      	b.n	800731e <_svfiprintf_r+0x112>
 80072ee:	3501      	adds	r5, #1
 80072f0:	e7b0      	b.n	8007254 <_svfiprintf_r+0x48>
 80072f2:	4b41      	ldr	r3, [pc, #260]	; (80073f8 <_svfiprintf_r+0x1ec>)
 80072f4:	6822      	ldr	r2, [r4, #0]
 80072f6:	1ac0      	subs	r0, r0, r3
 80072f8:	2301      	movs	r3, #1
 80072fa:	4083      	lsls	r3, r0
 80072fc:	4313      	orrs	r3, r2
 80072fe:	002e      	movs	r6, r5
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	e7ce      	b.n	80072a2 <_svfiprintf_r+0x96>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	1d19      	adds	r1, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9107      	str	r1, [sp, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	db01      	blt.n	8007314 <_svfiprintf_r+0x108>
 8007310:	930b      	str	r3, [sp, #44]	; 0x2c
 8007312:	e004      	b.n	800731e <_svfiprintf_r+0x112>
 8007314:	425b      	negs	r3, r3
 8007316:	60e3      	str	r3, [r4, #12]
 8007318:	2302      	movs	r3, #2
 800731a:	4313      	orrs	r3, r2
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	782b      	ldrb	r3, [r5, #0]
 8007320:	2b2e      	cmp	r3, #46	; 0x2e
 8007322:	d10a      	bne.n	800733a <_svfiprintf_r+0x12e>
 8007324:	786b      	ldrb	r3, [r5, #1]
 8007326:	2b2a      	cmp	r3, #42	; 0x2a
 8007328:	d135      	bne.n	8007396 <_svfiprintf_r+0x18a>
 800732a:	9b07      	ldr	r3, [sp, #28]
 800732c:	3502      	adds	r5, #2
 800732e:	1d1a      	adds	r2, r3, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	9207      	str	r2, [sp, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	db2b      	blt.n	8007390 <_svfiprintf_r+0x184>
 8007338:	9309      	str	r3, [sp, #36]	; 0x24
 800733a:	4e30      	ldr	r6, [pc, #192]	; (80073fc <_svfiprintf_r+0x1f0>)
 800733c:	2203      	movs	r2, #3
 800733e:	0030      	movs	r0, r6
 8007340:	7829      	ldrb	r1, [r5, #0]
 8007342:	f000 f9e5 	bl	8007710 <memchr>
 8007346:	2800      	cmp	r0, #0
 8007348:	d006      	beq.n	8007358 <_svfiprintf_r+0x14c>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	1b80      	subs	r0, r0, r6
 800734e:	4083      	lsls	r3, r0
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	3501      	adds	r5, #1
 8007354:	4313      	orrs	r3, r2
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	7829      	ldrb	r1, [r5, #0]
 800735a:	2206      	movs	r2, #6
 800735c:	4828      	ldr	r0, [pc, #160]	; (8007400 <_svfiprintf_r+0x1f4>)
 800735e:	1c6e      	adds	r6, r5, #1
 8007360:	7621      	strb	r1, [r4, #24]
 8007362:	f000 f9d5 	bl	8007710 <memchr>
 8007366:	2800      	cmp	r0, #0
 8007368:	d03c      	beq.n	80073e4 <_svfiprintf_r+0x1d8>
 800736a:	4b26      	ldr	r3, [pc, #152]	; (8007404 <_svfiprintf_r+0x1f8>)
 800736c:	2b00      	cmp	r3, #0
 800736e:	d125      	bne.n	80073bc <_svfiprintf_r+0x1b0>
 8007370:	2207      	movs	r2, #7
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	3307      	adds	r3, #7
 8007376:	4393      	bics	r3, r2
 8007378:	3308      	adds	r3, #8
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	6963      	ldr	r3, [r4, #20]
 800737e:	9a04      	ldr	r2, [sp, #16]
 8007380:	189b      	adds	r3, r3, r2
 8007382:	6163      	str	r3, [r4, #20]
 8007384:	e765      	b.n	8007252 <_svfiprintf_r+0x46>
 8007386:	4343      	muls	r3, r0
 8007388:	0035      	movs	r5, r6
 800738a:	2101      	movs	r1, #1
 800738c:	189b      	adds	r3, r3, r2
 800738e:	e7a6      	b.n	80072de <_svfiprintf_r+0xd2>
 8007390:	2301      	movs	r3, #1
 8007392:	425b      	negs	r3, r3
 8007394:	e7d0      	b.n	8007338 <_svfiprintf_r+0x12c>
 8007396:	2300      	movs	r3, #0
 8007398:	200a      	movs	r0, #10
 800739a:	001a      	movs	r2, r3
 800739c:	3501      	adds	r5, #1
 800739e:	6063      	str	r3, [r4, #4]
 80073a0:	7829      	ldrb	r1, [r5, #0]
 80073a2:	1c6e      	adds	r6, r5, #1
 80073a4:	3930      	subs	r1, #48	; 0x30
 80073a6:	2909      	cmp	r1, #9
 80073a8:	d903      	bls.n	80073b2 <_svfiprintf_r+0x1a6>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0c5      	beq.n	800733a <_svfiprintf_r+0x12e>
 80073ae:	9209      	str	r2, [sp, #36]	; 0x24
 80073b0:	e7c3      	b.n	800733a <_svfiprintf_r+0x12e>
 80073b2:	4342      	muls	r2, r0
 80073b4:	0035      	movs	r5, r6
 80073b6:	2301      	movs	r3, #1
 80073b8:	1852      	adds	r2, r2, r1
 80073ba:	e7f1      	b.n	80073a0 <_svfiprintf_r+0x194>
 80073bc:	ab07      	add	r3, sp, #28
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	003a      	movs	r2, r7
 80073c2:	0021      	movs	r1, r4
 80073c4:	4b10      	ldr	r3, [pc, #64]	; (8007408 <_svfiprintf_r+0x1fc>)
 80073c6:	9803      	ldr	r0, [sp, #12]
 80073c8:	e000      	b.n	80073cc <_svfiprintf_r+0x1c0>
 80073ca:	bf00      	nop
 80073cc:	9004      	str	r0, [sp, #16]
 80073ce:	9b04      	ldr	r3, [sp, #16]
 80073d0:	3301      	adds	r3, #1
 80073d2:	d1d3      	bne.n	800737c <_svfiprintf_r+0x170>
 80073d4:	89bb      	ldrh	r3, [r7, #12]
 80073d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073d8:	065b      	lsls	r3, r3, #25
 80073da:	d400      	bmi.n	80073de <_svfiprintf_r+0x1d2>
 80073dc:	e72d      	b.n	800723a <_svfiprintf_r+0x2e>
 80073de:	2001      	movs	r0, #1
 80073e0:	4240      	negs	r0, r0
 80073e2:	e72a      	b.n	800723a <_svfiprintf_r+0x2e>
 80073e4:	ab07      	add	r3, sp, #28
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	003a      	movs	r2, r7
 80073ea:	0021      	movs	r1, r4
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <_svfiprintf_r+0x1fc>)
 80073ee:	9803      	ldr	r0, [sp, #12]
 80073f0:	f000 f87c 	bl	80074ec <_printf_i>
 80073f4:	e7ea      	b.n	80073cc <_svfiprintf_r+0x1c0>
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	0800a668 	.word	0x0800a668
 80073fc:	0800a66e 	.word	0x0800a66e
 8007400:	0800a672 	.word	0x0800a672
 8007404:	00000000 	.word	0x00000000
 8007408:	08007149 	.word	0x08007149

0800740c <_printf_common>:
 800740c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740e:	0015      	movs	r5, r2
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	688a      	ldr	r2, [r1, #8]
 8007414:	690b      	ldr	r3, [r1, #16]
 8007416:	000c      	movs	r4, r1
 8007418:	9000      	str	r0, [sp, #0]
 800741a:	4293      	cmp	r3, r2
 800741c:	da00      	bge.n	8007420 <_printf_common+0x14>
 800741e:	0013      	movs	r3, r2
 8007420:	0022      	movs	r2, r4
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	3243      	adds	r2, #67	; 0x43
 8007426:	7812      	ldrb	r2, [r2, #0]
 8007428:	2a00      	cmp	r2, #0
 800742a:	d001      	beq.n	8007430 <_printf_common+0x24>
 800742c:	3301      	adds	r3, #1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	069b      	lsls	r3, r3, #26
 8007434:	d502      	bpl.n	800743c <_printf_common+0x30>
 8007436:	682b      	ldr	r3, [r5, #0]
 8007438:	3302      	adds	r3, #2
 800743a:	602b      	str	r3, [r5, #0]
 800743c:	6822      	ldr	r2, [r4, #0]
 800743e:	2306      	movs	r3, #6
 8007440:	0017      	movs	r7, r2
 8007442:	401f      	ands	r7, r3
 8007444:	421a      	tst	r2, r3
 8007446:	d027      	beq.n	8007498 <_printf_common+0x8c>
 8007448:	0023      	movs	r3, r4
 800744a:	3343      	adds	r3, #67	; 0x43
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	1e5a      	subs	r2, r3, #1
 8007450:	4193      	sbcs	r3, r2
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	0692      	lsls	r2, r2, #26
 8007456:	d430      	bmi.n	80074ba <_printf_common+0xae>
 8007458:	0022      	movs	r2, r4
 800745a:	9901      	ldr	r1, [sp, #4]
 800745c:	9800      	ldr	r0, [sp, #0]
 800745e:	9e08      	ldr	r6, [sp, #32]
 8007460:	3243      	adds	r2, #67	; 0x43
 8007462:	47b0      	blx	r6
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d025      	beq.n	80074b4 <_printf_common+0xa8>
 8007468:	2306      	movs	r3, #6
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	682a      	ldr	r2, [r5, #0]
 800746e:	68e1      	ldr	r1, [r4, #12]
 8007470:	2500      	movs	r5, #0
 8007472:	4003      	ands	r3, r0
 8007474:	2b04      	cmp	r3, #4
 8007476:	d103      	bne.n	8007480 <_printf_common+0x74>
 8007478:	1a8d      	subs	r5, r1, r2
 800747a:	43eb      	mvns	r3, r5
 800747c:	17db      	asrs	r3, r3, #31
 800747e:	401d      	ands	r5, r3
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	6922      	ldr	r2, [r4, #16]
 8007484:	4293      	cmp	r3, r2
 8007486:	dd01      	ble.n	800748c <_printf_common+0x80>
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	18ed      	adds	r5, r5, r3
 800748c:	2700      	movs	r7, #0
 800748e:	42bd      	cmp	r5, r7
 8007490:	d120      	bne.n	80074d4 <_printf_common+0xc8>
 8007492:	2000      	movs	r0, #0
 8007494:	e010      	b.n	80074b8 <_printf_common+0xac>
 8007496:	3701      	adds	r7, #1
 8007498:	68e3      	ldr	r3, [r4, #12]
 800749a:	682a      	ldr	r2, [r5, #0]
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	42bb      	cmp	r3, r7
 80074a0:	ddd2      	ble.n	8007448 <_printf_common+0x3c>
 80074a2:	0022      	movs	r2, r4
 80074a4:	2301      	movs	r3, #1
 80074a6:	9901      	ldr	r1, [sp, #4]
 80074a8:	9800      	ldr	r0, [sp, #0]
 80074aa:	9e08      	ldr	r6, [sp, #32]
 80074ac:	3219      	adds	r2, #25
 80074ae:	47b0      	blx	r6
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d1f0      	bne.n	8007496 <_printf_common+0x8a>
 80074b4:	2001      	movs	r0, #1
 80074b6:	4240      	negs	r0, r0
 80074b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074ba:	2030      	movs	r0, #48	; 0x30
 80074bc:	18e1      	adds	r1, r4, r3
 80074be:	3143      	adds	r1, #67	; 0x43
 80074c0:	7008      	strb	r0, [r1, #0]
 80074c2:	0021      	movs	r1, r4
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	3145      	adds	r1, #69	; 0x45
 80074c8:	7809      	ldrb	r1, [r1, #0]
 80074ca:	18a2      	adds	r2, r4, r2
 80074cc:	3243      	adds	r2, #67	; 0x43
 80074ce:	3302      	adds	r3, #2
 80074d0:	7011      	strb	r1, [r2, #0]
 80074d2:	e7c1      	b.n	8007458 <_printf_common+0x4c>
 80074d4:	0022      	movs	r2, r4
 80074d6:	2301      	movs	r3, #1
 80074d8:	9901      	ldr	r1, [sp, #4]
 80074da:	9800      	ldr	r0, [sp, #0]
 80074dc:	9e08      	ldr	r6, [sp, #32]
 80074de:	321a      	adds	r2, #26
 80074e0:	47b0      	blx	r6
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	d0e6      	beq.n	80074b4 <_printf_common+0xa8>
 80074e6:	3701      	adds	r7, #1
 80074e8:	e7d1      	b.n	800748e <_printf_common+0x82>
	...

080074ec <_printf_i>:
 80074ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ee:	b08b      	sub	sp, #44	; 0x2c
 80074f0:	9206      	str	r2, [sp, #24]
 80074f2:	000a      	movs	r2, r1
 80074f4:	3243      	adds	r2, #67	; 0x43
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	9005      	str	r0, [sp, #20]
 80074fa:	9204      	str	r2, [sp, #16]
 80074fc:	7e0a      	ldrb	r2, [r1, #24]
 80074fe:	000c      	movs	r4, r1
 8007500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007502:	2a78      	cmp	r2, #120	; 0x78
 8007504:	d807      	bhi.n	8007516 <_printf_i+0x2a>
 8007506:	2a62      	cmp	r2, #98	; 0x62
 8007508:	d809      	bhi.n	800751e <_printf_i+0x32>
 800750a:	2a00      	cmp	r2, #0
 800750c:	d100      	bne.n	8007510 <_printf_i+0x24>
 800750e:	e0c1      	b.n	8007694 <_printf_i+0x1a8>
 8007510:	2a58      	cmp	r2, #88	; 0x58
 8007512:	d100      	bne.n	8007516 <_printf_i+0x2a>
 8007514:	e08c      	b.n	8007630 <_printf_i+0x144>
 8007516:	0026      	movs	r6, r4
 8007518:	3642      	adds	r6, #66	; 0x42
 800751a:	7032      	strb	r2, [r6, #0]
 800751c:	e022      	b.n	8007564 <_printf_i+0x78>
 800751e:	0010      	movs	r0, r2
 8007520:	3863      	subs	r0, #99	; 0x63
 8007522:	2815      	cmp	r0, #21
 8007524:	d8f7      	bhi.n	8007516 <_printf_i+0x2a>
 8007526:	f7f8 fdf7 	bl	8000118 <__gnu_thumb1_case_shi>
 800752a:	0016      	.short	0x0016
 800752c:	fff6001f 	.word	0xfff6001f
 8007530:	fff6fff6 	.word	0xfff6fff6
 8007534:	001ffff6 	.word	0x001ffff6
 8007538:	fff6fff6 	.word	0xfff6fff6
 800753c:	fff6fff6 	.word	0xfff6fff6
 8007540:	003600a8 	.word	0x003600a8
 8007544:	fff6009a 	.word	0xfff6009a
 8007548:	00b9fff6 	.word	0x00b9fff6
 800754c:	0036fff6 	.word	0x0036fff6
 8007550:	fff6fff6 	.word	0xfff6fff6
 8007554:	009e      	.short	0x009e
 8007556:	0026      	movs	r6, r4
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	3642      	adds	r6, #66	; 0x42
 800755c:	1d11      	adds	r1, r2, #4
 800755e:	6019      	str	r1, [r3, #0]
 8007560:	6813      	ldr	r3, [r2, #0]
 8007562:	7033      	strb	r3, [r6, #0]
 8007564:	2301      	movs	r3, #1
 8007566:	e0a7      	b.n	80076b8 <_printf_i+0x1cc>
 8007568:	6808      	ldr	r0, [r1, #0]
 800756a:	6819      	ldr	r1, [r3, #0]
 800756c:	1d0a      	adds	r2, r1, #4
 800756e:	0605      	lsls	r5, r0, #24
 8007570:	d50b      	bpl.n	800758a <_printf_i+0x9e>
 8007572:	680d      	ldr	r5, [r1, #0]
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	2d00      	cmp	r5, #0
 8007578:	da03      	bge.n	8007582 <_printf_i+0x96>
 800757a:	232d      	movs	r3, #45	; 0x2d
 800757c:	9a04      	ldr	r2, [sp, #16]
 800757e:	426d      	negs	r5, r5
 8007580:	7013      	strb	r3, [r2, #0]
 8007582:	4b61      	ldr	r3, [pc, #388]	; (8007708 <_printf_i+0x21c>)
 8007584:	270a      	movs	r7, #10
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	e01b      	b.n	80075c2 <_printf_i+0xd6>
 800758a:	680d      	ldr	r5, [r1, #0]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	0641      	lsls	r1, r0, #25
 8007590:	d5f1      	bpl.n	8007576 <_printf_i+0x8a>
 8007592:	b22d      	sxth	r5, r5
 8007594:	e7ef      	b.n	8007576 <_printf_i+0x8a>
 8007596:	680d      	ldr	r5, [r1, #0]
 8007598:	6819      	ldr	r1, [r3, #0]
 800759a:	1d08      	adds	r0, r1, #4
 800759c:	6018      	str	r0, [r3, #0]
 800759e:	062e      	lsls	r6, r5, #24
 80075a0:	d501      	bpl.n	80075a6 <_printf_i+0xba>
 80075a2:	680d      	ldr	r5, [r1, #0]
 80075a4:	e003      	b.n	80075ae <_printf_i+0xc2>
 80075a6:	066d      	lsls	r5, r5, #25
 80075a8:	d5fb      	bpl.n	80075a2 <_printf_i+0xb6>
 80075aa:	680d      	ldr	r5, [r1, #0]
 80075ac:	b2ad      	uxth	r5, r5
 80075ae:	4b56      	ldr	r3, [pc, #344]	; (8007708 <_printf_i+0x21c>)
 80075b0:	2708      	movs	r7, #8
 80075b2:	9303      	str	r3, [sp, #12]
 80075b4:	2a6f      	cmp	r2, #111	; 0x6f
 80075b6:	d000      	beq.n	80075ba <_printf_i+0xce>
 80075b8:	3702      	adds	r7, #2
 80075ba:	0023      	movs	r3, r4
 80075bc:	2200      	movs	r2, #0
 80075be:	3343      	adds	r3, #67	; 0x43
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	60a3      	str	r3, [r4, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db03      	blt.n	80075d2 <_printf_i+0xe6>
 80075ca:	2204      	movs	r2, #4
 80075cc:	6821      	ldr	r1, [r4, #0]
 80075ce:	4391      	bics	r1, r2
 80075d0:	6021      	str	r1, [r4, #0]
 80075d2:	2d00      	cmp	r5, #0
 80075d4:	d102      	bne.n	80075dc <_printf_i+0xf0>
 80075d6:	9e04      	ldr	r6, [sp, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <_printf_i+0x10a>
 80075dc:	9e04      	ldr	r6, [sp, #16]
 80075de:	0028      	movs	r0, r5
 80075e0:	0039      	movs	r1, r7
 80075e2:	f7f8 fe29 	bl	8000238 <__aeabi_uidivmod>
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	3e01      	subs	r6, #1
 80075ea:	5c5b      	ldrb	r3, [r3, r1]
 80075ec:	7033      	strb	r3, [r6, #0]
 80075ee:	002b      	movs	r3, r5
 80075f0:	0005      	movs	r5, r0
 80075f2:	429f      	cmp	r7, r3
 80075f4:	d9f3      	bls.n	80075de <_printf_i+0xf2>
 80075f6:	2f08      	cmp	r7, #8
 80075f8:	d109      	bne.n	800760e <_printf_i+0x122>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	07db      	lsls	r3, r3, #31
 80075fe:	d506      	bpl.n	800760e <_printf_i+0x122>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	6922      	ldr	r2, [r4, #16]
 8007604:	4293      	cmp	r3, r2
 8007606:	dc02      	bgt.n	800760e <_printf_i+0x122>
 8007608:	2330      	movs	r3, #48	; 0x30
 800760a:	3e01      	subs	r6, #1
 800760c:	7033      	strb	r3, [r6, #0]
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	1b9b      	subs	r3, r3, r6
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	9b07      	ldr	r3, [sp, #28]
 8007616:	0021      	movs	r1, r4
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	9805      	ldr	r0, [sp, #20]
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	aa09      	add	r2, sp, #36	; 0x24
 8007620:	f7ff fef4 	bl	800740c <_printf_common>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d14c      	bne.n	80076c2 <_printf_i+0x1d6>
 8007628:	2001      	movs	r0, #1
 800762a:	4240      	negs	r0, r0
 800762c:	b00b      	add	sp, #44	; 0x2c
 800762e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007630:	3145      	adds	r1, #69	; 0x45
 8007632:	700a      	strb	r2, [r1, #0]
 8007634:	4a34      	ldr	r2, [pc, #208]	; (8007708 <_printf_i+0x21c>)
 8007636:	9203      	str	r2, [sp, #12]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	6821      	ldr	r1, [r4, #0]
 800763c:	ca20      	ldmia	r2!, {r5}
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	0608      	lsls	r0, r1, #24
 8007642:	d516      	bpl.n	8007672 <_printf_i+0x186>
 8007644:	07cb      	lsls	r3, r1, #31
 8007646:	d502      	bpl.n	800764e <_printf_i+0x162>
 8007648:	2320      	movs	r3, #32
 800764a:	4319      	orrs	r1, r3
 800764c:	6021      	str	r1, [r4, #0]
 800764e:	2710      	movs	r7, #16
 8007650:	2d00      	cmp	r5, #0
 8007652:	d1b2      	bne.n	80075ba <_printf_i+0xce>
 8007654:	2320      	movs	r3, #32
 8007656:	6822      	ldr	r2, [r4, #0]
 8007658:	439a      	bics	r2, r3
 800765a:	6022      	str	r2, [r4, #0]
 800765c:	e7ad      	b.n	80075ba <_printf_i+0xce>
 800765e:	2220      	movs	r2, #32
 8007660:	6809      	ldr	r1, [r1, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	6022      	str	r2, [r4, #0]
 8007666:	0022      	movs	r2, r4
 8007668:	2178      	movs	r1, #120	; 0x78
 800766a:	3245      	adds	r2, #69	; 0x45
 800766c:	7011      	strb	r1, [r2, #0]
 800766e:	4a27      	ldr	r2, [pc, #156]	; (800770c <_printf_i+0x220>)
 8007670:	e7e1      	b.n	8007636 <_printf_i+0x14a>
 8007672:	0648      	lsls	r0, r1, #25
 8007674:	d5e6      	bpl.n	8007644 <_printf_i+0x158>
 8007676:	b2ad      	uxth	r5, r5
 8007678:	e7e4      	b.n	8007644 <_printf_i+0x158>
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	680d      	ldr	r5, [r1, #0]
 800767e:	1d10      	adds	r0, r2, #4
 8007680:	6949      	ldr	r1, [r1, #20]
 8007682:	6018      	str	r0, [r3, #0]
 8007684:	6813      	ldr	r3, [r2, #0]
 8007686:	062e      	lsls	r6, r5, #24
 8007688:	d501      	bpl.n	800768e <_printf_i+0x1a2>
 800768a:	6019      	str	r1, [r3, #0]
 800768c:	e002      	b.n	8007694 <_printf_i+0x1a8>
 800768e:	066d      	lsls	r5, r5, #25
 8007690:	d5fb      	bpl.n	800768a <_printf_i+0x19e>
 8007692:	8019      	strh	r1, [r3, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	9e04      	ldr	r6, [sp, #16]
 8007698:	6123      	str	r3, [r4, #16]
 800769a:	e7bb      	b.n	8007614 <_printf_i+0x128>
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	1d11      	adds	r1, r2, #4
 80076a0:	6019      	str	r1, [r3, #0]
 80076a2:	6816      	ldr	r6, [r2, #0]
 80076a4:	2100      	movs	r1, #0
 80076a6:	0030      	movs	r0, r6
 80076a8:	6862      	ldr	r2, [r4, #4]
 80076aa:	f000 f831 	bl	8007710 <memchr>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d001      	beq.n	80076b6 <_printf_i+0x1ca>
 80076b2:	1b80      	subs	r0, r0, r6
 80076b4:	6060      	str	r0, [r4, #4]
 80076b6:	6863      	ldr	r3, [r4, #4]
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	2300      	movs	r3, #0
 80076bc:	9a04      	ldr	r2, [sp, #16]
 80076be:	7013      	strb	r3, [r2, #0]
 80076c0:	e7a8      	b.n	8007614 <_printf_i+0x128>
 80076c2:	6923      	ldr	r3, [r4, #16]
 80076c4:	0032      	movs	r2, r6
 80076c6:	9906      	ldr	r1, [sp, #24]
 80076c8:	9805      	ldr	r0, [sp, #20]
 80076ca:	9d07      	ldr	r5, [sp, #28]
 80076cc:	47a8      	blx	r5
 80076ce:	1c43      	adds	r3, r0, #1
 80076d0:	d0aa      	beq.n	8007628 <_printf_i+0x13c>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	079b      	lsls	r3, r3, #30
 80076d6:	d415      	bmi.n	8007704 <_printf_i+0x218>
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	68e0      	ldr	r0, [r4, #12]
 80076dc:	4298      	cmp	r0, r3
 80076de:	daa5      	bge.n	800762c <_printf_i+0x140>
 80076e0:	0018      	movs	r0, r3
 80076e2:	e7a3      	b.n	800762c <_printf_i+0x140>
 80076e4:	0022      	movs	r2, r4
 80076e6:	2301      	movs	r3, #1
 80076e8:	9906      	ldr	r1, [sp, #24]
 80076ea:	9805      	ldr	r0, [sp, #20]
 80076ec:	9e07      	ldr	r6, [sp, #28]
 80076ee:	3219      	adds	r2, #25
 80076f0:	47b0      	blx	r6
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	d098      	beq.n	8007628 <_printf_i+0x13c>
 80076f6:	3501      	adds	r5, #1
 80076f8:	68e3      	ldr	r3, [r4, #12]
 80076fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	42ab      	cmp	r3, r5
 8007700:	dcf0      	bgt.n	80076e4 <_printf_i+0x1f8>
 8007702:	e7e9      	b.n	80076d8 <_printf_i+0x1ec>
 8007704:	2500      	movs	r5, #0
 8007706:	e7f7      	b.n	80076f8 <_printf_i+0x20c>
 8007708:	0800a679 	.word	0x0800a679
 800770c:	0800a68a 	.word	0x0800a68a

08007710 <memchr>:
 8007710:	b2c9      	uxtb	r1, r1
 8007712:	1882      	adds	r2, r0, r2
 8007714:	4290      	cmp	r0, r2
 8007716:	d101      	bne.n	800771c <memchr+0xc>
 8007718:	2000      	movs	r0, #0
 800771a:	4770      	bx	lr
 800771c:	7803      	ldrb	r3, [r0, #0]
 800771e:	428b      	cmp	r3, r1
 8007720:	d0fb      	beq.n	800771a <memchr+0xa>
 8007722:	3001      	adds	r0, #1
 8007724:	e7f6      	b.n	8007714 <memchr+0x4>

08007726 <memmove>:
 8007726:	b510      	push	{r4, lr}
 8007728:	4288      	cmp	r0, r1
 800772a:	d902      	bls.n	8007732 <memmove+0xc>
 800772c:	188b      	adds	r3, r1, r2
 800772e:	4298      	cmp	r0, r3
 8007730:	d303      	bcc.n	800773a <memmove+0x14>
 8007732:	2300      	movs	r3, #0
 8007734:	e007      	b.n	8007746 <memmove+0x20>
 8007736:	5c8b      	ldrb	r3, [r1, r2]
 8007738:	5483      	strb	r3, [r0, r2]
 800773a:	3a01      	subs	r2, #1
 800773c:	d2fb      	bcs.n	8007736 <memmove+0x10>
 800773e:	bd10      	pop	{r4, pc}
 8007740:	5ccc      	ldrb	r4, [r1, r3]
 8007742:	54c4      	strb	r4, [r0, r3]
 8007744:	3301      	adds	r3, #1
 8007746:	429a      	cmp	r2, r3
 8007748:	d1fa      	bne.n	8007740 <memmove+0x1a>
 800774a:	e7f8      	b.n	800773e <memmove+0x18>

0800774c <_free_r>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	0005      	movs	r5, r0
 8007750:	2900      	cmp	r1, #0
 8007752:	d010      	beq.n	8007776 <_free_r+0x2a>
 8007754:	1f0c      	subs	r4, r1, #4
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	da00      	bge.n	800775e <_free_r+0x12>
 800775c:	18e4      	adds	r4, r4, r3
 800775e:	0028      	movs	r0, r5
 8007760:	f000 f918 	bl	8007994 <__malloc_lock>
 8007764:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <_free_r+0x90>)
 8007766:	6813      	ldr	r3, [r2, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <_free_r+0x2c>
 800776c:	6063      	str	r3, [r4, #4]
 800776e:	6014      	str	r4, [r2, #0]
 8007770:	0028      	movs	r0, r5
 8007772:	f000 f917 	bl	80079a4 <__malloc_unlock>
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	42a3      	cmp	r3, r4
 800777a:	d908      	bls.n	800778e <_free_r+0x42>
 800777c:	6821      	ldr	r1, [r4, #0]
 800777e:	1860      	adds	r0, r4, r1
 8007780:	4283      	cmp	r3, r0
 8007782:	d1f3      	bne.n	800776c <_free_r+0x20>
 8007784:	6818      	ldr	r0, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	1841      	adds	r1, r0, r1
 800778a:	6021      	str	r1, [r4, #0]
 800778c:	e7ee      	b.n	800776c <_free_r+0x20>
 800778e:	001a      	movs	r2, r3
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <_free_r+0x4e>
 8007796:	42a3      	cmp	r3, r4
 8007798:	d9f9      	bls.n	800778e <_free_r+0x42>
 800779a:	6811      	ldr	r1, [r2, #0]
 800779c:	1850      	adds	r0, r2, r1
 800779e:	42a0      	cmp	r0, r4
 80077a0:	d10b      	bne.n	80077ba <_free_r+0x6e>
 80077a2:	6820      	ldr	r0, [r4, #0]
 80077a4:	1809      	adds	r1, r1, r0
 80077a6:	1850      	adds	r0, r2, r1
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	4283      	cmp	r3, r0
 80077ac:	d1e0      	bne.n	8007770 <_free_r+0x24>
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	1841      	adds	r1, r0, r1
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	6053      	str	r3, [r2, #4]
 80077b8:	e7da      	b.n	8007770 <_free_r+0x24>
 80077ba:	42a0      	cmp	r0, r4
 80077bc:	d902      	bls.n	80077c4 <_free_r+0x78>
 80077be:	230c      	movs	r3, #12
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	e7d5      	b.n	8007770 <_free_r+0x24>
 80077c4:	6821      	ldr	r1, [r4, #0]
 80077c6:	1860      	adds	r0, r4, r1
 80077c8:	4283      	cmp	r3, r0
 80077ca:	d103      	bne.n	80077d4 <_free_r+0x88>
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	1841      	adds	r1, r0, r1
 80077d2:	6021      	str	r1, [r4, #0]
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6054      	str	r4, [r2, #4]
 80077d8:	e7ca      	b.n	8007770 <_free_r+0x24>
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	20000788 	.word	0x20000788

080077e0 <sbrk_aligned>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4e0f      	ldr	r6, [pc, #60]	; (8007820 <sbrk_aligned+0x40>)
 80077e4:	000d      	movs	r5, r1
 80077e6:	6831      	ldr	r1, [r6, #0]
 80077e8:	0004      	movs	r4, r0
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d102      	bne.n	80077f4 <sbrk_aligned+0x14>
 80077ee:	f000 f8bf 	bl	8007970 <_sbrk_r>
 80077f2:	6030      	str	r0, [r6, #0]
 80077f4:	0029      	movs	r1, r5
 80077f6:	0020      	movs	r0, r4
 80077f8:	f000 f8ba 	bl	8007970 <_sbrk_r>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d00a      	beq.n	8007816 <sbrk_aligned+0x36>
 8007800:	2303      	movs	r3, #3
 8007802:	1cc5      	adds	r5, r0, #3
 8007804:	439d      	bics	r5, r3
 8007806:	42a8      	cmp	r0, r5
 8007808:	d007      	beq.n	800781a <sbrk_aligned+0x3a>
 800780a:	1a29      	subs	r1, r5, r0
 800780c:	0020      	movs	r0, r4
 800780e:	f000 f8af 	bl	8007970 <_sbrk_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d101      	bne.n	800781a <sbrk_aligned+0x3a>
 8007816:	2501      	movs	r5, #1
 8007818:	426d      	negs	r5, r5
 800781a:	0028      	movs	r0, r5
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	2000078c 	.word	0x2000078c

08007824 <_malloc_r>:
 8007824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007826:	2203      	movs	r2, #3
 8007828:	1ccb      	adds	r3, r1, #3
 800782a:	4393      	bics	r3, r2
 800782c:	3308      	adds	r3, #8
 800782e:	0006      	movs	r6, r0
 8007830:	001f      	movs	r7, r3
 8007832:	2b0c      	cmp	r3, #12
 8007834:	d232      	bcs.n	800789c <_malloc_r+0x78>
 8007836:	270c      	movs	r7, #12
 8007838:	42b9      	cmp	r1, r7
 800783a:	d831      	bhi.n	80078a0 <_malloc_r+0x7c>
 800783c:	0030      	movs	r0, r6
 800783e:	f000 f8a9 	bl	8007994 <__malloc_lock>
 8007842:	4d32      	ldr	r5, [pc, #200]	; (800790c <_malloc_r+0xe8>)
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	001c      	movs	r4, r3
 8007848:	2c00      	cmp	r4, #0
 800784a:	d12e      	bne.n	80078aa <_malloc_r+0x86>
 800784c:	0039      	movs	r1, r7
 800784e:	0030      	movs	r0, r6
 8007850:	f7ff ffc6 	bl	80077e0 <sbrk_aligned>
 8007854:	0004      	movs	r4, r0
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d11e      	bne.n	8007898 <_malloc_r+0x74>
 800785a:	682c      	ldr	r4, [r5, #0]
 800785c:	0025      	movs	r5, r4
 800785e:	2d00      	cmp	r5, #0
 8007860:	d14a      	bne.n	80078f8 <_malloc_r+0xd4>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	0029      	movs	r1, r5
 8007866:	18e3      	adds	r3, r4, r3
 8007868:	0030      	movs	r0, r6
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	f000 f880 	bl	8007970 <_sbrk_r>
 8007870:	9b01      	ldr	r3, [sp, #4]
 8007872:	4283      	cmp	r3, r0
 8007874:	d143      	bne.n	80078fe <_malloc_r+0xda>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	3703      	adds	r7, #3
 800787a:	1aff      	subs	r7, r7, r3
 800787c:	2303      	movs	r3, #3
 800787e:	439f      	bics	r7, r3
 8007880:	3708      	adds	r7, #8
 8007882:	2f0c      	cmp	r7, #12
 8007884:	d200      	bcs.n	8007888 <_malloc_r+0x64>
 8007886:	270c      	movs	r7, #12
 8007888:	0039      	movs	r1, r7
 800788a:	0030      	movs	r0, r6
 800788c:	f7ff ffa8 	bl	80077e0 <sbrk_aligned>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d034      	beq.n	80078fe <_malloc_r+0xda>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	19df      	adds	r7, r3, r7
 8007898:	6027      	str	r7, [r4, #0]
 800789a:	e013      	b.n	80078c4 <_malloc_r+0xa0>
 800789c:	2b00      	cmp	r3, #0
 800789e:	dacb      	bge.n	8007838 <_malloc_r+0x14>
 80078a0:	230c      	movs	r3, #12
 80078a2:	2500      	movs	r5, #0
 80078a4:	6033      	str	r3, [r6, #0]
 80078a6:	0028      	movs	r0, r5
 80078a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	1bd1      	subs	r1, r2, r7
 80078ae:	d420      	bmi.n	80078f2 <_malloc_r+0xce>
 80078b0:	290b      	cmp	r1, #11
 80078b2:	d917      	bls.n	80078e4 <_malloc_r+0xc0>
 80078b4:	19e2      	adds	r2, r4, r7
 80078b6:	6027      	str	r7, [r4, #0]
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d111      	bne.n	80078e0 <_malloc_r+0xbc>
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	6863      	ldr	r3, [r4, #4]
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	6053      	str	r3, [r2, #4]
 80078c4:	0030      	movs	r0, r6
 80078c6:	0025      	movs	r5, r4
 80078c8:	f000 f86c 	bl	80079a4 <__malloc_unlock>
 80078cc:	2207      	movs	r2, #7
 80078ce:	350b      	adds	r5, #11
 80078d0:	1d23      	adds	r3, r4, #4
 80078d2:	4395      	bics	r5, r2
 80078d4:	1aea      	subs	r2, r5, r3
 80078d6:	429d      	cmp	r5, r3
 80078d8:	d0e5      	beq.n	80078a6 <_malloc_r+0x82>
 80078da:	1b5b      	subs	r3, r3, r5
 80078dc:	50a3      	str	r3, [r4, r2]
 80078de:	e7e2      	b.n	80078a6 <_malloc_r+0x82>
 80078e0:	605a      	str	r2, [r3, #4]
 80078e2:	e7ec      	b.n	80078be <_malloc_r+0x9a>
 80078e4:	6862      	ldr	r2, [r4, #4]
 80078e6:	42a3      	cmp	r3, r4
 80078e8:	d101      	bne.n	80078ee <_malloc_r+0xca>
 80078ea:	602a      	str	r2, [r5, #0]
 80078ec:	e7ea      	b.n	80078c4 <_malloc_r+0xa0>
 80078ee:	605a      	str	r2, [r3, #4]
 80078f0:	e7e8      	b.n	80078c4 <_malloc_r+0xa0>
 80078f2:	0023      	movs	r3, r4
 80078f4:	6864      	ldr	r4, [r4, #4]
 80078f6:	e7a7      	b.n	8007848 <_malloc_r+0x24>
 80078f8:	002c      	movs	r4, r5
 80078fa:	686d      	ldr	r5, [r5, #4]
 80078fc:	e7af      	b.n	800785e <_malloc_r+0x3a>
 80078fe:	230c      	movs	r3, #12
 8007900:	0030      	movs	r0, r6
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	f000 f84e 	bl	80079a4 <__malloc_unlock>
 8007908:	e7cd      	b.n	80078a6 <_malloc_r+0x82>
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	20000788 	.word	0x20000788

08007910 <_realloc_r>:
 8007910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007912:	0007      	movs	r7, r0
 8007914:	000e      	movs	r6, r1
 8007916:	0014      	movs	r4, r2
 8007918:	2900      	cmp	r1, #0
 800791a:	d105      	bne.n	8007928 <_realloc_r+0x18>
 800791c:	0011      	movs	r1, r2
 800791e:	f7ff ff81 	bl	8007824 <_malloc_r>
 8007922:	0005      	movs	r5, r0
 8007924:	0028      	movs	r0, r5
 8007926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007928:	2a00      	cmp	r2, #0
 800792a:	d103      	bne.n	8007934 <_realloc_r+0x24>
 800792c:	f7ff ff0e 	bl	800774c <_free_r>
 8007930:	0025      	movs	r5, r4
 8007932:	e7f7      	b.n	8007924 <_realloc_r+0x14>
 8007934:	f000 f83e 	bl	80079b4 <_malloc_usable_size_r>
 8007938:	9001      	str	r0, [sp, #4]
 800793a:	4284      	cmp	r4, r0
 800793c:	d803      	bhi.n	8007946 <_realloc_r+0x36>
 800793e:	0035      	movs	r5, r6
 8007940:	0843      	lsrs	r3, r0, #1
 8007942:	42a3      	cmp	r3, r4
 8007944:	d3ee      	bcc.n	8007924 <_realloc_r+0x14>
 8007946:	0021      	movs	r1, r4
 8007948:	0038      	movs	r0, r7
 800794a:	f7ff ff6b 	bl	8007824 <_malloc_r>
 800794e:	1e05      	subs	r5, r0, #0
 8007950:	d0e8      	beq.n	8007924 <_realloc_r+0x14>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	0022      	movs	r2, r4
 8007956:	429c      	cmp	r4, r3
 8007958:	d900      	bls.n	800795c <_realloc_r+0x4c>
 800795a:	001a      	movs	r2, r3
 800795c:	0031      	movs	r1, r6
 800795e:	0028      	movs	r0, r5
 8007960:	f7ff fbc0 	bl	80070e4 <memcpy>
 8007964:	0031      	movs	r1, r6
 8007966:	0038      	movs	r0, r7
 8007968:	f7ff fef0 	bl	800774c <_free_r>
 800796c:	e7da      	b.n	8007924 <_realloc_r+0x14>
	...

08007970 <_sbrk_r>:
 8007970:	2300      	movs	r3, #0
 8007972:	b570      	push	{r4, r5, r6, lr}
 8007974:	4d06      	ldr	r5, [pc, #24]	; (8007990 <_sbrk_r+0x20>)
 8007976:	0004      	movs	r4, r0
 8007978:	0008      	movs	r0, r1
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	f7fb fc42 	bl	8003204 <_sbrk>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d103      	bne.n	800798c <_sbrk_r+0x1c>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d000      	beq.n	800798c <_sbrk_r+0x1c>
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	bd70      	pop	{r4, r5, r6, pc}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	20000790 	.word	0x20000790

08007994 <__malloc_lock>:
 8007994:	b510      	push	{r4, lr}
 8007996:	4802      	ldr	r0, [pc, #8]	; (80079a0 <__malloc_lock+0xc>)
 8007998:	f000 f814 	bl	80079c4 <__retarget_lock_acquire_recursive>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	20000794 	.word	0x20000794

080079a4 <__malloc_unlock>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	4802      	ldr	r0, [pc, #8]	; (80079b0 <__malloc_unlock+0xc>)
 80079a8:	f000 f80d 	bl	80079c6 <__retarget_lock_release_recursive>
 80079ac:	bd10      	pop	{r4, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	20000794 	.word	0x20000794

080079b4 <_malloc_usable_size_r>:
 80079b4:	1f0b      	subs	r3, r1, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	1f18      	subs	r0, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	da01      	bge.n	80079c2 <_malloc_usable_size_r+0xe>
 80079be:	580b      	ldr	r3, [r1, r0]
 80079c0:	18c0      	adds	r0, r0, r3
 80079c2:	4770      	bx	lr

080079c4 <__retarget_lock_acquire_recursive>:
 80079c4:	4770      	bx	lr

080079c6 <__retarget_lock_release_recursive>:
 80079c6:	4770      	bx	lr

080079c8 <_init>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr

080079d4 <_fini>:
 80079d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d6:	46c0      	nop			; (mov r8, r8)
 80079d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079da:	bc08      	pop	{r3}
 80079dc:	469e      	mov	lr, r3
 80079de:	4770      	bx	lr
