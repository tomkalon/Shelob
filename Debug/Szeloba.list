
Szeloba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007928  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cfc  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e4  0800a6e4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6ec  0800a6ec  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6f0  0800a6f0  0001a6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  20000084  0800a778  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800a778  0002079c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dd7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fac  00000000  00000000  00033e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00036e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00037f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fd64  00000000  00000000  00038fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004f2a  00000000  00000000  00048d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0004dc4e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041e4  00000000  00000000  0004dca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080079d0 	.word	0x080079d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080079d0 	.word	0x080079d0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4647      	mov	r7, r8
 800044e:	b580      	push	{r7, lr}
 8000450:	0007      	movs	r7, r0
 8000452:	4699      	mov	r9, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	469c      	mov	ip, r3
 8000458:	0413      	lsls	r3, r2, #16
 800045a:	0c1b      	lsrs	r3, r3, #16
 800045c:	001d      	movs	r5, r3
 800045e:	000e      	movs	r6, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0400      	lsls	r0, r0, #16
 8000464:	0c14      	lsrs	r4, r2, #16
 8000466:	0c00      	lsrs	r0, r0, #16
 8000468:	4345      	muls	r5, r0
 800046a:	434b      	muls	r3, r1
 800046c:	4360      	muls	r0, r4
 800046e:	4361      	muls	r1, r4
 8000470:	18c0      	adds	r0, r0, r3
 8000472:	0c2c      	lsrs	r4, r5, #16
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4372      	muls	r2, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	4463      	add	r3, ip
 800048e:	042d      	lsls	r5, r5, #16
 8000490:	0c2d      	lsrs	r5, r5, #16
 8000492:	18c9      	adds	r1, r1, r3
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	1889      	adds	r1, r1, r2
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8ba 	bl	800063c <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8b5 	bl	800063c <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__clzdi2>:
 800063c:	b510      	push	{r4, lr}
 800063e:	2900      	cmp	r1, #0
 8000640:	d103      	bne.n	800064a <__clzdi2+0xe>
 8000642:	f000 f807 	bl	8000654 <__clzsi2>
 8000646:	3020      	adds	r0, #32
 8000648:	e002      	b.n	8000650 <__clzdi2+0x14>
 800064a:	0008      	movs	r0, r1
 800064c:	f000 f802 	bl	8000654 <__clzsi2>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	46c0      	nop			; (mov r8, r8)

08000654 <__clzsi2>:
 8000654:	211c      	movs	r1, #28
 8000656:	2301      	movs	r3, #1
 8000658:	041b      	lsls	r3, r3, #16
 800065a:	4298      	cmp	r0, r3
 800065c:	d301      	bcc.n	8000662 <__clzsi2+0xe>
 800065e:	0c00      	lsrs	r0, r0, #16
 8000660:	3910      	subs	r1, #16
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	4298      	cmp	r0, r3
 8000666:	d301      	bcc.n	800066c <__clzsi2+0x18>
 8000668:	0a00      	lsrs	r0, r0, #8
 800066a:	3908      	subs	r1, #8
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	4298      	cmp	r0, r3
 8000670:	d301      	bcc.n	8000676 <__clzsi2+0x22>
 8000672:	0900      	lsrs	r0, r0, #4
 8000674:	3904      	subs	r1, #4
 8000676:	a202      	add	r2, pc, #8	; (adr r2, 8000680 <__clzsi2+0x2c>)
 8000678:	5c10      	ldrb	r0, [r2, r0]
 800067a:	1840      	adds	r0, r0, r1
 800067c:	4770      	bx	lr
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	02020304 	.word	0x02020304
 8000684:	01010101 	.word	0x01010101
	...

08000690 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08b      	sub	sp, #44	; 0x2c
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f006 fd2c 	bl	80070fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006aa:	4b52      	ldr	r3, [pc, #328]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006ac:	2104      	movs	r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b2:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	2204      	movs	r2, #4
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c2:	4b4c      	ldr	r3, [pc, #304]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	430a      	orrs	r2, r1
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ca:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006e2:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f2:	4b40      	ldr	r3, [pc, #256]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006f4:	2102      	movs	r1, #2
 80006f6:	430a      	orrs	r2, r1
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fa:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <MX_GPIO_Init+0x164>)
 80006fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fe:	2202      	movs	r2, #2
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <MX_GPIO_Init+0x164>)
 8000708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800070a:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <MX_GPIO_Init+0x164>)
 800070c:	2108      	movs	r1, #8
 800070e:	430a      	orrs	r2, r1
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
 8000712:	4b38      	ldr	r3, [pc, #224]	; (80007f4 <MX_GPIO_Init+0x164>)
 8000714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000716:	2208      	movs	r2, #8
 8000718:	4013      	ands	r3, r2
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800071e:	193b      	adds	r3, r7, r4
 8000720:	4a35      	ldr	r2, [pc, #212]	; (80007f8 <MX_GPIO_Init+0x168>)
 8000722:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2203      	movs	r2, #3
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	193b      	adds	r3, r7, r4
 8000732:	4a32      	ldr	r2, [pc, #200]	; (80007fc <MX_GPIO_Init+0x16c>)
 8000734:	0019      	movs	r1, r3
 8000736:	0010      	movs	r0, r2
 8000738:	f003 fa48 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2202      	movs	r2, #2
 8000740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2203      	movs	r2, #3
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800074e:	193b      	adds	r3, r7, r4
 8000750:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <MX_GPIO_Init+0x170>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f003 fa39 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2210      	movs	r2, #16
 800075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2284      	movs	r2, #132	; 0x84
 8000764:	0392      	lsls	r2, r2, #14
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2201      	movs	r2, #1
 800076c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 800076e:	193a      	adds	r2, r7, r4
 8000770:	23a0      	movs	r3, #160	; 0xa0
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fa28 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800077c:	193b      	adds	r3, r7, r4
 800077e:	4a21      	ldr	r2, [pc, #132]	; (8000804 <MX_GPIO_Init+0x174>)
 8000780:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2203      	movs	r2, #3
 8000786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	193a      	adds	r2, r7, r4
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f003 fa18 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800079c:	193b      	adds	r3, r7, r4
 800079e:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <MX_GPIO_Init+0x178>)
 80007a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2203      	movs	r2, #3
 80007a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	4a16      	ldr	r2, [pc, #88]	; (800080c <MX_GPIO_Init+0x17c>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f003 fa09 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2204      	movs	r2, #4
 80007c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2203      	movs	r2, #3
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <MX_GPIO_Init+0x180>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f003 f9f9 	bl	8003bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2007      	movs	r0, #7
 80007e0:	f003 f93a 	bl	8003a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007e4:	2007      	movs	r0, #7
 80007e6:	f003 f94c 	bl	8003a82 <HAL_NVIC_EnableIRQ>

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b00b      	add	sp, #44	; 0x2c
 80007f0:	bd90      	pop	{r4, r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000
 80007f8:	00003fff 	.word	0x00003fff
 80007fc:	50000800 	.word	0x50000800
 8000800:	50001c00 	.word	0x50001c00
 8000804:	00009fe0 	.word	0x00009fe0
 8000808:	0000fcff 	.word	0x0000fcff
 800080c:	50000400 	.word	0x50000400
 8000810:	50000c00 	.word	0x50000c00

08000814 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2C1_Init+0x74>)
 8000850:	0018      	movs	r0, r3
 8000852:	f003 fb73 	bl	8003f3c <HAL_I2C_Init>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 fb31 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2C1_Init+0x74>)
 8000860:	2100      	movs	r1, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f003 ffae 	bl	80047c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 fb28 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <MX_I2C1_Init+0x74>)
 8000872:	2100      	movs	r1, #0
 8000874:	0018      	movs	r0, r3
 8000876:	f003 fff1 	bl	800485c <HAL_I2CEx_ConfigDigitalFilter>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fb1f 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000a0 	.word	0x200000a0
 800088c:	40005400 	.word	0x40005400
 8000890:	0010061a 	.word	0x0010061a

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	240c      	movs	r4, #12
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f006 fc29 	bl	80070fe <memset>
  if(i2cHandle->Instance==I2C1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_I2C_MspInit+0x80>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d129      	bne.n	800090a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008bc:	2102      	movs	r1, #2
 80008be:	430a      	orrs	r2, r1
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	2202      	movs	r2, #2
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	22c0      	movs	r2, #192	; 0xc0
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2212      	movs	r2, #18
 80008dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2203      	movs	r2, #3
 80008e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2204      	movs	r2, #4
 80008ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_I2C_MspInit+0x88>)
 80008f4:	0019      	movs	r1, r3
 80008f6:	0010      	movs	r0, r2
 80008f8:	f003 f968 	bl	8003bcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_I2C_MspInit+0x84>)
 80008fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_I2C_MspInit+0x84>)
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	0389      	lsls	r1, r1, #14
 8000906:	430a      	orrs	r2, r1
 8000908:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b009      	add	sp, #36	; 0x24
 8000910:	bd90      	pop	{r4, r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	40005400 	.word	0x40005400
 8000918:	40021000 	.word	0x40021000
 800091c:	50000400 	.word	0x50000400

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f002 ff58 	bl	80037d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f822 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f7ff feb0 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000930:	f002 feac 	bl	800368c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000934:	f7ff ff6e 	bl	8000814 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000938:	f002 fd4c 	bl	80033d4 <MX_TIM2_Init>
  MX_TIM6_Init();
 800093c:	f002 fdae 	bl	800349c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000940:	f002 fde8 	bl	8003514 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // structures initialization
  structInit();
 8000944:	f001 f900 	bl	8001b48 <structInit>

  // display initialization
  SSD1306_Init();
 8000948:	f000 fb5e 	bl	8001008 <SSD1306_Init>
  SSD1306_SetContrast(0);
 800094c:	2000      	movs	r0, #0
 800094e:	f001 f837 	bl	80019c0 <SSD1306_SetContrast>
  setTheme();
 8000952:	f001 fbe5 	bl	8002120 <setTheme>

  // timer TIM2 Encoder
  __HAL_TIM_SET_COUNTER(&htim2, 32000);
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <main+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	22fa      	movs	r2, #250	; 0xfa
 800095c:	01d2      	lsls	r2, r2, #7
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <main+0x4c>)
 8000962:	213c      	movs	r1, #60	; 0x3c
 8000964:	0018      	movs	r0, r3
 8000966:	f005 f8b3 	bl	8005ad0 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096a:	e7fe      	b.n	800096a <main+0x4a>
 800096c:	20000644 	.word	0x20000644

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b09f      	sub	sp, #124	; 0x7c
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	2440      	movs	r4, #64	; 0x40
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2338      	movs	r3, #56	; 0x38
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f006 fbbc 	bl	80070fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	232c      	movs	r3, #44	; 0x2c
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	2314      	movs	r3, #20
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f006 fbb4 	bl	80070fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	0018      	movs	r0, r3
 800099a:	2328      	movs	r3, #40	; 0x28
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f006 fbad 	bl	80070fe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <SystemClock_Config+0xe4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <SystemClock_Config+0xe8>)
 80009aa:	401a      	ands	r2, r3
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <SystemClock_Config+0xe4>)
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	0109      	lsls	r1, r1, #4
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	22a0      	movs	r2, #160	; 0xa0
 80009c2:	02d2      	lsls	r2, r2, #11
 80009c4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2202      	movs	r2, #2
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2280      	movs	r2, #128	; 0x80
 80009d0:	0252      	lsls	r2, r2, #9
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	02d2      	lsls	r2, r2, #11
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	03d2      	lsls	r2, r2, #15
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 ff84 	bl	80048f4 <HAL_RCC_OscConfig>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009f0:	f000 fa66 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	212c      	movs	r1, #44	; 0x2c
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	220f      	movs	r2, #15
 80009fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2203      	movs	r2, #3
 8000a00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2100      	movs	r1, #0
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f004 fb3f 	bl	800509c <HAL_RCC_ClockConfig>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a22:	f000 fa4d 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	220a      	movs	r2, #10
 8000a2a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2204      	movs	r2, #4
 8000a30:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f004 fd7c 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a44:	f000 fa3c 	bl	8000ec0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a48:	f004 fc70 	bl	800532c <HAL_RCC_EnableCSS>
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b01f      	add	sp, #124	; 0x7c
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40007000 	.word	0x40007000
 8000a58:	ffffe7ff 	.word	0xffffe7ff

08000a5c <HAL_TIM_IC_CaptureCallback>:
/* **********************************************IRQ************************************* */
// =========================================================================================
/* TIMERS - ENCODER */
// =========================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d11b      	bne.n	8000aa8 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000a70:	250f      	movs	r5, #15
 8000a72:	197c      	adds	r4, r7, r5
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f005 f9bf 	bl	8005dfa <HAL_TIM_Base_GetState>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	7023      	strb	r3, [r4, #0]
		uint8_t encoderBusyFlag = HAL_TIM_Encoder_GetState(&htim2);
 8000a80:	260e      	movs	r6, #14
 8000a82:	19bc      	adds	r4, r7, r6
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f005 f9c3 	bl	8005e12 <HAL_TIM_Encoder_GetState>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	7023      	strb	r3, [r4, #0]

		if(tim7BusyFlag == 1 && encoderBusyFlag == 1) HAL_TIM_Base_Start_IT(&htim7);
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d107      	bne.n	8000aa8 <HAL_TIM_IC_CaptureCallback+0x4c>
 8000a98:	19bb      	adds	r3, r7, r6
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d103      	bne.n	8000aa8 <HAL_TIM_IC_CaptureCallback+0x4c>
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f004 fefc 	bl	80058a0 <HAL_TIM_Base_Start_IT>
	}
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b005      	add	sp, #20
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab0:	200006c4 	.word	0x200006c4
 8000ab4:	20000644 	.word	0x20000644

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

// =========================================================================================
/* TIMERS - COUNTING */
// =========================================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	// ========================
	/* TIM6 - CLICK BUFFOR */
	// ========================
	if(htim->Instance == TIM6)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4ad0      	ldr	r2, [pc, #832]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d000      	beq.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x14>
 8000aca:	e104      	b.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x21e>
	{
		bool btnBusyFlag = HAL_GPIO_ReadPin(GPIOA, SET_BTN_Pin);
 8000acc:	23a0      	movs	r3, #160	; 0xa0
 8000ace:	05db      	lsls	r3, r3, #23
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f003 f9f8 	bl	8003ec8 <HAL_GPIO_ReadPin>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	001a      	movs	r2, r3
 8000adc:	240d      	movs	r4, #13
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	1e51      	subs	r1, r2, #1
 8000ae2:	418a      	sbcs	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]

		HAL_TIM_Base_Stop_IT(&htim6);
 8000ae6:	4bc9      	ldr	r3, [pc, #804]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f004 ff2b 	bl	8005944 <HAL_TIM_Base_Stop_IT>
		if(!btnBusyFlag)
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4053      	eors	r3, r2
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d100      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x46>
 8000afc:	e0a2      	b.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x18c>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000afe:	4bc3      	ldr	r3, [pc, #780]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f004 fecd 	bl	80058a0 <HAL_TIM_Base_Start_IT>
			if((workStep >= 2 && workStep <=61)) pressBtnCounter++;
 8000b06:	4bc2      	ldr	r3, [pc, #776]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d90b      	bls.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x70>
 8000b10:	4bbf      	ldr	r3, [pc, #764]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b3d      	cmp	r3, #61	; 0x3d
 8000b18:	d806      	bhi.n	8000b28 <HAL_TIM_PeriodElapsedCallback+0x70>
 8000b1a:	4bbe      	ldr	r3, [pc, #760]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4bbb      	ldr	r3, [pc, #748]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b26:	701a      	strb	r2, [r3, #0]
			if(pressBtnCounter > PRESS_BTN_TIME)
 8000b28:	4bba      	ldr	r3, [pc, #744]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b0a      	cmp	r3, #10
 8000b30:	d800      	bhi.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000b32:	e087      	b.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x18c>
			{
				HAL_TIM_Base_Stop_IT(&htim6);
 8000b34:	4bb5      	ldr	r3, [pc, #724]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f004 ff04 	bl	8005944 <HAL_TIM_Base_Stop_IT>
				bool exception = 0;
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
				switch(workStep)
 8000b44:	4bb2      	ldr	r3, [pc, #712]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b0c      	cmp	r3, #12
 8000b4c:	dc08      	bgt.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	db64      	blt.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
 8000b52:	2b0c      	cmp	r3, #12
 8000b54:	d862      	bhi.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
 8000b56:	009a      	lsls	r2, r3, #2
 8000b58:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000b5a:	18d3      	adds	r3, r2, r3
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	469f      	mov	pc, r3
 8000b60:	2b3d      	cmp	r3, #61	; 0x3d
 8000b62:	d044      	beq.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x136>
 8000b64:	e05a      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
				{
					case 11:
						exception = 1;
 8000b66:	230f      	movs	r3, #15
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
						workStep = 12;
 8000b6e:	4ba8      	ldr	r3, [pc, #672]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b70:	220c      	movs	r2, #12
 8000b72:	701a      	strb	r2, [r3, #0]
						break;
 8000b74:	e052      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
					case 12:
						exception = 1;
 8000b76:	230f      	movs	r3, #15
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
						workStep = 1;
 8000b7e:	4ba4      	ldr	r3, [pc, #656]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
						break;
 8000b84:	e04a      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
					case 2:
						width_MAIN = arrayToInt_chVal();
 8000b86:	f002 f82f 	bl	8002be8 <arrayToInt_chVal>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4ba3      	ldr	r3, [pc, #652]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000b90:	801a      	strh	r2, [r3, #0]
						saveSetValue(width_MAIN);
 8000b92:	4ba2      	ldr	r3, [pc, #648]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 f8a5 	bl	8002ce8 <saveSetValue>
						break;
 8000b9e:	e03d      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
					case 3:
						turns_MAIN = arrayToInt_chVal();
 8000ba0:	f002 f822 	bl	8002be8 <arrayToInt_chVal>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	4b9d      	ldr	r3, [pc, #628]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000baa:	801a      	strh	r2, [r3, #0]
						saveSetValue(turns_MAIN);
 8000bac:	4b9c      	ldr	r3, [pc, #624]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f002 f898 	bl	8002ce8 <saveSetValue>
						break;
 8000bb8:	e030      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
					case 4:
						diameter_MAIN = arrayToInt_chVal();
 8000bba:	f002 f815 	bl	8002be8 <arrayToInt_chVal>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	4b98      	ldr	r3, [pc, #608]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000bc4:	801a      	strh	r2, [r3, #0]
						saveSetValue(diameter_MAIN);
 8000bc6:	4b97      	ldr	r3, [pc, #604]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 f88b 	bl	8002ce8 <saveSetValue>
						break;
 8000bd2:	e023      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
					case 5:
						speed_MAIN = arrayToInt_chVal();
 8000bd4:	f002 f808 	bl	8002be8 <arrayToInt_chVal>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	4b92      	ldr	r3, [pc, #584]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000bde:	801a      	strh	r2, [r3, #0]
						saveSetValue(speed_MAIN);
 8000be0:	4b91      	ldr	r3, [pc, #580]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 f87e 	bl	8002ce8 <saveSetValue>
						break;
 8000bec:	e016      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0x164>
					case 61:
						exception = 1;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
						if(!selector) workStep = 7;
 8000bf6:	4b8d      	ldr	r3, [pc, #564]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d103      	bne.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x150>
 8000c00:	4b83      	ldr	r3, [pc, #524]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e005      	b.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x15c>
						else
						{
							workStep = 2;
 8000c08:	4b81      	ldr	r3, [pc, #516]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	701a      	strb	r2, [r3, #0]
							correctionFlag = 1;
 8000c0e:	4b88      	ldr	r3, [pc, #544]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
						}
						selector = 0;
 8000c14:	4b85      	ldr	r3, [pc, #532]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
						break;
 8000c1a:	46c0      	nop			; (mov r8, r8)
				}
				if(!exception)
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2201      	movs	r2, #1
 8000c24:	4053      	eors	r3, r2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x182>
				{
					workStep++;
 8000c2c:	4b78      	ldr	r3, [pc, #480]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c38:	701a      	strb	r2, [r3, #0]

				}
				pressBtnCounter = 0;
 8000c3a:	4b76      	ldr	r3, [pc, #472]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
				setTheme();
 8000c40:	f001 fa6e 	bl	8002120 <setTheme>
			}
		}
		if(btnBusyFlag)
 8000c44:	230d      	movs	r3, #13
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d043      	beq.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x21e>
		{
			pressBtnCounter = 0;
 8000c4e:	4b71      	ldr	r3, [pc, #452]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			switch(workStep)
 8000c54:	4b6e      	ldr	r3, [pc, #440]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b0b      	cmp	r3, #11
 8000c5c:	d83c      	bhi.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
 8000c5e:	009a      	lsls	r2, r3, #2
 8000c60:	4b74      	ldr	r3, [pc, #464]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	469f      	mov	pc, r3
			{
				case 1:
					if(projectSelect == 0) workStep = 2;
 8000c68:	4b73      	ldr	r3, [pc, #460]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x1c2>
 8000c72:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	701a      	strb	r2, [r3, #0]
 8000c78:	e002      	b.n	8000c80 <HAL_TIM_PeriodElapsedCallback+0x1c8>
					else workStep = 11;
 8000c7a:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c7c:	220b      	movs	r2, #11
 8000c7e:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000c80:	f001 fa4e 	bl	8002120 <setTheme>
					break;
 8000c84:	e028      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
				case 11:
					workStep = 1;
 8000c86:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000c8c:	f001 fa48 	bl	8002120 <setTheme>
					break;
 8000c90:	e022      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
				case 2:
					showValueScreen(CARCASS_WIDTH, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000c92:	2300      	movs	r3, #0
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f001 fd6f 	bl	800277c <showValueScreen>
					break;
 8000c9e:	e01b      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
				case 3:
					showValueScreen(CARCASS_COIL_TURNS, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f001 fd68 	bl	800277c <showValueScreen>
					break;
 8000cac:	e014      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
				case 4:
					showValueScreen(WINDING_DIAMETER, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f001 fd61 	bl	800277c <showValueScreen>
					break;
 8000cba:	e00d      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
				case 5:
					showValueScreen(WINDING_SPEED, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f001 fd5a 	bl	800277c <showValueScreen>
					break;
 8000cc8:	e006      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
				case 6:
					workStep = 61;
 8000cca:	4b51      	ldr	r3, [pc, #324]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000ccc:	223d      	movs	r2, #61	; 0x3d
 8000cce:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000cd0:	f001 fa26 	bl	8002120 <setTheme>
					break;
 8000cd4:	e000      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x220>
			}
		}
 8000cd6:	46c0      	nop			; (mov r8, r8)
	}

	// ========================
	/* TIM7 - BUFFOR LEFT/RIGHT */
	// ========================
	if(htim->Instance == TIM7)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a57      	ldr	r2, [pc, #348]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d000      	beq.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x22c>
 8000ce2:	e08e      	b.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x34a>
	{
		bool direction;

		HAL_TIM_Base_Stop_IT(&htim7);
 8000ce4:	4b56      	ldr	r3, [pc, #344]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f004 fe2c 	bl	8005944 <HAL_TIM_Base_Stop_IT>
		encoderCount = (__HAL_TIM_GET_COUNTER(&htim2) / 2);
 8000cec:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000cf8:	801a      	strh	r2, [r3, #0]
		if(encoderCount != encoderCountPrev)
 8000cfa:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b52      	ldr	r3, [pc, #328]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d100      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x254>
 8000d0a:	e07a      	b.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x34a>
		{
			if(encoderCount > encoderCountPrev) direction = 1;
 8000d0c:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d904      	bls.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x26e>
 8000d1c:	230e      	movs	r3, #14
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	e003      	b.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x276>
			else direction = 0;
 8000d26:	230e      	movs	r3, #14
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
			encoderCountPrev = encoderCount;
 8000d2e:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b45      	ldr	r3, [pc, #276]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000d36:	801a      	strh	r2, [r3, #0]
			switch(workStep)
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b0c      	cmp	r3, #12
 8000d40:	dc0a      	bgt.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dc00      	bgt.n	8000d48 <HAL_TIM_PeriodElapsedCallback+0x290>
 8000d46:	e088      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
 8000d48:	2b0c      	cmp	r3, #12
 8000d4a:	d900      	bls.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x296>
 8000d4c:	e085      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
 8000d4e:	009a      	lsls	r2, r3, #2
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	469f      	mov	pc, r3
 8000d58:	2b3d      	cmp	r3, #61	; 0x3d
 8000d5a:	d04a      	beq.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x33a>
					break;

			}
		}
	}
}
 8000d5c:	e07d      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
					if(!direction)
 8000d5e:	230e      	movs	r3, #14
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4053      	eors	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00c      	beq.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x2d0>
						if(projectSelect > 0) projectSelect--;
 8000d6e:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d015      	beq.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e00d      	b.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ec>
						if((projectSelect) < PROJECT_COUNT) projectSelect++;
 8000d88:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d206      	bcs.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x2ec>
 8000d96:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000da2:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000da4:	f001 f9bc 	bl	8002120 <setTheme>
					break;
 8000da8:	e057      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
					showValueScreen(CARCASS_WIDTH, VALUE_CHANGING, direction, CONTI_RUN);
 8000daa:	230e      	movs	r3, #14
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	781a      	ldrb	r2, [r3, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	2000      	movs	r0, #0
 8000db6:	f001 fce1 	bl	800277c <showValueScreen>
					break;
 8000dba:	e04e      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
					showValueScreen(CARCASS_COIL_TURNS, VALUE_CHANGING, direction, CONTI_RUN);
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f001 fcd8 	bl	800277c <showValueScreen>
					break;
 8000dcc:	e045      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
					showValueScreen(WINDING_DIAMETER, VALUE_CHANGING, direction, CONTI_RUN);
 8000dce:	230e      	movs	r3, #14
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	781a      	ldrb	r2, [r3, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f001 fccf 	bl	800277c <showValueScreen>
					break;
 8000dde:	e03c      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
					showValueScreen(WINDING_SPEED, VALUE_CHANGING, direction, CONTI_RUN);
 8000de0:	230e      	movs	r3, #14
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	2101      	movs	r1, #1
 8000dea:	2003      	movs	r0, #3
 8000dec:	f001 fcc6 	bl	800277c <showValueScreen>
					break;
 8000df0:	e033      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
					correctnessQuery(direction, CONTI_RUN);
 8000df2:	230e      	movs	r3, #14
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 f8e2 	bl	8002fc4 <correctnessQuery>
					break;
 8000e00:	e02b      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
		}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	e029      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a2>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40001000 	.word	0x40001000
 8000e0c:	20000684 	.word	0x20000684
 8000e10:	200004fe 	.word	0x200004fe
 8000e14:	200000ee 	.word	0x200000ee
 8000e18:	08007be8 	.word	0x08007be8
 8000e1c:	200000f0 	.word	0x200000f0
 8000e20:	200000f2 	.word	0x200000f2
 8000e24:	200000f4 	.word	0x200000f4
 8000e28:	200000f6 	.word	0x200000f6
 8000e2c:	2000050d 	.word	0x2000050d
 8000e30:	20000500 	.word	0x20000500
 8000e34:	08007c1c 	.word	0x08007c1c
 8000e38:	200004ff 	.word	0x200004ff
 8000e3c:	40001400 	.word	0x40001400
 8000e40:	200006c4 	.word	0x200006c4
 8000e44:	20000644 	.word	0x20000644
 8000e48:	200000ec 	.word	0x200000ec
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	08007c4c 	.word	0x08007c4c
 8000e54:	08009080 	.word	0x08009080
					break;
 8000e58:	46c0      	nop			; (mov r8, r8)
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b005      	add	sp, #20
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)

08000e64 <HAL_GPIO_EXTI_Callback>:

// =========================================================================================
/* GPIO */
// =========================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	801a      	strh	r2, [r3, #0]
	uint8_t tim6BusyFlag = HAL_TIM_Base_GetState(&htim6);
 8000e70:	250f      	movs	r5, #15
 8000e72:	197c      	adds	r4, r7, r5
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f004 ffbf 	bl	8005dfa <HAL_TIM_Base_GetState>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	7023      	strb	r3, [r4, #0]
	uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000e80:	260e      	movs	r6, #14
 8000e82:	19bc      	adds	r4, r7, r6
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x58>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f004 ffb7 	bl	8005dfa <HAL_TIM_Base_GetState>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
	if((tim6BusyFlag == 1) && (tim7BusyFlag == 1))
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10b      	bne.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x4c>
 8000e98:	19bb      	adds	r3, r7, r6
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d107      	bne.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(GPIO_Pin == SET_BTN_Pin) HAL_TIM_Base_Start_IT(&htim6);
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d103      	bne.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x4c>
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x54>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f004 fcf8 	bl	80058a0 <HAL_TIM_Base_Start_IT>
	}
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b005      	add	sp, #20
 8000eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb8:	20000684 	.word	0x20000684
 8000ebc:	200006c4 	.word	0x200006c4

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>

08000eca <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000eca:	b590      	push	{r4, r7, lr}
 8000ecc:	b087      	sub	sp, #28
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	0004      	movs	r4, r0
 8000ed2:	0008      	movs	r0, r1
 8000ed4:	60ba      	str	r2, [r7, #8]
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	230e      	movs	r3, #14
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	1c22      	adds	r2, r4, #0
 8000ede:	801a      	strh	r2, [r3, #0]
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	1c02      	adds	r2, r0, #0
 8000ee6:	801a      	strh	r2, [r3, #0]
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	1c0a      	adds	r2, r1, #0
 8000eec:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	5e9b      	ldrsh	r3, [r3, r2]
 8000ef4:	3307      	adds	r3, #7
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da00      	bge.n	8000efc <SSD1306_DrawBitmap+0x32>
 8000efa:	3307      	adds	r3, #7
 8000efc:	10db      	asrs	r3, r3, #3
 8000efe:	001a      	movs	r2, r3
 8000f00:	2310      	movs	r3, #16
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000f06:	2317      	movs	r3, #23
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8000f0e:	2314      	movs	r3, #20
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	801a      	strh	r2, [r3, #0]
 8000f16:	e068      	b.n	8000fea <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8000f18:	2312      	movs	r3, #18
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	e048      	b.n	8000fb4 <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8000f22:	2312      	movs	r3, #18
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d006      	beq.n	8000f3e <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8000f30:	2317      	movs	r3, #23
 8000f32:	18fa      	adds	r2, r7, r3
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	18db      	adds	r3, r3, r3
 8000f3a:	7013      	strb	r3, [r2, #0]
 8000f3c:	e019      	b.n	8000f72 <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f3e:	2314      	movs	r3, #20
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	5e9b      	ldrsh	r3, [r3, r2]
 8000f46:	2210      	movs	r2, #16
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	5e52      	ldrsh	r2, [r2, r1]
 8000f4e:	435a      	muls	r2, r3
 8000f50:	2312      	movs	r3, #18
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	5e5b      	ldrsh	r3, [r3, r1]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da00      	bge.n	8000f5e <SSD1306_DrawBitmap+0x94>
 8000f5c:	3307      	adds	r3, #7
 8000f5e:	10db      	asrs	r3, r3, #3
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	18d3      	adds	r3, r2, r3
 8000f64:	001a      	movs	r2, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	189a      	adds	r2, r3, r2
 8000f6a:	2317      	movs	r3, #23
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000f72:	2317      	movs	r3, #23
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da11      	bge.n	8000fa2 <SSD1306_DrawBitmap+0xd8>
 8000f7e:	230e      	movs	r3, #14
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	881a      	ldrh	r2, [r3, #0]
 8000f84:	2312      	movs	r3, #18
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	18d3      	adds	r3, r2, r3
 8000f8c:	b298      	uxth	r0, r3
 8000f8e:	230c      	movs	r3, #12
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	8819      	ldrh	r1, [r3, #0]
 8000f94:	232c      	movs	r3, #44	; 0x2c
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	f000 f945 	bl	800122c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000fa2:	2112      	movs	r1, #18
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	5e9b      	ldrsh	r3, [r3, r2]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	2312      	movs	r3, #18
 8000fb6:	18fa      	adds	r2, r7, r3
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	2100      	movs	r1, #0
 8000fbc:	5e52      	ldrsh	r2, [r2, r1]
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	5e5b      	ldrsh	r3, [r3, r1]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbad      	blt.n	8000f22 <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8000fc6:	2114      	movs	r1, #20
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	5e9b      	ldrsh	r3, [r3, r2]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	801a      	strh	r2, [r3, #0]
 8000fd8:	210c      	movs	r1, #12
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	5e9b      	ldrsh	r3, [r3, r2]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	2314      	movs	r3, #20
 8000fec:	18fa      	adds	r2, r7, r3
 8000fee:	2328      	movs	r3, #40	; 0x28
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	5e52      	ldrsh	r2, [r2, r1]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	5e5b      	ldrsh	r3, [r3, r1]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	db8c      	blt.n	8000f18 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b007      	add	sp, #28
 8001006:	bd90      	pop	{r4, r7, pc}

08001008 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800100e:	f000 fcf3 	bl	80019f8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001012:	4b5b      	ldr	r3, [pc, #364]	; (8001180 <SSD1306_Init+0x178>)
 8001014:	485b      	ldr	r0, [pc, #364]	; (8001184 <SSD1306_Init+0x17c>)
 8001016:	2201      	movs	r2, #1
 8001018:	2178      	movs	r1, #120	; 0x78
 800101a:	f003 f92d 	bl	8004278 <HAL_I2C_IsDeviceReady>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8001022:	2300      	movs	r3, #0
 8001024:	e0a8      	b.n	8001178 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <SSD1306_Init+0x180>)
 8001028:	607b      	str	r3, [r7, #4]
	while(p>0)
 800102a:	e002      	b.n	8001032 <SSD1306_Init+0x2a>
		p--;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f9      	bne.n	800102c <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001038:	22ae      	movs	r2, #174	; 0xae
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	; 0x78
 800103e:	f000 fd5b 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001042:	2220      	movs	r2, #32
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	; 0x78
 8001048:	f000 fd56 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800104c:	2210      	movs	r2, #16
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	; 0x78
 8001052:	f000 fd51 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001056:	22b0      	movs	r2, #176	; 0xb0
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	; 0x78
 800105c:	f000 fd4c 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001060:	22c8      	movs	r2, #200	; 0xc8
 8001062:	2100      	movs	r1, #0
 8001064:	2078      	movs	r0, #120	; 0x78
 8001066:	f000 fd47 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2078      	movs	r0, #120	; 0x78
 8001070:	f000 fd42 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001074:	2210      	movs	r2, #16
 8001076:	2100      	movs	r1, #0
 8001078:	2078      	movs	r0, #120	; 0x78
 800107a:	f000 fd3d 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	2100      	movs	r1, #0
 8001082:	2078      	movs	r0, #120	; 0x78
 8001084:	f000 fd38 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001088:	2281      	movs	r2, #129	; 0x81
 800108a:	2100      	movs	r1, #0
 800108c:	2078      	movs	r0, #120	; 0x78
 800108e:	f000 fd33 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	; 0x78
 8001098:	f000 fd2e 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800109c:	22a1      	movs	r2, #161	; 0xa1
 800109e:	2100      	movs	r1, #0
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f000 fd29 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010a6:	22a6      	movs	r2, #166	; 0xa6
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 fd24 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010b0:	22a8      	movs	r2, #168	; 0xa8
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 fd1f 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010ba:	223f      	movs	r2, #63	; 0x3f
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 fd1a 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010c4:	22a4      	movs	r2, #164	; 0xa4
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 fd15 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010ce:	22d3      	movs	r2, #211	; 0xd3
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 fd10 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2078      	movs	r0, #120	; 0x78
 80010de:	f000 fd0b 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010e2:	22d5      	movs	r2, #213	; 0xd5
 80010e4:	2100      	movs	r1, #0
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f000 fd06 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010ec:	22f0      	movs	r2, #240	; 0xf0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2078      	movs	r0, #120	; 0x78
 80010f2:	f000 fd01 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80010f6:	22d9      	movs	r2, #217	; 0xd9
 80010f8:	2100      	movs	r1, #0
 80010fa:	2078      	movs	r0, #120	; 0x78
 80010fc:	f000 fcfc 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001100:	2222      	movs	r2, #34	; 0x22
 8001102:	2100      	movs	r1, #0
 8001104:	2078      	movs	r0, #120	; 0x78
 8001106:	f000 fcf7 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800110a:	22da      	movs	r2, #218	; 0xda
 800110c:	2100      	movs	r1, #0
 800110e:	2078      	movs	r0, #120	; 0x78
 8001110:	f000 fcf2 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001114:	2212      	movs	r2, #18
 8001116:	2100      	movs	r1, #0
 8001118:	2078      	movs	r0, #120	; 0x78
 800111a:	f000 fced 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800111e:	22db      	movs	r2, #219	; 0xdb
 8001120:	2100      	movs	r1, #0
 8001122:	2078      	movs	r0, #120	; 0x78
 8001124:	f000 fce8 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001128:	2220      	movs	r2, #32
 800112a:	2100      	movs	r1, #0
 800112c:	2078      	movs	r0, #120	; 0x78
 800112e:	f000 fce3 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001132:	228d      	movs	r2, #141	; 0x8d
 8001134:	2100      	movs	r1, #0
 8001136:	2078      	movs	r0, #120	; 0x78
 8001138:	f000 fcde 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800113c:	2214      	movs	r2, #20
 800113e:	2100      	movs	r1, #0
 8001140:	2078      	movs	r0, #120	; 0x78
 8001142:	f000 fcd9 	bl	8001af8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001146:	22af      	movs	r2, #175	; 0xaf
 8001148:	2100      	movs	r1, #0
 800114a:	2078      	movs	r0, #120	; 0x78
 800114c:	f000 fcd4 	bl	8001af8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001150:	222e      	movs	r2, #46	; 0x2e
 8001152:	2100      	movs	r1, #0
 8001154:	2078      	movs	r0, #120	; 0x78
 8001156:	f000 fccf 	bl	8001af8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f84c 	bl	80011f8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001160:	f000 f816 	bl	8001190 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <SSD1306_Init+0x184>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <SSD1306_Init+0x184>)
 800116c:	2200      	movs	r2, #0
 800116e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <SSD1306_Init+0x184>)
 8001172:	2201      	movs	r2, #1
 8001174:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}
 8001180:	00004e20 	.word	0x00004e20
 8001184:	200000a0 	.word	0x200000a0
 8001188:	000009c4 	.word	0x000009c4
 800118c:	200004f8 	.word	0x200004f8

08001190 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e021      	b.n	80011e2 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3b50      	subs	r3, #80	; 0x50
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	001a      	movs	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	; 0x78
 80011ac:	f000 fca4 	bl	8001af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2078      	movs	r0, #120	; 0x78
 80011b6:	f000 fc9f 	bl	8001af8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80011ba:	2210      	movs	r2, #16
 80011bc:	2100      	movs	r1, #0
 80011be:	2078      	movs	r0, #120	; 0x78
 80011c0:	f000 fc9a 	bl	8001af8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80011c4:	1dfb      	adds	r3, r7, #7
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	01da      	lsls	r2, r3, #7
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <SSD1306_UpdateScreen+0x64>)
 80011cc:	18d2      	adds	r2, r2, r3
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	2140      	movs	r1, #64	; 0x40
 80011d2:	2078      	movs	r0, #120	; 0x78
 80011d4:	f000 fc24 	bl	8001a20 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	781a      	ldrb	r2, [r3, #0]
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	3201      	adds	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	d9d9      	bls.n	800119e <SSD1306_UpdateScreen+0xe>
	}
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200000f8 	.word	0x200000f8

080011f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <SSD1306_Fill+0x18>
 800120c:	2300      	movs	r3, #0
 800120e:	e000      	b.n	8001212 <SSD1306_Fill+0x1a>
 8001210:	23ff      	movs	r3, #255	; 0xff
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <SSD1306_Fill+0x30>)
 8001218:	0019      	movs	r1, r3
 800121a:	f005 ff70 	bl	80070fe <memset>
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	200000f8 	.word	0x200000f8

0800122c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	0004      	movs	r4, r0
 8001234:	0008      	movs	r0, r1
 8001236:	0011      	movs	r1, r2
 8001238:	1dbb      	adds	r3, r7, #6
 800123a:	1c22      	adds	r2, r4, #0
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	1c02      	adds	r2, r0, #0
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	1cfb      	adds	r3, r7, #3
 8001246:	1c0a      	adds	r2, r1, #0
 8001248:	701a      	strb	r2, [r3, #0]
	if (
 800124a:	1dbb      	adds	r3, r7, #6
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	2b7f      	cmp	r3, #127	; 0x7f
 8001250:	d852      	bhi.n	80012f8 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	2b3f      	cmp	r3, #63	; 0x3f
 8001258:	d84e      	bhi.n	80012f8 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <SSD1306_DrawPixel+0xd4>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8001262:	1cfb      	adds	r3, r7, #3
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	425a      	negs	r2, r3
 8001268:	4153      	adcs	r3, r2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	1cfb      	adds	r3, r7, #3
 800126e:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001270:	1cfb      	adds	r3, r7, #3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d11e      	bne.n	80012b6 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001278:	1dbb      	adds	r3, r7, #6
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	08db      	lsrs	r3, r3, #3
 8001282:	b298      	uxth	r0, r3
 8001284:	0003      	movs	r3, r0
 8001286:	01db      	lsls	r3, r3, #7
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <SSD1306_DrawPixel+0xd8>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	b25a      	sxtb	r2, r3
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2107      	movs	r1, #7
 8001296:	400b      	ands	r3, r1
 8001298:	2101      	movs	r1, #1
 800129a:	4099      	lsls	r1, r3
 800129c:	000b      	movs	r3, r1
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b259      	sxtb	r1, r3
 80012a4:	1dbb      	adds	r3, r7, #6
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	0003      	movs	r3, r0
 80012aa:	01db      	lsls	r3, r3, #7
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	b2c9      	uxtb	r1, r1
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <SSD1306_DrawPixel+0xd8>)
 80012b2:	54d1      	strb	r1, [r2, r3]
 80012b4:	e021      	b.n	80012fa <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012b6:	1dbb      	adds	r3, r7, #6
 80012b8:	881a      	ldrh	r2, [r3, #0]
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	b298      	uxth	r0, r3
 80012c2:	0003      	movs	r3, r0
 80012c4:	01db      	lsls	r3, r3, #7
 80012c6:	18d3      	adds	r3, r2, r3
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <SSD1306_DrawPixel+0xd8>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	1d3a      	adds	r2, r7, #4
 80012d0:	8812      	ldrh	r2, [r2, #0]
 80012d2:	2107      	movs	r1, #7
 80012d4:	400a      	ands	r2, r1
 80012d6:	2101      	movs	r1, #1
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	b252      	sxtb	r2, r2
 80012de:	43d2      	mvns	r2, r2
 80012e0:	b252      	sxtb	r2, r2
 80012e2:	4013      	ands	r3, r2
 80012e4:	b259      	sxtb	r1, r3
 80012e6:	1dbb      	adds	r3, r7, #6
 80012e8:	881a      	ldrh	r2, [r3, #0]
 80012ea:	0003      	movs	r3, r0
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	18d3      	adds	r3, r2, r3
 80012f0:	b2c9      	uxtb	r1, r1
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <SSD1306_DrawPixel+0xd8>)
 80012f4:	54d1      	strb	r1, [r2, r3]
 80012f6:	e000      	b.n	80012fa <SSD1306_DrawPixel+0xce>
		return;
 80012f8:	46c0      	nop			; (mov r8, r8)
	}
}
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b003      	add	sp, #12
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	200004f8 	.word	0x200004f8
 8001304:	200000f8 	.word	0x200000f8

08001308 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	1dbb      	adds	r3, r7, #6
 8001312:	801a      	strh	r2, [r3, #0]
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	1c0a      	adds	r2, r1, #0
 8001318:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <SSD1306_GotoXY+0x2c>)
 800131c:	1dba      	adds	r2, r7, #6
 800131e:	8812      	ldrh	r2, [r2, #0]
 8001320:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SSD1306_GotoXY+0x2c>)
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	8812      	ldrh	r2, [r2, #0]
 8001328:	805a      	strh	r2, [r3, #2]
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	200004f8 	.word	0x200004f8

08001338 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6039      	str	r1, [r7, #0]
 8001340:	0011      	movs	r1, r2
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	1c02      	adds	r2, r0, #0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	1dbb      	adds	r3, r7, #6
 800134a:	1c0a      	adds	r2, r1, #0
 800134c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <SSD1306_Putc+0x100>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	001a      	movs	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	18d3      	adds	r3, r2, r3
	if (
 800135a:	2b7f      	cmp	r3, #127	; 0x7f
 800135c:	dc07      	bgt.n	800136e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <SSD1306_Putc+0x100>)
 8001360:	885b      	ldrh	r3, [r3, #2]
 8001362:	001a      	movs	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800136a:	2b3f      	cmp	r3, #63	; 0x3f
 800136c:	dd01      	ble.n	8001372 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 800136e:	2300      	movs	r3, #0
 8001370:	e05e      	b.n	8001430 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e04a      	b.n	800140e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3b20      	subs	r3, #32
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	7849      	ldrb	r1, [r1, #1]
 8001386:	434b      	muls	r3, r1
 8001388:	0019      	movs	r1, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	18cb      	adds	r3, r1, r3
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	e02f      	b.n	80013fc <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	409a      	lsls	r2, r3
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	4013      	ands	r3, r2
 80013a8:	d011      	beq.n	80013ce <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <SSD1306_Putc+0x100>)
 80013ac:	881a      	ldrh	r2, [r3, #0]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	18d3      	adds	r3, r2, r3
 80013b4:	b298      	uxth	r0, r3
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <SSD1306_Putc+0x100>)
 80013b8:	885a      	ldrh	r2, [r3, #2]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	b299      	uxth	r1, r3
 80013c2:	1dbb      	adds	r3, r7, #6
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	001a      	movs	r2, r3
 80013c8:	f7ff ff30 	bl	800122c <SSD1306_DrawPixel>
 80013cc:	e013      	b.n	80013f6 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <SSD1306_Putc+0x100>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	18d3      	adds	r3, r2, r3
 80013d8:	b298      	uxth	r0, r3
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <SSD1306_Putc+0x100>)
 80013dc:	885a      	ldrh	r2, [r3, #2]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	18d3      	adds	r3, r2, r3
 80013e4:	b299      	uxth	r1, r3
 80013e6:	1dbb      	adds	r3, r7, #6
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	425a      	negs	r2, r3
 80013ec:	4153      	adcs	r3, r2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	001a      	movs	r2, r3
 80013f2:	f7ff ff1b 	bl	800122c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	3301      	adds	r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	001a      	movs	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4293      	cmp	r3, r2
 8001406:	d3c9      	bcc.n	800139c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	001a      	movs	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	4293      	cmp	r3, r2
 8001418:	d3ae      	bcc.n	8001378 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <SSD1306_Putc+0x100>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	18d3      	adds	r3, r2, r3
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <SSD1306_Putc+0x100>)
 800142a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b006      	add	sp, #24
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200004f8 	.word	0x200004f8

0800143c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800144a:	e013      	b.n	8001474 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	7818      	ldrb	r0, [r3, #0]
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	0019      	movs	r1, r3
 8001458:	f7ff ff6e 	bl	8001338 <SSD1306_Putc>
 800145c:	0003      	movs	r3, r0
 800145e:	001a      	movs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d002      	beq.n	800146e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	e008      	b.n	8001480 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e7      	bne.n	800144c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	781b      	ldrb	r3, [r3, #0]
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}

08001488 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	0005      	movs	r5, r0
 8001490:	000c      	movs	r4, r1
 8001492:	0010      	movs	r0, r2
 8001494:	0019      	movs	r1, r3
 8001496:	1dbb      	adds	r3, r7, #6
 8001498:	1c2a      	adds	r2, r5, #0
 800149a:	801a      	strh	r2, [r3, #0]
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	1c22      	adds	r2, r4, #0
 80014a0:	801a      	strh	r2, [r3, #0]
 80014a2:	1cbb      	adds	r3, r7, #2
 80014a4:	1c02      	adds	r2, r0, #0
 80014a6:	801a      	strh	r2, [r3, #0]
 80014a8:	003b      	movs	r3, r7
 80014aa:	1c0a      	adds	r2, r1, #0
 80014ac:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	2b7f      	cmp	r3, #127	; 0x7f
 80014b4:	d902      	bls.n	80014bc <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 80014b6:	1dbb      	adds	r3, r7, #6
 80014b8:	227f      	movs	r2, #127	; 0x7f
 80014ba:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 80014bc:	1cbb      	adds	r3, r7, #2
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	d902      	bls.n	80014ca <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 80014c4:	1cbb      	adds	r3, r7, #2
 80014c6:	227f      	movs	r2, #127	; 0x7f
 80014c8:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b3f      	cmp	r3, #63	; 0x3f
 80014d0:	d902      	bls.n	80014d8 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	223f      	movs	r2, #63	; 0x3f
 80014d6:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80014d8:	003b      	movs	r3, r7
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	2b3f      	cmp	r3, #63	; 0x3f
 80014de:	d902      	bls.n	80014e6 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 80014e0:	003b      	movs	r3, r7
 80014e2:	223f      	movs	r2, #63	; 0x3f
 80014e4:	801a      	strh	r2, [r3, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80014e6:	1dba      	adds	r2, r7, #6
 80014e8:	1cbb      	adds	r3, r7, #2
 80014ea:	8812      	ldrh	r2, [r2, #0]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d207      	bcs.n	8001502 <SSD1306_DrawLine+0x7a>
 80014f2:	1cba      	adds	r2, r7, #2
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	8812      	ldrh	r2, [r2, #0]
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b21b      	sxth	r3, r3
 8001500:	e006      	b.n	8001510 <SSD1306_DrawLine+0x88>
 8001502:	1dba      	adds	r2, r7, #6
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	8812      	ldrh	r2, [r2, #0]
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	b21b      	sxth	r3, r3
 8001510:	2212      	movs	r2, #18
 8001512:	18ba      	adds	r2, r7, r2
 8001514:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	003b      	movs	r3, r7
 800151a:	8812      	ldrh	r2, [r2, #0]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d207      	bcs.n	8001532 <SSD1306_DrawLine+0xaa>
 8001522:	003a      	movs	r2, r7
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21b      	sxth	r3, r3
 8001530:	e006      	b.n	8001540 <SSD1306_DrawLine+0xb8>
 8001532:	1d3a      	adds	r2, r7, #4
 8001534:	003b      	movs	r3, r7
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21b      	sxth	r3, r3
 8001540:	2210      	movs	r2, #16
 8001542:	18ba      	adds	r2, r7, r2
 8001544:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1; 
 8001546:	1dba      	adds	r2, r7, #6
 8001548:	1cbb      	adds	r3, r7, #2
 800154a:	8812      	ldrh	r2, [r2, #0]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d201      	bcs.n	8001556 <SSD1306_DrawLine+0xce>
 8001552:	2201      	movs	r2, #1
 8001554:	e001      	b.n	800155a <SSD1306_DrawLine+0xd2>
 8001556:	2301      	movs	r3, #1
 8001558:	425a      	negs	r2, r3
 800155a:	230e      	movs	r3, #14
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1; 
 8001560:	1d3a      	adds	r2, r7, #4
 8001562:	003b      	movs	r3, r7
 8001564:	8812      	ldrh	r2, [r2, #0]
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d201      	bcs.n	8001570 <SSD1306_DrawLine+0xe8>
 800156c:	2201      	movs	r2, #1
 800156e:	e001      	b.n	8001574 <SSD1306_DrawLine+0xec>
 8001570:	2301      	movs	r3, #1
 8001572:	425a      	negs	r2, r3
 8001574:	230c      	movs	r3, #12
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800157a:	2112      	movs	r1, #18
 800157c:	187a      	adds	r2, r7, r1
 800157e:	2310      	movs	r3, #16
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2000      	movs	r0, #0
 8001584:	5e12      	ldrsh	r2, [r2, r0]
 8001586:	2000      	movs	r0, #0
 8001588:	5e1b      	ldrsh	r3, [r3, r0]
 800158a:	429a      	cmp	r2, r3
 800158c:	dd08      	ble.n	80015a0 <SSD1306_DrawLine+0x118>
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2200      	movs	r2, #0
 8001592:	5e9b      	ldrsh	r3, [r3, r2]
 8001594:	2b00      	cmp	r3, #0
 8001596:	da00      	bge.n	800159a <SSD1306_DrawLine+0x112>
 8001598:	3301      	adds	r3, #1
 800159a:	105b      	asrs	r3, r3, #1
 800159c:	b21b      	sxth	r3, r3
 800159e:	e009      	b.n	80015b4 <SSD1306_DrawLine+0x12c>
 80015a0:	2310      	movs	r3, #16
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	2200      	movs	r2, #0
 80015a6:	5e9b      	ldrsh	r3, [r3, r2]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	da00      	bge.n	80015ae <SSD1306_DrawLine+0x126>
 80015ac:	3301      	adds	r3, #1
 80015ae:	105b      	asrs	r3, r3, #1
 80015b0:	425b      	negs	r3, r3
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	2216      	movs	r2, #22
 80015b6:	18ba      	adds	r2, r7, r2
 80015b8:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 80015ba:	2312      	movs	r3, #18
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2200      	movs	r2, #0
 80015c0:	5e9b      	ldrsh	r3, [r3, r2]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d148      	bne.n	8001658 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 80015c6:	003a      	movs	r2, r7
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	8812      	ldrh	r2, [r2, #0]
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d20c      	bcs.n	80015ec <SSD1306_DrawLine+0x164>
			tmp = y1;
 80015d2:	2108      	movs	r1, #8
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	003a      	movs	r2, r7
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80015dc:	003b      	movs	r3, r7
 80015de:	1d3a      	adds	r2, r7, #4
 80015e0:	8812      	ldrh	r2, [r2, #0]
 80015e2:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	187a      	adds	r2, r7, r1
 80015e8:	8812      	ldrh	r2, [r2, #0]
 80015ea:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 80015ec:	1cba      	adds	r2, r7, #2
 80015ee:	1dbb      	adds	r3, r7, #6
 80015f0:	8812      	ldrh	r2, [r2, #0]
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d20c      	bcs.n	8001612 <SSD1306_DrawLine+0x18a>
			tmp = x1;
 80015f8:	2108      	movs	r1, #8
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	1cba      	adds	r2, r7, #2
 80015fe:	8812      	ldrh	r2, [r2, #0]
 8001600:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8001602:	1cbb      	adds	r3, r7, #2
 8001604:	1dba      	adds	r2, r7, #6
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 800160a:	1dbb      	adds	r3, r7, #6
 800160c:	187a      	adds	r2, r7, r1
 800160e:	8812      	ldrh	r2, [r2, #0]
 8001610:	801a      	strh	r2, [r3, #0]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001612:	2314      	movs	r3, #20
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	1d3a      	adds	r2, r7, #4
 8001618:	8812      	ldrh	r2, [r2, #0]
 800161a:	801a      	strh	r2, [r3, #0]
 800161c:	e013      	b.n	8001646 <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 800161e:	2414      	movs	r4, #20
 8001620:	193b      	adds	r3, r7, r4
 8001622:	8819      	ldrh	r1, [r3, #0]
 8001624:	2328      	movs	r3, #40	; 0x28
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	1dbb      	adds	r3, r7, #6
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	0018      	movs	r0, r3
 8001630:	f7ff fdfc 	bl	800122c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001634:	0021      	movs	r1, r4
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2200      	movs	r2, #0
 800163a:	5e9b      	ldrsh	r3, [r3, r2]
 800163c:	b29b      	uxth	r3, r3
 800163e:	3301      	adds	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	187b      	adds	r3, r7, r1
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	2314      	movs	r3, #20
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2200      	movs	r2, #0
 800164c:	5e9a      	ldrsh	r2, [r3, r2]
 800164e:	003b      	movs	r3, r7
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	dde3      	ble.n	800161e <SSD1306_DrawLine+0x196>
		}
		
		/* Return from function */
		return;
 8001656:	e0a3      	b.n	80017a0 <SSD1306_DrawLine+0x318>
	}
	
	if (dy == 0) {
 8001658:	2310      	movs	r3, #16
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2200      	movs	r2, #0
 800165e:	5e9b      	ldrsh	r3, [r3, r2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d148      	bne.n	80016f6 <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 8001664:	003a      	movs	r2, r7
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d20c      	bcs.n	800168a <SSD1306_DrawLine+0x202>
			tmp = y1;
 8001670:	2108      	movs	r1, #8
 8001672:	187b      	adds	r3, r7, r1
 8001674:	003a      	movs	r2, r7
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800167a:	003b      	movs	r3, r7
 800167c:	1d3a      	adds	r2, r7, #4
 800167e:	8812      	ldrh	r2, [r2, #0]
 8001680:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	187a      	adds	r2, r7, r1
 8001686:	8812      	ldrh	r2, [r2, #0]
 8001688:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 800168a:	1cba      	adds	r2, r7, #2
 800168c:	1dbb      	adds	r3, r7, #6
 800168e:	8812      	ldrh	r2, [r2, #0]
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d20c      	bcs.n	80016b0 <SSD1306_DrawLine+0x228>
			tmp = x1;
 8001696:	2108      	movs	r1, #8
 8001698:	187b      	adds	r3, r7, r1
 800169a:	1cba      	adds	r2, r7, #2
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80016a0:	1cbb      	adds	r3, r7, #2
 80016a2:	1dba      	adds	r2, r7, #6
 80016a4:	8812      	ldrh	r2, [r2, #0]
 80016a6:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80016a8:	1dbb      	adds	r3, r7, #6
 80016aa:	187a      	adds	r2, r7, r1
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	801a      	strh	r2, [r3, #0]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80016b0:	2314      	movs	r3, #20
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	1dba      	adds	r2, r7, #6
 80016b6:	8812      	ldrh	r2, [r2, #0]
 80016b8:	801a      	strh	r2, [r3, #0]
 80016ba:	e013      	b.n	80016e4 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 80016bc:	2414      	movs	r4, #20
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	8818      	ldrh	r0, [r3, #0]
 80016c2:	2328      	movs	r3, #40	; 0x28
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	0019      	movs	r1, r3
 80016ce:	f7ff fdad 	bl	800122c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80016d2:	0021      	movs	r1, r4
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	5e9b      	ldrsh	r3, [r3, r2]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	801a      	strh	r2, [r3, #0]
 80016e4:	2314      	movs	r3, #20
 80016e6:	18fb      	adds	r3, r7, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	5e9a      	ldrsh	r2, [r3, r2]
 80016ec:	1cbb      	adds	r3, r7, #2
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dde3      	ble.n	80016bc <SSD1306_DrawLine+0x234>
		}
		
		/* Return from function */
		return;
 80016f4:	e054      	b.n	80017a0 <SSD1306_DrawLine+0x318>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80016f6:	2328      	movs	r3, #40	; 0x28
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	8819      	ldrh	r1, [r3, #0]
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff fd91 	bl	800122c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800170a:	1dba      	adds	r2, r7, #6
 800170c:	1cbb      	adds	r3, r7, #2
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d105      	bne.n	8001722 <SSD1306_DrawLine+0x29a>
 8001716:	1d3a      	adds	r2, r7, #4
 8001718:	003b      	movs	r3, r7
 800171a:	8812      	ldrh	r2, [r2, #0]
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d03d      	beq.n	800179e <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err; 
 8001722:	200a      	movs	r0, #10
 8001724:	183b      	adds	r3, r7, r0
 8001726:	2116      	movs	r1, #22
 8001728:	187a      	adds	r2, r7, r1
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 800172e:	183b      	adds	r3, r7, r0
 8001730:	2200      	movs	r2, #0
 8001732:	5e9a      	ldrsh	r2, [r3, r2]
 8001734:	2312      	movs	r3, #18
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2000      	movs	r0, #0
 800173a:	5e1b      	ldrsh	r3, [r3, r0]
 800173c:	425b      	negs	r3, r3
 800173e:	429a      	cmp	r2, r3
 8001740:	dd10      	ble.n	8001764 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	881a      	ldrh	r2, [r3, #0]
 8001746:	2310      	movs	r3, #16
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b29a      	uxth	r2, r3
 8001750:	187b      	adds	r3, r7, r1
 8001752:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8001754:	230e      	movs	r3, #14
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	8819      	ldrh	r1, [r3, #0]
 800175a:	1dbb      	adds	r3, r7, #6
 800175c:	1dba      	adds	r2, r7, #6
 800175e:	8812      	ldrh	r2, [r2, #0]
 8001760:	188a      	adds	r2, r1, r2
 8001762:	801a      	strh	r2, [r3, #0]
		} 
		if (e2 < dy) {
 8001764:	230a      	movs	r3, #10
 8001766:	18fa      	adds	r2, r7, r3
 8001768:	2310      	movs	r3, #16
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	2100      	movs	r1, #0
 800176e:	5e52      	ldrsh	r2, [r2, r1]
 8001770:	2100      	movs	r1, #0
 8001772:	5e5b      	ldrsh	r3, [r3, r1]
 8001774:	429a      	cmp	r2, r3
 8001776:	dabe      	bge.n	80016f6 <SSD1306_DrawLine+0x26e>
			err += dx;
 8001778:	2116      	movs	r1, #22
 800177a:	187b      	adds	r3, r7, r1
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	2312      	movs	r3, #18
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	187b      	adds	r3, r7, r1
 800178a:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 800178c:	230c      	movs	r3, #12
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	8819      	ldrh	r1, [r3, #0]
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	1d3a      	adds	r2, r7, #4
 8001796:	8812      	ldrh	r2, [r2, #0]
 8001798:	188a      	adds	r2, r1, r2
 800179a:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 800179c:	e7ab      	b.n	80016f6 <SSD1306_DrawLine+0x26e>
			break;
 800179e:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b006      	add	sp, #24
 80017a4:	bdb0      	pop	{r4, r5, r7, pc}

080017a6 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80017a6:	b5b0      	push	{r4, r5, r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af02      	add	r7, sp, #8
 80017ac:	0005      	movs	r5, r0
 80017ae:	000c      	movs	r4, r1
 80017b0:	0010      	movs	r0, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	1dbb      	adds	r3, r7, #6
 80017b6:	1c2a      	adds	r2, r5, #0
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	1c22      	adds	r2, r4, #0
 80017be:	801a      	strh	r2, [r3, #0]
 80017c0:	1cbb      	adds	r3, r7, #2
 80017c2:	1c02      	adds	r2, r0, #0
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	003b      	movs	r3, r7
 80017c8:	1c0a      	adds	r2, r1, #0
 80017ca:	801a      	strh	r2, [r3, #0]
	/* Check input parameters */
	if (
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	2b7f      	cmp	r3, #127	; 0x7f
 80017d2:	d900      	bls.n	80017d6 <SSD1306_DrawRectangle+0x30>
 80017d4:	e07a      	b.n	80018cc <SSD1306_DrawRectangle+0x126>
		x >= SSD1306_WIDTH ||
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	2b3f      	cmp	r3, #63	; 0x3f
 80017dc:	d900      	bls.n	80017e0 <SSD1306_DrawRectangle+0x3a>
 80017de:	e075      	b.n	80018cc <SSD1306_DrawRectangle+0x126>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	881a      	ldrh	r2, [r3, #0]
 80017e4:	1cbb      	adds	r3, r7, #2
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	18d3      	adds	r3, r2, r3
 80017ea:	2b7f      	cmp	r3, #127	; 0x7f
 80017ec:	dd05      	ble.n	80017fa <SSD1306_DrawRectangle+0x54>
		w = SSD1306_WIDTH - x;
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	1dba      	adds	r2, r7, #6
 80017f2:	8812      	ldrh	r2, [r2, #0]
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	1a8a      	subs	r2, r1, r2
 80017f8:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	003b      	movs	r3, r7
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	18d3      	adds	r3, r2, r3
 8001804:	2b3f      	cmp	r3, #63	; 0x3f
 8001806:	dd05      	ble.n	8001814 <SSD1306_DrawRectangle+0x6e>
		h = SSD1306_HEIGHT - y;
 8001808:	003b      	movs	r3, r7
 800180a:	1d3a      	adds	r2, r7, #4
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	1a8a      	subs	r2, r1, r2
 8001812:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001814:	1dba      	adds	r2, r7, #6
 8001816:	1cbb      	adds	r3, r7, #2
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	b29a      	uxth	r2, r3
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	881c      	ldrh	r4, [r3, #0]
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	8819      	ldrh	r1, [r3, #0]
 8001828:	1dbb      	adds	r3, r7, #6
 800182a:	8818      	ldrh	r0, [r3, #0]
 800182c:	2518      	movs	r5, #24
 800182e:	197b      	adds	r3, r7, r5
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	0023      	movs	r3, r4
 8001836:	f7ff fe27 	bl	8001488 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800183a:	1d3a      	adds	r2, r7, #4
 800183c:	003b      	movs	r3, r7
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	18d3      	adds	r3, r2, r3
 8001844:	b299      	uxth	r1, r3
 8001846:	1dba      	adds	r2, r7, #6
 8001848:	1cbb      	adds	r3, r7, #2
 800184a:	8812      	ldrh	r2, [r2, #0]
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	18d3      	adds	r3, r2, r3
 8001850:	b29c      	uxth	r4, r3
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	003b      	movs	r3, r7
 8001856:	8812      	ldrh	r2, [r2, #0]
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	18d3      	adds	r3, r2, r3
 800185c:	b29a      	uxth	r2, r3
 800185e:	1dbb      	adds	r3, r7, #6
 8001860:	8818      	ldrh	r0, [r3, #0]
 8001862:	197b      	adds	r3, r7, r5
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	0013      	movs	r3, r2
 800186a:	0022      	movs	r2, r4
 800186c:	f7ff fe0c 	bl	8001488 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001870:	1d3a      	adds	r2, r7, #4
 8001872:	003b      	movs	r3, r7
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	b29c      	uxth	r4, r3
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	881a      	ldrh	r2, [r3, #0]
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	8819      	ldrh	r1, [r3, #0]
 8001884:	1dbb      	adds	r3, r7, #6
 8001886:	8818      	ldrh	r0, [r3, #0]
 8001888:	197b      	adds	r3, r7, r5
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	0023      	movs	r3, r4
 8001890:	f7ff fdfa 	bl	8001488 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001894:	1dba      	adds	r2, r7, #6
 8001896:	1cbb      	adds	r3, r7, #2
 8001898:	8812      	ldrh	r2, [r2, #0]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	b298      	uxth	r0, r3
 80018a0:	1dba      	adds	r2, r7, #6
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	8812      	ldrh	r2, [r2, #0]
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	003b      	movs	r3, r7
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	8819      	ldrh	r1, [r3, #0]
 80018bc:	197b      	adds	r3, r7, r5
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	0013      	movs	r3, r2
 80018c4:	0022      	movs	r2, r4
 80018c6:	f7ff fddf 	bl	8001488 <SSD1306_DrawLine>
 80018ca:	e000      	b.n	80018ce <SSD1306_DrawRectangle+0x128>
		return;
 80018cc:	46c0      	nop			; (mov r8, r8)
}
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bdb0      	pop	{r4, r5, r7, pc}

080018d4 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af02      	add	r7, sp, #8
 80018da:	0005      	movs	r5, r0
 80018dc:	000c      	movs	r4, r1
 80018de:	0010      	movs	r0, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	1c2a      	adds	r2, r5, #0
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	1c22      	adds	r2, r4, #0
 80018ec:	801a      	strh	r2, [r3, #0]
 80018ee:	1cbb      	adds	r3, r7, #2
 80018f0:	1c02      	adds	r2, r0, #0
 80018f2:	801a      	strh	r2, [r3, #0]
 80018f4:	003b      	movs	r3, r7
 80018f6:	1c0a      	adds	r2, r1, #0
 80018f8:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 80018fa:	1dbb      	adds	r3, r7, #6
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001900:	d850      	bhi.n	80019a4 <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b3f      	cmp	r3, #63	; 0x3f
 8001908:	d84c      	bhi.n	80019a4 <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800190a:	1dbb      	adds	r3, r7, #6
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	1cbb      	adds	r3, r7, #2
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	18d3      	adds	r3, r2, r3
 8001914:	2b7f      	cmp	r3, #127	; 0x7f
 8001916:	dd05      	ble.n	8001924 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 8001918:	1cbb      	adds	r3, r7, #2
 800191a:	1dba      	adds	r2, r7, #6
 800191c:	8812      	ldrh	r2, [r2, #0]
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	1a8a      	subs	r2, r1, r2
 8001922:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	003b      	movs	r3, r7
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	18d3      	adds	r3, r2, r3
 800192e:	2b3f      	cmp	r3, #63	; 0x3f
 8001930:	dd05      	ble.n	800193e <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 8001932:	003b      	movs	r3, r7
 8001934:	1d3a      	adds	r2, r7, #4
 8001936:	8812      	ldrh	r2, [r2, #0]
 8001938:	2140      	movs	r1, #64	; 0x40
 800193a:	1a8a      	subs	r2, r1, r2
 800193c:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800193e:	230f      	movs	r3, #15
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e024      	b.n	8001992 <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001948:	200f      	movs	r0, #15
 800194a:	183b      	adds	r3, r7, r0
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b29a      	uxth	r2, r3
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	b299      	uxth	r1, r3
 8001958:	1dba      	adds	r2, r7, #6
 800195a:	1cbb      	adds	r3, r7, #2
 800195c:	8812      	ldrh	r2, [r2, #0]
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	18d3      	adds	r3, r2, r3
 8001962:	b29c      	uxth	r4, r3
 8001964:	0005      	movs	r5, r0
 8001966:	183b      	adds	r3, r7, r0
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	18d3      	adds	r3, r2, r3
 8001972:	b29a      	uxth	r2, r3
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	8818      	ldrh	r0, [r3, #0]
 8001978:	2320      	movs	r3, #32
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	0013      	movs	r3, r2
 8001982:	0022      	movs	r2, r4
 8001984:	f7ff fd80 	bl	8001488 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001988:	197b      	adds	r3, r7, r5
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	197b      	adds	r3, r7, r5
 800198e:	3201      	adds	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	230f      	movs	r3, #15
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	003a      	movs	r2, r7
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d2d2      	bcs.n	8001948 <SSD1306_DrawFilledRectangle+0x74>
 80019a2:	e000      	b.n	80019a6 <SSD1306_DrawFilledRectangle+0xd2>
		return;
 80019a4:	46c0      	nop			; (mov r8, r8)
	}
}
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b004      	add	sp, #16
 80019aa:	bdb0      	pop	{r4, r5, r7, pc}

080019ac <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fc21 	bl	80011f8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019b6:	f7ff fbeb 	bl	8001190 <SSD1306_UpdateScreen>
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <SSD1306_SetContrast>:
	SSD1306_WRITECOMMAND(0x8D);  
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}

void SSD1306_SetContrast(const uint8_t value) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	0002      	movs	r2, r0
 80019c8:	1dfb      	adds	r3, r7, #7
 80019ca:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019cc:	210f      	movs	r1, #15
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	2281      	movs	r2, #129	; 0x81
 80019d2:	701a      	strb	r2, [r3, #0]
    SSD1306_WRITECOMMAND(kSetContrastControlRegister);
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	001a      	movs	r2, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	; 0x78
 80019de:	f000 f88b 	bl	8001af8 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(value);
 80019e2:	1dfb      	adds	r3, r7, #7
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	001a      	movs	r2, r3
 80019e8:	2100      	movs	r1, #0
 80019ea:	2078      	movs	r0, #120	; 0x78
 80019ec:	f000 f884 	bl	8001af8 <ssd1306_I2C_Write>
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b004      	add	sp, #16
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <ssd1306_I2C_Init+0x24>)
 8001a00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a02:	e002      	b.n	8001a0a <ssd1306_I2C_Init+0x12>
		p--;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f9      	bne.n	8001a04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	0003d090 	.word	0x0003d090

08001a20 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b0c6      	sub	sp, #280	; 0x118
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	0004      	movs	r4, r0
 8001a28:	0008      	movs	r0, r1
 8001a2a:	603a      	str	r2, [r7, #0]
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <ssd1306_I2C_WriteMulti+0xc4>)
 8001a30:	2588      	movs	r5, #136	; 0x88
 8001a32:	006d      	lsls	r5, r5, #1
 8001a34:	195b      	adds	r3, r3, r5
 8001a36:	19db      	adds	r3, r3, r7
 8001a38:	1c22      	adds	r2, r4, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a3e:	002c      	movs	r4, r5
 8001a40:	191b      	adds	r3, r3, r4
 8001a42:	19db      	adds	r3, r3, r7
 8001a44:	1c02      	adds	r2, r0, #0
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <ssd1306_I2C_WriteMulti+0xcc>)
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	181b      	adds	r3, r3, r0
 8001a4e:	19db      	adds	r3, r3, r7
 8001a50:	1c0a      	adds	r2, r1, #0
 8001a52:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <ssd1306_I2C_WriteMulti+0xd0>)
 8001a56:	181b      	adds	r3, r3, r0
 8001a58:	19db      	adds	r3, r3, r7
 8001a5a:	4a23      	ldr	r2, [pc, #140]	; (8001ae8 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a5c:	1812      	adds	r2, r2, r0
 8001a5e:	19d2      	adds	r2, r2, r7
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a64:	2310      	movs	r3, #16
 8001a66:	33ff      	adds	r3, #255	; 0xff
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e014      	b.n	8001a9a <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8001a70:	2010      	movs	r0, #16
 8001a72:	30ff      	adds	r0, #255	; 0xff
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	18d2      	adds	r2, r2, r3
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	7811      	ldrb	r1, [r2, #0]
 8001a84:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <ssd1306_I2C_WriteMulti+0xd0>)
 8001a86:	2488      	movs	r4, #136	; 0x88
 8001a88:	0064      	lsls	r4, r4, #1
 8001a8a:	1912      	adds	r2, r2, r4
 8001a8c:	19d2      	adds	r2, r2, r7
 8001a8e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	3201      	adds	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	33ff      	adds	r3, #255	; 0xff
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <ssd1306_I2C_WriteMulti+0xcc>)
 8001aa6:	2188      	movs	r1, #136	; 0x88
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	1852      	adds	r2, r2, r1
 8001aac:	19d2      	adds	r2, r2, r7
 8001aae:	8812      	ldrh	r2, [r2, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d8dd      	bhi.n	8001a70 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <ssd1306_I2C_WriteMulti+0xc4>)
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	189b      	adds	r3, r3, r2
 8001aba:	19db      	adds	r3, r3, r7
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <ssd1306_I2C_WriteMulti+0xcc>)
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	19db      	adds	r3, r3, r7
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	220c      	movs	r2, #12
 8001ace:	18ba      	adds	r2, r7, r2
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <ssd1306_I2C_WriteMulti+0xd4>)
 8001ad2:	240a      	movs	r4, #10
 8001ad4:	9400      	str	r4, [sp, #0]
 8001ad6:	f002 fac7 	bl	8004068 <HAL_I2C_Master_Transmit>
}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b044      	add	sp, #272	; 0x110
 8001ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	fffffef7 	.word	0xfffffef7
 8001ae8:	fffffef6 	.word	0xfffffef6
 8001aec:	fffffef4 	.word	0xfffffef4
 8001af0:	fffffefc 	.word	0xfffffefc
 8001af4:	200000a0 	.word	0x200000a0

08001af8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	0004      	movs	r4, r0
 8001b00:	0008      	movs	r0, r1
 8001b02:	0011      	movs	r1, r2
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	1c22      	adds	r2, r4, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	1dbb      	adds	r3, r7, #6
 8001b0c:	1c02      	adds	r2, r0, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	1d7b      	adds	r3, r7, #5
 8001b12:	1c0a      	adds	r2, r1, #0
 8001b14:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001b16:	200c      	movs	r0, #12
 8001b18:	183b      	adds	r3, r7, r0
 8001b1a:	1dba      	adds	r2, r7, #6
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001b20:	183b      	adds	r3, r7, r0
 8001b22:	1d7a      	adds	r2, r7, #5
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	183a      	adds	r2, r7, r0
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <ssd1306_I2C_Write+0x4c>)
 8001b32:	230a      	movs	r3, #10
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2302      	movs	r3, #2
 8001b38:	f002 fa96 	bl	8004068 <HAL_I2C_Master_Transmit>
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b005      	add	sp, #20
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	200000a0 	.word	0x200000a0

08001b48 <structInit>:
// STRUCT
ProjectManager Details[4];
Step Settings[4];

void structInit(void)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]

	// STEPS
	// ============================================================
	// STEP WIDTH
	Settings[i].minValue = CARCASS_MIN_WIDTH;
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	4bfe      	ldr	r3, [pc, #1016]	; (8001f54 <structInit+0x40c>)
 8001b5a:	00d2      	lsls	r2, r2, #3
 8001b5c:	2132      	movs	r1, #50	; 0x32
 8001b5e:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4afb      	ldr	r2, [pc, #1004]	; (8001f54 <structInit+0x40c>)
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	18d3      	adds	r3, r2, r3
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = CARCASS_MAX_WIDTH;
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4af7      	ldr	r2, [pc, #988]	; (8001f54 <structInit+0x40c>)
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	4af6      	ldr	r2, [pc, #984]	; (8001f58 <structInit+0x410>)
 8001b7e:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 4;
 8001b80:	1dfb      	adds	r3, r7, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4af3      	ldr	r2, [pc, #972]	; (8001f54 <structInit+0x40c>)
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	18d3      	adds	r3, r2, r3
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 1;
 8001b90:	1dfb      	adds	r3, r7, #7
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4aef      	ldr	r2, [pc, #956]	; (8001f54 <structInit+0x40c>)
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	3307      	adds	r3, #7
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
	i++;
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	3201      	adds	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]

	// STEP TURNS
	Settings[i].minValue = CARCASS_MIN_TURNS;
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	4be9      	ldr	r3, [pc, #932]	; (8001f54 <structInit+0x40c>)
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	210a      	movs	r1, #10
 8001bb4:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	4ae6      	ldr	r2, [pc, #920]	; (8001f54 <structInit+0x40c>)
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	18d3      	adds	r3, r2, r3
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = CARCASS_MAX_TURNS;
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4ae2      	ldr	r2, [pc, #904]	; (8001f54 <structInit+0x40c>)
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	4ae2      	ldr	r2, [pc, #904]	; (8001f5c <structInit+0x414>)
 8001bd4:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 4;
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4ade      	ldr	r2, [pc, #888]	; (8001f54 <structInit+0x40c>)
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	18d3      	adds	r3, r2, r3
 8001be0:	3306      	adds	r3, #6
 8001be2:	2204      	movs	r2, #4
 8001be4:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 0;
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4ada      	ldr	r2, [pc, #872]	; (8001f54 <structInit+0x40c>)
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
	i++;
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	3201      	adds	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]

	// STEP DIAMETER
	Settings[i].minValue = WINDING_MIN_DIAMETER;
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4bd3      	ldr	r3, [pc, #844]	; (8001f54 <structInit+0x40c>)
 8001c06:	00d2      	lsls	r2, r2, #3
 8001c08:	2101      	movs	r1, #1
 8001c0a:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4ad0      	ldr	r2, [pc, #832]	; (8001f54 <structInit+0x40c>)
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	18d3      	adds	r3, r2, r3
 8001c16:	3302      	adds	r3, #2
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = WINDING_MAX_DIAMETER;
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4acc      	ldr	r2, [pc, #816]	; (8001f54 <structInit+0x40c>)
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	18d3      	adds	r3, r2, r3
 8001c26:	3304      	adds	r3, #4
 8001c28:	22fa      	movs	r2, #250	; 0xfa
 8001c2a:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 3;
 8001c2c:	1dfb      	adds	r3, r7, #7
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4ac8      	ldr	r2, [pc, #800]	; (8001f54 <structInit+0x40c>)
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	3306      	adds	r3, #6
 8001c38:	2203      	movs	r2, #3
 8001c3a:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 2;
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4ac4      	ldr	r2, [pc, #784]	; (8001f54 <structInit+0x40c>)
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	3307      	adds	r3, #7
 8001c48:	2202      	movs	r2, #2
 8001c4a:	701a      	strb	r2, [r3, #0]
	i++;
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	3201      	adds	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]

	// STEP SPEED
	Settings[i].minValue = WINDING_MIN_SPEED;
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4bbe      	ldr	r3, [pc, #760]	; (8001f54 <structInit+0x40c>)
 8001c5c:	00d2      	lsls	r2, r2, #3
 8001c5e:	2101      	movs	r1, #1
 8001c60:	52d1      	strh	r1, [r2, r3]
	Settings[i].setValue = 0;
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	4abb      	ldr	r2, [pc, #748]	; (8001f54 <structInit+0x40c>)
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	18d3      	adds	r3, r2, r3
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	801a      	strh	r2, [r3, #0]
	Settings[i].maxValue = WINDING_MAX_SPEED;
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4ab7      	ldr	r2, [pc, #732]	; (8001f54 <structInit+0x40c>)
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2209      	movs	r2, #9
 8001c80:	801a      	strh	r2, [r3, #0]
	Settings[i].digitsCount = 1;
 8001c82:	1dfb      	adds	r3, r7, #7
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4ab3      	ldr	r2, [pc, #716]	; (8001f54 <structInit+0x40c>)
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	3306      	adds	r3, #6
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
	Settings[i].dotPosition = 0;
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4aaf      	ldr	r2, [pc, #700]	; (8001f54 <structInit+0x40c>)
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
	i=0;
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]

	// PROJECT
	// ============================================================
	// PROJECT - PEAVEY CLASSIC 30 - MAIN TRANSFORMER
	Details[i].fullName		= "Peavey-C30-Main";
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	49ac      	ldr	r1, [pc, #688]	; (8001f60 <structInit+0x418>)
 8001cae:	0013      	movs	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	189b      	adds	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4aab      	ldr	r2, [pc, #684]	; (8001f64 <structInit+0x41c>)
 8001cb8:	505a      	str	r2, [r3, r1]
	Details[i].shortName	= "P-C30-M";
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781a      	ldrb	r2, [r3, #0]
 8001cbe:	49a8      	ldr	r1, [pc, #672]	; (8001f60 <structInit+0x418>)
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	18cb      	adds	r3, r1, r3
 8001cca:	3304      	adds	r3, #4
 8001ccc:	4aa6      	ldr	r2, [pc, #664]	; (8001f68 <structInit+0x420>)
 8001cce:	601a      	str	r2, [r3, #0]
	Details[i].descShort_1	= "230V";
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	49a2      	ldr	r1, [pc, #648]	; (8001f60 <structInit+0x418>)
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	18cb      	adds	r3, r1, r3
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	4aa2      	ldr	r2, [pc, #648]	; (8001f6c <structInit+0x424>)
 8001ce4:	601a      	str	r2, [r3, #0]
	Details[i].descShort_2	= "270,30V";
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	499d      	ldr	r1, [pc, #628]	; (8001f60 <structInit+0x418>)
 8001cec:	0013      	movs	r3, r2
 8001cee:	011b      	lsls	r3, r3, #4
 8001cf0:	189b      	adds	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	18cb      	adds	r3, r1, r3
 8001cf6:	330c      	adds	r3, #12
 8001cf8:	4a9d      	ldr	r2, [pc, #628]	; (8001f70 <structInit+0x428>)
 8001cfa:	601a      	str	r2, [r3, #0]
	Details[i].descFull_1	= "PRI: 230V";
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	4997      	ldr	r1, [pc, #604]	; (8001f60 <structInit+0x418>)
 8001d02:	0013      	movs	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	189b      	adds	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	18cb      	adds	r3, r1, r3
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	4a99      	ldr	r2, [pc, #612]	; (8001f74 <structInit+0x42c>)
 8001d10:	601a      	str	r2, [r3, #0]
	Details[i].descFull_2 	= "SEC: 230V, 30V";
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4992      	ldr	r1, [pc, #584]	; (8001f60 <structInit+0x418>)
 8001d18:	0013      	movs	r3, r2
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	189b      	adds	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	18cb      	adds	r3, r1, r3
 8001d22:	3314      	adds	r3, #20
 8001d24:	4a94      	ldr	r2, [pc, #592]	; (8001f78 <structInit+0x430>)
 8001d26:	601a      	str	r2, [r3, #0]
	Details[i].width		= 1150;
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	498c      	ldr	r1, [pc, #560]	; (8001f60 <structInit+0x418>)
 8001d2e:	0013      	movs	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	189b      	adds	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	18cb      	adds	r3, r1, r3
 8001d38:	3318      	adds	r3, #24
 8001d3a:	4a90      	ldr	r2, [pc, #576]	; (8001f7c <structInit+0x434>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	Details[i].turns[0]		= 1100;
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	4987      	ldr	r1, [pc, #540]	; (8001f60 <structInit+0x418>)
 8001d44:	0013      	movs	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	189b      	adds	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	18cb      	adds	r3, r1, r3
 8001d4e:	331a      	adds	r3, #26
 8001d50:	4a8b      	ldr	r2, [pc, #556]	; (8001f80 <structInit+0x438>)
 8001d52:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[0]	= 10;
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4981      	ldr	r1, [pc, #516]	; (8001f60 <structInit+0x418>)
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	189b      	adds	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	18cb      	adds	r3, r1, r3
 8001d64:	332e      	adds	r3, #46	; 0x2e
 8001d66:	220a      	movs	r2, #10
 8001d68:	801a      	strh	r2, [r3, #0]
	Details[i].turns[1]		= 900;
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	497c      	ldr	r1, [pc, #496]	; (8001f60 <structInit+0x418>)
 8001d70:	0013      	movs	r3, r2
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	189b      	adds	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	18cb      	adds	r3, r1, r3
 8001d7a:	331c      	adds	r3, #28
 8001d7c:	22e1      	movs	r2, #225	; 0xe1
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[1]	= 15;
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4976      	ldr	r1, [pc, #472]	; (8001f60 <structInit+0x418>)
 8001d88:	0013      	movs	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	189b      	adds	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	18cb      	adds	r3, r1, r3
 8001d92:	3330      	adds	r3, #48	; 0x30
 8001d94:	220f      	movs	r2, #15
 8001d96:	801a      	strh	r2, [r3, #0]
	Details[i].turns[2]		= 200;
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4970      	ldr	r1, [pc, #448]	; (8001f60 <structInit+0x418>)
 8001d9e:	0013      	movs	r3, r2
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	18cb      	adds	r3, r1, r3
 8001da8:	331e      	adds	r3, #30
 8001daa:	22c8      	movs	r2, #200	; 0xc8
 8001dac:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[2]	= 100;
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	496b      	ldr	r1, [pc, #428]	; (8001f60 <structInit+0x418>)
 8001db4:	0013      	movs	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	189b      	adds	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	18cb      	adds	r3, r1, r3
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	2264      	movs	r2, #100	; 0x64
 8001dc2:	801a      	strh	r2, [r3, #0]
	Details[i].taskCount	= countArray(&Details[i]);
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	0013      	movs	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	189b      	adds	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4a63      	ldr	r2, [pc, #396]	; (8001f60 <structInit+0x418>)
 8001dd2:	189a      	adds	r2, r3, r2
 8001dd4:	1dfb      	adds	r3, r7, #7
 8001dd6:	781c      	ldrb	r4, [r3, #0]
 8001dd8:	0010      	movs	r0, r2
 8001dda:	f001 fa28 	bl	800322e <countArray>
 8001dde:	0003      	movs	r3, r0
 8001de0:	0018      	movs	r0, r3
 8001de2:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <structInit+0x418>)
 8001de4:	2142      	movs	r1, #66	; 0x42
 8001de6:	0023      	movs	r3, r4
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	191b      	adds	r3, r3, r4
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	18d3      	adds	r3, r2, r3
 8001df0:	185b      	adds	r3, r3, r1
 8001df2:	1c02      	adds	r2, r0, #0
 8001df4:	701a      	strb	r2, [r3, #0]
	i++;
 8001df6:	1dfb      	adds	r3, r7, #7
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	3201      	adds	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]

	// PROJECT - PEAVEY CLASSIC 30 - SPEAKER TRANSFORMER
	Details[i].fullName		= "Peavey-C30-SPK";
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	4956      	ldr	r1, [pc, #344]	; (8001f60 <structInit+0x418>)
 8001e06:	0013      	movs	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	189b      	adds	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4a5d      	ldr	r2, [pc, #372]	; (8001f84 <structInit+0x43c>)
 8001e10:	505a      	str	r2, [r3, r1]
	Details[i].shortName	= "P-C30-S";
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4952      	ldr	r1, [pc, #328]	; (8001f60 <structInit+0x418>)
 8001e18:	0013      	movs	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	189b      	adds	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	18cb      	adds	r3, r1, r3
 8001e22:	3304      	adds	r3, #4
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <structInit+0x440>)
 8001e26:	601a      	str	r2, [r3, #0]
	Details[i].descShort_1	= "4xEL84";
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	494c      	ldr	r1, [pc, #304]	; (8001f60 <structInit+0x418>)
 8001e2e:	0013      	movs	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	189b      	adds	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	18cb      	adds	r3, r1, r3
 8001e38:	3308      	adds	r3, #8
 8001e3a:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <structInit+0x444>)
 8001e3c:	601a      	str	r2, [r3, #0]
	Details[i].descShort_2	= "16 Ohms";
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4947      	ldr	r1, [pc, #284]	; (8001f60 <structInit+0x418>)
 8001e44:	0013      	movs	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	18cb      	adds	r3, r1, r3
 8001e4e:	330c      	adds	r3, #12
 8001e50:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <structInit+0x448>)
 8001e52:	601a      	str	r2, [r3, #0]
	Details[i].descFull_1	= "4xEL84 | 3.4k";
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	4941      	ldr	r1, [pc, #260]	; (8001f60 <structInit+0x418>)
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	189b      	adds	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	18cb      	adds	r3, r1, r3
 8001e64:	3310      	adds	r3, #16
 8001e66:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <structInit+0x44c>)
 8001e68:	601a      	str	r2, [r3, #0]
	Details[i].descFull_2 	= "OUT: 16 Ohms";
 8001e6a:	1dfb      	adds	r3, r7, #7
 8001e6c:	781a      	ldrb	r2, [r3, #0]
 8001e6e:	493c      	ldr	r1, [pc, #240]	; (8001f60 <structInit+0x418>)
 8001e70:	0013      	movs	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	189b      	adds	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	18cb      	adds	r3, r1, r3
 8001e7a:	3314      	adds	r3, #20
 8001e7c:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <structInit+0x450>)
 8001e7e:	601a      	str	r2, [r3, #0]
	Details[i].width		= 650;
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4936      	ldr	r1, [pc, #216]	; (8001f60 <structInit+0x418>)
 8001e86:	0013      	movs	r3, r2
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	18cb      	adds	r3, r1, r3
 8001e90:	3318      	adds	r3, #24
 8001e92:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <structInit+0x454>)
 8001e94:	801a      	strh	r2, [r3, #0]
	Details[i].turns[0]		= 900;
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4931      	ldr	r1, [pc, #196]	; (8001f60 <structInit+0x418>)
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	189b      	adds	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	18cb      	adds	r3, r1, r3
 8001ea6:	331a      	adds	r3, #26
 8001ea8:	22e1      	movs	r2, #225	; 0xe1
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[0]	= 20;
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	492b      	ldr	r1, [pc, #172]	; (8001f60 <structInit+0x418>)
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	189b      	adds	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	18cb      	adds	r3, r1, r3
 8001ebe:	332e      	adds	r3, #46	; 0x2e
 8001ec0:	2214      	movs	r2, #20
 8001ec2:	801a      	strh	r2, [r3, #0]
	Details[i].turns[1]		= 600;
 8001ec4:	1dfb      	adds	r3, r7, #7
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4925      	ldr	r1, [pc, #148]	; (8001f60 <structInit+0x418>)
 8001eca:	0013      	movs	r3, r2
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	18cb      	adds	r3, r1, r3
 8001ed4:	331c      	adds	r3, #28
 8001ed6:	2296      	movs	r2, #150	; 0x96
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[1]	= 120;
 8001edc:	1dfb      	adds	r3, r7, #7
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	491f      	ldr	r1, [pc, #124]	; (8001f60 <structInit+0x418>)
 8001ee2:	0013      	movs	r3, r2
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	189b      	adds	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	18cb      	adds	r3, r1, r3
 8001eec:	3330      	adds	r3, #48	; 0x30
 8001eee:	2278      	movs	r2, #120	; 0x78
 8001ef0:	801a      	strh	r2, [r3, #0]
	Details[i].taskCount	= countArray(&Details[i]);
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <structInit+0x418>)
 8001f00:	189a      	adds	r2, r3, r2
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	781c      	ldrb	r4, [r3, #0]
 8001f06:	0010      	movs	r0, r2
 8001f08:	f001 f991 	bl	800322e <countArray>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	0018      	movs	r0, r3
 8001f10:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <structInit+0x418>)
 8001f12:	2142      	movs	r1, #66	; 0x42
 8001f14:	0023      	movs	r3, r4
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	191b      	adds	r3, r3, r4
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	18d3      	adds	r3, r2, r3
 8001f1e:	185b      	adds	r3, r3, r1
 8001f20:	1c02      	adds	r2, r0, #0
 8001f22:	701a      	strb	r2, [r3, #0]
	i++;
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	3201      	adds	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]

	// PROJECT - TEST
	Details[i].fullName		= "TEST-FULL";
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	490b      	ldr	r1, [pc, #44]	; (8001f60 <structInit+0x418>)
 8001f34:	0013      	movs	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	189b      	adds	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <structInit+0x458>)
 8001f3e:	505a      	str	r2, [r3, r1]
	Details[i].shortName	= "TEST-SH";
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4906      	ldr	r1, [pc, #24]	; (8001f60 <structInit+0x418>)
 8001f46:	0013      	movs	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	189b      	adds	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	18cb      	adds	r3, r1, r3
 8001f50:	e028      	b.n	8001fa4 <structInit+0x45c>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000620 	.word	0x20000620
 8001f58:	000004e2 	.word	0x000004e2
 8001f5c:	000009c4 	.word	0x000009c4
 8001f60:	20000510 	.word	0x20000510
 8001f64:	080079e8 	.word	0x080079e8
 8001f68:	080079f8 	.word	0x080079f8
 8001f6c:	08007a00 	.word	0x08007a00
 8001f70:	08007a08 	.word	0x08007a08
 8001f74:	08007a10 	.word	0x08007a10
 8001f78:	08007a1c 	.word	0x08007a1c
 8001f7c:	0000047e 	.word	0x0000047e
 8001f80:	0000044c 	.word	0x0000044c
 8001f84:	08007a2c 	.word	0x08007a2c
 8001f88:	08007a3c 	.word	0x08007a3c
 8001f8c:	08007a44 	.word	0x08007a44
 8001f90:	08007a4c 	.word	0x08007a4c
 8001f94:	08007a54 	.word	0x08007a54
 8001f98:	08007a64 	.word	0x08007a64
 8001f9c:	0000028a 	.word	0x0000028a
 8001fa0:	08007a74 	.word	0x08007a74
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	4a57      	ldr	r2, [pc, #348]	; (8002104 <structInit+0x5bc>)
 8001fa8:	601a      	str	r2, [r3, #0]
	Details[i].descShort_1	= "2XEL84";
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4956      	ldr	r1, [pc, #344]	; (8002108 <structInit+0x5c0>)
 8001fb0:	0013      	movs	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	189b      	adds	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	18cb      	adds	r3, r1, r3
 8001fba:	3308      	adds	r3, #8
 8001fbc:	4a53      	ldr	r2, [pc, #332]	; (800210c <structInit+0x5c4>)
 8001fbe:	601a      	str	r2, [r3, #0]
	Details[i].descShort_2	= "4-8-16";
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4950      	ldr	r1, [pc, #320]	; (8002108 <structInit+0x5c0>)
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	189b      	adds	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	18cb      	adds	r3, r1, r3
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	4a4f      	ldr	r2, [pc, #316]	; (8002110 <structInit+0x5c8>)
 8001fd4:	601a      	str	r2, [r3, #0]
	Details[i].descFull_1	= "2XEL84 | 8.2k";
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	494b      	ldr	r1, [pc, #300]	; (8002108 <structInit+0x5c0>)
 8001fdc:	0013      	movs	r3, r2
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	189b      	adds	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	18cb      	adds	r3, r1, r3
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <structInit+0x5cc>)
 8001fea:	601a      	str	r2, [r3, #0]
	Details[i].descFull_2 	= "OUT: 4-8-16 Ohms";
 8001fec:	1dfb      	adds	r3, r7, #7
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4945      	ldr	r1, [pc, #276]	; (8002108 <structInit+0x5c0>)
 8001ff2:	0013      	movs	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	189b      	adds	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	18cb      	adds	r3, r1, r3
 8001ffc:	3314      	adds	r3, #20
 8001ffe:	4a46      	ldr	r2, [pc, #280]	; (8002118 <structInit+0x5d0>)
 8002000:	601a      	str	r2, [r3, #0]
	Details[i].width		= 800;
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	4940      	ldr	r1, [pc, #256]	; (8002108 <structInit+0x5c0>)
 8002008:	0013      	movs	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	189b      	adds	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18cb      	adds	r3, r1, r3
 8002012:	3318      	adds	r3, #24
 8002014:	22c8      	movs	r2, #200	; 0xc8
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	801a      	strh	r2, [r3, #0]
	Details[i].turns[0]		= 2500;
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	493a      	ldr	r1, [pc, #232]	; (8002108 <structInit+0x5c0>)
 8002020:	0013      	movs	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	189b      	adds	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	18cb      	adds	r3, r1, r3
 800202a:	331a      	adds	r3, #26
 800202c:	4a3b      	ldr	r2, [pc, #236]	; (800211c <structInit+0x5d4>)
 800202e:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[0]	= 250;
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4934      	ldr	r1, [pc, #208]	; (8002108 <structInit+0x5c0>)
 8002036:	0013      	movs	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	189b      	adds	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	18cb      	adds	r3, r1, r3
 8002040:	332e      	adds	r3, #46	; 0x2e
 8002042:	22fa      	movs	r2, #250	; 0xfa
 8002044:	801a      	strh	r2, [r3, #0]
	Details[i].turns[1]		= 10;
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	492f      	ldr	r1, [pc, #188]	; (8002108 <structInit+0x5c0>)
 800204c:	0013      	movs	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	189b      	adds	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	18cb      	adds	r3, r1, r3
 8002056:	331c      	adds	r3, #28
 8002058:	220a      	movs	r2, #10
 800205a:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[1]	= 1;
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	4929      	ldr	r1, [pc, #164]	; (8002108 <structInit+0x5c0>)
 8002062:	0013      	movs	r3, r2
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	189b      	adds	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	18cb      	adds	r3, r1, r3
 800206c:	3330      	adds	r3, #48	; 0x30
 800206e:	2201      	movs	r2, #1
 8002070:	801a      	strh	r2, [r3, #0]
	Details[i].turns[2]		= 2500;
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	4924      	ldr	r1, [pc, #144]	; (8002108 <structInit+0x5c0>)
 8002078:	0013      	movs	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	189b      	adds	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	18cb      	adds	r3, r1, r3
 8002082:	331e      	adds	r3, #30
 8002084:	4a25      	ldr	r2, [pc, #148]	; (800211c <structInit+0x5d4>)
 8002086:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[2]	= 1;
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	491e      	ldr	r1, [pc, #120]	; (8002108 <structInit+0x5c0>)
 800208e:	0013      	movs	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	189b      	adds	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	18cb      	adds	r3, r1, r3
 8002098:	3332      	adds	r3, #50	; 0x32
 800209a:	2201      	movs	r2, #1
 800209c:	801a      	strh	r2, [r3, #0]
	Details[i].turns[3]		= 10;
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4919      	ldr	r1, [pc, #100]	; (8002108 <structInit+0x5c0>)
 80020a4:	0013      	movs	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	189b      	adds	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	18cb      	adds	r3, r1, r3
 80020ae:	3320      	adds	r3, #32
 80020b0:	220a      	movs	r2, #10
 80020b2:	801a      	strh	r2, [r3, #0]
	Details[i].diameter[3]	= 250;
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4913      	ldr	r1, [pc, #76]	; (8002108 <structInit+0x5c0>)
 80020ba:	0013      	movs	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	189b      	adds	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	18cb      	adds	r3, r1, r3
 80020c4:	3334      	adds	r3, #52	; 0x34
 80020c6:	22fa      	movs	r2, #250	; 0xfa
 80020c8:	801a      	strh	r2, [r3, #0]
	Details[i].taskCount	= countArray(&Details[i]);
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	0013      	movs	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	189b      	adds	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <structInit+0x5c0>)
 80020d8:	189a      	adds	r2, r3, r2
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781c      	ldrb	r4, [r3, #0]
 80020de:	0010      	movs	r0, r2
 80020e0:	f001 f8a5 	bl	800322e <countArray>
 80020e4:	0003      	movs	r3, r0
 80020e6:	0018      	movs	r0, r3
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <structInit+0x5c0>)
 80020ea:	2142      	movs	r1, #66	; 0x42
 80020ec:	0023      	movs	r3, r4
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	191b      	adds	r3, r3, r4
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	18d3      	adds	r3, r2, r3
 80020f6:	185b      	adds	r3, r3, r1
 80020f8:	1c02      	adds	r2, r0, #0
 80020fa:	701a      	strb	r2, [r3, #0]
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b003      	add	sp, #12
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	08007a80 	.word	0x08007a80
 8002108:	20000510 	.word	0x20000510
 800210c:	08007a88 	.word	0x08007a88
 8002110:	08007a90 	.word	0x08007a90
 8002114:	08007a98 	.word	0x08007a98
 8002118:	08007aa8 	.word	0x08007aa8
 800211c:	000009c4 	.word	0x000009c4

08002120 <setTheme>:

void setTheme(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af02      	add	r7, sp, #8
	clearContent();
 8002126:	f001 f853 	bl	80031d0 <clearContent>
	switch (workStep)
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <setTheme+0x1e4>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b3d      	cmp	r3, #61	; 0x3d
 8002132:	d900      	bls.n	8002136 <setTheme+0x16>
 8002134:	e0e0      	b.n	80022f8 <setTheme+0x1d8>
 8002136:	009a      	lsls	r2, r3, #2
 8002138:	4b73      	ldr	r3, [pc, #460]	; (8002308 <setTheme+0x1e8>)
 800213a:	18d3      	adds	r3, r2, r3
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	469f      	mov	pc, r3
	{
		case 0: // wyświetla logo
			SSD1306_DrawBitmap(0, 0, IMG_LOGO, 128, 64, 1);
 8002140:	4a72      	ldr	r2, [pc, #456]	; (800230c <setTheme+0x1ec>)
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2340      	movs	r3, #64	; 0x40
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	2100      	movs	r1, #0
 800214e:	2000      	movs	r0, #0
 8002150:	f7fe febb 	bl	8000eca <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8002154:	f7ff f81c 	bl	8001190 <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 8002158:	23fa      	movs	r3, #250	; 0xfa
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	0018      	movs	r0, r3
 800215e:	f001 fbab 	bl	80038b8 <HAL_Delay>
			workStep++;
 8002162:	4b68      	ldr	r3, [pc, #416]	; (8002304 <setTheme+0x1e4>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b65      	ldr	r3, [pc, #404]	; (8002304 <setTheme+0x1e4>)
 800216e:	701a      	strb	r2, [r3, #0]
			SSD1306_Clear();
 8002170:	f7ff fc1c 	bl	80019ac <SSD1306_Clear>
			SSD1306_UpdateScreen();
 8002174:	f7ff f80c 	bl	8001190 <SSD1306_UpdateScreen>
			setTheme();
 8002178:	f7ff ffd2 	bl	8002120 <setTheme>
			break;
 800217c:	e0bc      	b.n	80022f8 <setTheme+0x1d8>
		case 1: // wybór projektu - nowy lub istniejacy
			showLabelBar(DISP_PROJECT_LABEL);
 800217e:	4b64      	ldr	r3, [pc, #400]	; (8002310 <setTheme+0x1f0>)
 8002180:	0018      	movs	r0, r3
 8002182:	f001 f809 	bl	8003198 <showLabelBar>
			progressBarWidth = (128 / ((PROJECT_COUNT + 1) / 2) + ((PROJECT_COUNT + 1) % 2));
 8002186:	2303      	movs	r3, #3
 8002188:	3301      	adds	r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	da00      	bge.n	8002190 <setTheme+0x70>
 800218e:	3301      	adds	r3, #1
 8002190:	105b      	asrs	r3, r3, #1
 8002192:	0019      	movs	r1, r3
 8002194:	2080      	movs	r0, #128	; 0x80
 8002196:	f7fe f84b 	bl	8000230 <__divsi3>
 800219a:	0003      	movs	r3, r0
 800219c:	b2da      	uxtb	r2, r3
 800219e:	2303      	movs	r3, #3
 80021a0:	3301      	adds	r3, #1
 80021a2:	495c      	ldr	r1, [pc, #368]	; (8002314 <setTheme+0x1f4>)
 80021a4:	400b      	ands	r3, r1
 80021a6:	d504      	bpl.n	80021b2 <setTheme+0x92>
 80021a8:	3b01      	subs	r3, #1
 80021aa:	2102      	movs	r1, #2
 80021ac:	4249      	negs	r1, r1
 80021ae:	430b      	orrs	r3, r1
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	18d3      	adds	r3, r2, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <setTheme+0x1f8>)
 80021ba:	701a      	strb	r2, [r3, #0]
			progressBarStep = projectSelect / 2;
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <setTheme+0x1fc>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b56      	ldr	r3, [pc, #344]	; (8002320 <setTheme+0x200>)
 80021c8:	701a      	strb	r2, [r3, #0]
			paginationBar(progressBarWidth, progressBarStep);
 80021ca:	4b53      	ldr	r3, [pc, #332]	; (8002318 <setTheme+0x1f8>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <setTheme+0x200>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	0019      	movs	r1, r3
 80021d4:	0010      	movs	r0, r2
 80021d6:	f001 f809 	bl	80031ec <paginationBar>
			showProjectSelectMenu();
 80021da:	f000 f8b3 	bl	8002344 <showProjectSelectMenu>
			break;
 80021de:	e08b      	b.n	80022f8 <setTheme+0x1d8>
		case 11:; // szczegoly projektu
			showProjectDetails(&Details[projectSelect - 1], 0);
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <setTheme+0x1fc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	1e5a      	subs	r2, r3, #1
 80021e8:	0013      	movs	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	189b      	adds	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4a4c      	ldr	r2, [pc, #304]	; (8002324 <setTheme+0x204>)
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	2100      	movs	r1, #0
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 f9d8 	bl	80025ac <showProjectDetails>
			break;
 80021fc:	e07c      	b.n	80022f8 <setTheme+0x1d8>
		case 12:; // szczegoly projektu
			clearContent();
 80021fe:	f000 ffe7 	bl	80031d0 <clearContent>
			showProjectDetails(&Details[projectSelect - 1], 1);
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <setTheme+0x1fc>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	0013      	movs	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	189b      	adds	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4a44      	ldr	r2, [pc, #272]	; (8002324 <setTheme+0x204>)
 8002214:	189b      	adds	r3, r3, r2
 8002216:	2101      	movs	r1, #1
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f9c7 	bl	80025ac <showProjectDetails>
			break;
 800221e:	e06b      	b.n	80022f8 <setTheme+0x1d8>
		case 2: // ustawienie szerokości karkasu
			showLabelBar(DISP_SET_WIDTH_LABEL);
 8002220:	4b41      	ldr	r3, [pc, #260]	; (8002328 <setTheme+0x208>)
 8002222:	0018      	movs	r0, r3
 8002224:	f000 ffb8 	bl	8003198 <showLabelBar>
			if(!correctionFlag) showValueScreen(CARCASS_WIDTH, 0, 0, FIRST_RUN);
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <setTheme+0x20c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <setTheme+0x120>
 8002232:	2301      	movs	r3, #1
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2000      	movs	r0, #0
 800223a:	f000 fa9f 	bl	800277c <showValueScreen>
			else showValueScreen(CARCASS_WIDTH, 0, 0, EDIT_RUN);
			break;
 800223e:	e05b      	b.n	80022f8 <setTheme+0x1d8>
			else showValueScreen(CARCASS_WIDTH, 0, 0, EDIT_RUN);
 8002240:	2302      	movs	r3, #2
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2000      	movs	r0, #0
 8002248:	f000 fa98 	bl	800277c <showValueScreen>
			break;
 800224c:	e054      	b.n	80022f8 <setTheme+0x1d8>
		case 3: // ustawienie ilosci zwojow
			showLabelBar(DISP_SET_TURNS_LABEL);
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <setTheme+0x210>)
 8002250:	0018      	movs	r0, r3
 8002252:	f000 ffa1 	bl	8003198 <showLabelBar>
			if(!correctionFlag) showValueScreen(CARCASS_COIL_TURNS, 0, 0, FIRST_RUN);
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <setTheme+0x20c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <setTheme+0x14e>
 8002260:	2301      	movs	r3, #1
 8002262:	2200      	movs	r2, #0
 8002264:	2100      	movs	r1, #0
 8002266:	2001      	movs	r0, #1
 8002268:	f000 fa88 	bl	800277c <showValueScreen>
			else showValueScreen(CARCASS_COIL_TURNS, 0, 0, EDIT_RUN);
			break;
 800226c:	e044      	b.n	80022f8 <setTheme+0x1d8>
			else showValueScreen(CARCASS_COIL_TURNS, 0, 0, EDIT_RUN);
 800226e:	2302      	movs	r3, #2
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2001      	movs	r0, #1
 8002276:	f000 fa81 	bl	800277c <showValueScreen>
			break;
 800227a:	e03d      	b.n	80022f8 <setTheme+0x1d8>
		case 4: // srednica uzwojenia
			showLabelBar(DISP_SET_DIAMETER_LABEL);
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <setTheme+0x214>)
 800227e:	0018      	movs	r0, r3
 8002280:	f000 ff8a 	bl	8003198 <showLabelBar>
			if(!correctionFlag) showValueScreen(WINDING_DIAMETER, 0, 0, FIRST_RUN);
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <setTheme+0x20c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <setTheme+0x17c>
 800228e:	2301      	movs	r3, #1
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2002      	movs	r0, #2
 8002296:	f000 fa71 	bl	800277c <showValueScreen>
			else showValueScreen(WINDING_DIAMETER, 0, 0, EDIT_RUN);
			break;
 800229a:	e02d      	b.n	80022f8 <setTheme+0x1d8>
			else showValueScreen(WINDING_DIAMETER, 0, 0, EDIT_RUN);
 800229c:	2302      	movs	r3, #2
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2002      	movs	r0, #2
 80022a4:	f000 fa6a 	bl	800277c <showValueScreen>
			break;
 80022a8:	e026      	b.n	80022f8 <setTheme+0x1d8>
		case 5: // szybkosc nawijania
			showLabelBar(DISP_SET_SPEED_LABEL);
 80022aa:	4b23      	ldr	r3, [pc, #140]	; (8002338 <setTheme+0x218>)
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 ff73 	bl	8003198 <showLabelBar>
			if(!correctionFlag) showValueScreen(WINDING_SPEED, 0, 0, FIRST_RUN);
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <setTheme+0x20c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <setTheme+0x1aa>
 80022bc:	2301      	movs	r3, #1
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2003      	movs	r0, #3
 80022c4:	f000 fa5a 	bl	800277c <showValueScreen>
			else showValueScreen(WINDING_SPEED, 0, 0, EDIT_RUN);
			break;
 80022c8:	e016      	b.n	80022f8 <setTheme+0x1d8>
			else showValueScreen(WINDING_SPEED, 0, 0, EDIT_RUN);
 80022ca:	2302      	movs	r3, #2
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 fa53 	bl	800277c <showValueScreen>
			break;
 80022d6:	e00f      	b.n	80022f8 <setTheme+0x1d8>
		case 6: // podsumowanie
			showLabelBar(DISP_SET_SUMMARY_LABEL);
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <setTheme+0x21c>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 ff5c 	bl	8003198 <showLabelBar>
			showSummary();
 80022e0:	f000 fd84 	bl	8002dec <showSummary>
			break;
 80022e4:	e008      	b.n	80022f8 <setTheme+0x1d8>
		case 61: // podsumowanie
			showLabelBar(DISP_CORRECTNESS_QUERY);
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <setTheme+0x220>)
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 ff55 	bl	8003198 <showLabelBar>
			correctnessQuery(0, FIRST_RUN);
 80022ee:	2101      	movs	r1, #1
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 fe67 	bl	8002fc4 <correctnessQuery>
			break;
 80022f6:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_UpdateScreen();
 80022f8:	f7fe ff4a 	bl	8001190 <SSD1306_UpdateScreen>
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	200004fe 	.word	0x200004fe
 8002308:	08009084 	.word	0x08009084
 800230c:	08007c80 	.word	0x08007c80
 8002310:	08007abc 	.word	0x08007abc
 8002314:	80000001 	.word	0x80000001
 8002318:	20000502 	.word	0x20000502
 800231c:	200004ff 	.word	0x200004ff
 8002320:	20000503 	.word	0x20000503
 8002324:	20000510 	.word	0x20000510
 8002328:	08007ad0 	.word	0x08007ad0
 800232c:	20000500 	.word	0x20000500
 8002330:	08007ae0 	.word	0x08007ae0
 8002334:	08007af0 	.word	0x08007af0
 8002338:	08007b00 	.word	0x08007b00
 800233c:	08007b14 	.word	0x08007b14
 8002340:	08007b24 	.word	0x08007b24

08002344 <showProjectSelectMenu>:

// wybór projektu - 1
// -------------------------------------------------------------------------------------
void showProjectSelectMenu(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b092      	sub	sp, #72	; 0x48
 8002348:	af00      	add	r7, sp, #0
	uint8_t leftMargin = BOX_LEFT; // left margin
 800234a:	2347      	movs	r3, #71	; 0x47
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2205      	movs	r2, #5
 8002350:	701a      	strb	r2, [r3, #0]
	uint8_t renderingBlock = projectSelect - 1;
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <showProjectSelectMenu+0x12c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	2346      	movs	r3, #70	; 0x46
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	3a01      	subs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
	uint8_t renderingStep = 0;
 8002360:	2345      	movs	r3, #69	; 0x45
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]

	if(projectSelect < 2)
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <showProjectSelectMenu+0x12c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d875      	bhi.n	800245e <showProjectSelectMenu+0x11a>
	{
		newTaskElement();
 8002372:	f000 f881 	bl	8002478 <newTaskElement>
		ProjectManager Handler = Details[0];
 8002376:	003a      	movs	r2, r7
 8002378:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <showProjectSelectMenu+0x130>)
 800237a:	0010      	movs	r0, r2
 800237c:	0019      	movs	r1, r3
 800237e:	2344      	movs	r3, #68	; 0x44
 8002380:	001a      	movs	r2, r3
 8002382:	f004 feb3 	bl	80070ec <memcpy>
		showProjectElements(&Handler, 68);
 8002386:	003b      	movs	r3, r7
 8002388:	2144      	movs	r1, #68	; 0x44
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f8bc 	bl	8002508 <showProjectElements>
				showProjectElements(&Handler, leftMargin);
			}
			renderingStep++;
		}
	}
}
 8002390:	e06a      	b.n	8002468 <showProjectSelectMenu+0x124>
			if(!renderingStep)
 8002392:	2345      	movs	r3, #69	; 0x45
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d127      	bne.n	80023ec <showProjectSelectMenu+0xa8>
				if(projectSelect % 2) leftMargin = BOX_RIGHT;
 800239c:	4b34      	ldr	r3, [pc, #208]	; (8002470 <showProjectSelectMenu+0x12c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	4013      	ands	r3, r2
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <showProjectSelectMenu+0x72>
 80023ac:	2347      	movs	r3, #71	; 0x47
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	2244      	movs	r2, #68	; 0x44
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	e003      	b.n	80023be <showProjectSelectMenu+0x7a>
				else leftMargin = BOX_LEFT;
 80023b6:	2347      	movs	r3, #71	; 0x47
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2205      	movs	r2, #5
 80023bc:	701a      	strb	r2, [r3, #0]
				ProjectManager Handler = Details[renderingBlock];
 80023be:	2346      	movs	r3, #70	; 0x46
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	0038      	movs	r0, r7
 80023c6:	492b      	ldr	r1, [pc, #172]	; (8002474 <showProjectSelectMenu+0x130>)
 80023c8:	0013      	movs	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	189b      	adds	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	18cb      	adds	r3, r1, r3
 80023d2:	2244      	movs	r2, #68	; 0x44
 80023d4:	0019      	movs	r1, r3
 80023d6:	f004 fe89 	bl	80070ec <memcpy>
				showProjectElements(&Handler, leftMargin);
 80023da:	2347      	movs	r3, #71	; 0x47
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	003b      	movs	r3, r7
 80023e2:	0011      	movs	r1, r2
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 f88f 	bl	8002508 <showProjectElements>
 80023ea:	e032      	b.n	8002452 <showProjectSelectMenu+0x10e>
				if(projectSelect % 2)
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <showProjectSelectMenu+0x12c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <showProjectSelectMenu+0xce>
					renderingBlock--;
 80023fc:	2146      	movs	r1, #70	; 0x46
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	187b      	adds	r3, r7, r1
 8002404:	3a01      	subs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
					leftMargin = BOX_LEFT;
 8002408:	2347      	movs	r3, #71	; 0x47
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2205      	movs	r2, #5
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e009      	b.n	8002426 <showProjectSelectMenu+0xe2>
					renderingBlock++;
 8002412:	2146      	movs	r1, #70	; 0x46
 8002414:	187b      	adds	r3, r7, r1
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	187b      	adds	r3, r7, r1
 800241a:	3201      	adds	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
					leftMargin = BOX_RIGHT;
 800241e:	2347      	movs	r3, #71	; 0x47
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2244      	movs	r2, #68	; 0x44
 8002424:	701a      	strb	r2, [r3, #0]
				ProjectManager Handler = Details[renderingBlock];
 8002426:	2346      	movs	r3, #70	; 0x46
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	0038      	movs	r0, r7
 800242e:	4911      	ldr	r1, [pc, #68]	; (8002474 <showProjectSelectMenu+0x130>)
 8002430:	0013      	movs	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	189b      	adds	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	18cb      	adds	r3, r1, r3
 800243a:	2244      	movs	r2, #68	; 0x44
 800243c:	0019      	movs	r1, r3
 800243e:	f004 fe55 	bl	80070ec <memcpy>
				showProjectElements(&Handler, leftMargin);
 8002442:	2347      	movs	r3, #71	; 0x47
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	003b      	movs	r3, r7
 800244a:	0011      	movs	r1, r2
 800244c:	0018      	movs	r0, r3
 800244e:	f000 f85b 	bl	8002508 <showProjectElements>
			renderingStep++;
 8002452:	2145      	movs	r1, #69	; 0x45
 8002454:	187b      	adds	r3, r7, r1
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	187b      	adds	r3, r7, r1
 800245a:	3201      	adds	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
		while(renderingStep < 2)
 800245e:	2345      	movs	r3, #69	; 0x45
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d994      	bls.n	8002392 <showProjectSelectMenu+0x4e>
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b012      	add	sp, #72	; 0x48
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200004ff 	.word	0x200004ff
 8002474:	20000510 	.word	0x20000510

08002478 <newTaskElement>:

void newTaskElement(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af02      	add	r7, sp, #8
	bool color = 0;
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]

	if((projectSelect + 3) % 2)
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <newTaskElement+0x80>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3303      	adds	r3, #3
 800248c:	001a      	movs	r2, r3
 800248e:	2301      	movs	r3, #1
 8002490:	4013      	ands	r3, r2
 8002492:	d00b      	beq.n	80024ac <newTaskElement+0x34>
	{
		SSD1306_DrawFilledRectangle(5, 25, 56, 47, 1);
 8002494:	2301      	movs	r3, #1
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	232f      	movs	r3, #47	; 0x2f
 800249a:	2238      	movs	r2, #56	; 0x38
 800249c:	2119      	movs	r1, #25
 800249e:	2005      	movs	r0, #5
 80024a0:	f7ff fa18 	bl	80018d4 <SSD1306_DrawFilledRectangle>
		color = 0;
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e00a      	b.n	80024c2 <newTaskElement+0x4a>
	}
	else
	{
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
 80024ac:	2301      	movs	r3, #1
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	232f      	movs	r3, #47	; 0x2f
 80024b2:	2238      	movs	r2, #56	; 0x38
 80024b4:	2119      	movs	r1, #25
 80024b6:	2005      	movs	r0, #5
 80024b8:	f7ff f975 	bl	80017a6 <SSD1306_DrawRectangle>
		color = 1;
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	2201      	movs	r2, #1
 80024c0:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_GotoXY(18, 33);
 80024c2:	2121      	movs	r1, #33	; 0x21
 80024c4:	2012      	movs	r0, #18
 80024c6:	f7fe ff1f 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts("Nowe", &Font_7x10, color);
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	490b      	ldr	r1, [pc, #44]	; (80024fc <newTaskElement+0x84>)
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <newTaskElement+0x88>)
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7fe ffb2 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(9, 46);
 80024d8:	212e      	movs	r1, #46	; 0x2e
 80024da:	2009      	movs	r0, #9
 80024dc:	f7fe ff14 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts("zadanie", &Font_7x10, color);
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	4905      	ldr	r1, [pc, #20]	; (80024fc <newTaskElement+0x84>)
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <newTaskElement+0x8c>)
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7fe ffa7 	bl	800143c <SSD1306_Puts>
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	200004ff 	.word	0x200004ff
 80024fc:	20000004 	.word	0x20000004
 8002500:	08007b30 	.word	0x08007b30
 8002504:	08007b38 	.word	0x08007b38

08002508 <showProjectElements>:

void showProjectElements(ProjectManager * details, uint8_t margin)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	000a      	movs	r2, r1
 8002512:	1cfb      	adds	r3, r7, #3
 8002514:	701a      	strb	r2, [r3, #0]
	bool color = 0;
 8002516:	250f      	movs	r5, #15
 8002518:	197b      	adds	r3, r7, r5
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]

	color = showSelectBoxes(margin, projectSelect);
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <showProjectElements+0x9c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	197c      	adds	r4, r7, r5
 8002526:	1cfb      	adds	r3, r7, #3
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	0011      	movs	r1, r2
 800252c:	0018      	movs	r0, r3
 800252e:	f000 fddf 	bl	80030f0 <showSelectBoxes>
 8002532:	0003      	movs	r3, r0
 8002534:	7023      	strb	r3, [r4, #0]
	margin += 4;
 8002536:	1cfb      	adds	r3, r7, #3
 8002538:	1cfa      	adds	r2, r7, #3
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	3204      	adds	r2, #4
 800253e:	701a      	strb	r2, [r3, #0]
	SSD1306_GotoXY(margin, 29);
 8002540:	1cfb      	adds	r3, r7, #3
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	211d      	movs	r1, #29
 8002548:	0018      	movs	r0, r3
 800254a:	f7fe fedd 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(details->shortName, &Font_7x10, color);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6858      	ldr	r0, [r3, #4]
 8002552:	197b      	adds	r3, r7, r5
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <showProjectElements+0xa0>)
 8002558:	0019      	movs	r1, r3
 800255a:	f7fe ff6f 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(margin, 40);
 800255e:	1cfb      	adds	r3, r7, #3
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	2128      	movs	r1, #40	; 0x28
 8002566:	0018      	movs	r0, r3
 8002568:	f7fe fece 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(details->descShort_1, &Font_7x10, color);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6898      	ldr	r0, [r3, #8]
 8002570:	197b      	adds	r3, r7, r5
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <showProjectElements+0xa0>)
 8002576:	0019      	movs	r1, r3
 8002578:	f7fe ff60 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(margin, 51);
 800257c:	1cfb      	adds	r3, r7, #3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	2133      	movs	r1, #51	; 0x33
 8002584:	0018      	movs	r0, r3
 8002586:	f7fe febf 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(details->descShort_2, &Font_7x10, color);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68d8      	ldr	r0, [r3, #12]
 800258e:	197b      	adds	r3, r7, r5
 8002590:	781a      	ldrb	r2, [r3, #0]
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <showProjectElements+0xa0>)
 8002594:	0019      	movs	r1, r3
 8002596:	f7fe ff51 	bl	800143c <SSD1306_Puts>
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bdb0      	pop	{r4, r5, r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	200004ff 	.word	0x200004ff
 80025a8:	20000004 	.word	0x20000004

080025ac <showProjectDetails>:

// project details - 11
// -------------------------------------------------------------------------------------

void showProjectDetails(ProjectManager * details, bool list)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	000a      	movs	r2, r1
 80025b6:	1cfb      	adds	r3, r7, #3
 80025b8:	701a      	strb	r2, [r3, #0]
	char width[10];

	sprintf(width, "%i.%imm", details->width / 10, details->width % 10);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	8b1b      	ldrh	r3, [r3, #24]
 80025be:	210a      	movs	r1, #10
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7fd fdab 	bl	800011c <__udivsi3>
 80025c6:	0003      	movs	r3, r0
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	001c      	movs	r4, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8b1b      	ldrh	r3, [r3, #24]
 80025d0:	210a      	movs	r1, #10
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7fd fe28 	bl	8000228 <__aeabi_uidivmod>
 80025d8:	000b      	movs	r3, r1
 80025da:	b29b      	uxth	r3, r3
 80025dc:	4933      	ldr	r1, [pc, #204]	; (80026ac <showProjectDetails+0x100>)
 80025de:	250c      	movs	r5, #12
 80025e0:	1978      	adds	r0, r7, r5
 80025e2:	0022      	movs	r2, r4
 80025e4:	f004 fd94 	bl	8007110 <siprintf>
	showLabelBar(details->fullName);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fdd3 	bl	8003198 <showLabelBar>
	SSD1306_GotoXY(0, 20);
 80025f2:	2114      	movs	r1, #20
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe fe87 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 80025fa:	492d      	ldr	r1, [pc, #180]	; (80026b0 <showProjectDetails+0x104>)
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <showProjectDetails+0x108>)
 80025fe:	2201      	movs	r2, #1
 8002600:	0018      	movs	r0, r3
 8002602:	f7fe ff1b 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8002606:	2114      	movs	r1, #20
 8002608:	2046      	movs	r0, #70	; 0x46
 800260a:	f7fe fe7d 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 800260e:	4928      	ldr	r1, [pc, #160]	; (80026b0 <showProjectDetails+0x104>)
 8002610:	002c      	movs	r4, r5
 8002612:	193b      	adds	r3, r7, r4
 8002614:	2201      	movs	r2, #1
 8002616:	0018      	movs	r0, r3
 8002618:	f7fe ff10 	bl	800143c <SSD1306_Puts>
	if(!list)
 800261c:	1cfb      	adds	r3, r7, #3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2201      	movs	r2, #1
 8002622:	4053      	eors	r3, r2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d037      	beq.n	800269a <showProjectDetails+0xee>
	{
		SSD1306_GotoXY(0, 31);
 800262a:	211f      	movs	r1, #31
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe fe6b 	bl	8001308 <SSD1306_GotoXY>
		SSD1306_Puts(TASK_COUNT_LABEL, &Font_7x10, 1);
 8002632:	491f      	ldr	r1, [pc, #124]	; (80026b0 <showProjectDetails+0x104>)
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <showProjectDetails+0x10c>)
 8002636:	2201      	movs	r2, #1
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe feff 	bl	800143c <SSD1306_Puts>
		SSD1306_GotoXY(70, 31);
 800263e:	211f      	movs	r1, #31
 8002640:	2046      	movs	r0, #70	; 0x46
 8002642:	f7fe fe61 	bl	8001308 <SSD1306_GotoXY>
		uint8_t count = details->taskCount;
 8002646:	2017      	movs	r0, #23
 8002648:	183b      	adds	r3, r7, r0
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	2142      	movs	r1, #66	; 0x42
 800264e:	5c52      	ldrb	r2, [r2, r1]
 8002650:	701a      	strb	r2, [r3, #0]
		sprintf(width, "%i", count);
 8002652:	183b      	adds	r3, r7, r0
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4919      	ldr	r1, [pc, #100]	; (80026bc <showProjectDetails+0x110>)
 8002658:	193b      	adds	r3, r7, r4
 800265a:	0018      	movs	r0, r3
 800265c:	f004 fd58 	bl	8007110 <siprintf>
		SSD1306_Puts(width, &Font_7x10, 1);
 8002660:	4913      	ldr	r1, [pc, #76]	; (80026b0 <showProjectDetails+0x104>)
 8002662:	193b      	adds	r3, r7, r4
 8002664:	2201      	movs	r2, #1
 8002666:	0018      	movs	r0, r3
 8002668:	f7fe fee8 	bl	800143c <SSD1306_Puts>
		SSD1306_GotoXY(0, 42);
 800266c:	212a      	movs	r1, #42	; 0x2a
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe fe4a 	bl	8001308 <SSD1306_GotoXY>
		SSD1306_Puts(details->descFull_1, &Font_7x10, 1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	490d      	ldr	r1, [pc, #52]	; (80026b0 <showProjectDetails+0x104>)
 800267a:	2201      	movs	r2, #1
 800267c:	0018      	movs	r0, r3
 800267e:	f7fe fedd 	bl	800143c <SSD1306_Puts>
		SSD1306_GotoXY(0, 53);
 8002682:	2135      	movs	r1, #53	; 0x35
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fe3f 	bl	8001308 <SSD1306_GotoXY>
		SSD1306_Puts(details->descFull_2, &Font_7x10, 1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <showProjectDetails+0x104>)
 8002690:	2201      	movs	r2, #1
 8002692:	0018      	movs	r0, r3
 8002694:	f7fe fed2 	bl	800143c <SSD1306_Puts>
	}
	else showProjectTasks(details);
}
 8002698:	e003      	b.n	80026a2 <showProjectDetails+0xf6>
	else showProjectTasks(details);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f80f 	bl	80026c0 <showProjectTasks>
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b006      	add	sp, #24
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	08007b40 	.word	0x08007b40
 80026b0:	20000004 	.word	0x20000004
 80026b4:	08007b48 	.word	0x08007b48
 80026b8:	08007b54 	.word	0x08007b54
 80026bc:	08007b60 	.word	0x08007b60

080026c0 <showProjectTasks>:

// project tasks list - 12
// -------------------------------------------------------------------------------------

void showProjectTasks(ProjectManager * details)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	char valueToken[10];

	SSD1306_GotoXY(0, 31);
 80026c8:	211f      	movs	r1, #31
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe fe1c 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(TURNS_LABEL, &Font_7x10, 1);
 80026d0:	4925      	ldr	r1, [pc, #148]	; (8002768 <showProjectTasks+0xa8>)
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <showProjectTasks+0xac>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7fe feb0 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(70, 31);
 80026dc:	211f      	movs	r1, #31
 80026de:	2046      	movs	r0, #70	; 0x46
 80026e0:	f7fe fe12 	bl	8001308 <SSD1306_GotoXY>
	sprintf(valueToken, "%i", details->turns[taskStep]);
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <showProjectTasks+0xb0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	330c      	adds	r3, #12
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	3302      	adds	r3, #2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	001a      	movs	r2, r3
 80026f8:	491e      	ldr	r1, [pc, #120]	; (8002774 <showProjectTasks+0xb4>)
 80026fa:	240c      	movs	r4, #12
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	0018      	movs	r0, r3
 8002700:	f004 fd06 	bl	8007110 <siprintf>
	SSD1306_Puts(valueToken, &Font_7x10, 1);
 8002704:	4918      	ldr	r1, [pc, #96]	; (8002768 <showProjectTasks+0xa8>)
 8002706:	193b      	adds	r3, r7, r4
 8002708:	2201      	movs	r2, #1
 800270a:	0018      	movs	r0, r3
 800270c:	f7fe fe96 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(0, 42);
 8002710:	212a      	movs	r1, #42	; 0x2a
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fdf8 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(DIAMETER_LABEL, &Font_7x10, 1);
 8002718:	4913      	ldr	r1, [pc, #76]	; (8002768 <showProjectTasks+0xa8>)
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <showProjectTasks+0xb8>)
 800271c:	2201      	movs	r2, #1
 800271e:	0018      	movs	r0, r3
 8002720:	f7fe fe8c 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(70, 42);
 8002724:	212a      	movs	r1, #42	; 0x2a
 8002726:	2046      	movs	r0, #70	; 0x46
 8002728:	f7fe fdee 	bl	8001308 <SSD1306_GotoXY>
	sprintf(valueToken, "%i", details->diameter[taskStep]);
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <showProjectTasks+0xb0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	3314      	adds	r3, #20
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	3306      	adds	r3, #6
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	001a      	movs	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <showProjectTasks+0xb4>)
 8002742:	193b      	adds	r3, r7, r4
 8002744:	0018      	movs	r0, r3
 8002746:	f004 fce3 	bl	8007110 <siprintf>
	SSD1306_Puts(valueToken, &Font_7x10, 1);
 800274a:	4907      	ldr	r1, [pc, #28]	; (8002768 <showProjectTasks+0xa8>)
 800274c:	193b      	adds	r3, r7, r4
 800274e:	2201      	movs	r2, #1
 8002750:	0018      	movs	r0, r3
 8002752:	f7fe fe73 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 8002756:	2135      	movs	r1, #53	; 0x35
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe fdd5 	bl	8001308 <SSD1306_GotoXY>
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b007      	add	sp, #28
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	20000004 	.word	0x20000004
 800276c:	08007b64 	.word	0x08007b64
 8002770:	20000501 	.word	0x20000501
 8002774:	08007b60 	.word	0x08007b60
 8002778:	08007b6c 	.word	0x08007b6c

0800277c <showValueScreen>:

// ustawianie wartosci - 2++
// -------------------------------------------------------------------------------------
void showValueScreen(VALUE_TYPE type, uint8_t runMode, bool direction, uint8_t runCount)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	0005      	movs	r5, r0
 8002784:	000c      	movs	r4, r1
 8002786:	0010      	movs	r0, r2
 8002788:	0019      	movs	r1, r3
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	1c2a      	adds	r2, r5, #0
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	1dbb      	adds	r3, r7, #6
 8002792:	1c22      	adds	r2, r4, #0
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	1d7b      	adds	r3, r7, #5
 8002798:	1c02      	adds	r2, r0, #0
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	1c0a      	adds	r2, r1, #0
 80027a0:	701a      	strb	r2, [r3, #0]
	char valueLettering[10];

	if(runCount)
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d057      	beq.n	800285a <showValueScreen+0xde>
	{
		markerPosition = 0;
 80027aa:	4b7b      	ldr	r3, [pc, #492]	; (8002998 <showValueScreen+0x21c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
		switch (type)
 80027b0:	1dfb      	adds	r3, r7, #7
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d029      	beq.n	800280c <showValueScreen+0x90>
 80027b8:	dc33      	bgt.n	8002822 <showValueScreen+0xa6>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d01b      	beq.n	80027f6 <showValueScreen+0x7a>
 80027be:	dc30      	bgt.n	8002822 <showValueScreen+0xa6>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <showValueScreen+0x4e>
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d00b      	beq.n	80027e0 <showValueScreen+0x64>
 80027c8:	e02b      	b.n	8002822 <showValueScreen+0xa6>
		{
			case 0: SSD1306_DrawBitmap(0, 0, IMG_WIDTH, 128, 64, 1);
 80027ca:	4a74      	ldr	r2, [pc, #464]	; (800299c <showValueScreen+0x220>)
 80027cc:	2301      	movs	r3, #1
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2340      	movs	r3, #64	; 0x40
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	2100      	movs	r1, #0
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe fb76 	bl	8000eca <SSD1306_DrawBitmap>
				break;
 80027de:	e020      	b.n	8002822 <showValueScreen+0xa6>
			case 1: SSD1306_DrawBitmap(0, 0, IMG_TURNS, 128, 64, 1);
 80027e0:	4a6f      	ldr	r2, [pc, #444]	; (80029a0 <showValueScreen+0x224>)
 80027e2:	2301      	movs	r3, #1
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	2340      	movs	r3, #64	; 0x40
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	2100      	movs	r1, #0
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fb6b 	bl	8000eca <SSD1306_DrawBitmap>
				break;
 80027f4:	e015      	b.n	8002822 <showValueScreen+0xa6>
			case 2: SSD1306_DrawBitmap(0, 0, IMG_DIAMETER, 128, 64, 1);
 80027f6:	4a6b      	ldr	r2, [pc, #428]	; (80029a4 <showValueScreen+0x228>)
 80027f8:	2301      	movs	r3, #1
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2340      	movs	r3, #64	; 0x40
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	2100      	movs	r1, #0
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fb60 	bl	8000eca <SSD1306_DrawBitmap>
				break;
 800280a:	e00a      	b.n	8002822 <showValueScreen+0xa6>
			case 3: SSD1306_DrawBitmap(0, 0, IMG_SPEED, 128, 64, 1);
 800280c:	4a66      	ldr	r2, [pc, #408]	; (80029a8 <showValueScreen+0x22c>)
 800280e:	2301      	movs	r3, #1
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	2100      	movs	r1, #0
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe fb55 	bl	8000eca <SSD1306_DrawBitmap>
				break;
 8002820:	46c0      	nop			; (mov r8, r8)
		}
		if(runCount == FIRST_RUN) intToArray_chVal(Settings[type].minValue);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <showValueScreen+0xc0>
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <showValueScreen+0x230>)
 8002830:	00d2      	lsls	r2, r2, #3
 8002832:	5ad3      	ldrh	r3, [r2, r3]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fa11 	bl	8002c5c <intToArray_chVal>
 800283a:	e033      	b.n	80028a4 <showValueScreen+0x128>
		else if(runCount == EDIT_RUN) intToArray_chVal(Settings[type].setValue);
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d12f      	bne.n	80028a4 <showValueScreen+0x128>
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <showValueScreen+0x230>)
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	18d3      	adds	r3, r2, r3
 800284e:	3302      	adds	r3, #2
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fa02 	bl	8002c5c <intToArray_chVal>
 8002858:	e024      	b.n	80028a4 <showValueScreen+0x128>
	}
	else
	{
		if(runMode) changeValue(direction, markerPosition, Settings[type].minValue, Settings[type].maxValue);
 800285a:	1dbb      	adds	r3, r7, #6
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <showValueScreen+0x114>
 8002862:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <showValueScreen+0x21c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	b25b      	sxtb	r3, r3
 8002868:	b2d9      	uxtb	r1, r3
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <showValueScreen+0x230>)
 8002870:	00d2      	lsls	r2, r2, #3
 8002872:	5ad4      	ldrh	r4, [r2, r3]
 8002874:	1dfb      	adds	r3, r7, #7
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <showValueScreen+0x230>)
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	3304      	adds	r3, #4
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	1d7b      	adds	r3, r7, #5
 8002884:	7818      	ldrb	r0, [r3, #0]
 8002886:	0013      	movs	r3, r2
 8002888:	0022      	movs	r2, r4
 800288a:	f000 f8f5 	bl	8002a78 <changeValue>
 800288e:	e009      	b.n	80028a4 <showValueScreen+0x128>
		else moveMarker(Settings[type].digitsCount);
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4a45      	ldr	r2, [pc, #276]	; (80029ac <showValueScreen+0x230>)
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	3306      	adds	r3, #6
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f8ca 	bl	8002a38 <moveMarker>
	}
	setMarkerPosition(Settings[type].dotPosition);
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4a40      	ldr	r2, [pc, #256]	; (80029ac <showValueScreen+0x230>)
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	18d3      	adds	r3, r2, r3
 80028ae:	3307      	adds	r3, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f000 f888 	bl	80029c8 <setMarkerPosition>
	switch (type)
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d04d      	beq.n	800295c <showValueScreen+0x1e0>
 80028c0:	dc57      	bgt.n	8002972 <showValueScreen+0x1f6>
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d037      	beq.n	8002936 <showValueScreen+0x1ba>
 80028c6:	dc54      	bgt.n	8002972 <showValueScreen+0x1f6>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <showValueScreen+0x156>
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d019      	beq.n	8002904 <showValueScreen+0x188>
 80028d0:	e04f      	b.n	8002972 <showValueScreen+0x1f6>
	{
		case 0: sprintf(valueLettering, "%i%i%i.%imm", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <showValueScreen+0x234>)
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	001c      	movs	r4, r3
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <showValueScreen+0x234>)
 80028dc:	789b      	ldrb	r3, [r3, #2]
 80028de:	b25b      	sxtb	r3, r3
 80028e0:	001d      	movs	r5, r3
 80028e2:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <showValueScreen+0x234>)
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	001a      	movs	r2, r3
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <showValueScreen+0x234>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	4930      	ldr	r1, [pc, #192]	; (80029b4 <showValueScreen+0x238>)
 80028f2:	200c      	movs	r0, #12
 80028f4:	1838      	adds	r0, r7, r0
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	9200      	str	r2, [sp, #0]
 80028fa:	002b      	movs	r3, r5
 80028fc:	0022      	movs	r2, r4
 80028fe:	f004 fc07 	bl	8007110 <siprintf>
			break;
 8002902:	e036      	b.n	8002972 <showValueScreen+0x1f6>
		case 1: sprintf(valueLettering, "%i%i%i%izw.", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <showValueScreen+0x234>)
 8002906:	78db      	ldrb	r3, [r3, #3]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	001c      	movs	r4, r3
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <showValueScreen+0x234>)
 800290e:	789b      	ldrb	r3, [r3, #2]
 8002910:	b25b      	sxtb	r3, r3
 8002912:	001d      	movs	r5, r3
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <showValueScreen+0x234>)
 8002916:	785b      	ldrb	r3, [r3, #1]
 8002918:	b25b      	sxtb	r3, r3
 800291a:	001a      	movs	r2, r3
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <showValueScreen+0x234>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b25b      	sxtb	r3, r3
 8002922:	4925      	ldr	r1, [pc, #148]	; (80029b8 <showValueScreen+0x23c>)
 8002924:	200c      	movs	r0, #12
 8002926:	1838      	adds	r0, r7, r0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	9200      	str	r2, [sp, #0]
 800292c:	002b      	movs	r3, r5
 800292e:	0022      	movs	r2, r4
 8002930:	f004 fbee 	bl	8007110 <siprintf>
			break;
 8002934:	e01d      	b.n	8002972 <showValueScreen+0x1f6>
		case 2: sprintf(valueLettering, "~%i.%i%imm", arrayToken[2], arrayToken[1], arrayToken[0]);
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <showValueScreen+0x234>)
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	b25b      	sxtb	r3, r3
 800293c:	001a      	movs	r2, r3
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <showValueScreen+0x234>)
 8002940:	785b      	ldrb	r3, [r3, #1]
 8002942:	b25b      	sxtb	r3, r3
 8002944:	001c      	movs	r4, r3
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <showValueScreen+0x234>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b25b      	sxtb	r3, r3
 800294c:	491b      	ldr	r1, [pc, #108]	; (80029bc <showValueScreen+0x240>)
 800294e:	200c      	movs	r0, #12
 8002950:	1838      	adds	r0, r7, r0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	0023      	movs	r3, r4
 8002956:	f004 fbdb 	bl	8007110 <siprintf>
			break;
 800295a:	e00a      	b.n	8002972 <showValueScreen+0x1f6>
		case 3: sprintf(valueLettering, "   %i", arrayToken[0]);
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <showValueScreen+0x234>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	001a      	movs	r2, r3
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <showValueScreen+0x244>)
 8002966:	230c      	movs	r3, #12
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	0018      	movs	r0, r3
 800296c:	f004 fbd0 	bl	8007110 <siprintf>
			break;
 8002970:	46c0      	nop			; (mov r8, r8)
	}
	clearValue();
 8002972:	f000 fa2c 	bl	8002dce <clearValue>
	SSD1306_GotoXY(25, 20);
 8002976:	2114      	movs	r1, #20
 8002978:	2019      	movs	r0, #25
 800297a:	f7fe fcc5 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(valueLettering, &Font_11x18, 1);
 800297e:	4911      	ldr	r1, [pc, #68]	; (80029c4 <showValueScreen+0x248>)
 8002980:	230c      	movs	r3, #12
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2201      	movs	r2, #1
 8002986:	0018      	movs	r0, r3
 8002988:	f7fe fd58 	bl	800143c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800298c:	f7fe fc00 	bl	8001190 <SSD1306_UpdateScreen>
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b006      	add	sp, #24
 8002996:	bdb0      	pop	{r4, r5, r7, pc}
 8002998:	20000504 	.word	0x20000504
 800299c:	08008080 	.word	0x08008080
 80029a0:	08008480 	.word	0x08008480
 80029a4:	08008880 	.word	0x08008880
 80029a8:	08008c80 	.word	0x08008c80
 80029ac:	20000620 	.word	0x20000620
 80029b0:	20000508 	.word	0x20000508
 80029b4:	08007b78 	.word	0x08007b78
 80029b8:	08007b84 	.word	0x08007b84
 80029bc:	08007b90 	.word	0x08007b90
 80029c0:	08007b9c 	.word	0x08007b9c
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <setMarkerPosition>:

void setMarkerPosition(uint8_t divider)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	0002      	movs	r2, r0
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	701a      	strb	r2, [r3, #0]
	uint8_t correction = 0;
 80029d4:	240f      	movs	r4, #15
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]

	clearMarker();
 80029dc:	f000 f9e9 	bl	8002db2 <clearMarker>
	if(markerPosition >= divider)
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <setMarkerPosition+0x6c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	001a      	movs	r2, r3
 80029e8:	1dfb      	adds	r3, r7, #7
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	db02      	blt.n	80029f6 <setMarkerPosition+0x2e>
	{
		correction = 11;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	220b      	movs	r2, #11
 80029f4:	701a      	strb	r2, [r3, #0]
	}
	char margin = (73 - ((markerPosition * 11) + correction));
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <setMarkerPosition+0x6c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	1c1a      	adds	r2, r3, #0
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	18d2      	adds	r2, r2, r3
 8002a04:	1892      	adds	r2, r2, r2
 8002a06:	18d3      	adds	r3, r2, r3
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	230f      	movs	r3, #15
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	18d3      	adds	r3, r2, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	200e      	movs	r0, #14
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	2149      	movs	r1, #73	; 0x49
 8002a1a:	1a8a      	subs	r2, r1, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
	drawMarker(margin, 39);
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2127      	movs	r1, #39	; 0x27
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f979 	bl	8002d1c <drawMarker>
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b005      	add	sp, #20
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	20000504 	.word	0x20000504

08002a38 <moveMarker>:

void moveMarker(uint8_t range)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0002      	movs	r2, r0
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	701a      	strb	r2, [r3, #0]
	markerPosition++;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <moveMarker+0x3c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b25b      	sxtb	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	b25a      	sxtb	r2, r3
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <moveMarker+0x3c>)
 8002a54:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= range) {markerPosition = 0;}
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <moveMarker+0x3c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	001a      	movs	r2, r3
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	db02      	blt.n	8002a6c <moveMarker+0x34>
 8002a66:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <moveMarker+0x3c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000504 	.word	0x20000504

08002a78 <changeValue>:

void changeValue(bool set, uint8_t position, uint16_t min, uint16_t max)
{
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	0005      	movs	r5, r0
 8002a80:	000c      	movs	r4, r1
 8002a82:	0010      	movs	r0, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	1c2a      	adds	r2, r5, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	1dbb      	adds	r3, r7, #6
 8002a8e:	1c22      	adds	r2, r4, #0
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	1c02      	adds	r2, r0, #0
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	1cbb      	adds	r3, r7, #2
 8002a9a:	1c0a      	adds	r2, r1, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
	uint16_t value;
	uint16_t valueToken = arrayToInt_chVal();
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	18fc      	adds	r4, r7, r3
 8002aa2:	f000 f8a1 	bl	8002be8 <arrayToInt_chVal>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	8023      	strh	r3, [r4, #0]
	uint16_t expo 		= 1;
 8002aaa:	2314      	movs	r3, #20
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < position; i++) {expo *= 10;}
 8002ab2:	2313      	movs	r3, #19
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	e00e      	b.n	8002ada <changeValue+0x62>
 8002abc:	2314      	movs	r3, #20
 8002abe:	18fa      	adds	r2, r7, r3
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	1c19      	adds	r1, r3, #0
 8002ac6:	0089      	lsls	r1, r1, #2
 8002ac8:	18cb      	adds	r3, r1, r3
 8002aca:	18db      	adds	r3, r3, r3
 8002acc:	8013      	strh	r3, [r2, #0]
 8002ace:	2113      	movs	r1, #19
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	3201      	adds	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	2313      	movs	r3, #19
 8002adc:	18fa      	adds	r2, r7, r3
 8002ade:	1dbb      	adds	r3, r7, #6
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d3e9      	bcc.n	8002abc <changeValue+0x44>
	uint8_t overflowFlag = arrayToken[position] = (valueToken / expo) % 10; // określa wartość cyfry nad markerem wyboru
 8002ae8:	2410      	movs	r4, #16
 8002aea:	193a      	adds	r2, r7, r4
 8002aec:	2514      	movs	r5, #20
 8002aee:	197b      	adds	r3, r7, r5
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f7fd fb10 	bl	800011c <__udivsi3>
 8002afc:	0003      	movs	r3, r0
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	210a      	movs	r1, #10
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fd fb90 	bl	8000228 <__aeabi_uidivmod>
 8002b08:	000b      	movs	r3, r1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	1dbb      	adds	r3, r7, #6
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	b251      	sxtb	r1, r2
 8002b12:	4a34      	ldr	r2, [pc, #208]	; (8002be4 <changeValue+0x16c>)
 8002b14:	1c08      	adds	r0, r1, #0
 8002b16:	54d0      	strb	r0, [r2, r3]
 8002b18:	200f      	movs	r0, #15
 8002b1a:	183b      	adds	r3, r7, r0
 8002b1c:	1c0a      	adds	r2, r1, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
	if(set)
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01d      	beq.n	8002b64 <changeValue+0xec>
	{
		if(overflowFlag >= 9) value = valueToken - (expo * 9);
 8002b28:	183b      	adds	r3, r7, r0
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d90e      	bls.n	8002b4e <changeValue+0xd6>
 8002b30:	197b      	adds	r3, r7, r5
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	1c1a      	adds	r2, r3, #0
 8002b36:	0352      	lsls	r2, r2, #13
 8002b38:	1ad2      	subs	r2, r2, r3
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	b299      	uxth	r1, r3
 8002b40:	2316      	movs	r3, #22
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	193a      	adds	r2, r7, r4
 8002b46:	8812      	ldrh	r2, [r2, #0]
 8002b48:	188a      	adds	r2, r1, r2
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	e028      	b.n	8002ba0 <changeValue+0x128>
		else value = valueToken + expo;
 8002b4e:	2316      	movs	r3, #22
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2210      	movs	r2, #16
 8002b54:	18b9      	adds	r1, r7, r2
 8002b56:	2214      	movs	r2, #20
 8002b58:	18ba      	adds	r2, r7, r2
 8002b5a:	8809      	ldrh	r1, [r1, #0]
 8002b5c:	8812      	ldrh	r2, [r2, #0]
 8002b5e:	188a      	adds	r2, r1, r2
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e01d      	b.n	8002ba0 <changeValue+0x128>
	}
	else
	{
		if(overflowFlag <= 0) value = valueToken + (expo * 9);
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10e      	bne.n	8002b8c <changeValue+0x114>
 8002b6e:	2314      	movs	r3, #20
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	1c1a      	adds	r2, r3, #0
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	18d3      	adds	r3, r2, r3
 8002b7a:	b299      	uxth	r1, r3
 8002b7c:	2316      	movs	r3, #22
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2210      	movs	r2, #16
 8002b82:	18ba      	adds	r2, r7, r2
 8002b84:	8812      	ldrh	r2, [r2, #0]
 8002b86:	188a      	adds	r2, r1, r2
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	e009      	b.n	8002ba0 <changeValue+0x128>
		else value = valueToken - expo;
 8002b8c:	2316      	movs	r3, #22
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2210      	movs	r2, #16
 8002b92:	18b9      	adds	r1, r7, r2
 8002b94:	2214      	movs	r2, #20
 8002b96:	18ba      	adds	r2, r7, r2
 8002b98:	8809      	ldrh	r1, [r1, #0]
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	1a8a      	subs	r2, r1, r2
 8002b9e:	801a      	strh	r2, [r3, #0]
	}
	if(value < min){value = valueToken;}
 8002ba0:	2116      	movs	r1, #22
 8002ba2:	187a      	adds	r2, r7, r1
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	8812      	ldrh	r2, [r2, #0]
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d204      	bcs.n	8002bb8 <changeValue+0x140>
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2210      	movs	r2, #16
 8002bb2:	18ba      	adds	r2, r7, r2
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	801a      	strh	r2, [r3, #0]
	if(value > max){value = valueToken;}
 8002bb8:	2116      	movs	r1, #22
 8002bba:	187a      	adds	r2, r7, r1
 8002bbc:	1cbb      	adds	r3, r7, #2
 8002bbe:	8812      	ldrh	r2, [r2, #0]
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d904      	bls.n	8002bd0 <changeValue+0x158>
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2210      	movs	r2, #16
 8002bca:	18ba      	adds	r2, r7, r2
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	801a      	strh	r2, [r3, #0]
	intToArray_chVal(value);
 8002bd0:	2316      	movs	r3, #22
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f840 	bl	8002c5c <intToArray_chVal>
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b006      	add	sp, #24
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	20000508 	.word	0x20000508

08002be8 <arrayToInt_chVal>:

uint16_t arrayToInt_chVal(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
	uint16_t expo;
	uint16_t value = 0;
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < 5; i++)
 8002bf4:	1cfb      	adds	r3, r7, #3
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e023      	b.n	8002c44 <arrayToInt_chVal+0x5c>
	{
		if(!i){expo = 1;}
 8002bfc:	1cfb      	adds	r3, r7, #3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <arrayToInt_chVal+0x24>
 8002c04:	1dbb      	adds	r3, r7, #6
 8002c06:	2201      	movs	r2, #1
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e007      	b.n	8002c1c <arrayToInt_chVal+0x34>
		else{expo *= 10;}
 8002c0c:	1dba      	adds	r2, r7, #6
 8002c0e:	1dbb      	adds	r3, r7, #6
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	1c19      	adds	r1, r3, #0
 8002c14:	0089      	lsls	r1, r1, #2
 8002c16:	18cb      	adds	r3, r1, r3
 8002c18:	18db      	adds	r3, r3, r3
 8002c1a:	8013      	strh	r3, [r2, #0]
		value = value + (expo * arrayToken[i]);
 8002c1c:	1cfb      	adds	r3, r7, #3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <arrayToInt_chVal+0x70>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	b25b      	sxtb	r3, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	1dba      	adds	r2, r7, #6
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	4353      	muls	r3, r2
 8002c2e:	b299      	uxth	r1, r3
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	1d3a      	adds	r2, r7, #4
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	188a      	adds	r2, r1, r2
 8002c38:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 8002c3a:	1cfb      	adds	r3, r7, #3
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	1cfb      	adds	r3, r7, #3
 8002c40:	3201      	adds	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	1cfb      	adds	r3, r7, #3
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d9d7      	bls.n	8002bfc <arrayToInt_chVal+0x14>
	}
	return value;
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	881b      	ldrh	r3, [r3, #0]
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000508 	.word	0x20000508

08002c5c <intToArray_chVal>:

void intToArray_chVal(uint16_t value)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	0002      	movs	r2, r0
 8002c64:	1dbb      	adds	r3, r7, #6
 8002c66:	801a      	strh	r2, [r3, #0]
	uint16_t expo;

	for(uint8_t i = 0; i < 5; i++)
 8002c68:	230d      	movs	r3, #13
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e02e      	b.n	8002cd0 <intToArray_chVal+0x74>
	{
		if(!i){expo = 1;}
 8002c72:	230d      	movs	r3, #13
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <intToArray_chVal+0x2a>
 8002c7c:	230e      	movs	r3, #14
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2201      	movs	r2, #1
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	e008      	b.n	8002c98 <intToArray_chVal+0x3c>
		else{expo *= 10;}
 8002c86:	230e      	movs	r3, #14
 8002c88:	18fa      	adds	r2, r7, r3
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	1c19      	adds	r1, r3, #0
 8002c90:	0089      	lsls	r1, r1, #2
 8002c92:	18cb      	adds	r3, r1, r3
 8002c94:	18db      	adds	r3, r3, r3
 8002c96:	8013      	strh	r3, [r2, #0]
		arrayToken[i] = (value / expo) % 10;
 8002c98:	1dba      	adds	r2, r7, #6
 8002c9a:	230e      	movs	r3, #14
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f7fd fa39 	bl	800011c <__udivsi3>
 8002caa:	0003      	movs	r3, r0
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	210a      	movs	r1, #10
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fd fab9 	bl	8000228 <__aeabi_uidivmod>
 8002cb6:	000b      	movs	r3, r1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	200d      	movs	r0, #13
 8002cbc:	183b      	adds	r3, r7, r0
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b251      	sxtb	r1, r2
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <intToArray_chVal+0x88>)
 8002cc4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	183b      	adds	r3, r7, r0
 8002ccc:	3201      	adds	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	230d      	movs	r3, #13
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d9cb      	bls.n	8002c72 <intToArray_chVal+0x16>
	}
}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b004      	add	sp, #16
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000508 	.word	0x20000508

08002ce8 <saveSetValue>:

void saveSetValue(uint16_t value)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	0002      	movs	r2, r0
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	801a      	strh	r2, [r3, #0]
	Settings[workStep - 2].setValue = value;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <saveSetValue+0x2c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3b02      	subs	r3, #2
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <saveSetValue+0x30>)
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	18d3      	adds	r3, r2, r3
 8002d02:	3302      	adds	r3, #2
 8002d04:	1dba      	adds	r2, r7, #6
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	801a      	strh	r2, [r3, #0]
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	200004fe 	.word	0x200004fe
 8002d18:	20000620 	.word	0x20000620

08002d1c <drawMarker>:

void drawMarker(uint8_t width, uint8_t height)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	0002      	movs	r2, r0
 8002d24:	1dfb      	adds	r3, r7, #7
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	1dbb      	adds	r3, r7, #6
 8002d2a:	1c0a      	adds	r2, r1, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
	for(uint8_t h = 0; h < 5; h++)
 8002d2e:	230f      	movs	r3, #15
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e032      	b.n	8002d9e <drawMarker+0x82>
	{
		uint8_t w = 0;
 8002d38:	230e      	movs	r3, #14
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002d40:	e01f      	b.n	8002d82 <drawMarker+0x66>
		{
			SSD1306_DrawPixel(((width - h) + w), height + h, 1);
 8002d42:	1dfb      	adds	r3, r7, #7
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	210f      	movs	r1, #15
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	240e      	movs	r4, #14
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	18d3      	adds	r3, r2, r3
 8002d5e:	b298      	uxth	r0, r3
 8002d60:	1dbb      	adds	r3, r7, #6
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2201      	movs	r2, #1
 8002d72:	0019      	movs	r1, r3
 8002d74:	f7fe fa5a 	bl	800122c <SSD1306_DrawPixel>
			w++;
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	193b      	adds	r3, r7, r4
 8002d7e:	3201      	adds	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002d82:	230e      	movs	r3, #14
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	210f      	movs	r1, #15
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	429a      	cmp	r2, r3
 8002d92:	ddd6      	ble.n	8002d42 <drawMarker+0x26>
	for(uint8_t h = 0; h < 5; h++)
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	3201      	adds	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	230f      	movs	r3, #15
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d9c7      	bls.n	8002d38 <drawMarker+0x1c>
		}
	}
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b005      	add	sp, #20
 8002db0:	bd90      	pop	{r4, r7, pc}

08002db2 <clearMarker>:
void clearMarker(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 39, 80, 5, 0);
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2305      	movs	r3, #5
 8002dbe:	2250      	movs	r2, #80	; 0x50
 8002dc0:	2127      	movs	r1, #39	; 0x27
 8002dc2:	2014      	movs	r0, #20
 8002dc4:	f7fe fd86 	bl	80018d4 <SSD1306_DrawFilledRectangle>
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <clearValue>:
void clearValue(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 20, 100, 18, 0);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2312      	movs	r3, #18
 8002dda:	2264      	movs	r2, #100	; 0x64
 8002ddc:	2114      	movs	r1, #20
 8002dde:	2014      	movs	r0, #20
 8002de0:	f7fe fd78 	bl	80018d4 <SSD1306_DrawFilledRectangle>
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <showSummary>:

// summary - 6
// -------------------------------------------------------------------------------------
void showSummary(void)
{
 8002dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dee:	b091      	sub	sp, #68	; 0x44
 8002df0:	af02      	add	r7, sp, #8
	char width[10], turns[10],diameter[10], speed[10];
	uint8_t diameterArr[4];
	uint16_t expo = 0;
 8002df2:	2336      	movs	r3, #54	; 0x36
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2200      	movs	r2, #0
 8002df8:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < 5; i++)
 8002dfa:	2335      	movs	r3, #53	; 0x35
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e02f      	b.n	8002e64 <showSummary+0x78>
	{
		if(!i) expo = 1;
 8002e04:	2335      	movs	r3, #53	; 0x35
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <showSummary+0x2c>
 8002e0e:	2336      	movs	r3, #54	; 0x36
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	2201      	movs	r2, #1
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	e008      	b.n	8002e2a <showSummary+0x3e>
		else expo *= 10;
 8002e18:	2336      	movs	r3, #54	; 0x36
 8002e1a:	18fa      	adds	r2, r7, r3
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	1c19      	adds	r1, r3, #0
 8002e22:	0089      	lsls	r1, r1, #2
 8002e24:	18cb      	adds	r3, r1, r3
 8002e26:	18db      	adds	r3, r3, r3
 8002e28:	8013      	strh	r3, [r2, #0]
		diameterArr[i] = (diameter_MAIN / expo) % 10;
 8002e2a:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <showSummary+0x1a4>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	2336      	movs	r3, #54	; 0x36
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	0019      	movs	r1, r3
 8002e38:	0010      	movs	r0, r2
 8002e3a:	f7fd f96f 	bl	800011c <__udivsi3>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	210a      	movs	r1, #10
 8002e44:	0018      	movs	r0, r3
 8002e46:	f7fd f9ef 	bl	8000228 <__aeabi_uidivmod>
 8002e4a:	000b      	movs	r3, r1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	2035      	movs	r0, #53	; 0x35
 8002e50:	183b      	adds	r3, r7, r0
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2d1      	uxtb	r1, r2
 8002e56:	003a      	movs	r2, r7
 8002e58:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	3201      	adds	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	2335      	movs	r3, #53	; 0x35
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d9ca      	bls.n	8002e04 <showSummary+0x18>
	}
	sprintf(width, "%i.%i mm", width_MAIN / 10, width_MAIN % 10);
 8002e6e:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <showSummary+0x1a8>)
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	210a      	movs	r1, #10
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f950 	bl	800011c <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	001c      	movs	r4, r3
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <showSummary+0x1a8>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	210a      	movs	r1, #10
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fd f9cc 	bl	8000228 <__aeabi_uidivmod>
 8002e90:	000b      	movs	r3, r1
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4940      	ldr	r1, [pc, #256]	; (8002f98 <showSummary+0x1ac>)
 8002e96:	2528      	movs	r5, #40	; 0x28
 8002e98:	1978      	adds	r0, r7, r5
 8002e9a:	0022      	movs	r2, r4
 8002e9c:	f004 f938 	bl	8007110 <siprintf>
	sprintf(turns, " %i zw.", turns_MAIN);
 8002ea0:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <showSummary+0x1b0>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	493d      	ldr	r1, [pc, #244]	; (8002fa0 <showSummary+0x1b4>)
 8002eaa:	261c      	movs	r6, #28
 8002eac:	19bb      	adds	r3, r7, r6
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f004 f92e 	bl	8007110 <siprintf>
	sprintf(diameter, " %i.%i%i mm", diameterArr[2], diameterArr[1], diameterArr[0]);
 8002eb4:	003b      	movs	r3, r7
 8002eb6:	789b      	ldrb	r3, [r3, #2]
 8002eb8:	001a      	movs	r2, r3
 8002eba:	003b      	movs	r3, r7
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	001c      	movs	r4, r3
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4937      	ldr	r1, [pc, #220]	; (8002fa4 <showSummary+0x1b8>)
 8002ec6:	2010      	movs	r0, #16
 8002ec8:	1838      	adds	r0, r7, r0
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	0023      	movs	r3, r4
 8002ece:	f004 f91f 	bl	8007110 <siprintf>
	sprintf(speed, " %i", speed_MAIN);
 8002ed2:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <showSummary+0x1bc>)
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	001a      	movs	r2, r3
 8002eda:	4934      	ldr	r1, [pc, #208]	; (8002fac <showSummary+0x1c0>)
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f004 f916 	bl	8007110 <siprintf>
	SSD1306_GotoXY(0, 20);
 8002ee4:	2114      	movs	r1, #20
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fe fa0e 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 8002eec:	4930      	ldr	r1, [pc, #192]	; (8002fb0 <showSummary+0x1c4>)
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <showSummary+0x1c8>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7fe faa2 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8002ef8:	2114      	movs	r1, #20
 8002efa:	2046      	movs	r0, #70	; 0x46
 8002efc:	f7fe fa04 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 8002f00:	492b      	ldr	r1, [pc, #172]	; (8002fb0 <showSummary+0x1c4>)
 8002f02:	197b      	adds	r3, r7, r5
 8002f04:	2201      	movs	r2, #1
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe fa98 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 8002f0c:	211f      	movs	r1, #31
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fe f9fa 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(TURNS_LABEL, &Font_7x10, 1);
 8002f14:	4926      	ldr	r1, [pc, #152]	; (8002fb0 <showSummary+0x1c4>)
 8002f16:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <showSummary+0x1cc>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fe fa8e 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(42, 31);
 8002f20:	211f      	movs	r1, #31
 8002f22:	202a      	movs	r0, #42	; 0x2a
 8002f24:	f7fe f9f0 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(turns, &Font_7x10, 1);
 8002f28:	4921      	ldr	r1, [pc, #132]	; (8002fb0 <showSummary+0x1c4>)
 8002f2a:	19bb      	adds	r3, r7, r6
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7fe fa84 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(0, 42);
 8002f34:	212a      	movs	r1, #42	; 0x2a
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fe f9e6 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(DIAMETER_LABEL, &Font_7x10, 1);
 8002f3c:	491c      	ldr	r1, [pc, #112]	; (8002fb0 <showSummary+0x1c4>)
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <showSummary+0x1d0>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7fe fa7a 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(63, 42);
 8002f48:	212a      	movs	r1, #42	; 0x2a
 8002f4a:	203f      	movs	r0, #63	; 0x3f
 8002f4c:	f7fe f9dc 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(diameter, &Font_7x10, 1);
 8002f50:	4917      	ldr	r1, [pc, #92]	; (8002fb0 <showSummary+0x1c4>)
 8002f52:	2010      	movs	r0, #16
 8002f54:	183b      	adds	r3, r7, r0
 8002f56:	2201      	movs	r2, #1
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7fe fa6f 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 8002f5e:	2135      	movs	r1, #53	; 0x35
 8002f60:	2000      	movs	r0, #0
 8002f62:	f7fe f9d1 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(SPEED_LABEL, &Font_7x10, 1);
 8002f66:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <showSummary+0x1c4>)
 8002f68:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <showSummary+0x1d4>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fe fa65 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(63, 53);
 8002f72:	2135      	movs	r1, #53	; 0x35
 8002f74:	203f      	movs	r0, #63	; 0x3f
 8002f76:	f7fe f9c7 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(speed, &Font_7x10, 1);
 8002f7a:	490d      	ldr	r1, [pc, #52]	; (8002fb0 <showSummary+0x1c4>)
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	2201      	movs	r2, #1
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7fe fa5b 	bl	800143c <SSD1306_Puts>
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b00f      	add	sp, #60	; 0x3c
 8002f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	200000f4 	.word	0x200000f4
 8002f94:	200000f0 	.word	0x200000f0
 8002f98:	08007ba4 	.word	0x08007ba4
 8002f9c:	200000f2 	.word	0x200000f2
 8002fa0:	08007bb0 	.word	0x08007bb0
 8002fa4:	08007bb8 	.word	0x08007bb8
 8002fa8:	200000f6 	.word	0x200000f6
 8002fac:	08007bc4 	.word	0x08007bc4
 8002fb0:	20000004 	.word	0x20000004
 8002fb4:	08007b48 	.word	0x08007b48
 8002fb8:	08007b64 	.word	0x08007b64
 8002fbc:	08007b6c 	.word	0x08007b6c
 8002fc0:	08007bc8 	.word	0x08007bc8

08002fc4 <correctnessQuery>:

// correctness query - 61
// -------------------------------------------------------------------------------------
void correctnessQuery(bool direction, uint8_t runCount)
{
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	0002      	movs	r2, r0
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	1dbb      	adds	r3, r7, #6
 8002fd2:	1c0a      	adds	r2, r1, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
	bool color = 0;
 8002fd6:	230f      	movs	r3, #15
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]

	clearContent();
 8002fde:	f000 f8f7 	bl	80031d0 <clearContent>
	if(runCount == CONTI_RUN)
 8002fe2:	1dbb      	adds	r3, r7, #6
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d127      	bne.n	800303a <correctnessQuery+0x76>
	{
		if(direction) selector++;
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <correctnessQuery+0x3e>
 8002ff2:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <correctnessQuery+0x110>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b35      	ldr	r3, [pc, #212]	; (80030d4 <correctnessQuery+0x110>)
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e006      	b.n	8003010 <correctnessQuery+0x4c>
		else selector--;
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <correctnessQuery+0x110>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <correctnessQuery+0x110>)
 800300e:	701a      	strb	r2, [r3, #0]
		if(selector > 1 && selector < 10) selector = 1;
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <correctnessQuery+0x110>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d907      	bls.n	800302a <correctnessQuery+0x66>
 800301a:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <correctnessQuery+0x110>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b09      	cmp	r3, #9
 8003022:	d802      	bhi.n	800302a <correctnessQuery+0x66>
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <correctnessQuery+0x110>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
		if(selector > 10) selector = 0;
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <correctnessQuery+0x110>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b0a      	cmp	r3, #10
 8003032:	d902      	bls.n	800303a <correctnessQuery+0x76>
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <correctnessQuery+0x110>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
	}
	color = showSelectBoxes(BOX_LEFT, selector);
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <correctnessQuery+0x110>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	250f      	movs	r5, #15
 8003042:	197c      	adds	r4, r7, r5
 8003044:	0019      	movs	r1, r3
 8003046:	2005      	movs	r0, #5
 8003048:	f000 f852 	bl	80030f0 <showSelectBoxes>
 800304c:	0003      	movs	r3, r0
 800304e:	7023      	strb	r3, [r4, #0]
	SSD1306_GotoXY(18, 29);
 8003050:	211d      	movs	r1, #29
 8003052:	2012      	movs	r0, #18
 8003054:	f7fe f958 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(YES_LABEL, &Font_11x18, color);
 8003058:	002c      	movs	r4, r5
 800305a:	193b      	adds	r3, r7, r4
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	491e      	ldr	r1, [pc, #120]	; (80030d8 <correctnessQuery+0x114>)
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <correctnessQuery+0x118>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe f9ea 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(28, 50);
 8003068:	2132      	movs	r1, #50	; 0x32
 800306a:	201c      	movs	r0, #28
 800306c:	f7fe f94c 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts("OK", &Font_7x10, color);
 8003070:	193b      	adds	r3, r7, r4
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	491a      	ldr	r1, [pc, #104]	; (80030e0 <correctnessQuery+0x11c>)
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <correctnessQuery+0x120>)
 8003078:	0018      	movs	r0, r3
 800307a:	f7fe f9df 	bl	800143c <SSD1306_Puts>
	color = showSelectBoxes(BOX_RIGHT, selector);
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <correctnessQuery+0x110>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	0025      	movs	r5, r4
 8003086:	193c      	adds	r4, r7, r4
 8003088:	0019      	movs	r1, r3
 800308a:	2044      	movs	r0, #68	; 0x44
 800308c:	f000 f830 	bl	80030f0 <showSelectBoxes>
 8003090:	0003      	movs	r3, r0
 8003092:	7023      	strb	r3, [r4, #0]
	SSD1306_GotoXY(80, 29);
 8003094:	211d      	movs	r1, #29
 8003096:	2050      	movs	r0, #80	; 0x50
 8003098:	f7fe f936 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(NO_LABEL, &Font_11x18, color);
 800309c:	197b      	adds	r3, r7, r5
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	490d      	ldr	r1, [pc, #52]	; (80030d8 <correctnessQuery+0x114>)
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <correctnessQuery+0x124>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe f9c9 	bl	800143c <SSD1306_Puts>
	SSD1306_GotoXY(76, 50);
 80030aa:	2132      	movs	r1, #50	; 0x32
 80030ac:	204c      	movs	r0, #76	; 0x4c
 80030ae:	f7fe f92b 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts("POPRAW", &Font_7x10, color);
 80030b2:	197b      	adds	r3, r7, r5
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	490a      	ldr	r1, [pc, #40]	; (80030e0 <correctnessQuery+0x11c>)
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <correctnessQuery+0x128>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fe f9be 	bl	800143c <SSD1306_Puts>
	if(runCount == CONTI_RUN) SSD1306_UpdateScreen();
 80030c0:	1dbb      	adds	r3, r7, #6
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <correctnessQuery+0x108>
 80030c8:	f7fe f862 	bl	8001190 <SSD1306_UpdateScreen>
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b004      	add	sp, #16
 80030d2:	bdb0      	pop	{r4, r5, r7, pc}
 80030d4:	2000050d 	.word	0x2000050d
 80030d8:	2000000c 	.word	0x2000000c
 80030dc:	08007bd4 	.word	0x08007bd4
 80030e0:	20000004 	.word	0x20000004
 80030e4:	08007bd8 	.word	0x08007bd8
 80030e8:	08007bdc 	.word	0x08007bdc
 80030ec:	08007be0 	.word	0x08007be0

080030f0 <showSelectBoxes>:

bool showSelectBoxes(uint8_t margin, uint8_t pointer)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	0002      	movs	r2, r0
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	1c0a      	adds	r2, r1, #0
 8003100:	701a      	strb	r2, [r3, #0]
	pointer += 3;
 8003102:	1dbb      	adds	r3, r7, #6
 8003104:	1dba      	adds	r2, r7, #6
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	3203      	adds	r2, #3
 800310a:	701a      	strb	r2, [r3, #0]
	if(margin == BOX_LEFT)
 800310c:	1dfb      	adds	r3, r7, #7
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d11e      	bne.n	8003152 <showSelectBoxes+0x62>
	{
		if((pointer) % 2)
 8003114:	1dbb      	adds	r3, r7, #6
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <showSelectBoxes+0x4a>
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8003122:	1dfb      	adds	r3, r7, #7
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b298      	uxth	r0, r3
 8003128:	2301      	movs	r3, #1
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	232f      	movs	r3, #47	; 0x2f
 800312e:	2238      	movs	r2, #56	; 0x38
 8003130:	2119      	movs	r1, #25
 8003132:	f7fe fbcf 	bl	80018d4 <SSD1306_DrawFilledRectangle>
			return 0;
 8003136:	2300      	movs	r3, #0
 8003138:	e029      	b.n	800318e <showSelectBoxes+0x9e>
		}
		else
		{
			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b298      	uxth	r0, r3
 8003140:	2301      	movs	r3, #1
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	232f      	movs	r3, #47	; 0x2f
 8003146:	2238      	movs	r2, #56	; 0x38
 8003148:	2119      	movs	r1, #25
 800314a:	f7fe fb2c 	bl	80017a6 <SSD1306_DrawRectangle>
			return 1;
 800314e:	2301      	movs	r3, #1
 8003150:	e01d      	b.n	800318e <showSelectBoxes+0x9e>
		}
	}
	else
	{
		if(pointer % 2)
 8003152:	1dbb      	adds	r3, r7, #6
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	4013      	ands	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <showSelectBoxes+0x88>
		{

			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b298      	uxth	r0, r3
 8003166:	2301      	movs	r3, #1
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	232f      	movs	r3, #47	; 0x2f
 800316c:	2238      	movs	r2, #56	; 0x38
 800316e:	2119      	movs	r1, #25
 8003170:	f7fe fb19 	bl	80017a6 <SSD1306_DrawRectangle>
			return 1;
 8003174:	2301      	movs	r3, #1
 8003176:	e00a      	b.n	800318e <showSelectBoxes+0x9e>
		}
		else
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b298      	uxth	r0, r3
 800317e:	2301      	movs	r3, #1
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	232f      	movs	r3, #47	; 0x2f
 8003184:	2238      	movs	r2, #56	; 0x38
 8003186:	2119      	movs	r1, #25
 8003188:	f7fe fba4 	bl	80018d4 <SSD1306_DrawFilledRectangle>
			return 0;
 800318c:	2300      	movs	r3, #0
		}
	}
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b002      	add	sp, #8
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <showLabelBar>:

// uniwersalne
// -------------------------------------------------------------------------------------
void showLabelBar(char* label)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
	SSD1306_DrawFilledRectangle(0, 0, 128, 16, 1);
 80031a0:	2301      	movs	r3, #1
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2310      	movs	r3, #16
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	2100      	movs	r1, #0
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fe fb92 	bl	80018d4 <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY(4, 4);
 80031b0:	2104      	movs	r1, #4
 80031b2:	2004      	movs	r0, #4
 80031b4:	f7fe f8a8 	bl	8001308 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, 0);
 80031b8:	4904      	ldr	r1, [pc, #16]	; (80031cc <showLabelBar+0x34>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fe f93c 	bl	800143c <SSD1306_Puts>
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000004 	.word	0x20000004

080031d0 <clearContent>:


void clearContent(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 18, 128, 46, 0);
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	232e      	movs	r3, #46	; 0x2e
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	2112      	movs	r1, #18
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fe fb77 	bl	80018d4 <SSD1306_DrawFilledRectangle>
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <paginationBar>:

void paginationBar(uint8_t pageBarWidth, uint8_t pageNo)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	0002      	movs	r2, r0
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	1dbb      	adds	r3, r7, #6
 80031fa:	1c0a      	adds	r2, r1, #0
 80031fc:	701a      	strb	r2, [r3, #0]
	uint8_t pageBarMargin = pageBarWidth * pageNo;
 80031fe:	200f      	movs	r0, #15
 8003200:	183b      	adds	r3, r7, r0
 8003202:	1dfa      	adds	r2, r7, #7
 8003204:	1db9      	adds	r1, r7, #6
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	7809      	ldrb	r1, [r1, #0]
 800320a:	434a      	muls	r2, r1
 800320c:	701a      	strb	r2, [r3, #0]

	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 800320e:	183b      	adds	r3, r7, r0
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b298      	uxth	r0, r3
 8003214:	1dfb      	adds	r3, r7, #7
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b29a      	uxth	r2, r3
 800321a:	2301      	movs	r3, #1
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2303      	movs	r3, #3
 8003220:	2112      	movs	r1, #18
 8003222:	f7fe fb57 	bl	80018d4 <SSD1306_DrawFilledRectangle>
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bd80      	pop	{r7, pc}

0800322e <countArray>:

uint8_t countArray(ProjectManager * details)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8003236:	230f      	movs	r3, #15
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i<10; i++)
 800323e:	230e      	movs	r3, #14
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e016      	b.n	8003276 <countArray+0x48>
	{
		if(details->turns[i] > 0) count++;
 8003248:	230e      	movs	r3, #14
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	330c      	adds	r3, #12
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	3302      	adds	r3, #2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <countArray+0x3c>
 800325e:	210f      	movs	r1, #15
 8003260:	187b      	adds	r3, r7, r1
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	187b      	adds	r3, r7, r1
 8003266:	3201      	adds	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 800326a:	210e      	movs	r1, #14
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	187b      	adds	r3, r7, r1
 8003272:	3201      	adds	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	230e      	movs	r3, #14
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b09      	cmp	r3, #9
 800327e:	d9e3      	bls.n	8003248 <countArray+0x1a>
	}
	return count;
 8003280:	230f      	movs	r3, #15
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	781b      	ldrb	r3, [r3, #0]
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_MspInit+0x24>)
 8003296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_MspInit+0x24>)
 800329a:	2101      	movs	r1, #1
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <HAL_MspInit+0x24>)
 80032a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_MspInit+0x24>)
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	0549      	lsls	r1, r1, #21
 80032aa:	430a      	orrs	r2, r1
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000

080032b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80032bc:	f002 f920 	bl	8005500 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032c0:	e7fe      	b.n	80032c0 <NMI_Handler+0x8>

080032c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032c6:	e7fe      	b.n	80032c6 <HardFault_Handler+0x4>

080032c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032e0:	f000 face 	bl	8003880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 80032ee:	2010      	movs	r0, #16
 80032f0:	f000 fe08 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <TIM2_IRQHandler+0x14>)
 8003302:	0018      	movs	r0, r3
 8003304:	f002 fc79 	bl	8005bfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	20000644 	.word	0x20000644

08003314 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003318:	4b03      	ldr	r3, [pc, #12]	; (8003328 <TIM6_DAC_IRQHandler+0x14>)
 800331a:	0018      	movs	r0, r3
 800331c:	f002 fc6d 	bl	8005bfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	20000684 	.word	0x20000684

0800332c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <TIM7_IRQHandler+0x14>)
 8003332:	0018      	movs	r0, r3
 8003334:	f002 fc61 	bl	8005bfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	200006c4 	.word	0x200006c4

08003344 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <USART2_IRQHandler+0x14>)
 800334a:	0018      	movs	r0, r3
 800334c:	f002 fea2 	bl	8006094 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	20000704 	.word	0x20000704

0800335c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <_sbrk+0x5c>)
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <_sbrk+0x60>)
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <_sbrk+0x64>)
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <_sbrk+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800338c:	f003 fe84 	bl	8007098 <__errno>
 8003390:	0003      	movs	r3, r0
 8003392:	220c      	movs	r2, #12
 8003394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003396:	2301      	movs	r3, #1
 8003398:	425b      	negs	r3, r3
 800339a:	e009      	b.n	80033b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <_sbrk+0x64>)
 80033ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	0018      	movs	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b006      	add	sp, #24
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20005000 	.word	0x20005000
 80033bc:	00000400 	.word	0x00000400
 80033c0:	20000640 	.word	0x20000640
 80033c4:	200007a0 	.word	0x200007a0

080033c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b08d      	sub	sp, #52	; 0x34
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033da:	240c      	movs	r4, #12
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	0018      	movs	r0, r3
 80033e0:	2324      	movs	r3, #36	; 0x24
 80033e2:	001a      	movs	r2, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	f003 fe8a 	bl	80070fe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	0018      	movs	r0, r3
 80033ee:	2308      	movs	r3, #8
 80033f0:	001a      	movs	r2, r3
 80033f2:	2100      	movs	r1, #0
 80033f4:	f003 fe83 	bl	80070fe <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <MX_TIM2_Init+0xc0>)
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	05d2      	lsls	r2, r2, #23
 80033fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <MX_TIM2_Init+0xc0>)
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003406:	4b23      	ldr	r3, [pc, #140]	; (8003494 <MX_TIM2_Init+0xc0>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800340c:	4b21      	ldr	r3, [pc, #132]	; (8003494 <MX_TIM2_Init+0xc0>)
 800340e:	4a22      	ldr	r2, [pc, #136]	; (8003498 <MX_TIM2_Init+0xc4>)
 8003410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003412:	4b20      	ldr	r3, [pc, #128]	; (8003494 <MX_TIM2_Init+0xc0>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003418:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <MX_TIM2_Init+0xc0>)
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800341e:	0021      	movs	r1, r4
 8003420:	187b      	adds	r3, r7, r1
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003426:	187b      	adds	r3, r7, r1
 8003428:	2200      	movs	r2, #0
 800342a:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800342c:	187b      	adds	r3, r7, r1
 800342e:	2201      	movs	r2, #1
 8003430:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003432:	187b      	adds	r3, r7, r1
 8003434:	2200      	movs	r2, #0
 8003436:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 8003438:	187b      	adds	r3, r7, r1
 800343a:	220f      	movs	r2, #15
 800343c:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800343e:	187b      	adds	r3, r7, r1
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2201      	movs	r2, #1
 8003448:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	220f      	movs	r2, #15
 8003454:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003456:	187a      	adds	r2, r7, r1
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_TIM2_Init+0xc0>)
 800345a:	0011      	movs	r1, r2
 800345c:	0018      	movs	r0, r3
 800345e:	f002 fa97 	bl	8005990 <HAL_TIM_Encoder_Init>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d001      	beq.n	800346a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003466:	f7fd fd2b 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	2200      	movs	r2, #0
 8003474:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003476:	1d3a      	adds	r2, r7, #4
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_TIM2_Init+0xc0>)
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f002 fd57 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003486:	f7fd fd1b 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b00d      	add	sp, #52	; 0x34
 8003490:	bd90      	pop	{r4, r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	20000644 	.word	0x20000644
 8003498:	0000ffff 	.word	0x0000ffff

0800349c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a2:	003b      	movs	r3, r7
 80034a4:	0018      	movs	r0, r3
 80034a6:	2308      	movs	r3, #8
 80034a8:	001a      	movs	r2, r3
 80034aa:	2100      	movs	r1, #0
 80034ac:	f003 fe27 	bl	80070fe <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <MX_TIM6_Init+0x70>)
 80034b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <MX_TIM6_Init+0x74>)
 80034ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 199;
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034c4:	22c7      	movs	r2, #199	; 0xc7
 80034c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f002 f9a5 	bl	8005820 <HAL_TIM_Base_Init>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80034da:	f7fd fcf1 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034de:	003b      	movs	r3, r7
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034e4:	003b      	movs	r3, r7
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80034ea:	003a      	movs	r2, r7
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_TIM6_Init+0x6c>)
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f002 fd1d 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 80034f6:	1e03      	subs	r3, r0, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80034fa:	f7fd fce1 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000684 	.word	0x20000684
 800350c:	40001000 	.word	0x40001000
 8003510:	00001f3f 	.word	0x00001f3f

08003514 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800351a:	003b      	movs	r3, r7
 800351c:	0018      	movs	r0, r3
 800351e:	2308      	movs	r3, #8
 8003520:	001a      	movs	r2, r3
 8003522:	2100      	movs	r1, #0
 8003524:	f003 fdeb 	bl	80070fe <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003528:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_TIM7_Init+0x6c>)
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <MX_TIM7_Init+0x70>)
 800352c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <MX_TIM7_Init+0x6c>)
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <MX_TIM7_Init+0x74>)
 8003532:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_TIM7_Init+0x6c>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 199;
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_TIM7_Init+0x6c>)
 800353c:	22c7      	movs	r2, #199	; 0xc7
 800353e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <MX_TIM7_Init+0x6c>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_TIM7_Init+0x6c>)
 8003548:	0018      	movs	r0, r3
 800354a:	f002 f969 	bl	8005820 <HAL_TIM_Base_Init>
 800354e:	1e03      	subs	r3, r0, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003552:	f7fd fcb5 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003556:	003b      	movs	r3, r7
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355c:	003b      	movs	r3, r7
 800355e:	2200      	movs	r2, #0
 8003560:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003562:	003a      	movs	r2, r7
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_TIM7_Init+0x6c>)
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f002 fce1 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8003572:	f7fd fca5 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	200006c4 	.word	0x200006c4
 8003584:	40001400 	.word	0x40001400
 8003588:	00001f3f 	.word	0x00001f3f

0800358c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b089      	sub	sp, #36	; 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	240c      	movs	r4, #12
 8003596:	193b      	adds	r3, r7, r4
 8003598:	0018      	movs	r0, r3
 800359a:	2314      	movs	r3, #20
 800359c:	001a      	movs	r2, r3
 800359e:	2100      	movs	r1, #0
 80035a0:	f003 fdad 	bl	80070fe <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	05db      	lsls	r3, r3, #23
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d130      	bne.n	8003612 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_TIM_Encoder_MspInit+0x90>)
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_TIM_Encoder_MspInit+0x90>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	430a      	orrs	r2, r1
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_TIM_Encoder_MspInit+0x90>)
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_TIM_Encoder_MspInit+0x90>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	430a      	orrs	r2, r1
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_TIM_Encoder_MspInit+0x90>)
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035d4:	0021      	movs	r1, r4
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	2203      	movs	r2, #3
 80035da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	187b      	adds	r3, r7, r1
 80035de:	2202      	movs	r2, #2
 80035e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2202      	movs	r2, #2
 80035f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f4:	187a      	adds	r2, r7, r1
 80035f6:	23a0      	movs	r3, #160	; 0xa0
 80035f8:	05db      	lsls	r3, r3, #23
 80035fa:	0011      	movs	r1, r2
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 fae5 	bl	8003bcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	200f      	movs	r0, #15
 8003608:	f000 fa26 	bl	8003a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800360c:	200f      	movs	r0, #15
 800360e:	f000 fa38 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b009      	add	sp, #36	; 0x24
 8003618:	bd90      	pop	{r4, r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	40021000 	.word	0x40021000

08003620 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <HAL_TIM_Base_MspInit+0x60>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10e      	bne.n	8003650 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003632:	4b14      	ldr	r3, [pc, #80]	; (8003684 <HAL_TIM_Base_MspInit+0x64>)
 8003634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <HAL_TIM_Base_MspInit+0x64>)
 8003638:	2110      	movs	r1, #16
 800363a:	430a      	orrs	r2, r1
 800363c:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	2011      	movs	r0, #17
 8003644:	f000 fa08 	bl	8003a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003648:	2011      	movs	r0, #17
 800364a:	f000 fa1a 	bl	8003a82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800364e:	e012      	b.n	8003676 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0c      	ldr	r2, [pc, #48]	; (8003688 <HAL_TIM_Base_MspInit+0x68>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d10d      	bne.n	8003676 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_TIM_Base_MspInit+0x64>)
 800365c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_TIM_Base_MspInit+0x64>)
 8003660:	2120      	movs	r1, #32
 8003662:	430a      	orrs	r2, r1
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	2012      	movs	r0, #18
 800366c:	f000 f9f4 	bl	8003a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003670:	2012      	movs	r0, #18
 8003672:	f000 fa06 	bl	8003a82 <HAL_NVIC_EnableIRQ>
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	40001000 	.word	0x40001000
 8003684:	40021000 	.word	0x40021000
 8003688:	40001400 	.word	0x40001400

0800368c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 8003692:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <MX_USART2_UART_Init+0x5c>)
 8003694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 8003698:	22e1      	movs	r2, #225	; 0xe1
 800369a:	0252      	lsls	r2, r2, #9
 800369c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036b2:	220c      	movs	r2, #12
 80036b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <MX_USART2_UART_Init+0x58>)
 80036d0:	0018      	movs	r0, r3
 80036d2:	f002 fc8b 	bl	8005fec <HAL_UART_Init>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d001      	beq.n	80036de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036da:	f7fd fbf1 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000704 	.word	0x20000704
 80036e8:	40004400 	.word	0x40004400

080036ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	240c      	movs	r4, #12
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	0018      	movs	r0, r3
 80036fa:	2314      	movs	r3, #20
 80036fc:	001a      	movs	r2, r3
 80036fe:	2100      	movs	r1, #0
 8003700:	f003 fcfd 	bl	80070fe <memset>
  if(uartHandle->Instance==USART2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_UART_MspInit+0x90>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d131      	bne.n	8003772 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <HAL_UART_MspInit+0x94>)
 8003710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_UART_MspInit+0x94>)
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	0289      	lsls	r1, r1, #10
 8003718:	430a      	orrs	r2, r1
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_UART_MspInit+0x94>)
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <HAL_UART_MspInit+0x94>)
 8003722:	2101      	movs	r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_UART_MspInit+0x94>)
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	4013      	ands	r3, r2
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003734:	0021      	movs	r1, r4
 8003736:	187b      	adds	r3, r7, r1
 8003738:	220c      	movs	r2, #12
 800373a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	187b      	adds	r3, r7, r1
 800373e:	2202      	movs	r2, #2
 8003740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	187b      	adds	r3, r7, r1
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2203      	movs	r2, #3
 800374c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2204      	movs	r2, #4
 8003752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003754:	187a      	adds	r2, r7, r1
 8003756:	23a0      	movs	r3, #160	; 0xa0
 8003758:	05db      	lsls	r3, r3, #23
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fa35 	bl	8003bcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	201c      	movs	r0, #28
 8003768:	f000 f976 	bl	8003a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800376c:	201c      	movs	r0, #28
 800376e:	f000 f988 	bl	8003a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b009      	add	sp, #36	; 0x24
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	40004400 	.word	0x40004400
 8003780:	40021000 	.word	0x40021000

08003784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003784:	480d      	ldr	r0, [pc, #52]	; (80037bc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003786:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800378a:	490e      	ldr	r1, [pc, #56]	; (80037c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <LoopForever+0xe>)
  movs r3, #0
 800378e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003790:	e002      	b.n	8003798 <LoopCopyDataInit>

08003792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003796:	3304      	adds	r3, #4

08003798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800379c:	d3f9      	bcc.n	8003792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80037a0:	4c0b      	ldr	r4, [pc, #44]	; (80037d0 <LoopForever+0x16>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a4:	e001      	b.n	80037aa <LoopFillZerobss>

080037a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a8:	3204      	adds	r2, #4

080037aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ac:	d3fb      	bcc.n	80037a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037ae:	f7ff fe0b 	bl	80033c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b2:	f003 fc77 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b6:	f7fd f8b3 	bl	8000920 <main>

080037ba <LoopForever>:

LoopForever:
    b LoopForever
 80037ba:	e7fe      	b.n	80037ba <LoopForever>
   ldr   r0, =_estack
 80037bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80037c8:	0800a6f4 	.word	0x0800a6f4
  ldr r2, =_sbss
 80037cc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80037d0:	2000079c 	.word	0x2000079c

080037d4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC1_COMP_IRQHandler>
	...

080037d8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_Init+0x3c>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_Init+0x3c>)
 80037ea:	2140      	movs	r1, #64	; 0x40
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037f0:	2000      	movs	r0, #0
 80037f2:	f000 f811 	bl	8003818 <HAL_InitTick>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d003      	beq.n	8003802 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80037fa:	1dfb      	adds	r3, r7, #7
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
 8003800:	e001      	b.n	8003806 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003802:	f7ff fd45 	bl	8003290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781b      	ldrb	r3, [r3, #0]
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	40022000 	.word	0x40022000

08003818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003818:	b590      	push	{r4, r7, lr}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_InitTick+0x5c>)
 8003822:	681c      	ldr	r4, [r3, #0]
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_InitTick+0x60>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	0019      	movs	r1, r3
 800382a:	23fa      	movs	r3, #250	; 0xfa
 800382c:	0098      	lsls	r0, r3, #2
 800382e:	f7fc fc75 	bl	800011c <__udivsi3>
 8003832:	0003      	movs	r3, r0
 8003834:	0019      	movs	r1, r3
 8003836:	0020      	movs	r0, r4
 8003838:	f7fc fc70 	bl	800011c <__udivsi3>
 800383c:	0003      	movs	r3, r0
 800383e:	0018      	movs	r0, r3
 8003840:	f000 f92f 	bl	8003aa2 <HAL_SYSTICK_Config>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d001      	beq.n	800384c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e00f      	b.n	800386c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d80b      	bhi.n	800386a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	2301      	movs	r3, #1
 8003856:	425b      	negs	r3, r3
 8003858:	2200      	movs	r2, #0
 800385a:	0018      	movs	r0, r3
 800385c:	f000 f8fc 	bl	8003a58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_InitTick+0x64>)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b003      	add	sp, #12
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	20000014 	.word	0x20000014
 8003878:	2000001c 	.word	0x2000001c
 800387c:	20000018 	.word	0x20000018

08003880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_IncTick+0x1c>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	001a      	movs	r2, r3
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_IncTick+0x20>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	18d2      	adds	r2, r2, r3
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_IncTick+0x20>)
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	2000001c 	.word	0x2000001c
 80038a0:	20000788 	.word	0x20000788

080038a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  return uwTick;
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <HAL_GetTick+0x10>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	20000788 	.word	0x20000788

080038b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	d005      	beq.n	80038de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_Delay+0x44>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	001a      	movs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	f7ff ffe0 	bl	80038a4 <HAL_GetTick>
 80038e4:	0002      	movs	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d8f7      	bhi.n	80038e0 <HAL_Delay+0x28>
  {
  }
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	2000001c 	.word	0x2000001c

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	0002      	movs	r2, r0
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800390c:	1dfb      	adds	r3, r7, #7
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b7f      	cmp	r3, #127	; 0x7f
 8003912:	d809      	bhi.n	8003928 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	001a      	movs	r2, r3
 800391a:	231f      	movs	r3, #31
 800391c:	401a      	ands	r2, r3
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_EnableIRQ+0x30>)
 8003920:	2101      	movs	r1, #1
 8003922:	4091      	lsls	r1, r2
 8003924:	000a      	movs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
  }
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	e000e100 	.word	0xe000e100

08003934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b7f      	cmp	r3, #127	; 0x7f
 8003948:	d828      	bhi.n	800399c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800394a:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <__NVIC_SetPriority+0xd4>)
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b25b      	sxtb	r3, r3
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	33c0      	adds	r3, #192	; 0xc0
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	589b      	ldr	r3, [r3, r2]
 800395a:	1dfa      	adds	r2, r7, #7
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	0011      	movs	r1, r2
 8003960:	2203      	movs	r2, #3
 8003962:	400a      	ands	r2, r1
 8003964:	00d2      	lsls	r2, r2, #3
 8003966:	21ff      	movs	r1, #255	; 0xff
 8003968:	4091      	lsls	r1, r2
 800396a:	000a      	movs	r2, r1
 800396c:	43d2      	mvns	r2, r2
 800396e:	401a      	ands	r2, r3
 8003970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	401a      	ands	r2, r3
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	0018      	movs	r0, r3
 8003980:	2303      	movs	r3, #3
 8003982:	4003      	ands	r3, r0
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003988:	481f      	ldr	r0, [pc, #124]	; (8003a08 <__NVIC_SetPriority+0xd4>)
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b25b      	sxtb	r3, r3
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	430a      	orrs	r2, r1
 8003994:	33c0      	adds	r3, #192	; 0xc0
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800399a:	e031      	b.n	8003a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <__NVIC_SetPriority+0xd8>)
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	0019      	movs	r1, r3
 80039a4:	230f      	movs	r3, #15
 80039a6:	400b      	ands	r3, r1
 80039a8:	3b08      	subs	r3, #8
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3306      	adds	r3, #6
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	18d3      	adds	r3, r2, r3
 80039b2:	3304      	adds	r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1dfa      	adds	r2, r7, #7
 80039b8:	7812      	ldrb	r2, [r2, #0]
 80039ba:	0011      	movs	r1, r2
 80039bc:	2203      	movs	r2, #3
 80039be:	400a      	ands	r2, r1
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	21ff      	movs	r1, #255	; 0xff
 80039c4:	4091      	lsls	r1, r2
 80039c6:	000a      	movs	r2, r1
 80039c8:	43d2      	mvns	r2, r2
 80039ca:	401a      	ands	r2, r3
 80039cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	401a      	ands	r2, r3
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	0018      	movs	r0, r3
 80039dc:	2303      	movs	r3, #3
 80039de:	4003      	ands	r3, r0
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039e4:	4809      	ldr	r0, [pc, #36]	; (8003a0c <__NVIC_SetPriority+0xd8>)
 80039e6:	1dfb      	adds	r3, r7, #7
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	001c      	movs	r4, r3
 80039ec:	230f      	movs	r3, #15
 80039ee:	4023      	ands	r3, r4
 80039f0:	3b08      	subs	r3, #8
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	430a      	orrs	r2, r1
 80039f6:	3306      	adds	r3, #6
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	18c3      	adds	r3, r0, r3
 80039fc:	3304      	adds	r3, #4
 80039fe:	601a      	str	r2, [r3, #0]
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b003      	add	sp, #12
 8003a06:	bd90      	pop	{r4, r7, pc}
 8003a08:	e000e100 	.word	0xe000e100
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	1e5a      	subs	r2, r3, #1
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	045b      	lsls	r3, r3, #17
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d301      	bcc.n	8003a28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a24:	2301      	movs	r3, #1
 8003a26:	e010      	b.n	8003a4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <SysTick_Config+0x44>)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a30:	2301      	movs	r3, #1
 8003a32:	425b      	negs	r3, r3
 8003a34:	2103      	movs	r1, #3
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7ff ff7c 	bl	8003934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <SysTick_Config+0x44>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <SysTick_Config+0x44>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	210f      	movs	r1, #15
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	1c02      	adds	r2, r0, #0
 8003a68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b25b      	sxtb	r3, r3
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7ff ff5d 	bl	8003934 <__NVIC_SetPriority>
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b004      	add	sp, #16
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	0002      	movs	r2, r0
 8003a8a:	1dfb      	adds	r3, r7, #7
 8003a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b25b      	sxtb	r3, r3
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff ff33 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7ff ffaf 	bl	8003a10 <SysTick_Config>
 8003ab2:	0003      	movs	r3, r0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac4:	230f      	movs	r3, #15
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2225      	movs	r2, #37	; 0x25
 8003ad0:	5c9b      	ldrb	r3, [r3, r2]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d008      	beq.n	8003aea <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2204      	movs	r2, #4
 8003adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2224      	movs	r2, #36	; 0x24
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e024      	b.n	8003b34 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	210e      	movs	r1, #14
 8003af6:	438a      	bics	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	438a      	bics	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	221c      	movs	r2, #28
 8003b10:	401a      	ands	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	2101      	movs	r1, #1
 8003b18:	4091      	lsls	r1, r2
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2225      	movs	r2, #37	; 0x25
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2224      	movs	r2, #36	; 0x24
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

    return status;
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	210f      	movs	r1, #15
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2225      	movs	r2, #37	; 0x25
 8003b50:	5c9b      	ldrb	r3, [r3, r2]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d006      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2201      	movs	r2, #1
 8003b62:	701a      	strb	r2, [r3, #0]
 8003b64:	e02a      	b.n	8003bbc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	210e      	movs	r1, #14
 8003b72:	438a      	bics	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	438a      	bics	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	221c      	movs	r2, #28
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	2101      	movs	r1, #1
 8003b94:	4091      	lsls	r1, r2
 8003b96:	000a      	movs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2225      	movs	r2, #37	; 0x25
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2224      	movs	r2, #36	; 0x24
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	0010      	movs	r0, r2
 8003bba:	4798      	blx	r3
    }
  }
  return status;
 8003bbc:	230f      	movs	r3, #15
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	781b      	ldrb	r3, [r3, #0]
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003be2:	e155      	b.n	8003e90 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4091      	lsls	r1, r2
 8003bee:	000a      	movs	r2, r1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_GPIO_Init+0x30>
 8003bfa:	e146      	b.n	8003e8a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d005      	beq.n	8003c14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d130      	bne.n	8003c76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	43da      	mvns	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	43da      	mvns	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	2201      	movs	r2, #1
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	43da      	mvns	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d123      	bne.n	8003d06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	58d3      	ldr	r3, [r2, r3]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2207      	movs	r2, #7
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2107      	movs	r1, #7
 8003cea:	400b      	ands	r3, r1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	43da      	mvns	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	401a      	ands	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	23c0      	movs	r3, #192	; 0xc0
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d100      	bne.n	8003d48 <HAL_GPIO_Init+0x17c>
 8003d46:	e0a0      	b.n	8003e8a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d48:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_GPIO_Init+0x2dc>)
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d4c:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <HAL_GPIO_Init+0x2dc>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	430a      	orrs	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d54:	4a55      	ldr	r2, [pc, #340]	; (8003eac <HAL_GPIO_Init+0x2e0>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	589b      	ldr	r3, [r3, r2]
 8003d60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2203      	movs	r2, #3
 8003d66:	4013      	ands	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	0013      	movs	r3, r2
 8003d70:	43da      	mvns	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	23a0      	movs	r3, #160	; 0xa0
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d01f      	beq.n	8003dc2 <HAL_GPIO_Init+0x1f6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4a      	ldr	r2, [pc, #296]	; (8003eb0 <HAL_GPIO_Init+0x2e4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d019      	beq.n	8003dbe <HAL_GPIO_Init+0x1f2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a49      	ldr	r2, [pc, #292]	; (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_GPIO_Init+0x1ee>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00d      	beq.n	8003db6 <HAL_GPIO_Init+0x1ea>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a47      	ldr	r2, [pc, #284]	; (8003ebc <HAL_GPIO_Init+0x2f0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x1e6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a46      	ldr	r2, [pc, #280]	; (8003ec0 <HAL_GPIO_Init+0x2f4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_GPIO_Init+0x1e2>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e00a      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dae:	2306      	movs	r3, #6
 8003db0:	e008      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e006      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e004      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e002      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	400a      	ands	r2, r1
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4093      	lsls	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd4:	4935      	ldr	r1, [pc, #212]	; (8003eac <HAL_GPIO_Init+0x2e0>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003de2:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	025b      	lsls	r3, r3, #9
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e06:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	4013      	ands	r3, r2
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	035b      	lsls	r3, r3, #13
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	039b      	lsls	r3, r3, #14
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	40da      	lsrs	r2, r3
 8003e98:	1e13      	subs	r3, r2, #0
 8003e9a:	d000      	beq.n	8003e9e <HAL_GPIO_Init+0x2d2>
 8003e9c:	e6a2      	b.n	8003be4 <HAL_GPIO_Init+0x18>
  }
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b006      	add	sp, #24
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	50000400 	.word	0x50000400
 8003eb4:	50000800 	.word	0x50000800
 8003eb8:	50000c00 	.word	0x50000c00
 8003ebc:	50001000 	.word	0x50001000
 8003ec0:	50001c00 	.word	0x50001c00
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	000a      	movs	r2, r1
 8003ed2:	1cbb      	adds	r3, r7, #2
 8003ed4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	1cba      	adds	r2, r7, #2
 8003edc:	8812      	ldrh	r2, [r2, #0]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee2:	230f      	movs	r3, #15
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	e003      	b.n	8003ef4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eec:	230f      	movs	r3, #15
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ef4:	230f      	movs	r3, #15
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	781b      	ldrb	r3, [r3, #0]
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b004      	add	sp, #16
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	1dba      	adds	r2, r7, #6
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d008      	beq.n	8003f2e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003f1e:	1dba      	adds	r2, r7, #6
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f24:	1dbb      	adds	r3, r7, #6
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fc ff9b 	bl	8000e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b002      	add	sp, #8
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	40010400 	.word	0x40010400

08003f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e082      	b.n	8004054 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2241      	movs	r2, #65	; 0x41
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2240      	movs	r2, #64	; 0x40
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc fc95 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2241      	movs	r2, #65	; 0x41
 8003f6e:	2124      	movs	r1, #36	; 0x24
 8003f70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	438a      	bics	r2, r1
 8003f80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4934      	ldr	r1, [pc, #208]	; (800405c <HAL_I2C_Init+0x120>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4931      	ldr	r1, [pc, #196]	; (8004060 <HAL_I2C_Init+0x124>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2180      	movs	r1, #128	; 0x80
 8003fb2:	0209      	lsls	r1, r1, #8
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	e007      	b.n	8003fca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2184      	movs	r1, #132	; 0x84
 8003fc4:	0209      	lsls	r1, r1, #8
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d104      	bne.n	8003fdc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	0112      	lsls	r2, r2, #4
 8003fda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	491f      	ldr	r1, [pc, #124]	; (8004064 <HAL_I2C_Init+0x128>)
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	491a      	ldr	r1, [pc, #104]	; (8004060 <HAL_I2C_Init+0x124>)
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	431a      	orrs	r2, r3
 8004006:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69d9      	ldr	r1, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2101      	movs	r1, #1
 8004032:	430a      	orrs	r2, r1
 8004034:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2241      	movs	r2, #65	; 0x41
 8004040:	2120      	movs	r1, #32
 8004042:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2242      	movs	r2, #66	; 0x42
 800404e:	2100      	movs	r1, #0
 8004050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	f0ffffff 	.word	0xf0ffffff
 8004060:	ffff7fff 	.word	0xffff7fff
 8004064:	02008000 	.word	0x02008000

08004068 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	0008      	movs	r0, r1
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	0019      	movs	r1, r3
 8004076:	230a      	movs	r3, #10
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	1c02      	adds	r2, r0, #0
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	2308      	movs	r3, #8
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	1c0a      	adds	r2, r1, #0
 8004084:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2241      	movs	r2, #65	; 0x41
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	d000      	beq.n	8004094 <HAL_I2C_Master_Transmit+0x2c>
 8004092:	e0e7      	b.n	8004264 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	5c9b      	ldrb	r3, [r3, r2]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_I2C_Master_Transmit+0x3a>
 800409e:	2302      	movs	r3, #2
 80040a0:	e0e1      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1fe>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	2101      	movs	r1, #1
 80040a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040aa:	f7ff fbfb 	bl	80038a4 <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	0219      	lsls	r1, r3, #8
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2319      	movs	r3, #25
 80040be:	2201      	movs	r2, #1
 80040c0:	f000 fa16 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0cc      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2241      	movs	r2, #65	; 0x41
 80040d0:	2121      	movs	r1, #33	; 0x21
 80040d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2242      	movs	r2, #66	; 0x42
 80040d8:	2110      	movs	r1, #16
 80040da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2208      	movs	r2, #8
 80040ec:	18ba      	adds	r2, r7, r2
 80040ee:	8812      	ldrh	r2, [r2, #0]
 80040f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2bff      	cmp	r3, #255	; 0xff
 8004100:	d911      	bls.n	8004126 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	22ff      	movs	r2, #255	; 0xff
 8004106:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	b2da      	uxtb	r2, r3
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	045c      	lsls	r4, r3, #17
 8004112:	230a      	movs	r3, #10
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	8819      	ldrh	r1, [r3, #0]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	4b55      	ldr	r3, [pc, #340]	; (8004270 <HAL_I2C_Master_Transmit+0x208>)
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	0023      	movs	r3, r4
 8004120:	f000 fb1a 	bl	8004758 <I2C_TransferConfig>
 8004124:	e075      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	b2da      	uxtb	r2, r3
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	049c      	lsls	r4, r3, #18
 800413a:	230a      	movs	r3, #10
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	4b4b      	ldr	r3, [pc, #300]	; (8004270 <HAL_I2C_Master_Transmit+0x208>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	0023      	movs	r3, r4
 8004148:	f000 fb06 	bl	8004758 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800414c:	e061      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fa0a 	bl	800456e <I2C_WaitOnTXISFlagUntilTimeout>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e081      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	781a      	ldrb	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d03a      	beq.n	8004212 <HAL_I2C_Master_Transmit+0x1aa>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d136      	bne.n	8004212 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	0013      	movs	r3, r2
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	f000 f99d 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 80041b6:	1e03      	subs	r3, r0, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e053      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2bff      	cmp	r3, #255	; 0xff
 80041c6:	d911      	bls.n	80041ec <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	; 0xff
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	045c      	lsls	r4, r3, #17
 80041d8:	230a      	movs	r3, #10
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	8819      	ldrh	r1, [r3, #0]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	0023      	movs	r3, r4
 80041e6:	f000 fab7 	bl	8004758 <I2C_TransferConfig>
 80041ea:	e012      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	049c      	lsls	r4, r3, #18
 8004200:	230a      	movs	r3, #10
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	8819      	ldrh	r1, [r3, #0]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	2300      	movs	r3, #0
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	0023      	movs	r3, r4
 800420e:	f000 faa3 	bl	8004758 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d198      	bne.n	800414e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f9e2 	bl	80045ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e01a      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2220      	movs	r2, #32
 8004236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	490c      	ldr	r1, [pc, #48]	; (8004274 <HAL_I2C_Master_Transmit+0x20c>)
 8004244:	400a      	ands	r2, r1
 8004246:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2241      	movs	r2, #65	; 0x41
 800424c:	2120      	movs	r1, #32
 800424e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2242      	movs	r2, #66	; 0x42
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	0018      	movs	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b007      	add	sp, #28
 800426c:	bd90      	pop	{r4, r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	80002000 	.word	0x80002000
 8004274:	fe00e800 	.word	0xfe00e800

08004278 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	230a      	movs	r3, #10
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	1c0a      	adds	r2, r1, #0
 800428a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2241      	movs	r2, #65	; 0x41
 8004294:	5c9b      	ldrb	r3, [r3, r2]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	d000      	beq.n	800429e <HAL_I2C_IsDeviceReady+0x26>
 800429c:	e0fe      	b.n	800449c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	2380      	movs	r3, #128	; 0x80
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	401a      	ands	r2, r3
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
 80042b4:	e0f3      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2240      	movs	r2, #64	; 0x40
 80042ba:	5c9b      	ldrb	r3, [r3, r2]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_I2C_IsDeviceReady+0x4c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e0ec      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	2101      	movs	r1, #1
 80042ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2241      	movs	r2, #65	; 0x41
 80042d0:	2124      	movs	r1, #36	; 0x24
 80042d2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_I2C_IsDeviceReady+0x7a>
 80042e2:	230a      	movs	r3, #10
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	059b      	lsls	r3, r3, #22
 80042ea:	0d9b      	lsrs	r3, r3, #22
 80042ec:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_I2C_IsDeviceReady+0x230>)
 80042ee:	431a      	orrs	r2, r3
 80042f0:	e007      	b.n	8004302 <HAL_I2C_IsDeviceReady+0x8a>
 80042f2:	230a      	movs	r3, #10
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	059b      	lsls	r3, r3, #22
 80042fa:	0d9b      	lsrs	r3, r3, #22
 80042fc:	22a0      	movs	r2, #160	; 0xa0
 80042fe:	0192      	lsls	r2, r2, #6
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004308:	f7ff facc 	bl	80038a4 <HAL_GetTick>
 800430c:	0003      	movs	r3, r0
 800430e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2220      	movs	r2, #32
 8004318:	4013      	ands	r3, r2
 800431a:	3b20      	subs	r3, #32
 800431c:	425a      	negs	r2, r3
 800431e:	4153      	adcs	r3, r2
 8004320:	b2da      	uxtb	r2, r3
 8004322:	231f      	movs	r3, #31
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2210      	movs	r2, #16
 8004330:	4013      	ands	r3, r2
 8004332:	3b10      	subs	r3, #16
 8004334:	425a      	negs	r2, r3
 8004336:	4153      	adcs	r3, r2
 8004338:	b2da      	uxtb	r2, r3
 800433a:	231e      	movs	r3, #30
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004340:	e035      	b.n	80043ae <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	d01a      	beq.n	800437e <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7ff faac 	bl	80038a4 <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <HAL_I2C_IsDeviceReady+0xe6>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2241      	movs	r2, #65	; 0x41
 8004362:	2120      	movs	r1, #32
 8004364:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	2220      	movs	r2, #32
 800436c:	431a      	orrs	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2240      	movs	r2, #64	; 0x40
 8004376:	2100      	movs	r1, #0
 8004378:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e08f      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2220      	movs	r2, #32
 8004386:	4013      	ands	r3, r2
 8004388:	3b20      	subs	r3, #32
 800438a:	425a      	negs	r2, r3
 800438c:	4153      	adcs	r3, r2
 800438e:	b2da      	uxtb	r2, r3
 8004390:	231f      	movs	r3, #31
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2210      	movs	r2, #16
 800439e:	4013      	ands	r3, r2
 80043a0:	3b10      	subs	r3, #16
 80043a2:	425a      	negs	r2, r3
 80043a4:	4153      	adcs	r3, r2
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	231e      	movs	r3, #30
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043ae:	231f      	movs	r3, #31
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <HAL_I2C_IsDeviceReady+0x14a>
 80043b8:	231e      	movs	r3, #30
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0bf      	beq.n	8004342 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2210      	movs	r2, #16
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d01a      	beq.n	8004406 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	0013      	movs	r3, r2
 80043da:	2200      	movs	r2, #0
 80043dc:	2120      	movs	r1, #32
 80043de:	f000 f887 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	1e03      	subs	r3, r0, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e059      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2220      	movs	r2, #32
 80043f0:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2241      	movs	r2, #65	; 0x41
 80043f6:	2120      	movs	r1, #32
 80043f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2240      	movs	r2, #64	; 0x40
 80043fe:	2100      	movs	r1, #0
 8004400:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e04b      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	0013      	movs	r3, r2
 8004410:	2200      	movs	r2, #0
 8004412:	2120      	movs	r1, #32
 8004414:	f000 f86c 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e03e      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2220      	movs	r2, #32
 800442e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d119      	bne.n	800446c <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	01c9      	lsls	r1, r1, #7
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	0013      	movs	r3, r2
 8004454:	2200      	movs	r2, #0
 8004456:	2120      	movs	r1, #32
 8004458:	f000 f84a 	bl	80044f0 <I2C_WaitOnFlagUntilTimeout>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e01c      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2220      	movs	r2, #32
 800446a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3301      	adds	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d900      	bls.n	800447c <HAL_I2C_IsDeviceReady+0x204>
 800447a:	e72e      	b.n	80042da <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2241      	movs	r2, #65	; 0x41
 8004480:	2120      	movs	r1, #32
 8004482:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	2220      	movs	r2, #32
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b008      	add	sp, #32
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	02002000 	.word	0x02002000

080044ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d103      	bne.n	80044ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d007      	beq.n	80044e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2101      	movs	r1, #1
 80044e4:	430a      	orrs	r2, r1
 80044e6:	619a      	str	r2, [r3, #24]
  }
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004500:	e021      	b.n	8004546 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	d01e      	beq.n	8004546 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7ff f9cc 	bl	80038a4 <HAL_GetTick>
 800450c:	0002      	movs	r2, r0
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d113      	bne.n	8004546 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	2220      	movs	r2, #32
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2241      	movs	r2, #65	; 0x41
 800452e:	2120      	movs	r1, #32
 8004530:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2242      	movs	r2, #66	; 0x42
 8004536:	2100      	movs	r1, #0
 8004538:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	2100      	movs	r1, #0
 8004540:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e00f      	b.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	425a      	negs	r2, r3
 8004556:	4153      	adcs	r3, r2
 8004558:	b2db      	uxtb	r3, r3
 800455a:	001a      	movs	r2, r3
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d0ce      	beq.n	8004502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800457a:	e02b      	b.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f86e 	bl	8004664 <I2C_IsAcknowledgeFailed>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e029      	b.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	3301      	adds	r3, #1
 8004594:	d01e      	beq.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7ff f985 	bl	80038a4 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d113      	bne.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	2220      	movs	r2, #32
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2241      	movs	r2, #65	; 0x41
 80045bc:	2120      	movs	r1, #32
 80045be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2242      	movs	r2, #66	; 0x42
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e007      	b.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d1cc      	bne.n	800457c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b004      	add	sp, #16
 80045ea:	bd80      	pop	{r7, pc}

080045ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f8:	e028      	b.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f82f 	bl	8004664 <I2C_IsAcknowledgeFailed>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d001      	beq.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e026      	b.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460e:	f7ff f949 	bl	80038a4 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d113      	bne.n	800464c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	2220      	movs	r2, #32
 800462a:	431a      	orrs	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2241      	movs	r2, #65	; 0x41
 8004634:	2120      	movs	r1, #32
 8004636:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2242      	movs	r2, #66	; 0x42
 800463c:	2100      	movs	r1, #0
 800463e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2240      	movs	r2, #64	; 0x40
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2220      	movs	r2, #32
 8004654:	4013      	ands	r3, r2
 8004656:	2b20      	cmp	r3, #32
 8004658:	d1cf      	bne.n	80045fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	0018      	movs	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2210      	movs	r2, #16
 8004678:	4013      	ands	r3, r2
 800467a:	2b10      	cmp	r3, #16
 800467c:	d164      	bne.n	8004748 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	049b      	lsls	r3, r3, #18
 8004688:	401a      	ands	r2, r3
 800468a:	2380      	movs	r3, #128	; 0x80
 800468c:	049b      	lsls	r3, r3, #18
 800468e:	429a      	cmp	r2, r3
 8004690:	d02b      	beq.n	80046ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	01c9      	lsls	r1, r1, #7
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a4:	e021      	b.n	80046ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3301      	adds	r3, #1
 80046aa:	d01e      	beq.n	80046ea <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ac:	f7ff f8fa 	bl	80038a4 <HAL_GetTick>
 80046b0:	0002      	movs	r2, r0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <I2C_IsAcknowledgeFailed+0x5e>
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d113      	bne.n	80046ea <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	2220      	movs	r2, #32
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2241      	movs	r2, #65	; 0x41
 80046d2:	2120      	movs	r1, #32
 80046d4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2242      	movs	r2, #66	; 0x42
 80046da:	2100      	movs	r1, #0
 80046dc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e02f      	b.n	800474a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2220      	movs	r2, #32
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d1d6      	bne.n	80046a6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2210      	movs	r2, #16
 80046fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2220      	movs	r2, #32
 8004706:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff fece 	bl	80044ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	490e      	ldr	r1, [pc, #56]	; (8004754 <I2C_IsAcknowledgeFailed+0xf0>)
 800471c:	400a      	ands	r2, r1
 800471e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	2204      	movs	r2, #4
 8004726:	431a      	orrs	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2241      	movs	r2, #65	; 0x41
 8004730:	2120      	movs	r1, #32
 8004732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2242      	movs	r2, #66	; 0x42
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2240      	movs	r2, #64	; 0x40
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	0018      	movs	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	b004      	add	sp, #16
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	fe00e800 	.word	0xfe00e800

08004758 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	0008      	movs	r0, r1
 8004762:	0011      	movs	r1, r2
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	240a      	movs	r4, #10
 8004768:	193b      	adds	r3, r7, r4
 800476a:	1c02      	adds	r2, r0, #0
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	2009      	movs	r0, #9
 8004770:	183b      	adds	r3, r7, r0
 8004772:	1c0a      	adds	r2, r1, #0
 8004774:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	0d51      	lsrs	r1, r2, #21
 8004780:	2280      	movs	r2, #128	; 0x80
 8004782:	00d2      	lsls	r2, r2, #3
 8004784:	400a      	ands	r2, r1
 8004786:	490e      	ldr	r1, [pc, #56]	; (80047c0 <I2C_TransferConfig+0x68>)
 8004788:	430a      	orrs	r2, r1
 800478a:	43d2      	mvns	r2, r2
 800478c:	401a      	ands	r2, r3
 800478e:	0011      	movs	r1, r2
 8004790:	193b      	adds	r3, r7, r4
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	059b      	lsls	r3, r3, #22
 8004796:	0d9a      	lsrs	r2, r3, #22
 8004798:	183b      	adds	r3, r7, r0
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	0418      	lsls	r0, r3, #16
 800479e:	23ff      	movs	r3, #255	; 0xff
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	4003      	ands	r3, r0
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b005      	add	sp, #20
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	03ff63ff 	.word	0x03ff63ff

080047c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2241      	movs	r2, #65	; 0x41
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d138      	bne.n	800484c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2240      	movs	r2, #64	; 0x40
 80047de:	5c9b      	ldrb	r3, [r3, r2]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e032      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2240      	movs	r2, #64	; 0x40
 80047ec:	2101      	movs	r1, #1
 80047ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2241      	movs	r2, #65	; 0x41
 80047f4:	2124      	movs	r1, #36	; 0x24
 80047f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2101      	movs	r1, #1
 8004804:	438a      	bics	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4911      	ldr	r1, [pc, #68]	; (8004858 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004814:	400a      	ands	r2, r1
 8004816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2101      	movs	r1, #1
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2241      	movs	r2, #65	; 0x41
 800483c:	2120      	movs	r1, #32
 800483e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2240      	movs	r2, #64	; 0x40
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	0018      	movs	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	b002      	add	sp, #8
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	ffffefff 	.word	0xffffefff

0800485c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2241      	movs	r2, #65	; 0x41
 800486a:	5c9b      	ldrb	r3, [r3, r2]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	d139      	bne.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2240      	movs	r2, #64	; 0x40
 8004876:	5c9b      	ldrb	r3, [r3, r2]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800487c:	2302      	movs	r3, #2
 800487e:	e033      	b.n	80048e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2240      	movs	r2, #64	; 0x40
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2241      	movs	r2, #65	; 0x41
 800488c:	2124      	movs	r1, #36	; 0x24
 800488e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2101      	movs	r1, #1
 800489c:	438a      	bics	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a11      	ldr	r2, [pc, #68]	; (80048f0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2101      	movs	r1, #1
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2241      	movs	r2, #65	; 0x41
 80048d6:	2120      	movs	r1, #32
 80048d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	2100      	movs	r1, #0
 80048e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b004      	add	sp, #16
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	fffff0ff 	.word	0xfffff0ff

080048f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048f4:	b5b0      	push	{r4, r5, r7, lr}
 80048f6:	b08a      	sub	sp, #40	; 0x28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f000 fbbf 	bl	8005086 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004908:	4bc9      	ldr	r3, [pc, #804]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	220c      	movs	r2, #12
 800490e:	4013      	ands	r3, r2
 8004910:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004912:	4bc7      	ldr	r3, [pc, #796]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	025b      	lsls	r3, r3, #9
 800491a:	4013      	ands	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	4013      	ands	r3, r2
 8004926:	d100      	bne.n	800492a <HAL_RCC_OscConfig+0x36>
 8004928:	e07e      	b.n	8004a28 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d007      	beq.n	8004940 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d112      	bne.n	800495c <HAL_RCC_OscConfig+0x68>
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	025b      	lsls	r3, r3, #9
 800493c:	429a      	cmp	r2, r3
 800493e:	d10d      	bne.n	800495c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4bbb      	ldr	r3, [pc, #748]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	4013      	ands	r3, r2
 800494a:	d100      	bne.n	800494e <HAL_RCC_OscConfig+0x5a>
 800494c:	e06b      	b.n	8004a26 <HAL_RCC_OscConfig+0x132>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d167      	bne.n	8004a26 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f000 fb95 	bl	8005086 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	025b      	lsls	r3, r3, #9
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_RCC_OscConfig+0x84>
 8004968:	4bb1      	ldr	r3, [pc, #708]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4bb0      	ldr	r3, [pc, #704]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	0249      	lsls	r1, r1, #9
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e027      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	23a0      	movs	r3, #160	; 0xa0
 800497e:	02db      	lsls	r3, r3, #11
 8004980:	429a      	cmp	r2, r3
 8004982:	d10e      	bne.n	80049a2 <HAL_RCC_OscConfig+0xae>
 8004984:	4baa      	ldr	r3, [pc, #680]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4ba9      	ldr	r3, [pc, #676]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	02c9      	lsls	r1, r1, #11
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	4ba7      	ldr	r3, [pc, #668]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4ba6      	ldr	r3, [pc, #664]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004998:	2180      	movs	r1, #128	; 0x80
 800499a:	0249      	lsls	r1, r1, #9
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e012      	b.n	80049c8 <HAL_RCC_OscConfig+0xd4>
 80049a2:	4ba3      	ldr	r3, [pc, #652]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4ba2      	ldr	r3, [pc, #648]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049a8:	49a2      	ldr	r1, [pc, #648]	; (8004c34 <HAL_RCC_OscConfig+0x340>)
 80049aa:	400a      	ands	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	4ba0      	ldr	r3, [pc, #640]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	025b      	lsls	r3, r3, #9
 80049b6:	4013      	ands	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4b9c      	ldr	r3, [pc, #624]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b9b      	ldr	r3, [pc, #620]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049c2:	499d      	ldr	r1, [pc, #628]	; (8004c38 <HAL_RCC_OscConfig+0x344>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fe ff68 	bl	80038a4 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d8:	e009      	b.n	80049ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049da:	f7fe ff63 	bl	80038a4 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d902      	bls.n	80049ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	f000 fb4c 	bl	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ee:	4b90      	ldr	r3, [pc, #576]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	029b      	lsls	r3, r3, #10
 80049f6:	4013      	ands	r3, r2
 80049f8:	d0ef      	beq.n	80049da <HAL_RCC_OscConfig+0xe6>
 80049fa:	e015      	b.n	8004a28 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fe ff52 	bl	80038a4 <HAL_GetTick>
 8004a00:	0003      	movs	r3, r0
 8004a02:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a06:	f7fe ff4d 	bl	80038a4 <HAL_GetTick>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b64      	cmp	r3, #100	; 0x64
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e336      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a18:	4b85      	ldr	r3, [pc, #532]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	029b      	lsls	r3, r3, #10
 8004a20:	4013      	ands	r3, r2
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x112>
 8004a24:	e000      	b.n	8004a28 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d100      	bne.n	8004a34 <HAL_RCC_OscConfig+0x140>
 8004a32:	e099      	b.n	8004b68 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004a42:	4b7b      	ldr	r3, [pc, #492]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b7a      	ldr	r3, [pc, #488]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a48:	2120      	movs	r1, #32
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	2220      	movs	r2, #32
 8004a52:	4393      	bics	r3, r2
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d13e      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x1ec>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d13b      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004a68:	4b71      	ldr	r3, [pc, #452]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_RCC_OscConfig+0x188>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e304      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b6c      	ldr	r3, [pc, #432]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_RCC_OscConfig+0x348>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	0019      	movs	r1, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	021a      	lsls	r2, r3, #8
 8004a8c:	4b68      	ldr	r3, [pc, #416]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004a92:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2209      	movs	r2, #9
 8004a98:	4393      	bics	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	4b64      	ldr	r3, [pc, #400]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa4:	f000 fc50 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8004aa8:	0001      	movs	r1, r0
 8004aaa:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	4a62      	ldr	r2, [pc, #392]	; (8004c40 <HAL_RCC_OscConfig+0x34c>)
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	000a      	movs	r2, r1
 8004aba:	40da      	lsrs	r2, r3
 8004abc:	4b61      	ldr	r3, [pc, #388]	; (8004c44 <HAL_RCC_OscConfig+0x350>)
 8004abe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCC_OscConfig+0x354>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2513      	movs	r5, #19
 8004ac6:	197c      	adds	r4, r7, r5
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fe fea5 	bl	8003818 <HAL_InitTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004ad2:	197b      	adds	r3, r7, r5
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d046      	beq.n	8004b68 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004ada:	197b      	adds	r3, r7, r5
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	e2d2      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d027      	beq.n	8004b36 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ae6:	4b52      	ldr	r3, [pc, #328]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2209      	movs	r2, #9
 8004aec:	4393      	bics	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	4b4f      	ldr	r3, [pc, #316]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fe fed4 	bl	80038a4 <HAL_GetTick>
 8004afc:	0003      	movs	r3, r0
 8004afe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fe fecf 	bl	80038a4 <HAL_GetTick>
 8004b06:	0002      	movs	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e2b8      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b14:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d0f1      	beq.n	8004b02 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1e:	4b44      	ldr	r3, [pc, #272]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4a46      	ldr	r2, [pc, #280]	; (8004c3c <HAL_RCC_OscConfig+0x348>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	0019      	movs	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	021a      	lsls	r2, r3, #8
 8004b2e:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	e018      	b.n	8004b68 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	438a      	bics	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b42:	f7fe feaf 	bl	80038a4 <HAL_GetTick>
 8004b46:	0003      	movs	r3, r0
 8004b48:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fe feaa 	bl	80038a4 <HAL_GetTick>
 8004b50:	0002      	movs	r2, r0
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e293      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b5e:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2204      	movs	r2, #4
 8004b64:	4013      	ands	r3, r2
 8004b66:	d1f1      	bne.n	8004b4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d100      	bne.n	8004b74 <HAL_RCC_OscConfig+0x280>
 8004b72:	e0a2      	b.n	8004cba <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d140      	bne.n	8004bfc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4013      	ands	r3, r2
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x29e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e279      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b92:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <HAL_RCC_OscConfig+0x358>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	0a19      	lsrs	r1, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	061a      	lsls	r2, r3, #24
 8004bb4:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	0b5b      	lsrs	r3, r3, #13
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	0212      	lsls	r2, r2, #8
 8004bc6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	210f      	movs	r1, #15
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	491b      	ldr	r1, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x34c>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_RCC_OscConfig+0x350>)
 8004bda:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <HAL_RCC_OscConfig+0x354>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2513      	movs	r5, #19
 8004be2:	197c      	adds	r4, r7, r5
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fe fe17 	bl	8003818 <HAL_InitTick>
 8004bea:	0003      	movs	r3, r0
 8004bec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004bee:	197b      	adds	r3, r7, r5
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d061      	beq.n	8004cba <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004bf6:	197b      	adds	r3, r7, r5
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	e244      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d040      	beq.n	8004c86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c04:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_OscConfig+0x33c>)
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	0049      	lsls	r1, r1, #1
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe fe47 	bl	80038a4 <HAL_GetTick>
 8004c16:	0003      	movs	r3, r0
 8004c18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c1a:	e019      	b.n	8004c50 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c1c:	f7fe fe42 	bl	80038a4 <HAL_GetTick>
 8004c20:	0002      	movs	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d912      	bls.n	8004c50 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e22b      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	40021000 	.word	0x40021000
 8004c34:	fffeffff 	.word	0xfffeffff
 8004c38:	fffbffff 	.word	0xfffbffff
 8004c3c:	ffffe0ff 	.word	0xffffe0ff
 8004c40:	0800a644 	.word	0x0800a644
 8004c44:	20000014 	.word	0x20000014
 8004c48:	20000018 	.word	0x20000018
 8004c4c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c50:	4bca      	ldr	r3, [pc, #808]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2380      	movs	r3, #128	; 0x80
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d0df      	beq.n	8004c1c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c5c:	4bc7      	ldr	r3, [pc, #796]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4ac7      	ldr	r2, [pc, #796]	; (8004f80 <HAL_RCC_OscConfig+0x68c>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6a:	4bc4      	ldr	r3, [pc, #784]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c70:	4bc2      	ldr	r3, [pc, #776]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	0a19      	lsrs	r1, r3, #8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	061a      	lsls	r2, r3, #24
 8004c7e:	4bbf      	ldr	r3, [pc, #764]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	e019      	b.n	8004cba <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c86:	4bbd      	ldr	r3, [pc, #756]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4bbc      	ldr	r3, [pc, #752]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004c8c:	49bd      	ldr	r1, [pc, #756]	; (8004f84 <HAL_RCC_OscConfig+0x690>)
 8004c8e:	400a      	ands	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fe fe07 	bl	80038a4 <HAL_GetTick>
 8004c96:	0003      	movs	r3, r0
 8004c98:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fe02 	bl	80038a4 <HAL_GetTick>
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e1eb      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004cae:	4bb3      	ldr	r3, [pc, #716]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d036      	beq.n	8004d32 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d019      	beq.n	8004d00 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ccc:	4bab      	ldr	r3, [pc, #684]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd0:	4baa      	ldr	r3, [pc, #680]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd8:	f7fe fde4 	bl	80038a4 <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce2:	f7fe fddf 	bl	80038a4 <HAL_GetTick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e1c8      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cf4:	4ba1      	ldr	r3, [pc, #644]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d0f1      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3ee>
 8004cfe:	e018      	b.n	8004d32 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d00:	4b9e      	ldr	r3, [pc, #632]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d04:	4b9d      	ldr	r3, [pc, #628]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004d06:	2101      	movs	r1, #1
 8004d08:	438a      	bics	r2, r1
 8004d0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0c:	f7fe fdca 	bl	80038a4 <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d16:	f7fe fdc5 	bl	80038a4 <HAL_GetTick>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e1ae      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d28:	4b94      	ldr	r3, [pc, #592]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d1f1      	bne.n	8004d16 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2204      	movs	r2, #4
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d100      	bne.n	8004d3e <HAL_RCC_OscConfig+0x44a>
 8004d3c:	e0ae      	b.n	8004e9c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3e:	2023      	movs	r0, #35	; 0x23
 8004d40:	183b      	adds	r3, r7, r0
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d46:	4b8d      	ldr	r3, [pc, #564]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	055b      	lsls	r3, r3, #21
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d52:	4b8a      	ldr	r3, [pc, #552]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d56:	4b89      	ldr	r3, [pc, #548]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004d58:	2180      	movs	r1, #128	; 0x80
 8004d5a:	0549      	lsls	r1, r1, #21
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004d60:	183b      	adds	r3, r7, r0
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d66:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x694>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d11a      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d72:	4b85      	ldr	r3, [pc, #532]	; (8004f88 <HAL_RCC_OscConfig+0x694>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b84      	ldr	r3, [pc, #528]	; (8004f88 <HAL_RCC_OscConfig+0x694>)
 8004d78:	2180      	movs	r1, #128	; 0x80
 8004d7a:	0049      	lsls	r1, r1, #1
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d80:	f7fe fd90 	bl	80038a4 <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fe fd8b 	bl	80038a4 <HAL_GetTick>
 8004d8e:	0002      	movs	r2, r0
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b64      	cmp	r3, #100	; 0x64
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e174      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b7a      	ldr	r3, [pc, #488]	; (8004f88 <HAL_RCC_OscConfig+0x694>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4013      	ands	r3, r2
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x4d0>
 8004db4:	4b71      	ldr	r3, [pc, #452]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004db8:	4b70      	ldr	r3, [pc, #448]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	0049      	lsls	r1, r1, #1
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc2:	e031      	b.n	8004e28 <HAL_RCC_OscConfig+0x534>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x4f2>
 8004dcc:	4b6b      	ldr	r3, [pc, #428]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dd0:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004dd2:	496c      	ldr	r1, [pc, #432]	; (8004f84 <HAL_RCC_OscConfig+0x690>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	651a      	str	r2, [r3, #80]	; 0x50
 8004dd8:	4b68      	ldr	r3, [pc, #416]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ddc:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004dde:	496b      	ldr	r1, [pc, #428]	; (8004f8c <HAL_RCC_OscConfig+0x698>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	651a      	str	r2, [r3, #80]	; 0x50
 8004de4:	e020      	b.n	8004e28 <HAL_RCC_OscConfig+0x534>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	23a0      	movs	r3, #160	; 0xa0
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10e      	bne.n	8004e10 <HAL_RCC_OscConfig+0x51c>
 8004df2:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004df6:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	00c9      	lsls	r1, r1, #3
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	651a      	str	r2, [r3, #80]	; 0x50
 8004e00:	4b5e      	ldr	r3, [pc, #376]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e04:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	0049      	lsls	r1, r1, #1
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0x534>
 8004e10:	4b5a      	ldr	r3, [pc, #360]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e14:	4b59      	ldr	r3, [pc, #356]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e16:	495b      	ldr	r1, [pc, #364]	; (8004f84 <HAL_RCC_OscConfig+0x690>)
 8004e18:	400a      	ands	r2, r1
 8004e1a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e1c:	4b57      	ldr	r3, [pc, #348]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e20:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e22:	495a      	ldr	r1, [pc, #360]	; (8004f8c <HAL_RCC_OscConfig+0x698>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e30:	f7fe fd38 	bl	80038a4 <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e38:	e009      	b.n	8004e4e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fe fd33 	bl	80038a4 <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	4a52      	ldr	r2, [pc, #328]	; (8004f90 <HAL_RCC_OscConfig+0x69c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e11b      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e4e:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4013      	ands	r3, r2
 8004e58:	d0ef      	beq.n	8004e3a <HAL_RCC_OscConfig+0x546>
 8004e5a:	e014      	b.n	8004e86 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5c:	f7fe fd22 	bl	80038a4 <HAL_GetTick>
 8004e60:	0003      	movs	r3, r0
 8004e62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e64:	e009      	b.n	8004e7a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7fe fd1d 	bl	80038a4 <HAL_GetTick>
 8004e6a:	0002      	movs	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	4a47      	ldr	r2, [pc, #284]	; (8004f90 <HAL_RCC_OscConfig+0x69c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e105      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e7a:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4013      	ands	r3, r2
 8004e84:	d1ef      	bne.n	8004e66 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e86:	2323      	movs	r3, #35	; 0x23
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004e96:	493f      	ldr	r1, [pc, #252]	; (8004f94 <HAL_RCC_OscConfig+0x6a0>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d049      	beq.n	8004f3a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d026      	beq.n	8004efc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004eae:	4b33      	ldr	r3, [pc, #204]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
 8004eba:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebe:	4b2f      	ldr	r3, [pc, #188]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <HAL_RCC_OscConfig+0x6a4>)
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	4b33      	ldr	r3, [pc, #204]	; (8004f98 <HAL_RCC_OscConfig+0x6a4>)
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	0189      	lsls	r1, r1, #6
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fce6 	bl	80038a4 <HAL_GetTick>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ede:	f7fe fce1 	bl	80038a4 <HAL_GetTick>
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0ca      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d0f1      	beq.n	8004ede <HAL_RCC_OscConfig+0x5ea>
 8004efa:	e01e      	b.n	8004f3a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004efc:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004f02:	2101      	movs	r1, #1
 8004f04:	438a      	bics	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <HAL_RCC_OscConfig+0x6a4>)
 8004f0a:	6a1a      	ldr	r2, [r3, #32]
 8004f0c:	4b22      	ldr	r3, [pc, #136]	; (8004f98 <HAL_RCC_OscConfig+0x6a4>)
 8004f0e:	4923      	ldr	r1, [pc, #140]	; (8004f9c <HAL_RCC_OscConfig+0x6a8>)
 8004f10:	400a      	ands	r2, r1
 8004f12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f14:	f7fe fcc6 	bl	80038a4 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f1e:	f7fe fcc1 	bl	80038a4 <HAL_GetTick>
 8004f22:	0002      	movs	r2, r0
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e0aa      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2202      	movs	r2, #2
 8004f36:	4013      	ands	r3, r2
 8004f38:	d1f1      	bne.n	8004f1e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d100      	bne.n	8004f44 <HAL_RCC_OscConfig+0x650>
 8004f42:	e09f      	b.n	8005084 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b0c      	cmp	r3, #12
 8004f48:	d100      	bne.n	8004f4c <HAL_RCC_OscConfig+0x658>
 8004f4a:	e078      	b.n	800503e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d159      	bne.n	8005008 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_RCC_OscConfig+0x688>)
 8004f5a:	4911      	ldr	r1, [pc, #68]	; (8004fa0 <HAL_RCC_OscConfig+0x6ac>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7fe fca0 	bl	80038a4 <HAL_GetTick>
 8004f64:	0003      	movs	r3, r0
 8004f66:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f68:	e01c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7fe fc9b 	bl	80038a4 <HAL_GetTick>
 8004f6e:	0002      	movs	r2, r0
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d915      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e084      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	ffff1fff 	.word	0xffff1fff
 8004f84:	fffffeff 	.word	0xfffffeff
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	fffffbff 	.word	0xfffffbff
 8004f90:	00001388 	.word	0x00001388
 8004f94:	efffffff 	.word	0xefffffff
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	ffffdfff 	.word	0xffffdfff
 8004fa0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	049b      	lsls	r3, r3, #18
 8004fac:	4013      	ands	r3, r2
 8004fae:	d1dc      	bne.n	8004f6a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb0:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a37      	ldr	r2, [pc, #220]	; (8005094 <HAL_RCC_OscConfig+0x7a0>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	0449      	lsls	r1, r1, #17
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fde:	f7fe fc61 	bl	80038a4 <HAL_GetTick>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fe fc5c 	bl	80038a4 <HAL_GetTick>
 8004fec:	0002      	movs	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e045      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004ffa:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	2380      	movs	r3, #128	; 0x80
 8005000:	049b      	lsls	r3, r3, #18
 8005002:	4013      	ands	r3, r2
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x6f4>
 8005006:	e03d      	b.n	8005084 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 800500e:	4922      	ldr	r1, [pc, #136]	; (8005098 <HAL_RCC_OscConfig+0x7a4>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fe fc46 	bl	80038a4 <HAL_GetTick>
 8005018:	0003      	movs	r3, r0
 800501a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501e:	f7fe fc41 	bl	80038a4 <HAL_GetTick>
 8005022:	0002      	movs	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e02a      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	049b      	lsls	r3, r3, #18
 8005038:	4013      	ands	r3, r2
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x72a>
 800503c:	e022      	b.n	8005084 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e01d      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800504a:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_RCC_OscConfig+0x79c>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	401a      	ands	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	429a      	cmp	r2, r3
 800505e:	d10f      	bne.n	8005080 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	23f0      	movs	r3, #240	; 0xf0
 8005064:	039b      	lsls	r3, r3, #14
 8005066:	401a      	ands	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	23c0      	movs	r3, #192	; 0xc0
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	401a      	ands	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b00a      	add	sp, #40	; 0x28
 800508c:	bdb0      	pop	{r4, r5, r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	40021000 	.word	0x40021000
 8005094:	ff02ffff 	.word	0xff02ffff
 8005098:	feffffff 	.word	0xfeffffff

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e128      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b96      	ldr	r3, [pc, #600]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	4013      	ands	r3, r2
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d91e      	bls.n	80050fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b93      	ldr	r3, [pc, #588]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2201      	movs	r2, #1
 80050c4:	4393      	bics	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	4b90      	ldr	r3, [pc, #576]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050d0:	f7fe fbe8 	bl	80038a4 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d8:	e009      	b.n	80050ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050da:	f7fe fbe3 	bl	80038a4 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	4a8a      	ldr	r2, [pc, #552]	; (8005310 <HAL_RCC_ClockConfig+0x274>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e109      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b87      	ldr	r3, [pc, #540]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	4013      	ands	r3, r2
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d1ee      	bne.n	80050da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2202      	movs	r2, #2
 8005102:	4013      	ands	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005106:	4b83      	ldr	r3, [pc, #524]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	22f0      	movs	r2, #240	; 0xf0
 800510c:	4393      	bics	r3, r2
 800510e:	0019      	movs	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	4b7f      	ldr	r3, [pc, #508]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005116:	430a      	orrs	r2, r1
 8005118:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	4013      	ands	r3, r2
 8005122:	d100      	bne.n	8005126 <HAL_RCC_ClockConfig+0x8a>
 8005124:	e089      	b.n	800523a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800512e:	4b79      	ldr	r3, [pc, #484]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	4013      	ands	r3, r2
 8005138:	d120      	bne.n	800517c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0e1      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d107      	bne.n	8005156 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005146:	4b73      	ldr	r3, [pc, #460]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	049b      	lsls	r3, r3, #18
 800514e:	4013      	ands	r3, r2
 8005150:	d114      	bne.n	800517c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e0d5      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d106      	bne.n	800516c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800515e:	4b6d      	ldr	r3, [pc, #436]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2204      	movs	r2, #4
 8005164:	4013      	ands	r3, r2
 8005166:	d109      	bne.n	800517c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0ca      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800516c:	4b69      	ldr	r3, [pc, #420]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4013      	ands	r3, r2
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0c2      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517c:	4b65      	ldr	r3, [pc, #404]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2203      	movs	r2, #3
 8005182:	4393      	bics	r3, r2
 8005184:	0019      	movs	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4b62      	ldr	r3, [pc, #392]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 800518c:	430a      	orrs	r2, r1
 800518e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005190:	f7fe fb88 	bl	80038a4 <HAL_GetTick>
 8005194:	0003      	movs	r3, r0
 8005196:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d111      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a0:	e009      	b.n	80051b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a2:	f7fe fb7f 	bl	80038a4 <HAL_GetTick>
 80051a6:	0002      	movs	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	4a58      	ldr	r2, [pc, #352]	; (8005310 <HAL_RCC_ClockConfig+0x274>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0a5      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051b6:	4b57      	ldr	r3, [pc, #348]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	220c      	movs	r2, #12
 80051bc:	4013      	ands	r3, r2
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d1ef      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x106>
 80051c2:	e03a      	b.n	800523a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d111      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051cc:	e009      	b.n	80051e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ce:	f7fe fb69 	bl	80038a4 <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	4a4d      	ldr	r2, [pc, #308]	; (8005310 <HAL_RCC_ClockConfig+0x274>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e08f      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e2:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	220c      	movs	r2, #12
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d1ef      	bne.n	80051ce <HAL_RCC_ClockConfig+0x132>
 80051ee:	e024      	b.n	800523a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d11b      	bne.n	8005230 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051f8:	e009      	b.n	800520e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fa:	f7fe fb53 	bl	80038a4 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	4a42      	ldr	r2, [pc, #264]	; (8005310 <HAL_RCC_ClockConfig+0x274>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e079      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800520e:	4b41      	ldr	r3, [pc, #260]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	220c      	movs	r2, #12
 8005214:	4013      	ands	r3, r2
 8005216:	2b04      	cmp	r3, #4
 8005218:	d1ef      	bne.n	80051fa <HAL_RCC_ClockConfig+0x15e>
 800521a:	e00e      	b.n	800523a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521c:	f7fe fb42 	bl	80038a4 <HAL_GetTick>
 8005220:	0002      	movs	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	4a3a      	ldr	r2, [pc, #232]	; (8005310 <HAL_RCC_ClockConfig+0x274>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e068      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005230:	4b38      	ldr	r3, [pc, #224]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	220c      	movs	r2, #12
 8005236:	4013      	ands	r3, r2
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800523a:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2201      	movs	r2, #1
 8005240:	4013      	ands	r3, r2
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d21e      	bcs.n	8005286 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2201      	movs	r2, #1
 800524e:	4393      	bics	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	4b2e      	ldr	r3, [pc, #184]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800525a:	f7fe fb23 	bl	80038a4 <HAL_GetTick>
 800525e:	0003      	movs	r3, r0
 8005260:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	e009      	b.n	8005278 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005264:	f7fe fb1e 	bl	80038a4 <HAL_GetTick>
 8005268:	0002      	movs	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	4a28      	ldr	r2, [pc, #160]	; (8005310 <HAL_RCC_ClockConfig+0x274>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e044      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCC_ClockConfig+0x270>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2201      	movs	r2, #1
 800527e:	4013      	ands	r3, r2
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d1ee      	bne.n	8005264 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2204      	movs	r2, #4
 800528c:	4013      	ands	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005290:	4b20      	ldr	r3, [pc, #128]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_RCC_ClockConfig+0x27c>)
 8005296:	4013      	ands	r3, r2
 8005298:	0019      	movs	r1, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 80052a0:	430a      	orrs	r2, r1
 80052a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2208      	movs	r2, #8
 80052aa:	4013      	ands	r3, r2
 80052ac:	d00a      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ae:	4b19      	ldr	r3, [pc, #100]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_RCC_ClockConfig+0x280>)
 80052b4:	4013      	ands	r3, r2
 80052b6:	0019      	movs	r1, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	00da      	lsls	r2, r3, #3
 80052be:	4b15      	ldr	r3, [pc, #84]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 80052c0:	430a      	orrs	r2, r1
 80052c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052c4:	f000 f840 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 80052c8:	0001      	movs	r1, r0
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <HAL_RCC_ClockConfig+0x278>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	220f      	movs	r2, #15
 80052d2:	4013      	ands	r3, r2
 80052d4:	4a12      	ldr	r2, [pc, #72]	; (8005320 <HAL_RCC_ClockConfig+0x284>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	000a      	movs	r2, r1
 80052da:	40da      	lsrs	r2, r3
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_RCC_ClockConfig+0x288>)
 80052de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <HAL_RCC_ClockConfig+0x28c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	250b      	movs	r5, #11
 80052e6:	197c      	adds	r4, r7, r5
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7fe fa95 	bl	8003818 <HAL_InitTick>
 80052ee:	0003      	movs	r3, r0
 80052f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80052f2:	197b      	adds	r3, r7, r5
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80052fa:	197b      	adds	r3, r7, r5
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	e000      	b.n	8005302 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bdb0      	pop	{r4, r5, r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	40022000 	.word	0x40022000
 8005310:	00001388 	.word	0x00001388
 8005314:	40021000 	.word	0x40021000
 8005318:	fffff8ff 	.word	0xfffff8ff
 800531c:	ffffc7ff 	.word	0xffffc7ff
 8005320:	0800a644 	.word	0x0800a644
 8005324:	20000014 	.word	0x20000014
 8005328:	20000018 	.word	0x20000018

0800532c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <HAL_RCC_EnableCSS+0x18>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_RCC_EnableCSS+0x18>)
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	0309      	lsls	r1, r1, #12
 800533a:	430a      	orrs	r2, r1
 800533c:	601a      	str	r2, [r3, #0]
}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000

08005348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	b5b0      	push	{r4, r5, r7, lr}
 800534a:	b08e      	sub	sp, #56	; 0x38
 800534c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800534e:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005356:	230c      	movs	r3, #12
 8005358:	4013      	ands	r3, r2
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d014      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800535e:	d900      	bls.n	8005362 <HAL_RCC_GetSysClockFreq+0x1a>
 8005360:	e07b      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x112>
 8005362:	2b04      	cmp	r3, #4
 8005364:	d002      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x24>
 8005366:	2b08      	cmp	r3, #8
 8005368:	d00b      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800536a:	e076      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800536c:	4b44      	ldr	r3, [pc, #272]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2210      	movs	r2, #16
 8005372:	4013      	ands	r3, r2
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005376:	4b43      	ldr	r3, [pc, #268]	; (8005484 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800537a:	e07c      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800537c:	4b42      	ldr	r3, [pc, #264]	; (8005488 <HAL_RCC_GetSysClockFreq+0x140>)
 800537e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005380:	e079      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b42      	ldr	r3, [pc, #264]	; (800548c <HAL_RCC_GetSysClockFreq+0x144>)
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005386:	e076      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	0c9a      	lsrs	r2, r3, #18
 800538c:	230f      	movs	r3, #15
 800538e:	401a      	ands	r2, r3
 8005390:	4b3f      	ldr	r3, [pc, #252]	; (8005490 <HAL_RCC_GetSysClockFreq+0x148>)
 8005392:	5c9b      	ldrb	r3, [r3, r2]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	0d9a      	lsrs	r2, r3, #22
 800539a:	2303      	movs	r3, #3
 800539c:	4013      	ands	r3, r2
 800539e:	3301      	adds	r3, #1
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053a2:	4b37      	ldr	r3, [pc, #220]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	025b      	lsls	r3, r3, #9
 80053aa:	4013      	ands	r3, r2
 80053ac:	d01a      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	4a35      	ldr	r2, [pc, #212]	; (800548c <HAL_RCC_GetSysClockFreq+0x144>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	69b8      	ldr	r0, [r7, #24]
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	f7fb f843 	bl	8000448 <__aeabi_lmul>
 80053c2:	0002      	movs	r2, r0
 80053c4:	000b      	movs	r3, r1
 80053c6:	0010      	movs	r0, r2
 80053c8:	0019      	movs	r1, r3
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f7fb f817 	bl	8000408 <__aeabi_uldivmod>
 80053da:	0002      	movs	r2, r0
 80053dc:	000b      	movs	r3, r1
 80053de:	0013      	movs	r3, r2
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
 80053e2:	e037      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80053e4:	4b26      	ldr	r3, [pc, #152]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	4013      	ands	r3, r2
 80053ec:	d01a      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4a23      	ldr	r2, [pc, #140]	; (8005484 <HAL_RCC_GetSysClockFreq+0x13c>)
 80053f8:	2300      	movs	r3, #0
 80053fa:	68b8      	ldr	r0, [r7, #8]
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	f7fb f823 	bl	8000448 <__aeabi_lmul>
 8005402:	0002      	movs	r2, r0
 8005404:	000b      	movs	r3, r1
 8005406:	0010      	movs	r0, r2
 8005408:	0019      	movs	r1, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f7fa fff7 	bl	8000408 <__aeabi_uldivmod>
 800541a:	0002      	movs	r2, r0
 800541c:	000b      	movs	r3, r1
 800541e:	0013      	movs	r3, r2
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
 8005422:	e017      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	0018      	movs	r0, r3
 8005428:	2300      	movs	r3, #0
 800542a:	0019      	movs	r1, r3
 800542c:	4a16      	ldr	r2, [pc, #88]	; (8005488 <HAL_RCC_GetSysClockFreq+0x140>)
 800542e:	2300      	movs	r3, #0
 8005430:	f7fb f80a 	bl	8000448 <__aeabi_lmul>
 8005434:	0002      	movs	r2, r0
 8005436:	000b      	movs	r3, r1
 8005438:	0010      	movs	r0, r2
 800543a:	0019      	movs	r1, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	001c      	movs	r4, r3
 8005440:	2300      	movs	r3, #0
 8005442:	001d      	movs	r5, r3
 8005444:	0022      	movs	r2, r4
 8005446:	002b      	movs	r3, r5
 8005448:	f7fa ffde 	bl	8000408 <__aeabi_uldivmod>
 800544c:	0002      	movs	r2, r0
 800544e:	000b      	movs	r3, r1
 8005450:	0013      	movs	r3, r2
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005458:	e00d      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCC_GetSysClockFreq+0x138>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	0b5b      	lsrs	r3, r3, #13
 8005460:	2207      	movs	r2, #7
 8005462:	4013      	ands	r3, r2
 8005464:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	3301      	adds	r3, #1
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	0212      	lsls	r2, r2, #8
 800546e:	409a      	lsls	r2, r3
 8005470:	0013      	movs	r3, r2
 8005472:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005474:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005478:	0018      	movs	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	b00e      	add	sp, #56	; 0x38
 800547e:	bdb0      	pop	{r4, r5, r7, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	00f42400 	.word	0x00f42400
 800548c:	007a1200 	.word	0x007a1200
 8005490:	0800a65c 	.word	0x0800a65c

08005494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005498:	4b02      	ldr	r3, [pc, #8]	; (80054a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800549a:	681b      	ldr	r3, [r3, #0]
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	20000014 	.word	0x20000014

080054a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054ac:	f7ff fff2 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054b0:	0001      	movs	r1, r0
 80054b2:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	2207      	movs	r2, #7
 80054ba:	4013      	ands	r3, r2
 80054bc:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	40d9      	lsrs	r1, r3
 80054c2:	000b      	movs	r3, r1
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	40021000 	.word	0x40021000
 80054d0:	0800a654 	.word	0x0800a654

080054d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054d8:	f7ff ffdc 	bl	8005494 <HAL_RCC_GetHCLKFreq>
 80054dc:	0001      	movs	r1, r0
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	0adb      	lsrs	r3, r3, #11
 80054e4:	2207      	movs	r2, #7
 80054e6:	4013      	ands	r3, r2
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ea:	5cd3      	ldrb	r3, [r2, r3]
 80054ec:	40d9      	lsrs	r1, r3
 80054ee:	000b      	movs	r3, r1
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	40021000 	.word	0x40021000
 80054fc:	0800a654 	.word	0x0800a654

08005500 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_RCC_NMI_IRQHandler+0x28>)
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	401a      	ands	r2, r3
 800550e:	2380      	movs	r3, #128	; 0x80
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	429a      	cmp	r2, r3
 8005514:	d105      	bne.n	8005522 <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005516:	f000 f809 	bl	800552c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800551a:	4b03      	ldr	r3, [pc, #12]	; (8005528 <HAL_RCC_NMI_IRQHandler+0x28>)
 800551c:	2280      	movs	r2, #128	; 0x80
 800551e:	0052      	lsls	r2, r2, #1
 8005520:	619a      	str	r2, [r3, #24]
  }
}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000

0800552c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005540:	2317      	movs	r3, #23
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2220      	movs	r2, #32
 800554e:	4013      	ands	r3, r2
 8005550:	d106      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4013      	ands	r3, r2
 800555c:	d100      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800555e:	e0d9      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005560:	4ba4      	ldr	r3, [pc, #656]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	055b      	lsls	r3, r3, #21
 8005568:	4013      	ands	r3, r2
 800556a:	d10a      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556c:	4ba1      	ldr	r3, [pc, #644]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800556e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005570:	4ba0      	ldr	r3, [pc, #640]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	0549      	lsls	r1, r1, #21
 8005576:	430a      	orrs	r2, r1
 8005578:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800557a:	2317      	movs	r3, #23
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	2201      	movs	r2, #1
 8005580:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005582:	4b9d      	ldr	r3, [pc, #628]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	2380      	movs	r3, #128	; 0x80
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4013      	ands	r3, r2
 800558c:	d11a      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800558e:	4b9a      	ldr	r3, [pc, #616]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b99      	ldr	r3, [pc, #612]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	0049      	lsls	r1, r1, #1
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559c:	f7fe f982 	bl	80038a4 <HAL_GetTick>
 80055a0:	0003      	movs	r3, r0
 80055a2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a4:	e008      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fe f97d 	bl	80038a4 <HAL_GetTick>
 80055aa:	0002      	movs	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b64      	cmp	r3, #100	; 0x64
 80055b2:	d901      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e118      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b8:	4b8f      	ldr	r3, [pc, #572]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4013      	ands	r3, r2
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80055c4:	4b8b      	ldr	r3, [pc, #556]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	23c0      	movs	r3, #192	; 0xc0
 80055ca:	039b      	lsls	r3, r3, #14
 80055cc:	4013      	ands	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	23c0      	movs	r3, #192	; 0xc0
 80055d6:	039b      	lsls	r3, r3, #14
 80055d8:	4013      	ands	r3, r2
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d107      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	23c0      	movs	r3, #192	; 0xc0
 80055e6:	039b      	lsls	r3, r3, #14
 80055e8:	4013      	ands	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d013      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	23c0      	movs	r3, #192	; 0xc0
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	401a      	ands	r2, r3
 80055fa:	23c0      	movs	r3, #192	; 0xc0
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10a      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005602:	4b7c      	ldr	r3, [pc, #496]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	401a      	ands	r2, r3
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	429a      	cmp	r2, r3
 8005612:	d101      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0e8      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005618:	4b76      	ldr	r3, [pc, #472]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800561a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800561c:	23c0      	movs	r3, #192	; 0xc0
 800561e:	029b      	lsls	r3, r3, #10
 8005620:	4013      	ands	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d049      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x186>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	23c0      	movs	r3, #192	; 0xc0
 8005630:	029b      	lsls	r3, r3, #10
 8005632:	4013      	ands	r3, r2
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	429a      	cmp	r2, r3
 8005638:	d004      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2220      	movs	r2, #32
 8005640:	4013      	ands	r3, r2
 8005642:	d10d      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	23c0      	movs	r3, #192	; 0xc0
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	4013      	ands	r3, r2
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d034      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2380      	movs	r3, #128	; 0x80
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	4013      	ands	r3, r2
 800565e:	d02e      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005660:	4b64      	ldr	r3, [pc, #400]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	4a65      	ldr	r2, [pc, #404]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005666:	4013      	ands	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800566a:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800566c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800566e:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	0309      	lsls	r1, r1, #12
 8005674:	430a      	orrs	r2, r1
 8005676:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005678:	4b5e      	ldr	r3, [pc, #376]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800567a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800567c:	4b5d      	ldr	r3, [pc, #372]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800567e:	4960      	ldr	r1, [pc, #384]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005680:	400a      	ands	r2, r1
 8005682:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005684:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4013      	ands	r3, r2
 8005692:	d014      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fe f906 	bl	80038a4 <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569c:	e009      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fe f901 	bl	80038a4 <HAL_GetTick>
 80056a2:	0002      	movs	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	4a56      	ldr	r2, [pc, #344]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e09b      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b2:	4b50      	ldr	r3, [pc, #320]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4013      	ands	r3, r2
 80056bc:	d0ef      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	23c0      	movs	r3, #192	; 0xc0
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	401a      	ands	r2, r3
 80056c8:	23c0      	movs	r3, #192	; 0xc0
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d10c      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80056d0:	4b48      	ldr	r3, [pc, #288]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a4c      	ldr	r2, [pc, #304]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	23c0      	movs	r3, #192	; 0xc0
 80056e0:	039b      	lsls	r3, r3, #14
 80056e2:	401a      	ands	r2, r3
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056e6:	430a      	orrs	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	23c0      	movs	r3, #192	; 0xc0
 80056f4:	029b      	lsls	r3, r3, #10
 80056f6:	401a      	ands	r2, r3
 80056f8:	4b3e      	ldr	r3, [pc, #248]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056fa:	430a      	orrs	r2, r1
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056fe:	2317      	movs	r3, #23
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005708:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800570a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570c:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800570e:	493f      	ldr	r1, [pc, #252]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005710:	400a      	ands	r2, r1
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	4013      	ands	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800571e:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	2203      	movs	r2, #3
 8005724:	4393      	bics	r3, r2
 8005726:	0019      	movs	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800572e:	430a      	orrs	r2, r1
 8005730:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2202      	movs	r2, #2
 8005738:	4013      	ands	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800573c:	4b2d      	ldr	r3, [pc, #180]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	220c      	movs	r2, #12
 8005742:	4393      	bics	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800574c:	430a      	orrs	r2, r1
 800574e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2204      	movs	r2, #4
 8005756:	4013      	ands	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800575c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575e:	4a2c      	ldr	r2, [pc, #176]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005760:	4013      	ands	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800576a:	430a      	orrs	r2, r1
 800576c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2208      	movs	r2, #8
 8005774:	4013      	ands	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800577a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577c:	4a25      	ldr	r2, [pc, #148]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800577e:	4013      	ands	r3, r2
 8005780:	0019      	movs	r1, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	4b1b      	ldr	r3, [pc, #108]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005788:	430a      	orrs	r2, r1
 800578a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	2380      	movs	r3, #128	; 0x80
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	4013      	ands	r3, r2
 8005796:	d009      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005798:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800579a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579c:	4a17      	ldr	r2, [pc, #92]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800579e:	4013      	ands	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057a8:	430a      	orrs	r2, r1
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2240      	movs	r2, #64	; 0x40
 80057b2:	4013      	ands	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80057bc:	4013      	ands	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057c6:	430a      	orrs	r2, r1
 80057c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2280      	movs	r2, #128	; 0x80
 80057d0:	4013      	ands	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d8:	4a10      	ldr	r2, [pc, #64]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80057da:	4013      	ands	r3, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057e4:	430a      	orrs	r2, r1
 80057e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	0018      	movs	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b006      	add	sp, #24
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	fffcffff 	.word	0xfffcffff
 8005800:	fff7ffff 	.word	0xfff7ffff
 8005804:	00001388 	.word	0x00001388
 8005808:	ffcfffff 	.word	0xffcfffff
 800580c:	efffffff 	.word	0xefffffff
 8005810:	fffff3ff 	.word	0xfffff3ff
 8005814:	ffffcfff 	.word	0xffffcfff
 8005818:	fbffffff 	.word	0xfbffffff
 800581c:	fff3ffff 	.word	0xfff3ffff

08005820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e032      	b.n	8005898 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2239      	movs	r2, #57	; 0x39
 8005836:	5c9b      	ldrb	r3, [r3, r2]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2238      	movs	r2, #56	; 0x38
 8005842:	2100      	movs	r1, #0
 8005844:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	0018      	movs	r0, r3
 800584a:	f7fd fee9 	bl	8003620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2239      	movs	r2, #57	; 0x39
 8005852:	2102      	movs	r1, #2
 8005854:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	0019      	movs	r1, r3
 8005860:	0010      	movs	r0, r2
 8005862:	f000 fae3 	bl	8005e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	223e      	movs	r2, #62	; 0x3e
 800586a:	2101      	movs	r1, #1
 800586c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	223a      	movs	r2, #58	; 0x3a
 8005872:	2101      	movs	r1, #1
 8005874:	5499      	strb	r1, [r3, r2]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	223b      	movs	r2, #59	; 0x3b
 800587a:	2101      	movs	r1, #1
 800587c:	5499      	strb	r1, [r3, r2]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	223c      	movs	r2, #60	; 0x3c
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	223d      	movs	r2, #61	; 0x3d
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2239      	movs	r2, #57	; 0x39
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2239      	movs	r2, #57	; 0x39
 80058ac:	5c9b      	ldrb	r3, [r3, r2]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d001      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e03b      	b.n	8005930 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2239      	movs	r2, #57	; 0x39
 80058bc:	2102      	movs	r1, #2
 80058be:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2101      	movs	r1, #1
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	05db      	lsls	r3, r3, #23
 80058d8:	429a      	cmp	r2, r3
 80058da:	d00e      	beq.n	80058fa <HAL_TIM_Base_Start_IT+0x5a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a15      	ldr	r2, [pc, #84]	; (8005938 <HAL_TIM_Base_Start_IT+0x98>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIM_Base_Start_IT+0x5a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a14      	ldr	r2, [pc, #80]	; (800593c <HAL_TIM_Base_Start_IT+0x9c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIM_Base_Start_IT+0x5a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a12      	ldr	r2, [pc, #72]	; (8005940 <HAL_TIM_Base_Start_IT+0xa0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d111      	bne.n	800591e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2207      	movs	r2, #7
 8005902:	4013      	ands	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b06      	cmp	r3, #6
 800590a:	d010      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2101      	movs	r1, #1
 8005918:	430a      	orrs	r2, r1
 800591a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591c:	e007      	b.n	800592e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	430a      	orrs	r2, r1
 800592c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	b004      	add	sp, #16
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40000400 	.word	0x40000400
 800593c:	40010800 	.word	0x40010800
 8005940:	40011400 	.word	0x40011400

08005944 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2101      	movs	r1, #1
 8005958:	438a      	bics	r2, r1
 800595a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <HAL_TIM_Base_Stop_IT+0x48>)
 8005964:	4013      	ands	r3, r2
 8005966:	d107      	bne.n	8005978 <HAL_TIM_Base_Stop_IT+0x34>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	438a      	bics	r2, r1
 8005976:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2239      	movs	r2, #57	; 0x39
 800597c:	2101      	movs	r1, #1
 800597e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	0018      	movs	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	b002      	add	sp, #8
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	00001111 	.word	0x00001111

08005990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e088      	b.n	8005ab6 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2239      	movs	r2, #57	; 0x39
 80059a8:	5c9b      	ldrb	r3, [r3, r2]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2238      	movs	r2, #56	; 0x38
 80059b4:	2100      	movs	r1, #0
 80059b6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7fd fde6 	bl	800358c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2239      	movs	r2, #57	; 0x39
 80059c4:	2102      	movs	r1, #2
 80059c6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	493b      	ldr	r1, [pc, #236]	; (8005ac0 <HAL_TIM_Encoder_Init+0x130>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	0019      	movs	r1, r3
 80059e2:	0010      	movs	r0, r2
 80059e4:	f000 fa22 	bl	8005e2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <HAL_TIM_Encoder_Init+0x134>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4a28      	ldr	r2, [pc, #160]	; (8005ac8 <HAL_TIM_Encoder_Init+0x138>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4a27      	ldr	r2, [pc, #156]	; (8005acc <HAL_TIM_Encoder_Init+0x13c>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	011a      	lsls	r2, r3, #4
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	4313      	orrs	r3, r2
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2222      	movs	r2, #34	; 0x22
 8005a5e:	4393      	bics	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2288      	movs	r2, #136	; 0x88
 8005a66:	4393      	bics	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	4313      	orrs	r3, r2
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	223e      	movs	r2, #62	; 0x3e
 8005a98:	2101      	movs	r1, #1
 8005a9a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	223a      	movs	r2, #58	; 0x3a
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	223b      	movs	r2, #59	; 0x3b
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2239      	movs	r2, #57	; 0x39
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	b006      	add	sp, #24
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	ffffbff8 	.word	0xffffbff8
 8005ac4:	fffffcfc 	.word	0xfffffcfc
 8005ac8:	fffff3f3 	.word	0xfffff3f3
 8005acc:	ffff0f0f 	.word	0xffff0f0f

08005ad0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ada:	200f      	movs	r0, #15
 8005adc:	183b      	adds	r3, r7, r0
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	213a      	movs	r1, #58	; 0x3a
 8005ae2:	5c52      	ldrb	r2, [r2, r1]
 8005ae4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ae6:	230e      	movs	r3, #14
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	213b      	movs	r1, #59	; 0x3b
 8005aee:	5c52      	ldrb	r2, [r2, r1]
 8005af0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <HAL_TIM_Encoder_Start_IT+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005af8:	183b      	adds	r3, r7, r0
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <HAL_TIM_Encoder_Start_IT+0x34>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e076      	b.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	223a      	movs	r2, #58	; 0x3a
 8005b08:	2102      	movs	r1, #2
 8005b0a:	5499      	strb	r1, [r3, r2]
 8005b0c:	e022      	b.n	8005b54 <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d10b      	bne.n	8005b2c <HAL_TIM_Encoder_Start_IT+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b14:	230e      	movs	r3, #14
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_TIM_Encoder_Start_IT+0x52>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e067      	b.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	223b      	movs	r2, #59	; 0x3b
 8005b26:	2102      	movs	r1, #2
 8005b28:	5499      	strb	r1, [r3, r2]
 8005b2a:	e013      	b.n	8005b54 <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b2c:	230f      	movs	r3, #15
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d104      	bne.n	8005b40 <HAL_TIM_Encoder_Start_IT+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b36:	230e      	movs	r3, #14
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <HAL_TIM_Encoder_Start_IT+0x74>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e056      	b.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	223a      	movs	r2, #58	; 0x3a
 8005b48:	2102      	movs	r1, #2
 8005b4a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	223b      	movs	r2, #59	; 0x3b
 8005b50:	2102      	movs	r1, #2
 8005b52:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_Encoder_Start_IT+0x92>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d010      	beq.n	8005b82 <HAL_TIM_Encoder_Start_IT+0xb2>
 8005b60:	e01f      	b.n	8005ba2 <HAL_TIM_Encoder_Start_IT+0xd2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	2100      	movs	r1, #0
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f000 f9bc 	bl	8005ee8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	60da      	str	r2, [r3, #12]
      break;
 8005b80:	e02e      	b.n	8005be0 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2201      	movs	r2, #1
 8005b88:	2104      	movs	r1, #4
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	f000 f9ac 	bl	8005ee8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2104      	movs	r1, #4
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	60da      	str	r2, [r3, #12]
      break;
 8005ba0:	e01e      	b.n	8005be0 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	2100      	movs	r1, #0
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 f99c 	bl	8005ee8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	2104      	movs	r1, #4
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f000 f995 	bl	8005ee8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2102      	movs	r1, #2
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2104      	movs	r1, #4
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	60da      	str	r2, [r3, #12]
      break;
 8005bde:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2101      	movs	r1, #1
 8005bec:	430a      	orrs	r2, r1
 8005bee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b004      	add	sp, #16
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d124      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2202      	movs	r2, #2
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d11d      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2203      	movs	r2, #3
 8005c24:	4252      	negs	r2, r2
 8005c26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2203      	movs	r2, #3
 8005c36:	4013      	ands	r3, r2
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f7fa ff0d 	bl	8000a5c <HAL_TIM_IC_CaptureCallback>
 8005c42:	e007      	b.n	8005c54 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	0018      	movs	r0, r3
 8005c48:	f000 f8bf 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 f8c3 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2204      	movs	r2, #4
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d125      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d11e      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	4252      	negs	r2, r2
 8005c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	23c0      	movs	r3, #192	; 0xc0
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4013      	ands	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f7fa fee0 	bl	8000a5c <HAL_TIM_IC_CaptureCallback>
 8005c9c:	e007      	b.n	8005cae <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f000 f892 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 f896 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d124      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d11d      	bne.n	8005d0c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2209      	movs	r2, #9
 8005cd6:	4252      	negs	r2, r2
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f7fa feb4 	bl	8000a5c <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e007      	b.n	8005d06 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 f866 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 f86a 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2210      	movs	r2, #16
 8005d14:	4013      	ands	r3, r2
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d125      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2210      	movs	r2, #16
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d11e      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2211      	movs	r2, #17
 8005d2e:	4252      	negs	r2, r2
 8005d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2208      	movs	r2, #8
 8005d36:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	23c0      	movs	r3, #192	; 0xc0
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4013      	ands	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fa fe87 	bl	8000a5c <HAL_TIM_IC_CaptureCallback>
 8005d4e:	e007      	b.n	8005d60 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 f839 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f000 f83d 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10f      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d108      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2202      	movs	r2, #2
 8005d88:	4252      	negs	r2, r2
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7fa fe92 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b40      	cmp	r3, #64	; 0x40
 8005da0:	d10f      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2240      	movs	r2, #64	; 0x40
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d108      	bne.n	8005dc2 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2241      	movs	r2, #65	; 0x41
 8005db6:	4252      	negs	r2, r2
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 f814 	bl	8005dea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	b002      	add	sp, #8
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b002      	add	sp, #8
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b002      	add	sp, #8
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b002      	add	sp, #8
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2239      	movs	r2, #57	; 0x39
 8005e06:	5c9b      	ldrb	r3, [r3, r2]
 8005e08:	b2db      	uxtb	r3, r3
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b002      	add	sp, #8
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2239      	movs	r2, #57	; 0x39
 8005e1e:	5c9b      	ldrb	r3, [r3, r2]
 8005e20:	b2db      	uxtb	r3, r3
}
 8005e22:	0018      	movs	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	05db      	lsls	r3, r3, #23
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0x32>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a23      	ldr	r2, [pc, #140]	; (8005ed8 <TIM_Base_SetConfig+0xac>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0x32>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a22      	ldr	r2, [pc, #136]	; (8005edc <TIM_Base_SetConfig+0xb0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0x32>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <TIM_Base_SetConfig+0xb4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2270      	movs	r2, #112	; 0x70
 8005e62:	4393      	bics	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	2380      	movs	r3, #128	; 0x80
 8005e74:	05db      	lsls	r3, r3, #23
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d00b      	beq.n	8005e92 <TIM_Base_SetConfig+0x66>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <TIM_Base_SetConfig+0xac>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d007      	beq.n	8005e92 <TIM_Base_SetConfig+0x66>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <TIM_Base_SetConfig+0xb0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d003      	beq.n	8005e92 <TIM_Base_SetConfig+0x66>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	; (8005ee0 <TIM_Base_SetConfig+0xb4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d108      	bne.n	8005ea4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <TIM_Base_SetConfig+0xb8>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	4393      	bics	r3, r2
 8005eaa:	001a      	movs	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	615a      	str	r2, [r3, #20]
}
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b004      	add	sp, #16
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40010800 	.word	0x40010800
 8005ee0:	40011400 	.word	0x40011400
 8005ee4:	fffffcff 	.word	0xfffffcff

08005ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	221f      	movs	r2, #31
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2201      	movs	r2, #1
 8005efc:	409a      	lsls	r2, r3
 8005efe:	0013      	movs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	43d2      	mvns	r2, r2
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	211f      	movs	r1, #31
 8005f18:	400b      	ands	r3, r1
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4099      	lsls	r1, r3
 8005f1e:	000b      	movs	r3, r1
 8005f20:	431a      	orrs	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b006      	add	sp, #24
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2238      	movs	r2, #56	; 0x38
 8005f3e:	5c9b      	ldrb	r3, [r3, r2]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e047      	b.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2238      	movs	r2, #56	; 0x38
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2239      	movs	r2, #57	; 0x39
 8005f54:	2102      	movs	r1, #2
 8005f56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2270      	movs	r2, #112	; 0x70
 8005f6c:	4393      	bics	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	2380      	movs	r3, #128	; 0x80
 8005f88:	05db      	lsls	r3, r3, #23
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d00e      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d009      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10c      	bne.n	8005fc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	4393      	bics	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2239      	movs	r2, #57	; 0x39
 8005fca:	2101      	movs	r1, #1
 8005fcc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2238      	movs	r2, #56	; 0x38
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b004      	add	sp, #16
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40010800 	.word	0x40010800
 8005fe8:	40011400 	.word	0x40011400

08005fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e044      	b.n	8006088 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006002:	2b00      	cmp	r3, #0
 8006004:	d107      	bne.n	8006016 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2274      	movs	r2, #116	; 0x74
 800600a:	2100      	movs	r1, #0
 800600c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	0018      	movs	r0, r3
 8006012:	f7fd fb6b 	bl	80036ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2224      	movs	r2, #36	; 0x24
 800601a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2101      	movs	r1, #1
 8006028:	438a      	bics	r2, r1
 800602a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	0018      	movs	r0, r3
 8006030:	f000 fb26 	bl	8006680 <UART_SetConfig>
 8006034:	0003      	movs	r3, r0
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e024      	b.n	8006088 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 fdb9 	bl	8006bc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	490d      	ldr	r1, [pc, #52]	; (8006090 <HAL_UART_Init+0xa4>)
 800605a:	400a      	ands	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	212a      	movs	r1, #42	; 0x2a
 800606a:	438a      	bics	r2, r1
 800606c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2101      	movs	r1, #1
 800607a:	430a      	orrs	r2, r1
 800607c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	0018      	movs	r0, r3
 8006082:	f000 fe51 	bl	8006d28 <UART_CheckIdleState>
 8006086:	0003      	movs	r3, r0
}
 8006088:	0018      	movs	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}
 8006090:	ffffb7ff 	.word	0xffffb7ff

08006094 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b0ab      	sub	sp, #172	; 0xac
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	22a4      	movs	r2, #164	; 0xa4
 80060a4:	18b9      	adds	r1, r7, r2
 80060a6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	20a0      	movs	r0, #160	; 0xa0
 80060b0:	1839      	adds	r1, r7, r0
 80060b2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	219c      	movs	r1, #156	; 0x9c
 80060bc:	1879      	adds	r1, r7, r1
 80060be:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060c0:	0011      	movs	r1, r2
 80060c2:	18bb      	adds	r3, r7, r2
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a99      	ldr	r2, [pc, #612]	; (800632c <HAL_UART_IRQHandler+0x298>)
 80060c8:	4013      	ands	r3, r2
 80060ca:	2298      	movs	r2, #152	; 0x98
 80060cc:	18bc      	adds	r4, r7, r2
 80060ce:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80060d0:	18bb      	adds	r3, r7, r2
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d114      	bne.n	8006102 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060d8:	187b      	adds	r3, r7, r1
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2220      	movs	r2, #32
 80060de:	4013      	ands	r3, r2
 80060e0:	d00f      	beq.n	8006102 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060e2:	183b      	adds	r3, r7, r0
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2220      	movs	r2, #32
 80060e8:	4013      	ands	r3, r2
 80060ea:	d00a      	beq.n	8006102 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d100      	bne.n	80060f6 <HAL_UART_IRQHandler+0x62>
 80060f4:	e298      	b.n	8006628 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	0010      	movs	r0, r2
 80060fe:	4798      	blx	r3
      }
      return;
 8006100:	e292      	b.n	8006628 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006102:	2398      	movs	r3, #152	; 0x98
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d100      	bne.n	800610e <HAL_UART_IRQHandler+0x7a>
 800610c:	e114      	b.n	8006338 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800610e:	239c      	movs	r3, #156	; 0x9c
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2201      	movs	r2, #1
 8006116:	4013      	ands	r3, r2
 8006118:	d106      	bne.n	8006128 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800611a:	23a0      	movs	r3, #160	; 0xa0
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a83      	ldr	r2, [pc, #524]	; (8006330 <HAL_UART_IRQHandler+0x29c>)
 8006122:	4013      	ands	r3, r2
 8006124:	d100      	bne.n	8006128 <HAL_UART_IRQHandler+0x94>
 8006126:	e107      	b.n	8006338 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006128:	23a4      	movs	r3, #164	; 0xa4
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	4013      	ands	r3, r2
 8006132:	d012      	beq.n	800615a <HAL_UART_IRQHandler+0xc6>
 8006134:	23a0      	movs	r3, #160	; 0xa0
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	4013      	ands	r3, r2
 8006140:	d00b      	beq.n	800615a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2280      	movs	r2, #128	; 0x80
 800614e:	589b      	ldr	r3, [r3, r2]
 8006150:	2201      	movs	r2, #1
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800615a:	23a4      	movs	r3, #164	; 0xa4
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2202      	movs	r2, #2
 8006162:	4013      	ands	r3, r2
 8006164:	d011      	beq.n	800618a <HAL_UART_IRQHandler+0xf6>
 8006166:	239c      	movs	r3, #156	; 0x9c
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2201      	movs	r2, #1
 800616e:	4013      	ands	r3, r2
 8006170:	d00b      	beq.n	800618a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2202      	movs	r2, #2
 8006178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2280      	movs	r2, #128	; 0x80
 800617e:	589b      	ldr	r3, [r3, r2]
 8006180:	2204      	movs	r2, #4
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800618a:	23a4      	movs	r3, #164	; 0xa4
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2204      	movs	r2, #4
 8006192:	4013      	ands	r3, r2
 8006194:	d011      	beq.n	80061ba <HAL_UART_IRQHandler+0x126>
 8006196:	239c      	movs	r3, #156	; 0x9c
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	4013      	ands	r3, r2
 80061a0:	d00b      	beq.n	80061ba <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2204      	movs	r2, #4
 80061a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2280      	movs	r2, #128	; 0x80
 80061ae:	589b      	ldr	r3, [r3, r2]
 80061b0:	2202      	movs	r2, #2
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061ba:	23a4      	movs	r3, #164	; 0xa4
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2208      	movs	r2, #8
 80061c2:	4013      	ands	r3, r2
 80061c4:	d017      	beq.n	80061f6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061c6:	23a0      	movs	r3, #160	; 0xa0
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2220      	movs	r2, #32
 80061ce:	4013      	ands	r3, r2
 80061d0:	d105      	bne.n	80061de <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061d2:	239c      	movs	r3, #156	; 0x9c
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2201      	movs	r2, #1
 80061da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061dc:	d00b      	beq.n	80061f6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2208      	movs	r2, #8
 80061e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	589b      	ldr	r3, [r3, r2]
 80061ec:	2208      	movs	r2, #8
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2180      	movs	r1, #128	; 0x80
 80061f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061f6:	23a4      	movs	r3, #164	; 0xa4
 80061f8:	18fb      	adds	r3, r7, r3
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	4013      	ands	r3, r2
 8006202:	d013      	beq.n	800622c <HAL_UART_IRQHandler+0x198>
 8006204:	23a0      	movs	r3, #160	; 0xa0
 8006206:	18fb      	adds	r3, r7, r3
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	04db      	lsls	r3, r3, #19
 800620e:	4013      	ands	r3, r2
 8006210:	d00c      	beq.n	800622c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2280      	movs	r2, #128	; 0x80
 8006218:	0112      	lsls	r2, r2, #4
 800621a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2280      	movs	r2, #128	; 0x80
 8006220:	589b      	ldr	r3, [r3, r2]
 8006222:	2220      	movs	r2, #32
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2180      	movs	r1, #128	; 0x80
 800622a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2280      	movs	r2, #128	; 0x80
 8006230:	589b      	ldr	r3, [r3, r2]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d100      	bne.n	8006238 <HAL_UART_IRQHandler+0x1a4>
 8006236:	e1f9      	b.n	800662c <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006238:	23a4      	movs	r3, #164	; 0xa4
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2220      	movs	r2, #32
 8006240:	4013      	ands	r3, r2
 8006242:	d00e      	beq.n	8006262 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006244:	23a0      	movs	r3, #160	; 0xa0
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2220      	movs	r2, #32
 800624c:	4013      	ands	r3, r2
 800624e:	d008      	beq.n	8006262 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006254:	2b00      	cmp	r3, #0
 8006256:	d004      	beq.n	8006262 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	0010      	movs	r0, r2
 8006260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2280      	movs	r2, #128	; 0x80
 8006266:	589b      	ldr	r3, [r3, r2]
 8006268:	2194      	movs	r1, #148	; 0x94
 800626a:	187a      	adds	r2, r7, r1
 800626c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2240      	movs	r2, #64	; 0x40
 8006276:	4013      	ands	r3, r2
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d004      	beq.n	8006286 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800627c:	187b      	adds	r3, r7, r1
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2228      	movs	r2, #40	; 0x28
 8006282:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006284:	d047      	beq.n	8006316 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	0018      	movs	r0, r3
 800628a:	f000 fe59 	bl	8006f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2240      	movs	r2, #64	; 0x40
 8006296:	4013      	ands	r3, r2
 8006298:	2b40      	cmp	r3, #64	; 0x40
 800629a:	d137      	bne.n	800630c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629c:	f3ef 8310 	mrs	r3, PRIMASK
 80062a0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80062a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a4:	2090      	movs	r0, #144	; 0x90
 80062a6:	183a      	adds	r2, r7, r0
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	2301      	movs	r3, #1
 80062ac:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2140      	movs	r1, #64	; 0x40
 80062c2:	438a      	bics	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]
 80062c6:	183b      	adds	r3, r7, r0
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062ce:	f383 8810 	msr	PRIMASK, r3
}
 80062d2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d012      	beq.n	8006302 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	4a14      	ldr	r2, [pc, #80]	; (8006334 <HAL_UART_IRQHandler+0x2a0>)
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e8:	0018      	movs	r0, r3
 80062ea:	f7fd fc27 	bl	8003b3c <HAL_DMA_Abort_IT>
 80062ee:	1e03      	subs	r3, r0, #0
 80062f0:	d01a      	beq.n	8006328 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	0018      	movs	r0, r3
 80062fe:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	e012      	b.n	8006328 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0018      	movs	r0, r3
 8006306:	f000 f9a7 	bl	8006658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630a:	e00d      	b.n	8006328 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	0018      	movs	r0, r3
 8006310:	f000 f9a2 	bl	8006658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006314:	e008      	b.n	8006328 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	0018      	movs	r0, r3
 800631a:	f000 f99d 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2280      	movs	r2, #128	; 0x80
 8006322:	2100      	movs	r1, #0
 8006324:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006326:	e181      	b.n	800662c <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	46c0      	nop			; (mov r8, r8)
    return;
 800632a:	e17f      	b.n	800662c <HAL_UART_IRQHandler+0x598>
 800632c:	0000080f 	.word	0x0000080f
 8006330:	04000120 	.word	0x04000120
 8006334:	08007005 	.word	0x08007005

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633c:	2b01      	cmp	r3, #1
 800633e:	d000      	beq.n	8006342 <HAL_UART_IRQHandler+0x2ae>
 8006340:	e133      	b.n	80065aa <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006342:	23a4      	movs	r3, #164	; 0xa4
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2210      	movs	r2, #16
 800634a:	4013      	ands	r3, r2
 800634c:	d100      	bne.n	8006350 <HAL_UART_IRQHandler+0x2bc>
 800634e:	e12c      	b.n	80065aa <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006350:	23a0      	movs	r3, #160	; 0xa0
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2210      	movs	r2, #16
 8006358:	4013      	ands	r3, r2
 800635a:	d100      	bne.n	800635e <HAL_UART_IRQHandler+0x2ca>
 800635c:	e125      	b.n	80065aa <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2210      	movs	r2, #16
 8006364:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2240      	movs	r2, #64	; 0x40
 800636e:	4013      	ands	r3, r2
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d000      	beq.n	8006376 <HAL_UART_IRQHandler+0x2e2>
 8006374:	e09d      	b.n	80064b2 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	217e      	movs	r1, #126	; 0x7e
 8006380:	187b      	adds	r3, r7, r1
 8006382:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006384:	187b      	adds	r3, r7, r1
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d100      	bne.n	800638e <HAL_UART_IRQHandler+0x2fa>
 800638c:	e150      	b.n	8006630 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2258      	movs	r2, #88	; 0x58
 8006392:	5a9b      	ldrh	r3, [r3, r2]
 8006394:	187a      	adds	r2, r7, r1
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d300      	bcc.n	800639e <HAL_UART_IRQHandler+0x30a>
 800639c:	e148      	b.n	8006630 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	187a      	adds	r2, r7, r1
 80063a2:	215a      	movs	r1, #90	; 0x5a
 80063a4:	8812      	ldrh	r2, [r2, #0]
 80063a6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2220      	movs	r2, #32
 80063b2:	4013      	ands	r3, r2
 80063b4:	d16e      	bne.n	8006494 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063be:	67bb      	str	r3, [r7, #120]	; 0x78
 80063c0:	2301      	movs	r3, #1
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	499a      	ldr	r1, [pc, #616]	; (8006640 <HAL_UART_IRQHandler+0x5ac>)
 80063d8:	400a      	ands	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f383 8810 	msr	PRIMASK, r3
}
 80063e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e8:	f3ef 8310 	mrs	r3, PRIMASK
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80063ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f0:	677b      	str	r3, [r7, #116]	; 0x74
 80063f2:	2301      	movs	r3, #1
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2101      	movs	r1, #1
 800640a:	438a      	bics	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006414:	f383 8810 	msr	PRIMASK, r3
}
 8006418:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641a:	f3ef 8310 	mrs	r3, PRIMASK
 800641e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006420:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006422:	673b      	str	r3, [r7, #112]	; 0x70
 8006424:	2301      	movs	r3, #1
 8006426:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800642a:	f383 8810 	msr	PRIMASK, r3
}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2140      	movs	r1, #64	; 0x40
 800643c:	438a      	bics	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
 8006440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006442:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006446:	f383 8810 	msr	PRIMASK, r3
}
 800644a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006458:	f3ef 8310 	mrs	r3, PRIMASK
 800645c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800645e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006462:	2301      	movs	r3, #1
 8006464:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006468:	f383 8810 	msr	PRIMASK, r3
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2110      	movs	r1, #16
 800647a:	438a      	bics	r2, r1
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006480:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006484:	f383 8810 	msr	PRIMASK, r3
}
 8006488:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	0018      	movs	r0, r3
 8006490:	f7fd fb14 	bl	8003abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2258      	movs	r2, #88	; 0x58
 8006498:	5a9a      	ldrh	r2, [r3, r2]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	215a      	movs	r1, #90	; 0x5a
 800649e:	5a5b      	ldrh	r3, [r3, r1]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0011      	movs	r1, r2
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 f8dc 	bl	8006668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064b0:	e0be      	b.n	8006630 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2258      	movs	r2, #88	; 0x58
 80064b6:	5a99      	ldrh	r1, [r3, r2]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	225a      	movs	r2, #90	; 0x5a
 80064bc:	5a9b      	ldrh	r3, [r3, r2]
 80064be:	b29a      	uxth	r2, r3
 80064c0:	208e      	movs	r0, #142	; 0x8e
 80064c2:	183b      	adds	r3, r7, r0
 80064c4:	1a8a      	subs	r2, r1, r2
 80064c6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	225a      	movs	r2, #90	; 0x5a
 80064cc:	5a9b      	ldrh	r3, [r3, r2]
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d100      	bne.n	80064d6 <HAL_UART_IRQHandler+0x442>
 80064d4:	e0ae      	b.n	8006634 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80064d6:	183b      	adds	r3, r7, r0
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d100      	bne.n	80064e0 <HAL_UART_IRQHandler+0x44c>
 80064de:	e0a9      	b.n	8006634 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e0:	f3ef 8310 	mrs	r3, PRIMASK
 80064e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064e6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064e8:	2488      	movs	r4, #136	; 0x88
 80064ea:	193a      	adds	r2, r7, r4
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	2301      	movs	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f383 8810 	msr	PRIMASK, r3
}
 80064f8:	46c0      	nop			; (mov r8, r8)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	494f      	ldr	r1, [pc, #316]	; (8006644 <HAL_UART_IRQHandler+0x5b0>)
 8006506:	400a      	ands	r2, r1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	193b      	adds	r3, r7, r4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f383 8810 	msr	PRIMASK, r3
}
 8006516:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	61bb      	str	r3, [r7, #24]
  return(result);
 800651e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	2484      	movs	r4, #132	; 0x84
 8006522:	193a      	adds	r2, r7, r4
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	2301      	movs	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2101      	movs	r1, #1
 800653e:	438a      	bics	r2, r1
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	193b      	adds	r3, r7, r4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006562:	f3ef 8310 	mrs	r3, PRIMASK
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656a:	2480      	movs	r4, #128	; 0x80
 800656c:	193a      	adds	r2, r7, r4
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	2301      	movs	r3, #1
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2110      	movs	r1, #16
 8006588:	438a      	bics	r2, r1
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	193b      	adds	r3, r7, r4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800659a:	183b      	adds	r3, r7, r0
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	0011      	movs	r1, r2
 80065a2:	0018      	movs	r0, r3
 80065a4:	f000 f860 	bl	8006668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065a8:	e044      	b.n	8006634 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065aa:	23a4      	movs	r3, #164	; 0xa4
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	2380      	movs	r3, #128	; 0x80
 80065b2:	035b      	lsls	r3, r3, #13
 80065b4:	4013      	ands	r3, r2
 80065b6:	d010      	beq.n	80065da <HAL_UART_IRQHandler+0x546>
 80065b8:	239c      	movs	r3, #156	; 0x9c
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	2380      	movs	r3, #128	; 0x80
 80065c0:	03db      	lsls	r3, r3, #15
 80065c2:	4013      	ands	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2280      	movs	r2, #128	; 0x80
 80065cc:	0352      	lsls	r2, r2, #13
 80065ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 fd58 	bl	8007088 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065d8:	e02f      	b.n	800663a <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065da:	23a4      	movs	r3, #164	; 0xa4
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2280      	movs	r2, #128	; 0x80
 80065e2:	4013      	ands	r3, r2
 80065e4:	d00f      	beq.n	8006606 <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065e6:	23a0      	movs	r3, #160	; 0xa0
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2280      	movs	r2, #128	; 0x80
 80065ee:	4013      	ands	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01e      	beq.n	8006638 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	0010      	movs	r0, r2
 8006602:	4798      	blx	r3
    }
    return;
 8006604:	e018      	b.n	8006638 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006606:	23a4      	movs	r3, #164	; 0xa4
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2240      	movs	r2, #64	; 0x40
 800660e:	4013      	ands	r3, r2
 8006610:	d013      	beq.n	800663a <HAL_UART_IRQHandler+0x5a6>
 8006612:	23a0      	movs	r3, #160	; 0xa0
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	4013      	ands	r3, r2
 800661c:	d00d      	beq.n	800663a <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0018      	movs	r0, r3
 8006622:	f000 fd06 	bl	8007032 <UART_EndTransmit_IT>
    return;
 8006626:	e008      	b.n	800663a <HAL_UART_IRQHandler+0x5a6>
      return;
 8006628:	46c0      	nop			; (mov r8, r8)
 800662a:	e006      	b.n	800663a <HAL_UART_IRQHandler+0x5a6>
    return;
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	e004      	b.n	800663a <HAL_UART_IRQHandler+0x5a6>
      return;
 8006630:	46c0      	nop			; (mov r8, r8)
 8006632:	e002      	b.n	800663a <HAL_UART_IRQHandler+0x5a6>
      return;
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	e000      	b.n	800663a <HAL_UART_IRQHandler+0x5a6>
    return;
 8006638:	46c0      	nop			; (mov r8, r8)
  }

}
 800663a:	46bd      	mov	sp, r7
 800663c:	b02b      	add	sp, #172	; 0xac
 800663e:	bd90      	pop	{r4, r7, pc}
 8006640:	fffffeff 	.word	0xfffffeff
 8006644:	fffffedf 	.word	0xfffffedf

08006648 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006650:	46c0      	nop			; (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b002      	add	sp, #8
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	000a      	movs	r2, r1
 8006672:	1cbb      	adds	r3, r7, #2
 8006674:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	46bd      	mov	sp, r7
 800667a:	b002      	add	sp, #8
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006680:	b5b0      	push	{r4, r5, r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af00      	add	r7, sp, #0
 8006686:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006688:	231a      	movs	r3, #26
 800668a:	2218      	movs	r2, #24
 800668c:	189b      	adds	r3, r3, r2
 800668e:	19db      	adds	r3, r3, r7
 8006690:	2200      	movs	r2, #0
 8006692:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	431a      	orrs	r2, r3
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4ac3      	ldr	r2, [pc, #780]	; (80069c0 <UART_SetConfig+0x340>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	0019      	movs	r1, r3
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066be:	430a      	orrs	r2, r1
 80066c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4abe      	ldr	r2, [pc, #760]	; (80069c4 <UART_SetConfig+0x344>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	0019      	movs	r1, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4ab8      	ldr	r2, [pc, #736]	; (80069c8 <UART_SetConfig+0x348>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d004      	beq.n	80066f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066f0:	4313      	orrs	r3, r2
 80066f2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	4ab4      	ldr	r2, [pc, #720]	; (80069cc <UART_SetConfig+0x34c>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	0019      	movs	r1, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4ab0      	ldr	r2, [pc, #704]	; (80069d0 <UART_SetConfig+0x350>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d131      	bne.n	8006778 <UART_SetConfig+0xf8>
 8006714:	4baf      	ldr	r3, [pc, #700]	; (80069d4 <UART_SetConfig+0x354>)
 8006716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006718:	2203      	movs	r2, #3
 800671a:	4013      	ands	r3, r2
 800671c:	2b03      	cmp	r3, #3
 800671e:	d01d      	beq.n	800675c <UART_SetConfig+0xdc>
 8006720:	d823      	bhi.n	800676a <UART_SetConfig+0xea>
 8006722:	2b02      	cmp	r3, #2
 8006724:	d00c      	beq.n	8006740 <UART_SetConfig+0xc0>
 8006726:	d820      	bhi.n	800676a <UART_SetConfig+0xea>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <UART_SetConfig+0xb2>
 800672c:	2b01      	cmp	r3, #1
 800672e:	d00e      	beq.n	800674e <UART_SetConfig+0xce>
 8006730:	e01b      	b.n	800676a <UART_SetConfig+0xea>
 8006732:	231b      	movs	r3, #27
 8006734:	2218      	movs	r2, #24
 8006736:	189b      	adds	r3, r3, r2
 8006738:	19db      	adds	r3, r3, r7
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	e0b4      	b.n	80068aa <UART_SetConfig+0x22a>
 8006740:	231b      	movs	r3, #27
 8006742:	2218      	movs	r2, #24
 8006744:	189b      	adds	r3, r3, r2
 8006746:	19db      	adds	r3, r3, r7
 8006748:	2202      	movs	r2, #2
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e0ad      	b.n	80068aa <UART_SetConfig+0x22a>
 800674e:	231b      	movs	r3, #27
 8006750:	2218      	movs	r2, #24
 8006752:	189b      	adds	r3, r3, r2
 8006754:	19db      	adds	r3, r3, r7
 8006756:	2204      	movs	r2, #4
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e0a6      	b.n	80068aa <UART_SetConfig+0x22a>
 800675c:	231b      	movs	r3, #27
 800675e:	2218      	movs	r2, #24
 8006760:	189b      	adds	r3, r3, r2
 8006762:	19db      	adds	r3, r3, r7
 8006764:	2208      	movs	r2, #8
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	e09f      	b.n	80068aa <UART_SetConfig+0x22a>
 800676a:	231b      	movs	r3, #27
 800676c:	2218      	movs	r2, #24
 800676e:	189b      	adds	r3, r3, r2
 8006770:	19db      	adds	r3, r3, r7
 8006772:	2210      	movs	r2, #16
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e098      	b.n	80068aa <UART_SetConfig+0x22a>
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a96      	ldr	r2, [pc, #600]	; (80069d8 <UART_SetConfig+0x358>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d131      	bne.n	80067e6 <UART_SetConfig+0x166>
 8006782:	4b94      	ldr	r3, [pc, #592]	; (80069d4 <UART_SetConfig+0x354>)
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	220c      	movs	r2, #12
 8006788:	4013      	ands	r3, r2
 800678a:	2b0c      	cmp	r3, #12
 800678c:	d01d      	beq.n	80067ca <UART_SetConfig+0x14a>
 800678e:	d823      	bhi.n	80067d8 <UART_SetConfig+0x158>
 8006790:	2b08      	cmp	r3, #8
 8006792:	d00c      	beq.n	80067ae <UART_SetConfig+0x12e>
 8006794:	d820      	bhi.n	80067d8 <UART_SetConfig+0x158>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <UART_SetConfig+0x120>
 800679a:	2b04      	cmp	r3, #4
 800679c:	d00e      	beq.n	80067bc <UART_SetConfig+0x13c>
 800679e:	e01b      	b.n	80067d8 <UART_SetConfig+0x158>
 80067a0:	231b      	movs	r3, #27
 80067a2:	2218      	movs	r2, #24
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	19db      	adds	r3, r3, r7
 80067a8:	2200      	movs	r2, #0
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e07d      	b.n	80068aa <UART_SetConfig+0x22a>
 80067ae:	231b      	movs	r3, #27
 80067b0:	2218      	movs	r2, #24
 80067b2:	189b      	adds	r3, r3, r2
 80067b4:	19db      	adds	r3, r3, r7
 80067b6:	2202      	movs	r2, #2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	e076      	b.n	80068aa <UART_SetConfig+0x22a>
 80067bc:	231b      	movs	r3, #27
 80067be:	2218      	movs	r2, #24
 80067c0:	189b      	adds	r3, r3, r2
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	2204      	movs	r2, #4
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e06f      	b.n	80068aa <UART_SetConfig+0x22a>
 80067ca:	231b      	movs	r3, #27
 80067cc:	2218      	movs	r2, #24
 80067ce:	189b      	adds	r3, r3, r2
 80067d0:	19db      	adds	r3, r3, r7
 80067d2:	2208      	movs	r2, #8
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	e068      	b.n	80068aa <UART_SetConfig+0x22a>
 80067d8:	231b      	movs	r3, #27
 80067da:	2218      	movs	r2, #24
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	19db      	adds	r3, r3, r7
 80067e0:	2210      	movs	r2, #16
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	e061      	b.n	80068aa <UART_SetConfig+0x22a>
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a7c      	ldr	r2, [pc, #496]	; (80069dc <UART_SetConfig+0x35c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d106      	bne.n	80067fe <UART_SetConfig+0x17e>
 80067f0:	231b      	movs	r3, #27
 80067f2:	2218      	movs	r2, #24
 80067f4:	189b      	adds	r3, r3, r2
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	e055      	b.n	80068aa <UART_SetConfig+0x22a>
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a77      	ldr	r2, [pc, #476]	; (80069e0 <UART_SetConfig+0x360>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d106      	bne.n	8006816 <UART_SetConfig+0x196>
 8006808:	231b      	movs	r3, #27
 800680a:	2218      	movs	r2, #24
 800680c:	189b      	adds	r3, r3, r2
 800680e:	19db      	adds	r3, r3, r7
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e049      	b.n	80068aa <UART_SetConfig+0x22a>
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6b      	ldr	r2, [pc, #428]	; (80069c8 <UART_SetConfig+0x348>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d13e      	bne.n	800689e <UART_SetConfig+0x21e>
 8006820:	4b6c      	ldr	r3, [pc, #432]	; (80069d4 <UART_SetConfig+0x354>)
 8006822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006824:	23c0      	movs	r3, #192	; 0xc0
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	4013      	ands	r3, r2
 800682a:	22c0      	movs	r2, #192	; 0xc0
 800682c:	0112      	lsls	r2, r2, #4
 800682e:	4293      	cmp	r3, r2
 8006830:	d027      	beq.n	8006882 <UART_SetConfig+0x202>
 8006832:	22c0      	movs	r2, #192	; 0xc0
 8006834:	0112      	lsls	r2, r2, #4
 8006836:	4293      	cmp	r3, r2
 8006838:	d82a      	bhi.n	8006890 <UART_SetConfig+0x210>
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	0112      	lsls	r2, r2, #4
 800683e:	4293      	cmp	r3, r2
 8006840:	d011      	beq.n	8006866 <UART_SetConfig+0x1e6>
 8006842:	2280      	movs	r2, #128	; 0x80
 8006844:	0112      	lsls	r2, r2, #4
 8006846:	4293      	cmp	r3, r2
 8006848:	d822      	bhi.n	8006890 <UART_SetConfig+0x210>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <UART_SetConfig+0x1d8>
 800684e:	2280      	movs	r2, #128	; 0x80
 8006850:	00d2      	lsls	r2, r2, #3
 8006852:	4293      	cmp	r3, r2
 8006854:	d00e      	beq.n	8006874 <UART_SetConfig+0x1f4>
 8006856:	e01b      	b.n	8006890 <UART_SetConfig+0x210>
 8006858:	231b      	movs	r3, #27
 800685a:	2218      	movs	r2, #24
 800685c:	189b      	adds	r3, r3, r2
 800685e:	19db      	adds	r3, r3, r7
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	e021      	b.n	80068aa <UART_SetConfig+0x22a>
 8006866:	231b      	movs	r3, #27
 8006868:	2218      	movs	r2, #24
 800686a:	189b      	adds	r3, r3, r2
 800686c:	19db      	adds	r3, r3, r7
 800686e:	2202      	movs	r2, #2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e01a      	b.n	80068aa <UART_SetConfig+0x22a>
 8006874:	231b      	movs	r3, #27
 8006876:	2218      	movs	r2, #24
 8006878:	189b      	adds	r3, r3, r2
 800687a:	19db      	adds	r3, r3, r7
 800687c:	2204      	movs	r2, #4
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e013      	b.n	80068aa <UART_SetConfig+0x22a>
 8006882:	231b      	movs	r3, #27
 8006884:	2218      	movs	r2, #24
 8006886:	189b      	adds	r3, r3, r2
 8006888:	19db      	adds	r3, r3, r7
 800688a:	2208      	movs	r2, #8
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e00c      	b.n	80068aa <UART_SetConfig+0x22a>
 8006890:	231b      	movs	r3, #27
 8006892:	2218      	movs	r2, #24
 8006894:	189b      	adds	r3, r3, r2
 8006896:	19db      	adds	r3, r3, r7
 8006898:	2210      	movs	r2, #16
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e005      	b.n	80068aa <UART_SetConfig+0x22a>
 800689e:	231b      	movs	r3, #27
 80068a0:	2218      	movs	r2, #24
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	19db      	adds	r3, r3, r7
 80068a6:	2210      	movs	r2, #16
 80068a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a46      	ldr	r2, [pc, #280]	; (80069c8 <UART_SetConfig+0x348>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d000      	beq.n	80068b6 <UART_SetConfig+0x236>
 80068b4:	e09a      	b.n	80069ec <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068b6:	231b      	movs	r3, #27
 80068b8:	2218      	movs	r2, #24
 80068ba:	189b      	adds	r3, r3, r2
 80068bc:	19db      	adds	r3, r3, r7
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d01d      	beq.n	8006900 <UART_SetConfig+0x280>
 80068c4:	dc20      	bgt.n	8006908 <UART_SetConfig+0x288>
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d015      	beq.n	80068f6 <UART_SetConfig+0x276>
 80068ca:	dc1d      	bgt.n	8006908 <UART_SetConfig+0x288>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <UART_SetConfig+0x256>
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d005      	beq.n	80068e0 <UART_SetConfig+0x260>
 80068d4:	e018      	b.n	8006908 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d6:	f7fe fde7 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 80068da:	0003      	movs	r3, r0
 80068dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068de:	e01c      	b.n	800691a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e0:	4b3c      	ldr	r3, [pc, #240]	; (80069d4 <UART_SetConfig+0x354>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2210      	movs	r2, #16
 80068e6:	4013      	ands	r3, r2
 80068e8:	d002      	beq.n	80068f0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80068ea:	4b3e      	ldr	r3, [pc, #248]	; (80069e4 <UART_SetConfig+0x364>)
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068ee:	e014      	b.n	800691a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80068f0:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <UART_SetConfig+0x368>)
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068f4:	e011      	b.n	800691a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068f6:	f7fe fd27 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 80068fa:	0003      	movs	r3, r0
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068fe:	e00c      	b.n	800691a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006906:	e008      	b.n	800691a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800690c:	231a      	movs	r3, #26
 800690e:	2218      	movs	r2, #24
 8006910:	189b      	adds	r3, r3, r2
 8006912:	19db      	adds	r3, r3, r7
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
        break;
 8006918:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d100      	bne.n	8006922 <UART_SetConfig+0x2a2>
 8006920:	e134      	b.n	8006b8c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	0013      	movs	r3, r2
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	189b      	adds	r3, r3, r2
 800692c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d305      	bcc.n	800693e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800693a:	429a      	cmp	r2, r3
 800693c:	d906      	bls.n	800694c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800693e:	231a      	movs	r3, #26
 8006940:	2218      	movs	r2, #24
 8006942:	189b      	adds	r3, r3, r2
 8006944:	19db      	adds	r3, r3, r7
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e11f      	b.n	8006b8c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	6939      	ldr	r1, [r7, #16]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	000b      	movs	r3, r1
 800695a:	0e1b      	lsrs	r3, r3, #24
 800695c:	0010      	movs	r0, r2
 800695e:	0205      	lsls	r5, r0, #8
 8006960:	431d      	orrs	r5, r3
 8006962:	000b      	movs	r3, r1
 8006964:	021c      	lsls	r4, r3, #8
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	68b8      	ldr	r0, [r7, #8]
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	1900      	adds	r0, r0, r4
 8006978:	4169      	adcs	r1, r5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	607b      	str	r3, [r7, #4]
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f7f9 fd3e 	bl	8000408 <__aeabi_uldivmod>
 800698c:	0002      	movs	r2, r0
 800698e:	000b      	movs	r3, r1
 8006990:	0013      	movs	r3, r2
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006996:	23c0      	movs	r3, #192	; 0xc0
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	429a      	cmp	r2, r3
 800699c:	d309      	bcc.n	80069b2 <UART_SetConfig+0x332>
 800699e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	035b      	lsls	r3, r3, #13
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d204      	bcs.n	80069b2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ae:	60da      	str	r2, [r3, #12]
 80069b0:	e0ec      	b.n	8006b8c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80069b2:	231a      	movs	r3, #26
 80069b4:	2218      	movs	r2, #24
 80069b6:	189b      	adds	r3, r3, r2
 80069b8:	19db      	adds	r3, r3, r7
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e0e5      	b.n	8006b8c <UART_SetConfig+0x50c>
 80069c0:	efff69f3 	.word	0xefff69f3
 80069c4:	ffffcfff 	.word	0xffffcfff
 80069c8:	40004800 	.word	0x40004800
 80069cc:	fffff4ff 	.word	0xfffff4ff
 80069d0:	40013800 	.word	0x40013800
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40004400 	.word	0x40004400
 80069dc:	40004c00 	.word	0x40004c00
 80069e0:	40005000 	.word	0x40005000
 80069e4:	003d0900 	.word	0x003d0900
 80069e8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	2380      	movs	r3, #128	; 0x80
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d000      	beq.n	80069fa <UART_SetConfig+0x37a>
 80069f8:	e071      	b.n	8006ade <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80069fa:	231b      	movs	r3, #27
 80069fc:	2218      	movs	r2, #24
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	19db      	adds	r3, r3, r7
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d822      	bhi.n	8006a4e <UART_SetConfig+0x3ce>
 8006a08:	009a      	lsls	r2, r3, #2
 8006a0a:	4b68      	ldr	r3, [pc, #416]	; (8006bac <UART_SetConfig+0x52c>)
 8006a0c:	18d3      	adds	r3, r2, r3
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a12:	f7fe fd49 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 8006a16:	0003      	movs	r3, r0
 8006a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a1a:	e021      	b.n	8006a60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a1c:	f7fe fd5a 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 8006a20:	0003      	movs	r3, r0
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a24:	e01c      	b.n	8006a60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a26:	4b62      	ldr	r3, [pc, #392]	; (8006bb0 <UART_SetConfig+0x530>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d002      	beq.n	8006a36 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a30:	4b60      	ldr	r3, [pc, #384]	; (8006bb4 <UART_SetConfig+0x534>)
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a34:	e014      	b.n	8006a60 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006a36:	4b60      	ldr	r3, [pc, #384]	; (8006bb8 <UART_SetConfig+0x538>)
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a3a:	e011      	b.n	8006a60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3c:	f7fe fc84 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8006a40:	0003      	movs	r3, r0
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a44:	e00c      	b.n	8006a60 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a4c:	e008      	b.n	8006a60 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006a52:	231a      	movs	r3, #26
 8006a54:	2218      	movs	r2, #24
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
        break;
 8006a5e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d100      	bne.n	8006a68 <UART_SetConfig+0x3e8>
 8006a66:	e091      	b.n	8006b8c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	005a      	lsls	r2, r3, #1
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	18d2      	adds	r2, r2, r3
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	0019      	movs	r1, r3
 8006a7a:	0010      	movs	r0, r2
 8006a7c:	f7f9 fb4e 	bl	800011c <__udivsi3>
 8006a80:	0003      	movs	r3, r0
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	2b0f      	cmp	r3, #15
 8006a8a:	d921      	bls.n	8006ad0 <UART_SetConfig+0x450>
 8006a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	025b      	lsls	r3, r3, #9
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d21c      	bcs.n	8006ad0 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	200e      	movs	r0, #14
 8006a9c:	2418      	movs	r4, #24
 8006a9e:	1903      	adds	r3, r0, r4
 8006aa0:	19db      	adds	r3, r3, r7
 8006aa2:	210f      	movs	r1, #15
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2207      	movs	r2, #7
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	b299      	uxth	r1, r3
 8006ab4:	1903      	adds	r3, r0, r4
 8006ab6:	19db      	adds	r3, r3, r7
 8006ab8:	1902      	adds	r2, r0, r4
 8006aba:	19d2      	adds	r2, r2, r7
 8006abc:	8812      	ldrh	r2, [r2, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	1902      	adds	r2, r0, r4
 8006ac8:	19d2      	adds	r2, r2, r7
 8006aca:	8812      	ldrh	r2, [r2, #0]
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	e05d      	b.n	8006b8c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad0:	231a      	movs	r3, #26
 8006ad2:	2218      	movs	r2, #24
 8006ad4:	189b      	adds	r3, r3, r2
 8006ad6:	19db      	adds	r3, r3, r7
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
 8006adc:	e056      	b.n	8006b8c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ade:	231b      	movs	r3, #27
 8006ae0:	2218      	movs	r2, #24
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	19db      	adds	r3, r3, r7
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d822      	bhi.n	8006b32 <UART_SetConfig+0x4b2>
 8006aec:	009a      	lsls	r2, r3, #2
 8006aee:	4b33      	ldr	r3, [pc, #204]	; (8006bbc <UART_SetConfig+0x53c>)
 8006af0:	18d3      	adds	r3, r2, r3
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af6:	f7fe fcd7 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 8006afa:	0003      	movs	r3, r0
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006afe:	e021      	b.n	8006b44 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b00:	f7fe fce8 	bl	80054d4 <HAL_RCC_GetPCLK2Freq>
 8006b04:	0003      	movs	r3, r0
 8006b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b08:	e01c      	b.n	8006b44 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b0a:	4b29      	ldr	r3, [pc, #164]	; (8006bb0 <UART_SetConfig+0x530>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2210      	movs	r2, #16
 8006b10:	4013      	ands	r3, r2
 8006b12:	d002      	beq.n	8006b1a <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b14:	4b27      	ldr	r3, [pc, #156]	; (8006bb4 <UART_SetConfig+0x534>)
 8006b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b18:	e014      	b.n	8006b44 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8006b1a:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <UART_SetConfig+0x538>)
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b1e:	e011      	b.n	8006b44 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b20:	f7fe fc12 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8006b24:	0003      	movs	r3, r0
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b28:	e00c      	b.n	8006b44 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	2380      	movs	r3, #128	; 0x80
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006b30:	e008      	b.n	8006b44 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006b36:	231a      	movs	r3, #26
 8006b38:	2218      	movs	r2, #24
 8006b3a:	189b      	adds	r3, r3, r2
 8006b3c:	19db      	adds	r3, r3, r7
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
        break;
 8006b42:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d020      	beq.n	8006b8c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	085a      	lsrs	r2, r3, #1
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	18d2      	adds	r2, r2, r3
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	0019      	movs	r1, r3
 8006b5a:	0010      	movs	r0, r2
 8006b5c:	f7f9 fade 	bl	800011c <__udivsi3>
 8006b60:	0003      	movs	r3, r0
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	2b0f      	cmp	r3, #15
 8006b6a:	d909      	bls.n	8006b80 <UART_SetConfig+0x500>
 8006b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	025b      	lsls	r3, r3, #9
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d204      	bcs.n	8006b80 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b7c:	60da      	str	r2, [r3, #12]
 8006b7e:	e005      	b.n	8006b8c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b80:	231a      	movs	r3, #26
 8006b82:	2218      	movs	r2, #24
 8006b84:	189b      	adds	r3, r3, r2
 8006b86:	19db      	adds	r3, r3, r7
 8006b88:	2201      	movs	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2200      	movs	r2, #0
 8006b96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b98:	231a      	movs	r3, #26
 8006b9a:	2218      	movs	r2, #24
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	19db      	adds	r3, r3, r7
 8006ba0:	781b      	ldrb	r3, [r3, #0]
}
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b00e      	add	sp, #56	; 0x38
 8006ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	0800a668 	.word	0x0800a668
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	003d0900 	.word	0x003d0900
 8006bb8:	00f42400 	.word	0x00f42400
 8006bbc:	0800a68c 	.word	0x0800a68c

08006bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2201      	movs	r2, #1
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4a4a      	ldr	r2, [pc, #296]	; (8006d04 <UART_AdvFeatureConfig+0x144>)
 8006bda:	4013      	ands	r3, r2
 8006bdc:	0019      	movs	r1, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	2202      	movs	r2, #2
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4a43      	ldr	r2, [pc, #268]	; (8006d08 <UART_AdvFeatureConfig+0x148>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	0019      	movs	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	2204      	movs	r2, #4
 8006c12:	4013      	ands	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4a3b      	ldr	r2, [pc, #236]	; (8006d0c <UART_AdvFeatureConfig+0x14c>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	0019      	movs	r1, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	2208      	movs	r2, #8
 8006c34:	4013      	ands	r3, r2
 8006c36:	d00b      	beq.n	8006c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4a34      	ldr	r2, [pc, #208]	; (8006d10 <UART_AdvFeatureConfig+0x150>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	0019      	movs	r1, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2210      	movs	r2, #16
 8006c56:	4013      	ands	r3, r2
 8006c58:	d00b      	beq.n	8006c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <UART_AdvFeatureConfig+0x154>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	0019      	movs	r1, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2220      	movs	r2, #32
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d00b      	beq.n	8006c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	4a25      	ldr	r2, [pc, #148]	; (8006d18 <UART_AdvFeatureConfig+0x158>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2240      	movs	r2, #64	; 0x40
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d01d      	beq.n	8006cda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <UART_AdvFeatureConfig+0x15c>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	0019      	movs	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	035b      	lsls	r3, r3, #13
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d10b      	bne.n	8006cda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <UART_AdvFeatureConfig+0x160>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	0019      	movs	r1, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2280      	movs	r2, #128	; 0x80
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d00b      	beq.n	8006cfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <UART_AdvFeatureConfig+0x164>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	0019      	movs	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }
}
 8006cfc:	46c0      	nop			; (mov r8, r8)
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b002      	add	sp, #8
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	fffdffff 	.word	0xfffdffff
 8006d08:	fffeffff 	.word	0xfffeffff
 8006d0c:	fffbffff 	.word	0xfffbffff
 8006d10:	ffff7fff 	.word	0xffff7fff
 8006d14:	ffffefff 	.word	0xffffefff
 8006d18:	ffffdfff 	.word	0xffffdfff
 8006d1c:	ffefffff 	.word	0xffefffff
 8006d20:	ff9fffff 	.word	0xff9fffff
 8006d24:	fff7ffff 	.word	0xfff7ffff

08006d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2280      	movs	r2, #128	; 0x80
 8006d34:	2100      	movs	r1, #0
 8006d36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d38:	f7fc fdb4 	bl	80038a4 <HAL_GetTick>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2208      	movs	r2, #8
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d10c      	bne.n	8006d68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2280      	movs	r2, #128	; 0x80
 8006d52:	0391      	lsls	r1, r2, #14
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4a17      	ldr	r2, [pc, #92]	; (8006db4 <UART_CheckIdleState+0x8c>)
 8006d58:	9200      	str	r2, [sp, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f000 f82c 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006d60:	1e03      	subs	r3, r0, #0
 8006d62:	d001      	beq.n	8006d68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e021      	b.n	8006dac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2204      	movs	r2, #4
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d10c      	bne.n	8006d90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2280      	movs	r2, #128	; 0x80
 8006d7a:	03d1      	lsls	r1, r2, #15
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <UART_CheckIdleState+0x8c>)
 8006d80:	9200      	str	r2, [sp, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f000 f818 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006d88:	1e03      	subs	r3, r0, #0
 8006d8a:	d001      	beq.n	8006d90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e00d      	b.n	8006dac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2274      	movs	r2, #116	; 0x74
 8006da6:	2100      	movs	r1, #0
 8006da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	0018      	movs	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b004      	add	sp, #16
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	01ffffff 	.word	0x01ffffff

08006db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b094      	sub	sp, #80	; 0x50
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	1dfb      	adds	r3, r7, #7
 8006dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc8:	e0a3      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dcc:	3301      	adds	r3, #1
 8006dce:	d100      	bne.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006dd0:	e09f      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fc fd67 	bl	80038a4 <HAL_GetTick>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d13d      	bne.n	8006e64 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44
 8006df2:	2301      	movs	r3, #1
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	f383 8810 	msr	PRIMASK, r3
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	494c      	ldr	r1, [pc, #304]	; (8006f3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	f383 8810 	msr	PRIMASK, r3
}
 8006e18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	643b      	str	r3, [r7, #64]	; 0x40
 8006e24:	2301      	movs	r3, #1
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f383 8810 	msr	PRIMASK, r3
}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	438a      	bics	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]
 8006e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e46:	f383 8810 	msr	PRIMASK, r3
}
 8006e4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2274      	movs	r2, #116	; 0x74
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e067      	b.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2204      	movs	r2, #4
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	d050      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d146      	bne.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2280      	movs	r2, #128	; 0x80
 8006e8a:	0112      	lsls	r2, r2, #4
 8006e8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e92:	613b      	str	r3, [r7, #16]
  return(result);
 8006e94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e98:	2301      	movs	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4923      	ldr	r1, [pc, #140]	; (8006f3c <UART_WaitOnFlagUntilTimeout+0x184>)
 8006eb0:	400a      	ands	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f383 8810 	msr	PRIMASK, r3
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec4:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ec6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eca:	2301      	movs	r3, #1
 8006ecc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f383 8810 	msr	PRIMASK, r3
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	438a      	bics	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
 8006ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	f383 8810 	msr	PRIMASK, r3
}
 8006ef0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	2120      	movs	r1, #32
 8006f04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2274      	movs	r2, #116	; 0x74
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e010      	b.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	425a      	negs	r2, r3
 8006f22:	4153      	adcs	r3, r2
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	001a      	movs	r2, r3
 8006f28:	1dfb      	adds	r3, r7, #7
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d100      	bne.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006f30:	e74b      	b.n	8006dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b014      	add	sp, #80	; 0x50
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	fffffe5f 	.word	0xfffffe5f

08006f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	; 0x38
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f48:	f3ef 8310 	mrs	r3, PRIMASK
 8006f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8006f4e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f50:	637b      	str	r3, [r7, #52]	; 0x34
 8006f52:	2301      	movs	r3, #1
 8006f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4925      	ldr	r1, [pc, #148]	; (8007000 <UART_EndRxTransfer+0xc0>)
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7e:	623b      	str	r3, [r7, #32]
  return(result);
 8006f80:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30
 8006f84:	2301      	movs	r3, #1
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f383 8810 	msr	PRIMASK, r3
}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	438a      	bics	r2, r1
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d118      	bne.n	8006fe6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f383 8810 	msr	PRIMASK, r3
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2110      	movs	r1, #16
 8006fd6:	438a      	bics	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ff8:	46c0      	nop			; (mov r8, r8)
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b00e      	add	sp, #56	; 0x38
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	fffffedf 	.word	0xfffffedf

08007004 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	225a      	movs	r2, #90	; 0x5a
 8007016:	2100      	movs	r1, #0
 8007018:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2252      	movs	r2, #82	; 0x52
 800701e:	2100      	movs	r1, #0
 8007020:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	0018      	movs	r0, r3
 8007026:	f7ff fb17 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702a:	46c0      	nop			; (mov r8, r8)
 800702c:	46bd      	mov	sp, r7
 800702e:	b004      	add	sp, #16
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703a:	f3ef 8310 	mrs	r3, PRIMASK
 800703e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007040:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	2301      	movs	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f383 8810 	msr	PRIMASK, r3
}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2140      	movs	r1, #64	; 0x40
 800705c:	438a      	bics	r2, r1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f383 8810 	msr	PRIMASK, r3
}
 800706a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	0018      	movs	r0, r3
 800707c:	f7ff fae4 	bl	8006648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007080:	46c0      	nop			; (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b006      	add	sp, #24
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007090:	46c0      	nop			; (mov r8, r8)
 8007092:	46bd      	mov	sp, r7
 8007094:	b002      	add	sp, #8
 8007096:	bd80      	pop	{r7, pc}

08007098 <__errno>:
 8007098:	4b01      	ldr	r3, [pc, #4]	; (80070a0 <__errno+0x8>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4770      	bx	lr
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	20000020 	.word	0x20000020

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	2600      	movs	r6, #0
 80070a8:	4d0c      	ldr	r5, [pc, #48]	; (80070dc <__libc_init_array+0x38>)
 80070aa:	4c0d      	ldr	r4, [pc, #52]	; (80070e0 <__libc_init_array+0x3c>)
 80070ac:	1b64      	subs	r4, r4, r5
 80070ae:	10a4      	asrs	r4, r4, #2
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	2600      	movs	r6, #0
 80070b6:	f000 fc8b 	bl	80079d0 <_init>
 80070ba:	4d0a      	ldr	r5, [pc, #40]	; (80070e4 <__libc_init_array+0x40>)
 80070bc:	4c0a      	ldr	r4, [pc, #40]	; (80070e8 <__libc_init_array+0x44>)
 80070be:	1b64      	subs	r4, r4, r5
 80070c0:	10a4      	asrs	r4, r4, #2
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	00b3      	lsls	r3, r6, #2
 80070ca:	58eb      	ldr	r3, [r5, r3]
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	00b3      	lsls	r3, r6, #2
 80070d4:	58eb      	ldr	r3, [r5, r3]
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	0800a6ec 	.word	0x0800a6ec
 80070e0:	0800a6ec 	.word	0x0800a6ec
 80070e4:	0800a6ec 	.word	0x0800a6ec
 80070e8:	0800a6f0 	.word	0x0800a6f0

080070ec <memcpy>:
 80070ec:	2300      	movs	r3, #0
 80070ee:	b510      	push	{r4, lr}
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d100      	bne.n	80070f6 <memcpy+0xa>
 80070f4:	bd10      	pop	{r4, pc}
 80070f6:	5ccc      	ldrb	r4, [r1, r3]
 80070f8:	54c4      	strb	r4, [r0, r3]
 80070fa:	3301      	adds	r3, #1
 80070fc:	e7f8      	b.n	80070f0 <memcpy+0x4>

080070fe <memset>:
 80070fe:	0003      	movs	r3, r0
 8007100:	1882      	adds	r2, r0, r2
 8007102:	4293      	cmp	r3, r2
 8007104:	d100      	bne.n	8007108 <memset+0xa>
 8007106:	4770      	bx	lr
 8007108:	7019      	strb	r1, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	e7f9      	b.n	8007102 <memset+0x4>
	...

08007110 <siprintf>:
 8007110:	b40e      	push	{r1, r2, r3}
 8007112:	b500      	push	{lr}
 8007114:	490b      	ldr	r1, [pc, #44]	; (8007144 <siprintf+0x34>)
 8007116:	b09c      	sub	sp, #112	; 0x70
 8007118:	ab1d      	add	r3, sp, #116	; 0x74
 800711a:	9002      	str	r0, [sp, #8]
 800711c:	9006      	str	r0, [sp, #24]
 800711e:	9107      	str	r1, [sp, #28]
 8007120:	9104      	str	r1, [sp, #16]
 8007122:	4809      	ldr	r0, [pc, #36]	; (8007148 <siprintf+0x38>)
 8007124:	4909      	ldr	r1, [pc, #36]	; (800714c <siprintf+0x3c>)
 8007126:	cb04      	ldmia	r3!, {r2}
 8007128:	9105      	str	r1, [sp, #20]
 800712a:	6800      	ldr	r0, [r0, #0]
 800712c:	a902      	add	r1, sp, #8
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	f000 f870 	bl	8007214 <_svfiprintf_r>
 8007134:	2300      	movs	r3, #0
 8007136:	9a02      	ldr	r2, [sp, #8]
 8007138:	7013      	strb	r3, [r2, #0]
 800713a:	b01c      	add	sp, #112	; 0x70
 800713c:	bc08      	pop	{r3}
 800713e:	b003      	add	sp, #12
 8007140:	4718      	bx	r3
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	7fffffff 	.word	0x7fffffff
 8007148:	20000020 	.word	0x20000020
 800714c:	ffff0208 	.word	0xffff0208

08007150 <__ssputs_r>:
 8007150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007152:	688e      	ldr	r6, [r1, #8]
 8007154:	b085      	sub	sp, #20
 8007156:	0007      	movs	r7, r0
 8007158:	000c      	movs	r4, r1
 800715a:	9203      	str	r2, [sp, #12]
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	429e      	cmp	r6, r3
 8007160:	d83c      	bhi.n	80071dc <__ssputs_r+0x8c>
 8007162:	2390      	movs	r3, #144	; 0x90
 8007164:	898a      	ldrh	r2, [r1, #12]
 8007166:	00db      	lsls	r3, r3, #3
 8007168:	421a      	tst	r2, r3
 800716a:	d034      	beq.n	80071d6 <__ssputs_r+0x86>
 800716c:	6909      	ldr	r1, [r1, #16]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	6960      	ldr	r0, [r4, #20]
 8007172:	1a5b      	subs	r3, r3, r1
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	2303      	movs	r3, #3
 8007178:	4343      	muls	r3, r0
 800717a:	0fdd      	lsrs	r5, r3, #31
 800717c:	18ed      	adds	r5, r5, r3
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	9802      	ldr	r0, [sp, #8]
 8007182:	3301      	adds	r3, #1
 8007184:	181b      	adds	r3, r3, r0
 8007186:	106d      	asrs	r5, r5, #1
 8007188:	42ab      	cmp	r3, r5
 800718a:	d900      	bls.n	800718e <__ssputs_r+0x3e>
 800718c:	001d      	movs	r5, r3
 800718e:	0553      	lsls	r3, r2, #21
 8007190:	d532      	bpl.n	80071f8 <__ssputs_r+0xa8>
 8007192:	0029      	movs	r1, r5
 8007194:	0038      	movs	r0, r7
 8007196:	f000 fb49 	bl	800782c <_malloc_r>
 800719a:	1e06      	subs	r6, r0, #0
 800719c:	d109      	bne.n	80071b2 <__ssputs_r+0x62>
 800719e:	230c      	movs	r3, #12
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	2001      	movs	r0, #1
 80071a6:	89a2      	ldrh	r2, [r4, #12]
 80071a8:	4240      	negs	r0, r0
 80071aa:	4313      	orrs	r3, r2
 80071ac:	81a3      	strh	r3, [r4, #12]
 80071ae:	b005      	add	sp, #20
 80071b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b2:	9a02      	ldr	r2, [sp, #8]
 80071b4:	6921      	ldr	r1, [r4, #16]
 80071b6:	f7ff ff99 	bl	80070ec <memcpy>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	4a14      	ldr	r2, [pc, #80]	; (8007210 <__ssputs_r+0xc0>)
 80071be:	401a      	ands	r2, r3
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	4313      	orrs	r3, r2
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	6126      	str	r6, [r4, #16]
 80071ca:	18f6      	adds	r6, r6, r3
 80071cc:	6026      	str	r6, [r4, #0]
 80071ce:	6165      	str	r5, [r4, #20]
 80071d0:	9e01      	ldr	r6, [sp, #4]
 80071d2:	1aed      	subs	r5, r5, r3
 80071d4:	60a5      	str	r5, [r4, #8]
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	429e      	cmp	r6, r3
 80071da:	d900      	bls.n	80071de <__ssputs_r+0x8e>
 80071dc:	9e01      	ldr	r6, [sp, #4]
 80071de:	0032      	movs	r2, r6
 80071e0:	9903      	ldr	r1, [sp, #12]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	f000 faa3 	bl	800772e <memmove>
 80071e8:	68a3      	ldr	r3, [r4, #8]
 80071ea:	2000      	movs	r0, #0
 80071ec:	1b9b      	subs	r3, r3, r6
 80071ee:	60a3      	str	r3, [r4, #8]
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	199e      	adds	r6, r3, r6
 80071f4:	6026      	str	r6, [r4, #0]
 80071f6:	e7da      	b.n	80071ae <__ssputs_r+0x5e>
 80071f8:	002a      	movs	r2, r5
 80071fa:	0038      	movs	r0, r7
 80071fc:	f000 fb8c 	bl	8007918 <_realloc_r>
 8007200:	1e06      	subs	r6, r0, #0
 8007202:	d1e0      	bne.n	80071c6 <__ssputs_r+0x76>
 8007204:	0038      	movs	r0, r7
 8007206:	6921      	ldr	r1, [r4, #16]
 8007208:	f000 faa4 	bl	8007754 <_free_r>
 800720c:	e7c7      	b.n	800719e <__ssputs_r+0x4e>
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	fffffb7f 	.word	0xfffffb7f

08007214 <_svfiprintf_r>:
 8007214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007216:	b0a1      	sub	sp, #132	; 0x84
 8007218:	9003      	str	r0, [sp, #12]
 800721a:	001d      	movs	r5, r3
 800721c:	898b      	ldrh	r3, [r1, #12]
 800721e:	000f      	movs	r7, r1
 8007220:	0016      	movs	r6, r2
 8007222:	061b      	lsls	r3, r3, #24
 8007224:	d511      	bpl.n	800724a <_svfiprintf_r+0x36>
 8007226:	690b      	ldr	r3, [r1, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10e      	bne.n	800724a <_svfiprintf_r+0x36>
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f000 fafd 	bl	800782c <_malloc_r>
 8007232:	6038      	str	r0, [r7, #0]
 8007234:	6138      	str	r0, [r7, #16]
 8007236:	2800      	cmp	r0, #0
 8007238:	d105      	bne.n	8007246 <_svfiprintf_r+0x32>
 800723a:	230c      	movs	r3, #12
 800723c:	9a03      	ldr	r2, [sp, #12]
 800723e:	3801      	subs	r0, #1
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	b021      	add	sp, #132	; 0x84
 8007244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007246:	2340      	movs	r3, #64	; 0x40
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	2300      	movs	r3, #0
 800724c:	ac08      	add	r4, sp, #32
 800724e:	6163      	str	r3, [r4, #20]
 8007250:	3320      	adds	r3, #32
 8007252:	7663      	strb	r3, [r4, #25]
 8007254:	3310      	adds	r3, #16
 8007256:	76a3      	strb	r3, [r4, #26]
 8007258:	9507      	str	r5, [sp, #28]
 800725a:	0035      	movs	r5, r6
 800725c:	782b      	ldrb	r3, [r5, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <_svfiprintf_r+0x52>
 8007262:	2b25      	cmp	r3, #37	; 0x25
 8007264:	d147      	bne.n	80072f6 <_svfiprintf_r+0xe2>
 8007266:	1bab      	subs	r3, r5, r6
 8007268:	9305      	str	r3, [sp, #20]
 800726a:	42b5      	cmp	r5, r6
 800726c:	d00c      	beq.n	8007288 <_svfiprintf_r+0x74>
 800726e:	0032      	movs	r2, r6
 8007270:	0039      	movs	r1, r7
 8007272:	9803      	ldr	r0, [sp, #12]
 8007274:	f7ff ff6c 	bl	8007150 <__ssputs_r>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d100      	bne.n	800727e <_svfiprintf_r+0x6a>
 800727c:	e0ae      	b.n	80073dc <_svfiprintf_r+0x1c8>
 800727e:	6962      	ldr	r2, [r4, #20]
 8007280:	9b05      	ldr	r3, [sp, #20]
 8007282:	4694      	mov	ip, r2
 8007284:	4463      	add	r3, ip
 8007286:	6163      	str	r3, [r4, #20]
 8007288:	782b      	ldrb	r3, [r5, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d100      	bne.n	8007290 <_svfiprintf_r+0x7c>
 800728e:	e0a5      	b.n	80073dc <_svfiprintf_r+0x1c8>
 8007290:	2201      	movs	r2, #1
 8007292:	2300      	movs	r3, #0
 8007294:	4252      	negs	r2, r2
 8007296:	6062      	str	r2, [r4, #4]
 8007298:	a904      	add	r1, sp, #16
 800729a:	3254      	adds	r2, #84	; 0x54
 800729c:	1852      	adds	r2, r2, r1
 800729e:	1c6e      	adds	r6, r5, #1
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	60e3      	str	r3, [r4, #12]
 80072a4:	60a3      	str	r3, [r4, #8]
 80072a6:	7013      	strb	r3, [r2, #0]
 80072a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80072aa:	2205      	movs	r2, #5
 80072ac:	7831      	ldrb	r1, [r6, #0]
 80072ae:	4854      	ldr	r0, [pc, #336]	; (8007400 <_svfiprintf_r+0x1ec>)
 80072b0:	f000 fa32 	bl	8007718 <memchr>
 80072b4:	1c75      	adds	r5, r6, #1
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d11f      	bne.n	80072fa <_svfiprintf_r+0xe6>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	06d3      	lsls	r3, r2, #27
 80072be:	d504      	bpl.n	80072ca <_svfiprintf_r+0xb6>
 80072c0:	2353      	movs	r3, #83	; 0x53
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	185b      	adds	r3, r3, r1
 80072c6:	2120      	movs	r1, #32
 80072c8:	7019      	strb	r1, [r3, #0]
 80072ca:	0713      	lsls	r3, r2, #28
 80072cc:	d504      	bpl.n	80072d8 <_svfiprintf_r+0xc4>
 80072ce:	2353      	movs	r3, #83	; 0x53
 80072d0:	a904      	add	r1, sp, #16
 80072d2:	185b      	adds	r3, r3, r1
 80072d4:	212b      	movs	r1, #43	; 0x2b
 80072d6:	7019      	strb	r1, [r3, #0]
 80072d8:	7833      	ldrb	r3, [r6, #0]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d016      	beq.n	800730c <_svfiprintf_r+0xf8>
 80072de:	0035      	movs	r5, r6
 80072e0:	2100      	movs	r1, #0
 80072e2:	200a      	movs	r0, #10
 80072e4:	68e3      	ldr	r3, [r4, #12]
 80072e6:	782a      	ldrb	r2, [r5, #0]
 80072e8:	1c6e      	adds	r6, r5, #1
 80072ea:	3a30      	subs	r2, #48	; 0x30
 80072ec:	2a09      	cmp	r2, #9
 80072ee:	d94e      	bls.n	800738e <_svfiprintf_r+0x17a>
 80072f0:	2900      	cmp	r1, #0
 80072f2:	d111      	bne.n	8007318 <_svfiprintf_r+0x104>
 80072f4:	e017      	b.n	8007326 <_svfiprintf_r+0x112>
 80072f6:	3501      	adds	r5, #1
 80072f8:	e7b0      	b.n	800725c <_svfiprintf_r+0x48>
 80072fa:	4b41      	ldr	r3, [pc, #260]	; (8007400 <_svfiprintf_r+0x1ec>)
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	1ac0      	subs	r0, r0, r3
 8007300:	2301      	movs	r3, #1
 8007302:	4083      	lsls	r3, r0
 8007304:	4313      	orrs	r3, r2
 8007306:	002e      	movs	r6, r5
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	e7ce      	b.n	80072aa <_svfiprintf_r+0x96>
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	1d19      	adds	r1, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	9107      	str	r1, [sp, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	db01      	blt.n	800731c <_svfiprintf_r+0x108>
 8007318:	930b      	str	r3, [sp, #44]	; 0x2c
 800731a:	e004      	b.n	8007326 <_svfiprintf_r+0x112>
 800731c:	425b      	negs	r3, r3
 800731e:	60e3      	str	r3, [r4, #12]
 8007320:	2302      	movs	r3, #2
 8007322:	4313      	orrs	r3, r2
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	782b      	ldrb	r3, [r5, #0]
 8007328:	2b2e      	cmp	r3, #46	; 0x2e
 800732a:	d10a      	bne.n	8007342 <_svfiprintf_r+0x12e>
 800732c:	786b      	ldrb	r3, [r5, #1]
 800732e:	2b2a      	cmp	r3, #42	; 0x2a
 8007330:	d135      	bne.n	800739e <_svfiprintf_r+0x18a>
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	3502      	adds	r5, #2
 8007336:	1d1a      	adds	r2, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9207      	str	r2, [sp, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	db2b      	blt.n	8007398 <_svfiprintf_r+0x184>
 8007340:	9309      	str	r3, [sp, #36]	; 0x24
 8007342:	4e30      	ldr	r6, [pc, #192]	; (8007404 <_svfiprintf_r+0x1f0>)
 8007344:	2203      	movs	r2, #3
 8007346:	0030      	movs	r0, r6
 8007348:	7829      	ldrb	r1, [r5, #0]
 800734a:	f000 f9e5 	bl	8007718 <memchr>
 800734e:	2800      	cmp	r0, #0
 8007350:	d006      	beq.n	8007360 <_svfiprintf_r+0x14c>
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	1b80      	subs	r0, r0, r6
 8007356:	4083      	lsls	r3, r0
 8007358:	6822      	ldr	r2, [r4, #0]
 800735a:	3501      	adds	r5, #1
 800735c:	4313      	orrs	r3, r2
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	7829      	ldrb	r1, [r5, #0]
 8007362:	2206      	movs	r2, #6
 8007364:	4828      	ldr	r0, [pc, #160]	; (8007408 <_svfiprintf_r+0x1f4>)
 8007366:	1c6e      	adds	r6, r5, #1
 8007368:	7621      	strb	r1, [r4, #24]
 800736a:	f000 f9d5 	bl	8007718 <memchr>
 800736e:	2800      	cmp	r0, #0
 8007370:	d03c      	beq.n	80073ec <_svfiprintf_r+0x1d8>
 8007372:	4b26      	ldr	r3, [pc, #152]	; (800740c <_svfiprintf_r+0x1f8>)
 8007374:	2b00      	cmp	r3, #0
 8007376:	d125      	bne.n	80073c4 <_svfiprintf_r+0x1b0>
 8007378:	2207      	movs	r2, #7
 800737a:	9b07      	ldr	r3, [sp, #28]
 800737c:	3307      	adds	r3, #7
 800737e:	4393      	bics	r3, r2
 8007380:	3308      	adds	r3, #8
 8007382:	9307      	str	r3, [sp, #28]
 8007384:	6963      	ldr	r3, [r4, #20]
 8007386:	9a04      	ldr	r2, [sp, #16]
 8007388:	189b      	adds	r3, r3, r2
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	e765      	b.n	800725a <_svfiprintf_r+0x46>
 800738e:	4343      	muls	r3, r0
 8007390:	0035      	movs	r5, r6
 8007392:	2101      	movs	r1, #1
 8007394:	189b      	adds	r3, r3, r2
 8007396:	e7a6      	b.n	80072e6 <_svfiprintf_r+0xd2>
 8007398:	2301      	movs	r3, #1
 800739a:	425b      	negs	r3, r3
 800739c:	e7d0      	b.n	8007340 <_svfiprintf_r+0x12c>
 800739e:	2300      	movs	r3, #0
 80073a0:	200a      	movs	r0, #10
 80073a2:	001a      	movs	r2, r3
 80073a4:	3501      	adds	r5, #1
 80073a6:	6063      	str	r3, [r4, #4]
 80073a8:	7829      	ldrb	r1, [r5, #0]
 80073aa:	1c6e      	adds	r6, r5, #1
 80073ac:	3930      	subs	r1, #48	; 0x30
 80073ae:	2909      	cmp	r1, #9
 80073b0:	d903      	bls.n	80073ba <_svfiprintf_r+0x1a6>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0c5      	beq.n	8007342 <_svfiprintf_r+0x12e>
 80073b6:	9209      	str	r2, [sp, #36]	; 0x24
 80073b8:	e7c3      	b.n	8007342 <_svfiprintf_r+0x12e>
 80073ba:	4342      	muls	r2, r0
 80073bc:	0035      	movs	r5, r6
 80073be:	2301      	movs	r3, #1
 80073c0:	1852      	adds	r2, r2, r1
 80073c2:	e7f1      	b.n	80073a8 <_svfiprintf_r+0x194>
 80073c4:	ab07      	add	r3, sp, #28
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	003a      	movs	r2, r7
 80073ca:	0021      	movs	r1, r4
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <_svfiprintf_r+0x1fc>)
 80073ce:	9803      	ldr	r0, [sp, #12]
 80073d0:	e000      	b.n	80073d4 <_svfiprintf_r+0x1c0>
 80073d2:	bf00      	nop
 80073d4:	9004      	str	r0, [sp, #16]
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	d1d3      	bne.n	8007384 <_svfiprintf_r+0x170>
 80073dc:	89bb      	ldrh	r3, [r7, #12]
 80073de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073e0:	065b      	lsls	r3, r3, #25
 80073e2:	d400      	bmi.n	80073e6 <_svfiprintf_r+0x1d2>
 80073e4:	e72d      	b.n	8007242 <_svfiprintf_r+0x2e>
 80073e6:	2001      	movs	r0, #1
 80073e8:	4240      	negs	r0, r0
 80073ea:	e72a      	b.n	8007242 <_svfiprintf_r+0x2e>
 80073ec:	ab07      	add	r3, sp, #28
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	003a      	movs	r2, r7
 80073f2:	0021      	movs	r1, r4
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <_svfiprintf_r+0x1fc>)
 80073f6:	9803      	ldr	r0, [sp, #12]
 80073f8:	f000 f87c 	bl	80074f4 <_printf_i>
 80073fc:	e7ea      	b.n	80073d4 <_svfiprintf_r+0x1c0>
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	0800a6b0 	.word	0x0800a6b0
 8007404:	0800a6b6 	.word	0x0800a6b6
 8007408:	0800a6ba 	.word	0x0800a6ba
 800740c:	00000000 	.word	0x00000000
 8007410:	08007151 	.word	0x08007151

08007414 <_printf_common>:
 8007414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007416:	0015      	movs	r5, r2
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	688a      	ldr	r2, [r1, #8]
 800741c:	690b      	ldr	r3, [r1, #16]
 800741e:	000c      	movs	r4, r1
 8007420:	9000      	str	r0, [sp, #0]
 8007422:	4293      	cmp	r3, r2
 8007424:	da00      	bge.n	8007428 <_printf_common+0x14>
 8007426:	0013      	movs	r3, r2
 8007428:	0022      	movs	r2, r4
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	3243      	adds	r2, #67	; 0x43
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	2a00      	cmp	r2, #0
 8007432:	d001      	beq.n	8007438 <_printf_common+0x24>
 8007434:	3301      	adds	r3, #1
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	069b      	lsls	r3, r3, #26
 800743c:	d502      	bpl.n	8007444 <_printf_common+0x30>
 800743e:	682b      	ldr	r3, [r5, #0]
 8007440:	3302      	adds	r3, #2
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	2306      	movs	r3, #6
 8007448:	0017      	movs	r7, r2
 800744a:	401f      	ands	r7, r3
 800744c:	421a      	tst	r2, r3
 800744e:	d027      	beq.n	80074a0 <_printf_common+0x8c>
 8007450:	0023      	movs	r3, r4
 8007452:	3343      	adds	r3, #67	; 0x43
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	1e5a      	subs	r2, r3, #1
 8007458:	4193      	sbcs	r3, r2
 800745a:	6822      	ldr	r2, [r4, #0]
 800745c:	0692      	lsls	r2, r2, #26
 800745e:	d430      	bmi.n	80074c2 <_printf_common+0xae>
 8007460:	0022      	movs	r2, r4
 8007462:	9901      	ldr	r1, [sp, #4]
 8007464:	9800      	ldr	r0, [sp, #0]
 8007466:	9e08      	ldr	r6, [sp, #32]
 8007468:	3243      	adds	r2, #67	; 0x43
 800746a:	47b0      	blx	r6
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d025      	beq.n	80074bc <_printf_common+0xa8>
 8007470:	2306      	movs	r3, #6
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	682a      	ldr	r2, [r5, #0]
 8007476:	68e1      	ldr	r1, [r4, #12]
 8007478:	2500      	movs	r5, #0
 800747a:	4003      	ands	r3, r0
 800747c:	2b04      	cmp	r3, #4
 800747e:	d103      	bne.n	8007488 <_printf_common+0x74>
 8007480:	1a8d      	subs	r5, r1, r2
 8007482:	43eb      	mvns	r3, r5
 8007484:	17db      	asrs	r3, r3, #31
 8007486:	401d      	ands	r5, r3
 8007488:	68a3      	ldr	r3, [r4, #8]
 800748a:	6922      	ldr	r2, [r4, #16]
 800748c:	4293      	cmp	r3, r2
 800748e:	dd01      	ble.n	8007494 <_printf_common+0x80>
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	18ed      	adds	r5, r5, r3
 8007494:	2700      	movs	r7, #0
 8007496:	42bd      	cmp	r5, r7
 8007498:	d120      	bne.n	80074dc <_printf_common+0xc8>
 800749a:	2000      	movs	r0, #0
 800749c:	e010      	b.n	80074c0 <_printf_common+0xac>
 800749e:	3701      	adds	r7, #1
 80074a0:	68e3      	ldr	r3, [r4, #12]
 80074a2:	682a      	ldr	r2, [r5, #0]
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	42bb      	cmp	r3, r7
 80074a8:	ddd2      	ble.n	8007450 <_printf_common+0x3c>
 80074aa:	0022      	movs	r2, r4
 80074ac:	2301      	movs	r3, #1
 80074ae:	9901      	ldr	r1, [sp, #4]
 80074b0:	9800      	ldr	r0, [sp, #0]
 80074b2:	9e08      	ldr	r6, [sp, #32]
 80074b4:	3219      	adds	r2, #25
 80074b6:	47b0      	blx	r6
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d1f0      	bne.n	800749e <_printf_common+0x8a>
 80074bc:	2001      	movs	r0, #1
 80074be:	4240      	negs	r0, r0
 80074c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074c2:	2030      	movs	r0, #48	; 0x30
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	3143      	adds	r1, #67	; 0x43
 80074c8:	7008      	strb	r0, [r1, #0]
 80074ca:	0021      	movs	r1, r4
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	3145      	adds	r1, #69	; 0x45
 80074d0:	7809      	ldrb	r1, [r1, #0]
 80074d2:	18a2      	adds	r2, r4, r2
 80074d4:	3243      	adds	r2, #67	; 0x43
 80074d6:	3302      	adds	r3, #2
 80074d8:	7011      	strb	r1, [r2, #0]
 80074da:	e7c1      	b.n	8007460 <_printf_common+0x4c>
 80074dc:	0022      	movs	r2, r4
 80074de:	2301      	movs	r3, #1
 80074e0:	9901      	ldr	r1, [sp, #4]
 80074e2:	9800      	ldr	r0, [sp, #0]
 80074e4:	9e08      	ldr	r6, [sp, #32]
 80074e6:	321a      	adds	r2, #26
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	d0e6      	beq.n	80074bc <_printf_common+0xa8>
 80074ee:	3701      	adds	r7, #1
 80074f0:	e7d1      	b.n	8007496 <_printf_common+0x82>
	...

080074f4 <_printf_i>:
 80074f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f6:	b08b      	sub	sp, #44	; 0x2c
 80074f8:	9206      	str	r2, [sp, #24]
 80074fa:	000a      	movs	r2, r1
 80074fc:	3243      	adds	r2, #67	; 0x43
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	9005      	str	r0, [sp, #20]
 8007502:	9204      	str	r2, [sp, #16]
 8007504:	7e0a      	ldrb	r2, [r1, #24]
 8007506:	000c      	movs	r4, r1
 8007508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800750a:	2a78      	cmp	r2, #120	; 0x78
 800750c:	d807      	bhi.n	800751e <_printf_i+0x2a>
 800750e:	2a62      	cmp	r2, #98	; 0x62
 8007510:	d809      	bhi.n	8007526 <_printf_i+0x32>
 8007512:	2a00      	cmp	r2, #0
 8007514:	d100      	bne.n	8007518 <_printf_i+0x24>
 8007516:	e0c1      	b.n	800769c <_printf_i+0x1a8>
 8007518:	2a58      	cmp	r2, #88	; 0x58
 800751a:	d100      	bne.n	800751e <_printf_i+0x2a>
 800751c:	e08c      	b.n	8007638 <_printf_i+0x144>
 800751e:	0026      	movs	r6, r4
 8007520:	3642      	adds	r6, #66	; 0x42
 8007522:	7032      	strb	r2, [r6, #0]
 8007524:	e022      	b.n	800756c <_printf_i+0x78>
 8007526:	0010      	movs	r0, r2
 8007528:	3863      	subs	r0, #99	; 0x63
 800752a:	2815      	cmp	r0, #21
 800752c:	d8f7      	bhi.n	800751e <_printf_i+0x2a>
 800752e:	f7f8 fdeb 	bl	8000108 <__gnu_thumb1_case_shi>
 8007532:	0016      	.short	0x0016
 8007534:	fff6001f 	.word	0xfff6001f
 8007538:	fff6fff6 	.word	0xfff6fff6
 800753c:	001ffff6 	.word	0x001ffff6
 8007540:	fff6fff6 	.word	0xfff6fff6
 8007544:	fff6fff6 	.word	0xfff6fff6
 8007548:	003600a8 	.word	0x003600a8
 800754c:	fff6009a 	.word	0xfff6009a
 8007550:	00b9fff6 	.word	0x00b9fff6
 8007554:	0036fff6 	.word	0x0036fff6
 8007558:	fff6fff6 	.word	0xfff6fff6
 800755c:	009e      	.short	0x009e
 800755e:	0026      	movs	r6, r4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	3642      	adds	r6, #66	; 0x42
 8007564:	1d11      	adds	r1, r2, #4
 8007566:	6019      	str	r1, [r3, #0]
 8007568:	6813      	ldr	r3, [r2, #0]
 800756a:	7033      	strb	r3, [r6, #0]
 800756c:	2301      	movs	r3, #1
 800756e:	e0a7      	b.n	80076c0 <_printf_i+0x1cc>
 8007570:	6808      	ldr	r0, [r1, #0]
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	1d0a      	adds	r2, r1, #4
 8007576:	0605      	lsls	r5, r0, #24
 8007578:	d50b      	bpl.n	8007592 <_printf_i+0x9e>
 800757a:	680d      	ldr	r5, [r1, #0]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	2d00      	cmp	r5, #0
 8007580:	da03      	bge.n	800758a <_printf_i+0x96>
 8007582:	232d      	movs	r3, #45	; 0x2d
 8007584:	9a04      	ldr	r2, [sp, #16]
 8007586:	426d      	negs	r5, r5
 8007588:	7013      	strb	r3, [r2, #0]
 800758a:	4b61      	ldr	r3, [pc, #388]	; (8007710 <_printf_i+0x21c>)
 800758c:	270a      	movs	r7, #10
 800758e:	9303      	str	r3, [sp, #12]
 8007590:	e01b      	b.n	80075ca <_printf_i+0xd6>
 8007592:	680d      	ldr	r5, [r1, #0]
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	0641      	lsls	r1, r0, #25
 8007598:	d5f1      	bpl.n	800757e <_printf_i+0x8a>
 800759a:	b22d      	sxth	r5, r5
 800759c:	e7ef      	b.n	800757e <_printf_i+0x8a>
 800759e:	680d      	ldr	r5, [r1, #0]
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	1d08      	adds	r0, r1, #4
 80075a4:	6018      	str	r0, [r3, #0]
 80075a6:	062e      	lsls	r6, r5, #24
 80075a8:	d501      	bpl.n	80075ae <_printf_i+0xba>
 80075aa:	680d      	ldr	r5, [r1, #0]
 80075ac:	e003      	b.n	80075b6 <_printf_i+0xc2>
 80075ae:	066d      	lsls	r5, r5, #25
 80075b0:	d5fb      	bpl.n	80075aa <_printf_i+0xb6>
 80075b2:	680d      	ldr	r5, [r1, #0]
 80075b4:	b2ad      	uxth	r5, r5
 80075b6:	4b56      	ldr	r3, [pc, #344]	; (8007710 <_printf_i+0x21c>)
 80075b8:	2708      	movs	r7, #8
 80075ba:	9303      	str	r3, [sp, #12]
 80075bc:	2a6f      	cmp	r2, #111	; 0x6f
 80075be:	d000      	beq.n	80075c2 <_printf_i+0xce>
 80075c0:	3702      	adds	r7, #2
 80075c2:	0023      	movs	r3, r4
 80075c4:	2200      	movs	r2, #0
 80075c6:	3343      	adds	r3, #67	; 0x43
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	6863      	ldr	r3, [r4, #4]
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	db03      	blt.n	80075da <_printf_i+0xe6>
 80075d2:	2204      	movs	r2, #4
 80075d4:	6821      	ldr	r1, [r4, #0]
 80075d6:	4391      	bics	r1, r2
 80075d8:	6021      	str	r1, [r4, #0]
 80075da:	2d00      	cmp	r5, #0
 80075dc:	d102      	bne.n	80075e4 <_printf_i+0xf0>
 80075de:	9e04      	ldr	r6, [sp, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00c      	beq.n	80075fe <_printf_i+0x10a>
 80075e4:	9e04      	ldr	r6, [sp, #16]
 80075e6:	0028      	movs	r0, r5
 80075e8:	0039      	movs	r1, r7
 80075ea:	f7f8 fe1d 	bl	8000228 <__aeabi_uidivmod>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	3e01      	subs	r6, #1
 80075f2:	5c5b      	ldrb	r3, [r3, r1]
 80075f4:	7033      	strb	r3, [r6, #0]
 80075f6:	002b      	movs	r3, r5
 80075f8:	0005      	movs	r5, r0
 80075fa:	429f      	cmp	r7, r3
 80075fc:	d9f3      	bls.n	80075e6 <_printf_i+0xf2>
 80075fe:	2f08      	cmp	r7, #8
 8007600:	d109      	bne.n	8007616 <_printf_i+0x122>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	07db      	lsls	r3, r3, #31
 8007606:	d506      	bpl.n	8007616 <_printf_i+0x122>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	6922      	ldr	r2, [r4, #16]
 800760c:	4293      	cmp	r3, r2
 800760e:	dc02      	bgt.n	8007616 <_printf_i+0x122>
 8007610:	2330      	movs	r3, #48	; 0x30
 8007612:	3e01      	subs	r6, #1
 8007614:	7033      	strb	r3, [r6, #0]
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	1b9b      	subs	r3, r3, r6
 800761a:	6123      	str	r3, [r4, #16]
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	0021      	movs	r1, r4
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	9805      	ldr	r0, [sp, #20]
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	aa09      	add	r2, sp, #36	; 0x24
 8007628:	f7ff fef4 	bl	8007414 <_printf_common>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d14c      	bne.n	80076ca <_printf_i+0x1d6>
 8007630:	2001      	movs	r0, #1
 8007632:	4240      	negs	r0, r0
 8007634:	b00b      	add	sp, #44	; 0x2c
 8007636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007638:	3145      	adds	r1, #69	; 0x45
 800763a:	700a      	strb	r2, [r1, #0]
 800763c:	4a34      	ldr	r2, [pc, #208]	; (8007710 <_printf_i+0x21c>)
 800763e:	9203      	str	r2, [sp, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	ca20      	ldmia	r2!, {r5}
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	0608      	lsls	r0, r1, #24
 800764a:	d516      	bpl.n	800767a <_printf_i+0x186>
 800764c:	07cb      	lsls	r3, r1, #31
 800764e:	d502      	bpl.n	8007656 <_printf_i+0x162>
 8007650:	2320      	movs	r3, #32
 8007652:	4319      	orrs	r1, r3
 8007654:	6021      	str	r1, [r4, #0]
 8007656:	2710      	movs	r7, #16
 8007658:	2d00      	cmp	r5, #0
 800765a:	d1b2      	bne.n	80075c2 <_printf_i+0xce>
 800765c:	2320      	movs	r3, #32
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	439a      	bics	r2, r3
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	e7ad      	b.n	80075c2 <_printf_i+0xce>
 8007666:	2220      	movs	r2, #32
 8007668:	6809      	ldr	r1, [r1, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	0022      	movs	r2, r4
 8007670:	2178      	movs	r1, #120	; 0x78
 8007672:	3245      	adds	r2, #69	; 0x45
 8007674:	7011      	strb	r1, [r2, #0]
 8007676:	4a27      	ldr	r2, [pc, #156]	; (8007714 <_printf_i+0x220>)
 8007678:	e7e1      	b.n	800763e <_printf_i+0x14a>
 800767a:	0648      	lsls	r0, r1, #25
 800767c:	d5e6      	bpl.n	800764c <_printf_i+0x158>
 800767e:	b2ad      	uxth	r5, r5
 8007680:	e7e4      	b.n	800764c <_printf_i+0x158>
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	680d      	ldr	r5, [r1, #0]
 8007686:	1d10      	adds	r0, r2, #4
 8007688:	6949      	ldr	r1, [r1, #20]
 800768a:	6018      	str	r0, [r3, #0]
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	062e      	lsls	r6, r5, #24
 8007690:	d501      	bpl.n	8007696 <_printf_i+0x1a2>
 8007692:	6019      	str	r1, [r3, #0]
 8007694:	e002      	b.n	800769c <_printf_i+0x1a8>
 8007696:	066d      	lsls	r5, r5, #25
 8007698:	d5fb      	bpl.n	8007692 <_printf_i+0x19e>
 800769a:	8019      	strh	r1, [r3, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	9e04      	ldr	r6, [sp, #16]
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	e7bb      	b.n	800761c <_printf_i+0x128>
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	1d11      	adds	r1, r2, #4
 80076a8:	6019      	str	r1, [r3, #0]
 80076aa:	6816      	ldr	r6, [r2, #0]
 80076ac:	2100      	movs	r1, #0
 80076ae:	0030      	movs	r0, r6
 80076b0:	6862      	ldr	r2, [r4, #4]
 80076b2:	f000 f831 	bl	8007718 <memchr>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d001      	beq.n	80076be <_printf_i+0x1ca>
 80076ba:	1b80      	subs	r0, r0, r6
 80076bc:	6060      	str	r0, [r4, #4]
 80076be:	6863      	ldr	r3, [r4, #4]
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	2300      	movs	r3, #0
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	7013      	strb	r3, [r2, #0]
 80076c8:	e7a8      	b.n	800761c <_printf_i+0x128>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	0032      	movs	r2, r6
 80076ce:	9906      	ldr	r1, [sp, #24]
 80076d0:	9805      	ldr	r0, [sp, #20]
 80076d2:	9d07      	ldr	r5, [sp, #28]
 80076d4:	47a8      	blx	r5
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d0aa      	beq.n	8007630 <_printf_i+0x13c>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	079b      	lsls	r3, r3, #30
 80076de:	d415      	bmi.n	800770c <_printf_i+0x218>
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	68e0      	ldr	r0, [r4, #12]
 80076e4:	4298      	cmp	r0, r3
 80076e6:	daa5      	bge.n	8007634 <_printf_i+0x140>
 80076e8:	0018      	movs	r0, r3
 80076ea:	e7a3      	b.n	8007634 <_printf_i+0x140>
 80076ec:	0022      	movs	r2, r4
 80076ee:	2301      	movs	r3, #1
 80076f0:	9906      	ldr	r1, [sp, #24]
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	9e07      	ldr	r6, [sp, #28]
 80076f6:	3219      	adds	r2, #25
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	d098      	beq.n	8007630 <_printf_i+0x13c>
 80076fe:	3501      	adds	r5, #1
 8007700:	68e3      	ldr	r3, [r4, #12]
 8007702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	42ab      	cmp	r3, r5
 8007708:	dcf0      	bgt.n	80076ec <_printf_i+0x1f8>
 800770a:	e7e9      	b.n	80076e0 <_printf_i+0x1ec>
 800770c:	2500      	movs	r5, #0
 800770e:	e7f7      	b.n	8007700 <_printf_i+0x20c>
 8007710:	0800a6c1 	.word	0x0800a6c1
 8007714:	0800a6d2 	.word	0x0800a6d2

08007718 <memchr>:
 8007718:	b2c9      	uxtb	r1, r1
 800771a:	1882      	adds	r2, r0, r2
 800771c:	4290      	cmp	r0, r2
 800771e:	d101      	bne.n	8007724 <memchr+0xc>
 8007720:	2000      	movs	r0, #0
 8007722:	4770      	bx	lr
 8007724:	7803      	ldrb	r3, [r0, #0]
 8007726:	428b      	cmp	r3, r1
 8007728:	d0fb      	beq.n	8007722 <memchr+0xa>
 800772a:	3001      	adds	r0, #1
 800772c:	e7f6      	b.n	800771c <memchr+0x4>

0800772e <memmove>:
 800772e:	b510      	push	{r4, lr}
 8007730:	4288      	cmp	r0, r1
 8007732:	d902      	bls.n	800773a <memmove+0xc>
 8007734:	188b      	adds	r3, r1, r2
 8007736:	4298      	cmp	r0, r3
 8007738:	d303      	bcc.n	8007742 <memmove+0x14>
 800773a:	2300      	movs	r3, #0
 800773c:	e007      	b.n	800774e <memmove+0x20>
 800773e:	5c8b      	ldrb	r3, [r1, r2]
 8007740:	5483      	strb	r3, [r0, r2]
 8007742:	3a01      	subs	r2, #1
 8007744:	d2fb      	bcs.n	800773e <memmove+0x10>
 8007746:	bd10      	pop	{r4, pc}
 8007748:	5ccc      	ldrb	r4, [r1, r3]
 800774a:	54c4      	strb	r4, [r0, r3]
 800774c:	3301      	adds	r3, #1
 800774e:	429a      	cmp	r2, r3
 8007750:	d1fa      	bne.n	8007748 <memmove+0x1a>
 8007752:	e7f8      	b.n	8007746 <memmove+0x18>

08007754 <_free_r>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	0005      	movs	r5, r0
 8007758:	2900      	cmp	r1, #0
 800775a:	d010      	beq.n	800777e <_free_r+0x2a>
 800775c:	1f0c      	subs	r4, r1, #4
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da00      	bge.n	8007766 <_free_r+0x12>
 8007764:	18e4      	adds	r4, r4, r3
 8007766:	0028      	movs	r0, r5
 8007768:	f000 f918 	bl	800799c <__malloc_lock>
 800776c:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <_free_r+0x90>)
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <_free_r+0x2c>
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	6014      	str	r4, [r2, #0]
 8007778:	0028      	movs	r0, r5
 800777a:	f000 f917 	bl	80079ac <__malloc_unlock>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	42a3      	cmp	r3, r4
 8007782:	d908      	bls.n	8007796 <_free_r+0x42>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	1860      	adds	r0, r4, r1
 8007788:	4283      	cmp	r3, r0
 800778a:	d1f3      	bne.n	8007774 <_free_r+0x20>
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	1841      	adds	r1, r0, r1
 8007792:	6021      	str	r1, [r4, #0]
 8007794:	e7ee      	b.n	8007774 <_free_r+0x20>
 8007796:	001a      	movs	r2, r3
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <_free_r+0x4e>
 800779e:	42a3      	cmp	r3, r4
 80077a0:	d9f9      	bls.n	8007796 <_free_r+0x42>
 80077a2:	6811      	ldr	r1, [r2, #0]
 80077a4:	1850      	adds	r0, r2, r1
 80077a6:	42a0      	cmp	r0, r4
 80077a8:	d10b      	bne.n	80077c2 <_free_r+0x6e>
 80077aa:	6820      	ldr	r0, [r4, #0]
 80077ac:	1809      	adds	r1, r1, r0
 80077ae:	1850      	adds	r0, r2, r1
 80077b0:	6011      	str	r1, [r2, #0]
 80077b2:	4283      	cmp	r3, r0
 80077b4:	d1e0      	bne.n	8007778 <_free_r+0x24>
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	1841      	adds	r1, r0, r1
 80077bc:	6011      	str	r1, [r2, #0]
 80077be:	6053      	str	r3, [r2, #4]
 80077c0:	e7da      	b.n	8007778 <_free_r+0x24>
 80077c2:	42a0      	cmp	r0, r4
 80077c4:	d902      	bls.n	80077cc <_free_r+0x78>
 80077c6:	230c      	movs	r3, #12
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	e7d5      	b.n	8007778 <_free_r+0x24>
 80077cc:	6821      	ldr	r1, [r4, #0]
 80077ce:	1860      	adds	r0, r4, r1
 80077d0:	4283      	cmp	r3, r0
 80077d2:	d103      	bne.n	80077dc <_free_r+0x88>
 80077d4:	6818      	ldr	r0, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	1841      	adds	r1, r0, r1
 80077da:	6021      	str	r1, [r4, #0]
 80077dc:	6063      	str	r3, [r4, #4]
 80077de:	6054      	str	r4, [r2, #4]
 80077e0:	e7ca      	b.n	8007778 <_free_r+0x24>
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	2000078c 	.word	0x2000078c

080077e8 <sbrk_aligned>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	4e0f      	ldr	r6, [pc, #60]	; (8007828 <sbrk_aligned+0x40>)
 80077ec:	000d      	movs	r5, r1
 80077ee:	6831      	ldr	r1, [r6, #0]
 80077f0:	0004      	movs	r4, r0
 80077f2:	2900      	cmp	r1, #0
 80077f4:	d102      	bne.n	80077fc <sbrk_aligned+0x14>
 80077f6:	f000 f8bf 	bl	8007978 <_sbrk_r>
 80077fa:	6030      	str	r0, [r6, #0]
 80077fc:	0029      	movs	r1, r5
 80077fe:	0020      	movs	r0, r4
 8007800:	f000 f8ba 	bl	8007978 <_sbrk_r>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d00a      	beq.n	800781e <sbrk_aligned+0x36>
 8007808:	2303      	movs	r3, #3
 800780a:	1cc5      	adds	r5, r0, #3
 800780c:	439d      	bics	r5, r3
 800780e:	42a8      	cmp	r0, r5
 8007810:	d007      	beq.n	8007822 <sbrk_aligned+0x3a>
 8007812:	1a29      	subs	r1, r5, r0
 8007814:	0020      	movs	r0, r4
 8007816:	f000 f8af 	bl	8007978 <_sbrk_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d101      	bne.n	8007822 <sbrk_aligned+0x3a>
 800781e:	2501      	movs	r5, #1
 8007820:	426d      	negs	r5, r5
 8007822:	0028      	movs	r0, r5
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	20000790 	.word	0x20000790

0800782c <_malloc_r>:
 800782c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800782e:	2203      	movs	r2, #3
 8007830:	1ccb      	adds	r3, r1, #3
 8007832:	4393      	bics	r3, r2
 8007834:	3308      	adds	r3, #8
 8007836:	0006      	movs	r6, r0
 8007838:	001f      	movs	r7, r3
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d232      	bcs.n	80078a4 <_malloc_r+0x78>
 800783e:	270c      	movs	r7, #12
 8007840:	42b9      	cmp	r1, r7
 8007842:	d831      	bhi.n	80078a8 <_malloc_r+0x7c>
 8007844:	0030      	movs	r0, r6
 8007846:	f000 f8a9 	bl	800799c <__malloc_lock>
 800784a:	4d32      	ldr	r5, [pc, #200]	; (8007914 <_malloc_r+0xe8>)
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	001c      	movs	r4, r3
 8007850:	2c00      	cmp	r4, #0
 8007852:	d12e      	bne.n	80078b2 <_malloc_r+0x86>
 8007854:	0039      	movs	r1, r7
 8007856:	0030      	movs	r0, r6
 8007858:	f7ff ffc6 	bl	80077e8 <sbrk_aligned>
 800785c:	0004      	movs	r4, r0
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d11e      	bne.n	80078a0 <_malloc_r+0x74>
 8007862:	682c      	ldr	r4, [r5, #0]
 8007864:	0025      	movs	r5, r4
 8007866:	2d00      	cmp	r5, #0
 8007868:	d14a      	bne.n	8007900 <_malloc_r+0xd4>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	0029      	movs	r1, r5
 800786e:	18e3      	adds	r3, r4, r3
 8007870:	0030      	movs	r0, r6
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	f000 f880 	bl	8007978 <_sbrk_r>
 8007878:	9b01      	ldr	r3, [sp, #4]
 800787a:	4283      	cmp	r3, r0
 800787c:	d143      	bne.n	8007906 <_malloc_r+0xda>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	3703      	adds	r7, #3
 8007882:	1aff      	subs	r7, r7, r3
 8007884:	2303      	movs	r3, #3
 8007886:	439f      	bics	r7, r3
 8007888:	3708      	adds	r7, #8
 800788a:	2f0c      	cmp	r7, #12
 800788c:	d200      	bcs.n	8007890 <_malloc_r+0x64>
 800788e:	270c      	movs	r7, #12
 8007890:	0039      	movs	r1, r7
 8007892:	0030      	movs	r0, r6
 8007894:	f7ff ffa8 	bl	80077e8 <sbrk_aligned>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d034      	beq.n	8007906 <_malloc_r+0xda>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	19df      	adds	r7, r3, r7
 80078a0:	6027      	str	r7, [r4, #0]
 80078a2:	e013      	b.n	80078cc <_malloc_r+0xa0>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dacb      	bge.n	8007840 <_malloc_r+0x14>
 80078a8:	230c      	movs	r3, #12
 80078aa:	2500      	movs	r5, #0
 80078ac:	6033      	str	r3, [r6, #0]
 80078ae:	0028      	movs	r0, r5
 80078b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	1bd1      	subs	r1, r2, r7
 80078b6:	d420      	bmi.n	80078fa <_malloc_r+0xce>
 80078b8:	290b      	cmp	r1, #11
 80078ba:	d917      	bls.n	80078ec <_malloc_r+0xc0>
 80078bc:	19e2      	adds	r2, r4, r7
 80078be:	6027      	str	r7, [r4, #0]
 80078c0:	42a3      	cmp	r3, r4
 80078c2:	d111      	bne.n	80078e8 <_malloc_r+0xbc>
 80078c4:	602a      	str	r2, [r5, #0]
 80078c6:	6863      	ldr	r3, [r4, #4]
 80078c8:	6011      	str	r1, [r2, #0]
 80078ca:	6053      	str	r3, [r2, #4]
 80078cc:	0030      	movs	r0, r6
 80078ce:	0025      	movs	r5, r4
 80078d0:	f000 f86c 	bl	80079ac <__malloc_unlock>
 80078d4:	2207      	movs	r2, #7
 80078d6:	350b      	adds	r5, #11
 80078d8:	1d23      	adds	r3, r4, #4
 80078da:	4395      	bics	r5, r2
 80078dc:	1aea      	subs	r2, r5, r3
 80078de:	429d      	cmp	r5, r3
 80078e0:	d0e5      	beq.n	80078ae <_malloc_r+0x82>
 80078e2:	1b5b      	subs	r3, r3, r5
 80078e4:	50a3      	str	r3, [r4, r2]
 80078e6:	e7e2      	b.n	80078ae <_malloc_r+0x82>
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	e7ec      	b.n	80078c6 <_malloc_r+0x9a>
 80078ec:	6862      	ldr	r2, [r4, #4]
 80078ee:	42a3      	cmp	r3, r4
 80078f0:	d101      	bne.n	80078f6 <_malloc_r+0xca>
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	e7ea      	b.n	80078cc <_malloc_r+0xa0>
 80078f6:	605a      	str	r2, [r3, #4]
 80078f8:	e7e8      	b.n	80078cc <_malloc_r+0xa0>
 80078fa:	0023      	movs	r3, r4
 80078fc:	6864      	ldr	r4, [r4, #4]
 80078fe:	e7a7      	b.n	8007850 <_malloc_r+0x24>
 8007900:	002c      	movs	r4, r5
 8007902:	686d      	ldr	r5, [r5, #4]
 8007904:	e7af      	b.n	8007866 <_malloc_r+0x3a>
 8007906:	230c      	movs	r3, #12
 8007908:	0030      	movs	r0, r6
 800790a:	6033      	str	r3, [r6, #0]
 800790c:	f000 f84e 	bl	80079ac <__malloc_unlock>
 8007910:	e7cd      	b.n	80078ae <_malloc_r+0x82>
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	2000078c 	.word	0x2000078c

08007918 <_realloc_r>:
 8007918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800791a:	0007      	movs	r7, r0
 800791c:	000e      	movs	r6, r1
 800791e:	0014      	movs	r4, r2
 8007920:	2900      	cmp	r1, #0
 8007922:	d105      	bne.n	8007930 <_realloc_r+0x18>
 8007924:	0011      	movs	r1, r2
 8007926:	f7ff ff81 	bl	800782c <_malloc_r>
 800792a:	0005      	movs	r5, r0
 800792c:	0028      	movs	r0, r5
 800792e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007930:	2a00      	cmp	r2, #0
 8007932:	d103      	bne.n	800793c <_realloc_r+0x24>
 8007934:	f7ff ff0e 	bl	8007754 <_free_r>
 8007938:	0025      	movs	r5, r4
 800793a:	e7f7      	b.n	800792c <_realloc_r+0x14>
 800793c:	f000 f83e 	bl	80079bc <_malloc_usable_size_r>
 8007940:	9001      	str	r0, [sp, #4]
 8007942:	4284      	cmp	r4, r0
 8007944:	d803      	bhi.n	800794e <_realloc_r+0x36>
 8007946:	0035      	movs	r5, r6
 8007948:	0843      	lsrs	r3, r0, #1
 800794a:	42a3      	cmp	r3, r4
 800794c:	d3ee      	bcc.n	800792c <_realloc_r+0x14>
 800794e:	0021      	movs	r1, r4
 8007950:	0038      	movs	r0, r7
 8007952:	f7ff ff6b 	bl	800782c <_malloc_r>
 8007956:	1e05      	subs	r5, r0, #0
 8007958:	d0e8      	beq.n	800792c <_realloc_r+0x14>
 800795a:	9b01      	ldr	r3, [sp, #4]
 800795c:	0022      	movs	r2, r4
 800795e:	429c      	cmp	r4, r3
 8007960:	d900      	bls.n	8007964 <_realloc_r+0x4c>
 8007962:	001a      	movs	r2, r3
 8007964:	0031      	movs	r1, r6
 8007966:	0028      	movs	r0, r5
 8007968:	f7ff fbc0 	bl	80070ec <memcpy>
 800796c:	0031      	movs	r1, r6
 800796e:	0038      	movs	r0, r7
 8007970:	f7ff fef0 	bl	8007754 <_free_r>
 8007974:	e7da      	b.n	800792c <_realloc_r+0x14>
	...

08007978 <_sbrk_r>:
 8007978:	2300      	movs	r3, #0
 800797a:	b570      	push	{r4, r5, r6, lr}
 800797c:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_sbrk_r+0x20>)
 800797e:	0004      	movs	r4, r0
 8007980:	0008      	movs	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7fb fcea 	bl	800335c <_sbrk>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d103      	bne.n	8007994 <_sbrk_r+0x1c>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d000      	beq.n	8007994 <_sbrk_r+0x1c>
 8007992:	6023      	str	r3, [r4, #0]
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	20000794 	.word	0x20000794

0800799c <__malloc_lock>:
 800799c:	b510      	push	{r4, lr}
 800799e:	4802      	ldr	r0, [pc, #8]	; (80079a8 <__malloc_lock+0xc>)
 80079a0:	f000 f814 	bl	80079cc <__retarget_lock_acquire_recursive>
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	20000798 	.word	0x20000798

080079ac <__malloc_unlock>:
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4802      	ldr	r0, [pc, #8]	; (80079b8 <__malloc_unlock+0xc>)
 80079b0:	f000 f80d 	bl	80079ce <__retarget_lock_release_recursive>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	20000798 	.word	0x20000798

080079bc <_malloc_usable_size_r>:
 80079bc:	1f0b      	subs	r3, r1, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	1f18      	subs	r0, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da01      	bge.n	80079ca <_malloc_usable_size_r+0xe>
 80079c6:	580b      	ldr	r3, [r1, r0]
 80079c8:	18c0      	adds	r0, r0, r3
 80079ca:	4770      	bx	lr

080079cc <__retarget_lock_acquire_recursive>:
 80079cc:	4770      	bx	lr

080079ce <__retarget_lock_release_recursive>:
 80079ce:	4770      	bx	lr

080079d0 <_init>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr

080079dc <_fini>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr
