
Szeloba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b3c  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a19c  0800a19c  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a4  0800a1a4  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1a8  0800a1a8  0001a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800a1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000194  0800a340  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800a340  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146d8  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cd  00000000  00000000  00034894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00037a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00038be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017430  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c8a  00000000  00000000  00051030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ed7  00000000  00000000  00067cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeb91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  000eebe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000194 	.word	0x20000194
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007648 	.word	0x08007648

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000198 	.word	0x20000198
 8000104:	08007648 	.word	0x08007648

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4647      	mov	r7, r8
 800045e:	b580      	push	{r7, lr}
 8000460:	0007      	movs	r7, r0
 8000462:	4699      	mov	r9, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	469c      	mov	ip, r3
 8000468:	0413      	lsls	r3, r2, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0400      	lsls	r0, r0, #16
 8000474:	0c14      	lsrs	r4, r2, #16
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	4345      	muls	r5, r0
 800047a:	434b      	muls	r3, r1
 800047c:	4360      	muls	r0, r4
 800047e:	4361      	muls	r1, r4
 8000480:	18c0      	adds	r0, r0, r3
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4372      	muls	r2, r6
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	4463      	add	r3, ip
 800049e:	042d      	lsls	r5, r5, #16
 80004a0:	0c2d      	lsrs	r5, r5, #16
 80004a2:	18c9      	adds	r1, r1, r3
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	1889      	adds	r1, r1, r2
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	469b      	mov	fp, r3
 80004ea:	d433      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ec:	465a      	mov	r2, fp
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83a      	bhi.n	8000576 <__udivmoddi4+0xc2>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e078      	b.n	80005f8 <__udivmoddi4+0x144>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e075      	b.n	80005fe <__udivmoddi4+0x14a>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e028      	b.n	800057e <__udivmoddi4+0xca>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	2320      	movs	r3, #32
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	4652      	mov	r2, sl
 800055c:	40da      	lsrs	r2, r3
 800055e:	4641      	mov	r1, r8
 8000560:	0013      	movs	r3, r2
 8000562:	464a      	mov	r2, r9
 8000564:	408a      	lsls	r2, r1
 8000566:	0017      	movs	r7, r2
 8000568:	4642      	mov	r2, r8
 800056a:	431f      	orrs	r7, r3
 800056c:	4653      	mov	r3, sl
 800056e:	4093      	lsls	r3, r2
 8000570:	001e      	movs	r6, r3
 8000572:	42af      	cmp	r7, r5
 8000574:	d9c4      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000576:	2200      	movs	r2, #0
 8000578:	2300      	movs	r3, #0
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0d9      	beq.n	8000538 <__udivmoddi4+0x84>
 8000584:	07fb      	lsls	r3, r7, #31
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	4646      	mov	r6, r8
 800058c:	087b      	lsrs	r3, r7, #1
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xfa>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xe4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xfe>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0x108>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xdc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xfa>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	465b      	mov	r3, fp
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db24      	blt.n	8000614 <__udivmoddi4+0x160>
 80005ca:	002b      	movs	r3, r5
 80005cc:	465a      	mov	r2, fp
 80005ce:	4644      	mov	r4, r8
 80005d0:	40d3      	lsrs	r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	465b      	mov	r3, fp
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2a      	blt.n	8000636 <__udivmoddi4+0x182>
 80005e0:	0026      	movs	r6, r4
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	0026      	movs	r6, r4
 80005e8:	4647      	mov	r7, r8
 80005ea:	40be      	lsls	r6, r7
 80005ec:	0032      	movs	r2, r6
 80005ee:	1a80      	subs	r0, r0, r2
 80005f0:	4199      	sbcs	r1, r3
 80005f2:	9000      	str	r0, [sp, #0]
 80005f4:	9101      	str	r1, [sp, #4]
 80005f6:	e79f      	b.n	8000538 <__udivmoddi4+0x84>
 80005f8:	42a3      	cmp	r3, r4
 80005fa:	d8bc      	bhi.n	8000576 <__udivmoddi4+0xc2>
 80005fc:	e783      	b.n	8000506 <__udivmoddi4+0x52>
 80005fe:	4642      	mov	r2, r8
 8000600:	2320      	movs	r3, #32
 8000602:	2100      	movs	r1, #0
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2200      	movs	r2, #0
 8000608:	9100      	str	r1, [sp, #0]
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	40da      	lsrs	r2, r3
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	e786      	b.n	8000522 <__udivmoddi4+0x6e>
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	4646      	mov	r6, r8
 800061e:	409a      	lsls	r2, r3
 8000620:	0023      	movs	r3, r4
 8000622:	40f3      	lsrs	r3, r6
 8000624:	4644      	mov	r4, r8
 8000626:	4313      	orrs	r3, r2
 8000628:	002a      	movs	r2, r5
 800062a:	40e2      	lsrs	r2, r4
 800062c:	001c      	movs	r4, r3
 800062e:	465b      	mov	r3, fp
 8000630:	0015      	movs	r5, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	dad4      	bge.n	80005e0 <__udivmoddi4+0x12c>
 8000636:	4642      	mov	r2, r8
 8000638:	002f      	movs	r7, r5
 800063a:	2320      	movs	r3, #32
 800063c:	0026      	movs	r6, r4
 800063e:	4097      	lsls	r7, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	40de      	lsrs	r6, r3
 8000644:	003b      	movs	r3, r7
 8000646:	4333      	orrs	r3, r6
 8000648:	e7cd      	b.n	80005e6 <__udivmoddi4+0x132>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	; (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b08b      	sub	sp, #44	; 0x2c
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	2414      	movs	r4, #20
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2314      	movs	r3, #20
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f006 fb60 	bl	8006d76 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <MX_GPIO_Init+0x164>)
 80006b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <MX_GPIO_Init+0x164>)
 80006bc:	2104      	movs	r1, #4
 80006be:	430a      	orrs	r2, r1
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c2:	4b50      	ldr	r3, [pc, #320]	; (8000804 <MX_GPIO_Init+0x164>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c6:	2204      	movs	r2, #4
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <MX_GPIO_Init+0x164>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d2:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <MX_GPIO_Init+0x164>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <MX_GPIO_Init+0x164>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	4013      	ands	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b47      	ldr	r3, [pc, #284]	; (8000804 <MX_GPIO_Init+0x164>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x164>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <MX_GPIO_Init+0x164>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <MX_GPIO_Init+0x164>)
 8000700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x164>)
 8000704:	2102      	movs	r1, #2
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <MX_GPIO_Init+0x164>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	2202      	movs	r2, #2
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_GPIO_Init+0x164>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x164>)
 800071c:	2108      	movs	r1, #8
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_GPIO_Init+0x164>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2208      	movs	r2, #8
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800072e:	193b      	adds	r3, r7, r4
 8000730:	4a35      	ldr	r2, [pc, #212]	; (8000808 <MX_GPIO_Init+0x168>)
 8000732:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2203      	movs	r2, #3
 8000738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	4a32      	ldr	r2, [pc, #200]	; (800080c <MX_GPIO_Init+0x16c>)
 8000744:	0019      	movs	r1, r3
 8000746:	0010      	movs	r0, r2
 8000748:	f002 fd7e 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2202      	movs	r2, #2
 8000750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2203      	movs	r2, #3
 8000756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800075e:	193b      	adds	r3, r7, r4
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <MX_GPIO_Init+0x170>)
 8000762:	0019      	movs	r1, r3
 8000764:	0010      	movs	r0, r2
 8000766:	f002 fd6f 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2210      	movs	r2, #16
 800076e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2284      	movs	r2, #132	; 0x84
 8000774:	0392      	lsls	r2, r2, #14
 8000776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2201      	movs	r2, #1
 800077c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 800077e:	193a      	adds	r2, r7, r4
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fd5e 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800078c:	193b      	adds	r3, r7, r4
 800078e:	4a21      	ldr	r2, [pc, #132]	; (8000814 <MX_GPIO_Init+0x174>)
 8000790:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2203      	movs	r2, #3
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	193a      	adds	r2, r7, r4
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fd4e 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <MX_GPIO_Init+0x178>)
 80007b0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2203      	movs	r2, #3
 80007b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_GPIO_Init+0x17c>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f002 fd3f 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2204      	movs	r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2203      	movs	r2, #3
 80007d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_GPIO_Init+0x180>)
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f002 fd2f 	bl	8003248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2007      	movs	r0, #7
 80007f0:	f002 fc70 	bl	80030d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007f4:	2007      	movs	r0, #7
 80007f6:	f002 fc82 	bl	80030fe <HAL_NVIC_EnableIRQ>

}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b00b      	add	sp, #44	; 0x2c
 8000800:	bd90      	pop	{r4, r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	00003fff 	.word	0x00003fff
 800080c:	50000800 	.word	0x50000800
 8000810:	50001c00 	.word	0x50001c00
 8000814:	00009fe0 	.word	0x00009fe0
 8000818:	0000fcff 	.word	0x0000fcff
 800081c:	50000400 	.word	0x50000400
 8000820:	50000c00 	.word	0x50000c00

08000824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C1_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C1_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2C1_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fea9 	bl	80035b8 <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 fb29 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2C1_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f003 fae4 	bl	8003e40 <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fb20 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_I2C1_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f003 fb27 	bl	8003ed8 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 fb17 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001b0 	.word	0x200001b0
 800089c:	40005400 	.word	0x40005400
 80008a0:	0000020b 	.word	0x0000020b

080008a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	240c      	movs	r4, #12
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2314      	movs	r3, #20
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f006 fa5d 	bl	8006d76 <memset>
  if(i2cHandle->Instance==I2C1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_I2C_MspInit+0x80>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d129      	bne.n	800091a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_I2C_MspInit+0x84>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	22c0      	movs	r2, #192	; 0xc0
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2212      	movs	r2, #18
 80008ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2203      	movs	r2, #3
 80008f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2204      	movs	r2, #4
 80008fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	187b      	adds	r3, r7, r1
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_I2C_MspInit+0x88>)
 8000904:	0019      	movs	r1, r3
 8000906:	0010      	movs	r0, r2
 8000908:	f002 fc9e 	bl	8003248 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2C_MspInit+0x84>)
 800090e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_I2C_MspInit+0x84>)
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	0389      	lsls	r1, r1, #14
 8000916:	430a      	orrs	r2, r1
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b009      	add	sp, #36	; 0x24
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	50000400 	.word	0x50000400

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f002 fa8e 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f830 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f7ff feb0 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000940:	f002 f9e2 	bl	8002d08 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000944:	f7ff ff6e 	bl	8000824 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000948:	f002 f882 	bl	8002a50 <MX_TIM2_Init>
  MX_TIM6_Init();
 800094c:	f002 f8e4 	bl	8002b18 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000950:	f002 f91e 	bl	8002b90 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  // USART & TIMERS
  HAL_UART_Receive_IT(&huart2, &usart2data, 1);
 8000954:	490d      	ldr	r1, [pc, #52]	; (800098c <main+0x5c>)
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <main+0x60>)
 8000958:	2201      	movs	r2, #1
 800095a:	0018      	movs	r0, r3
 800095c:	f004 ff56 	bl	800580c <HAL_UART_Receive_IT>
  printUART((unsigned char*)"Running...");
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <main+0x64>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fab2 	bl	8000ecc <printUART>
  // display initialization
  SSD1306_Init();
 8000968:	f000 fb72 	bl	8001050 <SSD1306_Init>
  SSD1306_SetContrast(0);
 800096c:	2000      	movs	r0, #0
 800096e:	f001 f84b 	bl	8001a08 <SSD1306_SetContrast>
  setTheme();
 8000972:	f001 f90d 	bl	8001b90 <setTheme>
  __HAL_TIM_SET_COUNTER(&htim2, 32000);
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <main+0x68>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	22fa      	movs	r2, #250	; 0xfa
 800097c:	01d2      	lsls	r2, r2, #7
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <main+0x68>)
 8000982:	213c      	movs	r1, #60	; 0x3c
 8000984:	0018      	movs	r0, r3
 8000986:	f004 fbb7 	bl	80050f8 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0x5a>
 800098c:	200001fc 	.word	0x200001fc
 8000990:	200006e0 	.word	0x200006e0
 8000994:	08007660 	.word	0x08007660
 8000998:	20000620 	.word	0x20000620

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b09f      	sub	sp, #124	; 0x7c
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	2440      	movs	r4, #64	; 0x40
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	0018      	movs	r0, r3
 80009a8:	2338      	movs	r3, #56	; 0x38
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f006 f9e2 	bl	8006d76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b2:	232c      	movs	r3, #44	; 0x2c
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f006 f9da 	bl	8006d76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	0018      	movs	r0, r3
 80009c6:	2328      	movs	r3, #40	; 0x28
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f006 f9d3 	bl	8006d76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <SystemClock_Config+0xc8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <SystemClock_Config+0xcc>)
 80009d6:	401a      	ands	r2, r3
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <SystemClock_Config+0xc8>)
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	430a      	orrs	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e2:	193b      	adds	r3, r7, r4
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	22a0      	movs	r2, #160	; 0xa0
 80009ec:	02d2      	lsls	r2, r2, #11
 80009ee:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	f003 fab9 	bl	8003f70 <HAL_RCC_OscConfig>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a02:	f000 fa5d 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	212c      	movs	r1, #44	; 0x2c
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2100      	movs	r1, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f003 fe74 	bl	8004718 <HAL_RCC_ClockConfig>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a34:	f000 fa44 	bl	8000ec0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	220a      	movs	r2, #10
 8000a3c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2204      	movs	r2, #4
 8000a42:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f004 f887 	bl	8004b60 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a56:	f000 fa33 	bl	8000ec0 <Error_Handler>
  }
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b01f      	add	sp, #124	; 0x7c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40007000 	.word	0x40007000
 8000a68:	ffffe7ff 	.word	0xffffe7ff

08000a6c <HAL_UART_RxCpltCallback>:

// =========================================================================================
/* UART */
// =========================================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_UART_RxCpltCallback+0x38>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10d      	bne.n	8000a9a <HAL_UART_RxCpltCallback+0x2e>
	{
		if(usart2data == '\r')
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b0d      	cmp	r3, #13
 8000a84:	d103      	bne.n	8000a8e <HAL_UART_RxCpltCallback+0x22>
		{
			printUART((uint8_t *) "Connected");
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_UART_RxCpltCallback+0x40>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fa1f 	bl	8000ecc <printUART>
		}
		HAL_UART_Receive_IT(&huart2, &usart2data, 1);
 8000a8e:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <HAL_UART_RxCpltCallback+0x3c>)
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_UART_RxCpltCallback+0x44>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	0018      	movs	r0, r3
 8000a96:	f004 feb9 	bl	800580c <HAL_UART_Receive_IT>
	}
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	200001fc 	.word	0x200001fc
 8000aac:	0800766c 	.word	0x0800766c
 8000ab0:	200006e0 	.word	0x200006e0

08000ab4 <HAL_TIM_IC_CaptureCallback>:

// =========================================================================================
/* TIMERS - ENCODER */
// =========================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d11b      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000ac8:	250f      	movs	r5, #15
 8000aca:	197c      	adds	r4, r7, r5
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 fca7 	bl	8005422 <HAL_TIM_Base_GetState>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	7023      	strb	r3, [r4, #0]
		uint8_t encoderBusyFlag = HAL_TIM_Encoder_GetState(&htim7);
 8000ad8:	260e      	movs	r6, #14
 8000ada:	19bc      	adds	r4, r7, r6
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f004 fcab 	bl	800543a <HAL_TIM_Encoder_GetState>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	7023      	strb	r3, [r4, #0]
		if(tim7BusyFlag == 1)
 8000ae8:	197b      	adds	r3, r7, r5
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d107      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if(encoderBusyFlag == 1)
 8000af0:	19bb      	adds	r3, r7, r6
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d103      	bne.n	8000b00 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				HAL_TIM_Base_Start_IT(&htim7);
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f004 f9e4 	bl	8004ec8 <HAL_TIM_Base_Start_IT>
			}
		}
	}
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b005      	add	sp, #20
 8000b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b08:	200006a0 	.word	0x200006a0

08000b0c <HAL_TIM_PeriodElapsedCallback>:

// =========================================================================================
/* TIMERS - COUNTING */
// =========================================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

	// ========================
	/* TIM6 - CLICK BUFFOR */
	// ========================
	if(htim->Instance == TIM6)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4ac7      	ldr	r2, [pc, #796]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d000      	beq.n	8000b20 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000b1e:	e102      	b.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x21a>
	{
		bool btnBusyFlag = HAL_GPIO_ReadPin(GPIOA, SET_BTN_Pin);
 8000b20:	23a0      	movs	r3, #160	; 0xa0
 8000b22:	05db      	lsls	r3, r3, #23
 8000b24:	2110      	movs	r1, #16
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fd0c 	bl	8003544 <HAL_GPIO_ReadPin>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	001a      	movs	r2, r3
 8000b30:	240e      	movs	r4, #14
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	1e51      	subs	r1, r2, #1
 8000b36:	418a      	sbcs	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8000b3a:	4bc0      	ldr	r3, [pc, #768]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f004 fa15 	bl	8004f6c <HAL_TIM_Base_Stop_IT>

		if(!btnBusyFlag)
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4053      	eors	r3, r2
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d100      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x46>
 8000b50:	e09d      	b.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x182>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000b52:	4bba      	ldr	r3, [pc, #744]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f004 f9b7 	bl	8004ec8 <HAL_TIM_Base_Start_IT>
			switch(workStep)
 8000b5a:	4bb9      	ldr	r3, [pc, #740]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b05      	cmp	r3, #5
 8000b62:	d100      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000b64:	e071      	b.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x13e>
 8000b66:	dd00      	ble.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000b68:	e09a      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	d04b      	beq.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8000b6e:	dd00      	ble.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x66>
 8000b70:	e096      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d002      	beq.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0x70>
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d023      	beq.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000b7a:	e091      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
			{
				case 2: // step 2
					pressBtnCounter++;
 8000b7c:	4bb1      	ldr	r3, [pc, #708]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4baf      	ldr	r3, [pc, #700]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000b88:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 8000b8a:	4bae      	ldr	r3, [pc, #696]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	220f      	movs	r2, #15
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d800      	bhi.n	8000b98 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8000b96:	e07c      	b.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x186>
					{
						width_MAIN = arrayToInt_chVal();
 8000b98:	f001 fd08 	bl	80025ac <arrayToInt_chVal>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4ba9      	ldr	r3, [pc, #676]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000ba2:	701a      	strb	r2, [r3, #0]
						workStep = 3;
 8000ba4:	4ba6      	ldr	r3, [pc, #664]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000baa:	4ba6      	ldr	r3, [pc, #664]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000bb0:	4ba2      	ldr	r3, [pc, #648]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f004 f9da 	bl	8004f6c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000bb8:	f001 fde0 	bl	800277c <clearSettings>
						setTheme();
 8000bbc:	f000 ffe8 	bl	8001b90 <setTheme>
					}
				break;
 8000bc0:	e067      	b.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x186>
				case 3: // step 3
					pressBtnCounter++;
 8000bc2:	4ba0      	ldr	r3, [pc, #640]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b9d      	ldr	r3, [pc, #628]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000bce:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 8000bd0:	4b9c      	ldr	r3, [pc, #624]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d95c      	bls.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x18a>
					{
						turns_MAIN = arrayToInt_chVal();
 8000bdc:	f001 fce6 	bl	80025ac <arrayToInt_chVal>
 8000be0:	0003      	movs	r3, r0
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b99      	ldr	r3, [pc, #612]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000be6:	701a      	strb	r2, [r3, #0]
						workStep = 4;
 8000be8:	4b95      	ldr	r3, [pc, #596]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000bee:	4b95      	ldr	r3, [pc, #596]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000bf4:	4b91      	ldr	r3, [pc, #580]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f004 f9b8 	bl	8004f6c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000bfc:	f001 fdbe 	bl	800277c <clearSettings>
						setTheme();
 8000c00:	f000 ffc6 	bl	8001b90 <setTheme>
					}
				break;
 8000c04:	e047      	b.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x18a>
				case 4: // step 4
					pressBtnCounter++;
 8000c06:	4b8f      	ldr	r3, [pc, #572]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c12:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 8000c14:	4b8b      	ldr	r3, [pc, #556]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d93c      	bls.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x18e>
					{
						diameter_MAIN = arrayToInt_chVal();
 8000c20:	f001 fcc4 	bl	80025ac <arrayToInt_chVal>
 8000c24:	0003      	movs	r3, r0
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b89      	ldr	r3, [pc, #548]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000c2a:	701a      	strb	r2, [r3, #0]
						workStep = 5;
 8000c2c:	4b84      	ldr	r3, [pc, #528]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c2e:	2205      	movs	r2, #5
 8000c30:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000c32:	4b84      	ldr	r3, [pc, #528]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000c38:	4b80      	ldr	r3, [pc, #512]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f004 f996 	bl	8004f6c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000c40:	f001 fd9c 	bl	800277c <clearSettings>
						setTheme();
 8000c44:	f000 ffa4 	bl	8001b90 <setTheme>
					}
				break;
 8000c48:	e027      	b.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x18e>
				case 5: // step 5
					pressBtnCounter++;
 8000c4a:	4b7e      	ldr	r3, [pc, #504]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	3301      	adds	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b7b      	ldr	r3, [pc, #492]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c56:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 8000c58:	4b7a      	ldr	r3, [pc, #488]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	220f      	movs	r2, #15
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d91c      	bls.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x192>
					{
						speed_MAIN = arrayToInt_chVal();
 8000c64:	f001 fca2 	bl	80025ac <arrayToInt_chVal>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b79      	ldr	r3, [pc, #484]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c6e:	701a      	strb	r2, [r3, #0]
						workStep = 6;
 8000c70:	4b73      	ldr	r3, [pc, #460]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000c72:	2206      	movs	r2, #6
 8000c74:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000c76:	4b73      	ldr	r3, [pc, #460]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000c7c:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f004 f974 	bl	8004f6c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000c84:	f001 fd7a 	bl	800277c <clearSettings>
						setTheme();
 8000c88:	f000 ff82 	bl	8001b90 <setTheme>
					}
				break;
 8000c8c:	e007      	b.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x192>
			}
		}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	e006      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	e004      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	e002      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	e000      	b.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000c9e:	46c0      	nop			; (mov r8, r8)
		if(btnBusyFlag)
 8000ca0:	230e      	movs	r3, #14
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d03d      	beq.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x21a>
		{
			pressBtnCounter = 0;
 8000caa:	4b66      	ldr	r3, [pc, #408]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			switch(workStep)
 8000cb0:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b0b      	cmp	r3, #11
 8000cb8:	d836      	bhi.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
 8000cba:	009a      	lsls	r2, r3, #2
 8000cbc:	4b66      	ldr	r3, [pc, #408]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000cbe:	18d3      	adds	r3, r2, r3
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	469f      	mov	pc, r3
			{
				case 1: // step 1
					if(projectSelect == 0)
 8000cc4:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x1ca>
					{
						workStep = 2;
 8000cce:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e002      	b.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x1d0>
					}
					else
					{
						workStep = 11;
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000cd8:	220b      	movs	r2, #11
 8000cda:	701a      	strb	r2, [r3, #0]
					}
				setTheme();
 8000cdc:	f000 ff58 	bl	8001b90 <setTheme>
				break;
 8000ce0:	e022      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 11: // step 11
					workStep = 1;
 8000ce2:	4b57      	ldr	r3, [pc, #348]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000ce8:	f000 ff52 	bl	8001b90 <setTheme>
				break;
 8000cec:	e01c      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 2: // step 2
					showValueScreen(CARCASS_WIDTH, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f001 fa05 	bl	8002104 <showValueScreen>
				break;
 8000cfa:	e015      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 3: // step 3
					showValueScreen(CARCASS_COIL_TURNS, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f001 f9fe 	bl	8002104 <showValueScreen>
				break;
 8000d08:	e00e      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 4: // step 4
					showValueScreen(WINDING_DIAMETER, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2002      	movs	r0, #2
 8000d12:	f001 f9f7 	bl	8002104 <showValueScreen>
				break;
 8000d16:	e007      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 5: // step 5
					showValueScreen(WINDING_SPEED, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000d18:	2300      	movs	r3, #0
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f001 f9f0 	bl	8002104 <showValueScreen>
				break;
 8000d24:	e000      	b.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x21c>
			}
		}
 8000d26:	46c0      	nop			; (mov r8, r8)
	}

	// ========================
	/* TIM7 - BUFFOR LEFT/RIGHT */
	// ========================
	if(htim->Instance == TIM7)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d000      	beq.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x228>
 8000d32:	e07c      	b.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x322>
	{
		HAL_TIM_Base_Stop_IT(&htim7);
 8000d34:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f004 f918 	bl	8004f6c <HAL_TIM_Base_Stop_IT>
		encoderCount = (__HAL_TIM_GET_COUNTER(&htim2) / 2);
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	085b      	lsrs	r3, r3, #1
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d48:	801a      	strh	r2, [r3, #0]
		bool direction;
		if(encoderCount != encoderCountPrev)
 8000d4a:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b47      	ldr	r3, [pc, #284]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d069      	beq.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x322>
		{
			if(encoderCount > encoderCountPrev)
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d904      	bls.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x268>
			{
				direction = 1;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e003      	b.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x270>
			}
			else
			{
				direction = 0;
 8000d74:	230f      	movs	r3, #15
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
			}
			encoderCountPrev = encoderCount;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000d84:	801a      	strh	r2, [r3, #0]
			switch(workStep)
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d84f      	bhi.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x324>
 8000d90:	009a      	lsls	r2, r3, #2
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	469f      	mov	pc, r3
			{
				case 1: // step 1
					if(!direction)
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4053      	eors	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00c      	beq.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x2b8>
					{
						if(projectSelect > 0)
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d015      	beq.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
						{
							projectSelect--;
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e00d      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
						}
					}
					else
					{
						if((projectSelect) < PROJECT_COUNT)
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d206      	bcs.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x2d4>
						{
							projectSelect++;
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000dde:	701a      	strb	r2, [r3, #0]
						}
					}
					setTheme();
 8000de0:	f000 fed6 	bl	8001b90 <setTheme>
				break;
 8000de4:	e024      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x324>
				case 2: // step 2
					showValueScreen(CARCASS_WIDTH, VALUE_CHANGING, direction, CONTI_RUN);
 8000de6:	230f      	movs	r3, #15
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	2000      	movs	r0, #0
 8000df2:	f001 f987 	bl	8002104 <showValueScreen>
				break;
 8000df6:	e01b      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x324>
				case 3: // step 3
					showValueScreen(CARCASS_COIL_TURNS, VALUE_CHANGING, direction, CONTI_RUN);
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	2001      	movs	r0, #1
 8000e04:	f001 f97e 	bl	8002104 <showValueScreen>
				break;
 8000e08:	e012      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x324>
				case 4: // step 4
					showValueScreen(WINDING_DIAMETER, VALUE_CHANGING, direction, CONTI_RUN);
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	2002      	movs	r0, #2
 8000e16:	f001 f975 	bl	8002104 <showValueScreen>
				break;
 8000e1a:	e009      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x324>
				case 5: // step 4
					showValueScreen(WINDING_SPEED, VALUE_CHANGING, direction, CONTI_RUN);
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	2101      	movs	r1, #1
 8000e26:	2003      	movs	r0, #3
 8000e28:	f001 f96c 	bl	8002104 <showValueScreen>
				break;
 8000e2c:	e000      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x324>
			}
		}
 8000e2e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b005      	add	sp, #20
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	40001000 	.word	0x40001000
 8000e3c:	20000660 	.word	0x20000660
 8000e40:	2000060e 	.word	0x2000060e
 8000e44:	20000200 	.word	0x20000200
 8000e48:	20000201 	.word	0x20000201
 8000e4c:	20000202 	.word	0x20000202
 8000e50:	20000203 	.word	0x20000203
 8000e54:	20000204 	.word	0x20000204
 8000e58:	080077b8 	.word	0x080077b8
 8000e5c:	2000060f 	.word	0x2000060f
 8000e60:	40001400 	.word	0x40001400
 8000e64:	200006a0 	.word	0x200006a0
 8000e68:	20000620 	.word	0x20000620
 8000e6c:	200001fe 	.word	0x200001fe
 8000e70:	20000000 	.word	0x20000000
 8000e74:	080077e8 	.word	0x080077e8
 8000e78:	08008c00 	.word	0x08008c00

08000e7c <HAL_GPIO_EXTI_Callback>:

// =========================================================================================
/* GPIO */
// =========================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	0002      	movs	r2, r0
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	801a      	strh	r2, [r3, #0]
	uint8_t tim6BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000e88:	250f      	movs	r5, #15
 8000e8a:	197c      	adds	r4, r7, r5
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f004 fac7 	bl	8005422 <HAL_TIM_Base_GetState>
 8000e94:	0003      	movs	r3, r0
 8000e96:	7023      	strb	r3, [r4, #0]
	if(tim6BusyFlag == 1)
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d107      	bne.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if(GPIO_Pin == SET_BTN_Pin)
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d103      	bne.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x34>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x40>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f004 f80c 	bl	8004ec8 <HAL_TIM_Base_Start_IT>
		}
	}
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb8:	200006a0 	.word	0x200006a0
 8000ebc:	20000660 	.word	0x20000660

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <printUART>:

#include "misc.h"

// UART
void printUART(unsigned char * str)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	uint8_t length = strlen(str);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff f916 	bl	8000108 <strlen>
 8000edc:	0002      	movs	r2, r0
 8000ede:	210f      	movs	r1, #15
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, str, length, 10);
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <printUART+0x3c>)
 8000eee:	230a      	movs	r3, #10
 8000ef0:	f004 fbe4 	bl	80056bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (unsigned char*)"\r\n", 2, 10);
 8000ef4:	4905      	ldr	r1, [pc, #20]	; (8000f0c <printUART+0x40>)
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <printUART+0x3c>)
 8000ef8:	230a      	movs	r3, #10
 8000efa:	2202      	movs	r2, #2
 8000efc:	f004 fbde 	bl	80056bc <HAL_UART_Transmit>
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200006e0 	.word	0x200006e0
 8000f0c:	08007678 	.word	0x08007678

08000f10 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	0004      	movs	r4, r0
 8000f18:	0008      	movs	r0, r1
 8000f1a:	60ba      	str	r2, [r7, #8]
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	230e      	movs	r3, #14
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	1c22      	adds	r2, r4, #0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	230c      	movs	r3, #12
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	1c0a      	adds	r2, r1, #0
 8000f32:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	2200      	movs	r2, #0
 8000f38:	5e9b      	ldrsh	r3, [r3, r2]
 8000f3a:	3307      	adds	r3, #7
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da00      	bge.n	8000f42 <SSD1306_DrawBitmap+0x32>
 8000f40:	3307      	adds	r3, #7
 8000f42:	10db      	asrs	r3, r3, #3
 8000f44:	001a      	movs	r2, r3
 8000f46:	2310      	movs	r3, #16
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000f4c:	2317      	movs	r3, #23
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8000f54:	2314      	movs	r3, #20
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2200      	movs	r2, #0
 8000f5a:	801a      	strh	r2, [r3, #0]
 8000f5c:	e068      	b.n	8001030 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8000f5e:	2312      	movs	r3, #18
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2200      	movs	r2, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	e048      	b.n	8000ffa <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8000f68:	2312      	movs	r3, #18
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	001a      	movs	r2, r3
 8000f70:	2307      	movs	r3, #7
 8000f72:	4013      	ands	r3, r2
 8000f74:	d006      	beq.n	8000f84 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8000f76:	2317      	movs	r3, #23
 8000f78:	18fa      	adds	r2, r7, r3
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	18db      	adds	r3, r3, r3
 8000f80:	7013      	strb	r3, [r2, #0]
 8000f82:	e019      	b.n	8000fb8 <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f84:	2314      	movs	r3, #20
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	5e9b      	ldrsh	r3, [r3, r2]
 8000f8c:	2210      	movs	r2, #16
 8000f8e:	18ba      	adds	r2, r7, r2
 8000f90:	2100      	movs	r1, #0
 8000f92:	5e52      	ldrsh	r2, [r2, r1]
 8000f94:	435a      	muls	r2, r3
 8000f96:	2312      	movs	r3, #18
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	5e5b      	ldrsh	r3, [r3, r1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da00      	bge.n	8000fa4 <SSD1306_DrawBitmap+0x94>
 8000fa2:	3307      	adds	r3, #7
 8000fa4:	10db      	asrs	r3, r3, #3
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	18d3      	adds	r3, r2, r3
 8000faa:	001a      	movs	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	189a      	adds	r2, r3, r2
 8000fb0:	2317      	movs	r3, #23
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000fb8:	2317      	movs	r3, #23
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da11      	bge.n	8000fe8 <SSD1306_DrawBitmap+0xd8>
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	881a      	ldrh	r2, [r3, #0]
 8000fca:	2312      	movs	r3, #18
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	18d3      	adds	r3, r2, r3
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	8819      	ldrh	r1, [r3, #0]
 8000fda:	232c      	movs	r3, #44	; 0x2c
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	f000 f946 	bl	8001274 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000fe8:	2112      	movs	r1, #18
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	5e9b      	ldrsh	r3, [r3, r2]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	801a      	strh	r2, [r3, #0]
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	18fa      	adds	r2, r7, r3
 8000ffe:	1dbb      	adds	r3, r7, #6
 8001000:	2100      	movs	r1, #0
 8001002:	5e52      	ldrsh	r2, [r2, r1]
 8001004:	2100      	movs	r1, #0
 8001006:	5e5b      	ldrsh	r3, [r3, r1]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbad      	blt.n	8000f68 <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 800100c:	2114      	movs	r1, #20
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2200      	movs	r2, #0
 8001012:	5e9b      	ldrsh	r3, [r3, r2]
 8001014:	b29b      	uxth	r3, r3
 8001016:	3301      	adds	r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	187b      	adds	r3, r7, r1
 800101c:	801a      	strh	r2, [r3, #0]
 800101e:	210c      	movs	r1, #12
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	5e9b      	ldrsh	r3, [r3, r2]
 8001026:	b29b      	uxth	r3, r3
 8001028:	3301      	adds	r3, #1
 800102a:	b29a      	uxth	r2, r3
 800102c:	187b      	adds	r3, r7, r1
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	2314      	movs	r3, #20
 8001032:	18fa      	adds	r2, r7, r3
 8001034:	2328      	movs	r3, #40	; 0x28
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2100      	movs	r1, #0
 800103a:	5e52      	ldrsh	r2, [r2, r1]
 800103c:	2100      	movs	r1, #0
 800103e:	5e5b      	ldrsh	r3, [r3, r1]
 8001040:	429a      	cmp	r2, r3
 8001042:	db8c      	blt.n	8000f5e <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b007      	add	sp, #28
 800104c:	bd90      	pop	{r4, r7, pc}
	...

08001050 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001056:	f000 fcf3 	bl	8001a40 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800105a:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <SSD1306_Init+0x178>)
 800105c:	485b      	ldr	r0, [pc, #364]	; (80011cc <SSD1306_Init+0x17c>)
 800105e:	2201      	movs	r2, #1
 8001060:	2178      	movs	r1, #120	; 0x78
 8001062:	f002 fc47 	bl	80038f4 <HAL_I2C_IsDeviceReady>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d001      	beq.n	800106e <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800106a:	2300      	movs	r3, #0
 800106c:	e0a8      	b.n	80011c0 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <SSD1306_Init+0x180>)
 8001070:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001072:	e002      	b.n	800107a <SSD1306_Init+0x2a>
		p--;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
	while(p>0)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f9      	bne.n	8001074 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001080:	22ae      	movs	r2, #174	; 0xae
 8001082:	2100      	movs	r1, #0
 8001084:	2078      	movs	r0, #120	; 0x78
 8001086:	f000 fd5b 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800108a:	2220      	movs	r2, #32
 800108c:	2100      	movs	r1, #0
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f000 fd56 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001094:	2210      	movs	r2, #16
 8001096:	2100      	movs	r1, #0
 8001098:	2078      	movs	r0, #120	; 0x78
 800109a:	f000 fd51 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800109e:	22b0      	movs	r2, #176	; 0xb0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	; 0x78
 80010a4:	f000 fd4c 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010a8:	22c8      	movs	r2, #200	; 0xc8
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f000 fd47 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	; 0x78
 80010b8:	f000 fd42 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80010bc:	2210      	movs	r2, #16
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	; 0x78
 80010c2:	f000 fd3d 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80010c6:	2240      	movs	r2, #64	; 0x40
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	; 0x78
 80010cc:	f000 fd38 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80010d0:	2281      	movs	r2, #129	; 0x81
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	; 0x78
 80010d6:	f000 fd33 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	; 0x78
 80010e0:	f000 fd2e 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010e4:	22a1      	movs	r2, #161	; 0xa1
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	; 0x78
 80010ea:	f000 fd29 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010ee:	22a6      	movs	r2, #166	; 0xa6
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	; 0x78
 80010f4:	f000 fd24 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010f8:	22a8      	movs	r2, #168	; 0xa8
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f000 fd1f 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001102:	223f      	movs	r2, #63	; 0x3f
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	; 0x78
 8001108:	f000 fd1a 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800110c:	22a4      	movs	r2, #164	; 0xa4
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	; 0x78
 8001112:	f000 fd15 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001116:	22d3      	movs	r2, #211	; 0xd3
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 fd10 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 fd0b 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800112a:	22d5      	movs	r2, #213	; 0xd5
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 fd06 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001134:	22f0      	movs	r2, #240	; 0xf0
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f000 fd01 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800113e:	22d9      	movs	r2, #217	; 0xd9
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f000 fcfc 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001148:	2222      	movs	r2, #34	; 0x22
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	; 0x78
 800114e:	f000 fcf7 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001152:	22da      	movs	r2, #218	; 0xda
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	f000 fcf2 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800115c:	2212      	movs	r2, #18
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	; 0x78
 8001162:	f000 fced 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001166:	22db      	movs	r2, #219	; 0xdb
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	; 0x78
 800116c:	f000 fce8 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001170:	2220      	movs	r2, #32
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	; 0x78
 8001176:	f000 fce3 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800117a:	228d      	movs	r2, #141	; 0x8d
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	; 0x78
 8001180:	f000 fcde 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001184:	2214      	movs	r2, #20
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	; 0x78
 800118a:	f000 fcd9 	bl	8001b40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800118e:	22af      	movs	r2, #175	; 0xaf
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 fcd4 	bl	8001b40 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001198:	222e      	movs	r2, #46	; 0x2e
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f000 fccf 	bl	8001b40 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f84c 	bl	8001240 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80011a8:	f000 f816 	bl	80011d8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <SSD1306_Init+0x184>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <SSD1306_Init+0x184>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <SSD1306_Init+0x184>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	0018      	movs	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	00004e20 	.word	0x00004e20
 80011cc:	200001b0 	.word	0x200001b0
 80011d0:	000009c4 	.word	0x000009c4
 80011d4:	20000608 	.word	0x20000608

080011d8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e021      	b.n	800122a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	3b50      	subs	r3, #80	; 0x50
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	001a      	movs	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	; 0x78
 80011f4:	f000 fca4 	bl	8001b40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2078      	movs	r0, #120	; 0x78
 80011fe:	f000 fc9f 	bl	8001b40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001202:	2210      	movs	r2, #16
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	; 0x78
 8001208:	f000 fc9a 	bl	8001b40 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800120c:	1dfb      	adds	r3, r7, #7
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	01da      	lsls	r2, r3, #7
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <SSD1306_UpdateScreen+0x64>)
 8001214:	18d2      	adds	r2, r2, r3
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	2078      	movs	r0, #120	; 0x78
 800121c:	f000 fc24 	bl	8001a68 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	781a      	ldrb	r2, [r3, #0]
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	3201      	adds	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d9d9      	bls.n	80011e6 <SSD1306_UpdateScreen+0xe>
	}
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000208 	.word	0x20000208

08001240 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	0002      	movs	r2, r0
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <SSD1306_Fill+0x18>
 8001254:	2300      	movs	r3, #0
 8001256:	e000      	b.n	800125a <SSD1306_Fill+0x1a>
 8001258:	23ff      	movs	r3, #255	; 0xff
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <SSD1306_Fill+0x30>)
 8001260:	0019      	movs	r1, r3
 8001262:	f005 fd88 	bl	8006d76 <memset>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000208 	.word	0x20000208

08001274 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	0004      	movs	r4, r0
 800127c:	0008      	movs	r0, r1
 800127e:	0011      	movs	r1, r2
 8001280:	1dbb      	adds	r3, r7, #6
 8001282:	1c22      	adds	r2, r4, #0
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	1c02      	adds	r2, r0, #0
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	1cfb      	adds	r3, r7, #3
 800128e:	1c0a      	adds	r2, r1, #0
 8001290:	701a      	strb	r2, [r3, #0]
	if (
 8001292:	1dbb      	adds	r3, r7, #6
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	2b7f      	cmp	r3, #127	; 0x7f
 8001298:	d852      	bhi.n	8001340 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b3f      	cmp	r3, #63	; 0x3f
 80012a0:	d84e      	bhi.n	8001340 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <SSD1306_DrawPixel+0xd4>)
 80012a4:	791b      	ldrb	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	425a      	negs	r2, r3
 80012b0:	4153      	adcs	r3, r2
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d11e      	bne.n	80012fe <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012c0:	1dbb      	adds	r3, r7, #6
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b298      	uxth	r0, r3
 80012cc:	0003      	movs	r3, r0
 80012ce:	01db      	lsls	r3, r3, #7
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	4a1e      	ldr	r2, [pc, #120]	; (800134c <SSD1306_DrawPixel+0xd8>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	2107      	movs	r1, #7
 80012de:	400b      	ands	r3, r1
 80012e0:	2101      	movs	r1, #1
 80012e2:	4099      	lsls	r1, r3
 80012e4:	000b      	movs	r3, r1
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b259      	sxtb	r1, r3
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	0003      	movs	r3, r0
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	4a14      	ldr	r2, [pc, #80]	; (800134c <SSD1306_DrawPixel+0xd8>)
 80012fa:	54d1      	strb	r1, [r2, r3]
 80012fc:	e021      	b.n	8001342 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012fe:	1dbb      	adds	r3, r7, #6
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	b298      	uxth	r0, r3
 800130a:	0003      	movs	r3, r0
 800130c:	01db      	lsls	r3, r3, #7
 800130e:	18d3      	adds	r3, r2, r3
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <SSD1306_DrawPixel+0xd8>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	1d3a      	adds	r2, r7, #4
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	2107      	movs	r1, #7
 800131c:	400a      	ands	r2, r1
 800131e:	2101      	movs	r1, #1
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	b252      	sxtb	r2, r2
 8001326:	43d2      	mvns	r2, r2
 8001328:	b252      	sxtb	r2, r2
 800132a:	4013      	ands	r3, r2
 800132c:	b259      	sxtb	r1, r3
 800132e:	1dbb      	adds	r3, r7, #6
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	0003      	movs	r3, r0
 8001334:	01db      	lsls	r3, r3, #7
 8001336:	18d3      	adds	r3, r2, r3
 8001338:	b2c9      	uxtb	r1, r1
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <SSD1306_DrawPixel+0xd8>)
 800133c:	54d1      	strb	r1, [r2, r3]
 800133e:	e000      	b.n	8001342 <SSD1306_DrawPixel+0xce>
		return;
 8001340:	46c0      	nop			; (mov r8, r8)
	}
}
 8001342:	46bd      	mov	sp, r7
 8001344:	b003      	add	sp, #12
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	20000608 	.word	0x20000608
 800134c:	20000208 	.word	0x20000208

08001350 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	0002      	movs	r2, r0
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	1c0a      	adds	r2, r1, #0
 8001360:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <SSD1306_GotoXY+0x2c>)
 8001364:	1dba      	adds	r2, r7, #6
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SSD1306_GotoXY+0x2c>)
 800136c:	1d3a      	adds	r2, r7, #4
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	805a      	strh	r2, [r3, #2]
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	20000608 	.word	0x20000608

08001380 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6039      	str	r1, [r7, #0]
 8001388:	0011      	movs	r1, r2
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	1c02      	adds	r2, r0, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	1c0a      	adds	r2, r1, #0
 8001394:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001396:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <SSD1306_Putc+0x100>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	001a      	movs	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	18d3      	adds	r3, r2, r3
	if (
 80013a2:	2b7f      	cmp	r3, #127	; 0x7f
 80013a4:	dc07      	bgt.n	80013b6 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <SSD1306_Putc+0x100>)
 80013a8:	885b      	ldrh	r3, [r3, #2]
 80013aa:	001a      	movs	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013b2:	2b3f      	cmp	r3, #63	; 0x3f
 80013b4:	dd01      	ble.n	80013ba <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e05e      	b.n	8001478 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e04a      	b.n	8001456 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	3b20      	subs	r3, #32
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	7849      	ldrb	r1, [r1, #1]
 80013ce:	434b      	muls	r3, r1
 80013d0:	0019      	movs	r1, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	18cb      	adds	r3, r1, r3
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	e02f      	b.n	8001444 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	409a      	lsls	r2, r3
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4013      	ands	r3, r2
 80013f0:	d011      	beq.n	8001416 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <SSD1306_Putc+0x100>)
 80013f4:	881a      	ldrh	r2, [r3, #0]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	18d3      	adds	r3, r2, r3
 80013fc:	b298      	uxth	r0, r3
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <SSD1306_Putc+0x100>)
 8001400:	885a      	ldrh	r2, [r3, #2]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	b29b      	uxth	r3, r3
 8001406:	18d3      	adds	r3, r2, r3
 8001408:	b299      	uxth	r1, r3
 800140a:	1dbb      	adds	r3, r7, #6
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	001a      	movs	r2, r3
 8001410:	f7ff ff30 	bl	8001274 <SSD1306_DrawPixel>
 8001414:	e013      	b.n	800143e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <SSD1306_Putc+0x100>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	b29b      	uxth	r3, r3
 800141e:	18d3      	adds	r3, r2, r3
 8001420:	b298      	uxth	r0, r3
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <SSD1306_Putc+0x100>)
 8001424:	885a      	ldrh	r2, [r3, #2]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b29b      	uxth	r3, r3
 800142a:	18d3      	adds	r3, r2, r3
 800142c:	b299      	uxth	r1, r3
 800142e:	1dbb      	adds	r3, r7, #6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	425a      	negs	r2, r3
 8001434:	4153      	adcs	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	001a      	movs	r2, r3
 800143a:	f7ff ff1b 	bl	8001274 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3301      	adds	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4293      	cmp	r3, r2
 800144e:	d3c9      	bcc.n	80013e4 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	785b      	ldrb	r3, [r3, #1]
 800145a:	001a      	movs	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	4293      	cmp	r3, r2
 8001460:	d3ae      	bcc.n	80013c0 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <SSD1306_Putc+0x100>)
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <SSD1306_Putc+0x100>)
 8001472:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	781b      	ldrb	r3, [r3, #0]
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b006      	add	sp, #24
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000608 	.word	0x20000608

08001484 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8001492:	e013      	b.n	80014bc <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	7818      	ldrb	r0, [r3, #0]
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	0019      	movs	r1, r3
 80014a0:	f7ff ff6e 	bl	8001380 <SSD1306_Putc>
 80014a4:	0003      	movs	r3, r0
 80014a6:	001a      	movs	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d002      	beq.n	80014b6 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	e008      	b.n	80014c8 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e7      	bne.n	8001494 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	0005      	movs	r5, r0
 80014d8:	000c      	movs	r4, r1
 80014da:	0010      	movs	r0, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	1c2a      	adds	r2, r5, #0
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	1c22      	adds	r2, r4, #0
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	1cbb      	adds	r3, r7, #2
 80014ec:	1c02      	adds	r2, r0, #0
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	003b      	movs	r3, r7
 80014f2:	1c0a      	adds	r2, r1, #0
 80014f4:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80014f6:	1dbb      	adds	r3, r7, #6
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	2b7f      	cmp	r3, #127	; 0x7f
 80014fc:	d902      	bls.n	8001504 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	227f      	movs	r2, #127	; 0x7f
 8001502:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b7f      	cmp	r3, #127	; 0x7f
 800150a:	d902      	bls.n	8001512 <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	227f      	movs	r2, #127	; 0x7f
 8001510:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	2b3f      	cmp	r3, #63	; 0x3f
 8001518:	d902      	bls.n	8001520 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	223f      	movs	r2, #63	; 0x3f
 800151e:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001520:	003b      	movs	r3, r7
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	2b3f      	cmp	r3, #63	; 0x3f
 8001526:	d902      	bls.n	800152e <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 8001528:	003b      	movs	r3, r7
 800152a:	223f      	movs	r2, #63	; 0x3f
 800152c:	801a      	strh	r2, [r3, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800152e:	1dba      	adds	r2, r7, #6
 8001530:	1cbb      	adds	r3, r7, #2
 8001532:	8812      	ldrh	r2, [r2, #0]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d207      	bcs.n	800154a <SSD1306_DrawLine+0x7a>
 800153a:	1cba      	adds	r2, r7, #2
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	8812      	ldrh	r2, [r2, #0]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b29b      	uxth	r3, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	e006      	b.n	8001558 <SSD1306_DrawLine+0x88>
 800154a:	1dba      	adds	r2, r7, #6
 800154c:	1cbb      	adds	r3, r7, #2
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b29b      	uxth	r3, r3
 8001556:	b21b      	sxth	r3, r3
 8001558:	2212      	movs	r2, #18
 800155a:	18ba      	adds	r2, r7, r2
 800155c:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800155e:	1d3a      	adds	r2, r7, #4
 8001560:	003b      	movs	r3, r7
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d207      	bcs.n	800157a <SSD1306_DrawLine+0xaa>
 800156a:	003a      	movs	r2, r7
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	8812      	ldrh	r2, [r2, #0]
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21b      	sxth	r3, r3
 8001578:	e006      	b.n	8001588 <SSD1306_DrawLine+0xb8>
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	003b      	movs	r3, r7
 800157e:	8812      	ldrh	r2, [r2, #0]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	b21b      	sxth	r3, r3
 8001588:	2210      	movs	r2, #16
 800158a:	18ba      	adds	r2, r7, r2
 800158c:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1; 
 800158e:	1dba      	adds	r2, r7, #6
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	8812      	ldrh	r2, [r2, #0]
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d201      	bcs.n	800159e <SSD1306_DrawLine+0xce>
 800159a:	2201      	movs	r2, #1
 800159c:	e001      	b.n	80015a2 <SSD1306_DrawLine+0xd2>
 800159e:	2301      	movs	r3, #1
 80015a0:	425a      	negs	r2, r3
 80015a2:	230e      	movs	r3, #14
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1; 
 80015a8:	1d3a      	adds	r2, r7, #4
 80015aa:	003b      	movs	r3, r7
 80015ac:	8812      	ldrh	r2, [r2, #0]
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d201      	bcs.n	80015b8 <SSD1306_DrawLine+0xe8>
 80015b4:	2201      	movs	r2, #1
 80015b6:	e001      	b.n	80015bc <SSD1306_DrawLine+0xec>
 80015b8:	2301      	movs	r3, #1
 80015ba:	425a      	negs	r2, r3
 80015bc:	230c      	movs	r3, #12
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80015c2:	2112      	movs	r1, #18
 80015c4:	187a      	adds	r2, r7, r1
 80015c6:	2310      	movs	r3, #16
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2000      	movs	r0, #0
 80015cc:	5e12      	ldrsh	r2, [r2, r0]
 80015ce:	2000      	movs	r0, #0
 80015d0:	5e1b      	ldrsh	r3, [r3, r0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dd08      	ble.n	80015e8 <SSD1306_DrawLine+0x118>
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2200      	movs	r2, #0
 80015da:	5e9b      	ldrsh	r3, [r3, r2]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da00      	bge.n	80015e2 <SSD1306_DrawLine+0x112>
 80015e0:	3301      	adds	r3, #1
 80015e2:	105b      	asrs	r3, r3, #1
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	e009      	b.n	80015fc <SSD1306_DrawLine+0x12c>
 80015e8:	2310      	movs	r3, #16
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	5e9b      	ldrsh	r3, [r3, r2]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da00      	bge.n	80015f6 <SSD1306_DrawLine+0x126>
 80015f4:	3301      	adds	r3, #1
 80015f6:	105b      	asrs	r3, r3, #1
 80015f8:	425b      	negs	r3, r3
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	2216      	movs	r2, #22
 80015fe:	18ba      	adds	r2, r7, r2
 8001600:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 8001602:	2312      	movs	r3, #18
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	2200      	movs	r2, #0
 8001608:	5e9b      	ldrsh	r3, [r3, r2]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d148      	bne.n	80016a0 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 800160e:	003a      	movs	r2, r7
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	8812      	ldrh	r2, [r2, #0]
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d20c      	bcs.n	8001634 <SSD1306_DrawLine+0x164>
			tmp = y1;
 800161a:	2108      	movs	r1, #8
 800161c:	187b      	adds	r3, r7, r1
 800161e:	003a      	movs	r2, r7
 8001620:	8812      	ldrh	r2, [r2, #0]
 8001622:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 8001624:	003b      	movs	r3, r7
 8001626:	1d3a      	adds	r2, r7, #4
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	187a      	adds	r2, r7, r1
 8001630:	8812      	ldrh	r2, [r2, #0]
 8001632:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 8001634:	1cba      	adds	r2, r7, #2
 8001636:	1dbb      	adds	r3, r7, #6
 8001638:	8812      	ldrh	r2, [r2, #0]
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d20c      	bcs.n	800165a <SSD1306_DrawLine+0x18a>
			tmp = x1;
 8001640:	2108      	movs	r1, #8
 8001642:	187b      	adds	r3, r7, r1
 8001644:	1cba      	adds	r2, r7, #2
 8001646:	8812      	ldrh	r2, [r2, #0]
 8001648:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 800164a:	1cbb      	adds	r3, r7, #2
 800164c:	1dba      	adds	r2, r7, #6
 800164e:	8812      	ldrh	r2, [r2, #0]
 8001650:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8001652:	1dbb      	adds	r3, r7, #6
 8001654:	187a      	adds	r2, r7, r1
 8001656:	8812      	ldrh	r2, [r2, #0]
 8001658:	801a      	strh	r2, [r3, #0]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800165a:	2314      	movs	r3, #20
 800165c:	18fb      	adds	r3, r7, r3
 800165e:	1d3a      	adds	r2, r7, #4
 8001660:	8812      	ldrh	r2, [r2, #0]
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	e013      	b.n	800168e <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 8001666:	2414      	movs	r4, #20
 8001668:	193b      	adds	r3, r7, r4
 800166a:	8819      	ldrh	r1, [r3, #0]
 800166c:	2328      	movs	r3, #40	; 0x28
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	1dbb      	adds	r3, r7, #6
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff fdfc 	bl	8001274 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800167c:	0021      	movs	r1, r4
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2200      	movs	r2, #0
 8001682:	5e9b      	ldrsh	r3, [r3, r2]
 8001684:	b29b      	uxth	r3, r3
 8001686:	3301      	adds	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	187b      	adds	r3, r7, r1
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	2314      	movs	r3, #20
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2200      	movs	r2, #0
 8001694:	5e9a      	ldrsh	r2, [r3, r2]
 8001696:	003b      	movs	r3, r7
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	dde3      	ble.n	8001666 <SSD1306_DrawLine+0x196>
		}
		
		/* Return from function */
		return;
 800169e:	e0a3      	b.n	80017e8 <SSD1306_DrawLine+0x318>
	}
	
	if (dy == 0) {
 80016a0:	2310      	movs	r3, #16
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	5e9b      	ldrsh	r3, [r3, r2]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d148      	bne.n	800173e <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 80016ac:	003a      	movs	r2, r7
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	8812      	ldrh	r2, [r2, #0]
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d20c      	bcs.n	80016d2 <SSD1306_DrawLine+0x202>
			tmp = y1;
 80016b8:	2108      	movs	r1, #8
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	003a      	movs	r2, r7
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80016c2:	003b      	movs	r3, r7
 80016c4:	1d3a      	adds	r2, r7, #4
 80016c6:	8812      	ldrh	r2, [r2, #0]
 80016c8:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	187a      	adds	r2, r7, r1
 80016ce:	8812      	ldrh	r2, [r2, #0]
 80016d0:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 80016d2:	1cba      	adds	r2, r7, #2
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <SSD1306_DrawLine+0x228>
			tmp = x1;
 80016de:	2108      	movs	r1, #8
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	1cba      	adds	r2, r7, #2
 80016e4:	8812      	ldrh	r2, [r2, #0]
 80016e6:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80016e8:	1cbb      	adds	r3, r7, #2
 80016ea:	1dba      	adds	r2, r7, #6
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	187a      	adds	r2, r7, r1
 80016f4:	8812      	ldrh	r2, [r2, #0]
 80016f6:	801a      	strh	r2, [r3, #0]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80016f8:	2314      	movs	r3, #20
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	1dba      	adds	r2, r7, #6
 80016fe:	8812      	ldrh	r2, [r2, #0]
 8001700:	801a      	strh	r2, [r3, #0]
 8001702:	e013      	b.n	800172c <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 8001704:	2414      	movs	r4, #20
 8001706:	193b      	adds	r3, r7, r4
 8001708:	8818      	ldrh	r0, [r3, #0]
 800170a:	2328      	movs	r3, #40	; 0x28
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781a      	ldrb	r2, [r3, #0]
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	0019      	movs	r1, r3
 8001716:	f7ff fdad 	bl	8001274 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800171a:	0021      	movs	r1, r4
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2200      	movs	r2, #0
 8001720:	5e9b      	ldrsh	r3, [r3, r2]
 8001722:	b29b      	uxth	r3, r3
 8001724:	3301      	adds	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	187b      	adds	r3, r7, r1
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	2314      	movs	r3, #20
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2200      	movs	r2, #0
 8001732:	5e9a      	ldrsh	r2, [r3, r2]
 8001734:	1cbb      	adds	r3, r7, #2
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	dde3      	ble.n	8001704 <SSD1306_DrawLine+0x234>
		}
		
		/* Return from function */
		return;
 800173c:	e054      	b.n	80017e8 <SSD1306_DrawLine+0x318>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800173e:	2328      	movs	r3, #40	; 0x28
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	8819      	ldrh	r1, [r3, #0]
 8001748:	1dbb      	adds	r3, r7, #6
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff fd91 	bl	8001274 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001752:	1dba      	adds	r2, r7, #6
 8001754:	1cbb      	adds	r3, r7, #2
 8001756:	8812      	ldrh	r2, [r2, #0]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d105      	bne.n	800176a <SSD1306_DrawLine+0x29a>
 800175e:	1d3a      	adds	r2, r7, #4
 8001760:	003b      	movs	r3, r7
 8001762:	8812      	ldrh	r2, [r2, #0]
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d03d      	beq.n	80017e6 <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err; 
 800176a:	200a      	movs	r0, #10
 800176c:	183b      	adds	r3, r7, r0
 800176e:	2116      	movs	r1, #22
 8001770:	187a      	adds	r2, r7, r1
 8001772:	8812      	ldrh	r2, [r2, #0]
 8001774:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 8001776:	183b      	adds	r3, r7, r0
 8001778:	2200      	movs	r2, #0
 800177a:	5e9a      	ldrsh	r2, [r3, r2]
 800177c:	2312      	movs	r3, #18
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2000      	movs	r0, #0
 8001782:	5e1b      	ldrsh	r3, [r3, r0]
 8001784:	425b      	negs	r3, r3
 8001786:	429a      	cmp	r2, r3
 8001788:	dd10      	ble.n	80017ac <SSD1306_DrawLine+0x2dc>
			err -= dy;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	881a      	ldrh	r2, [r3, #0]
 800178e:	2310      	movs	r3, #16
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b29a      	uxth	r2, r3
 8001798:	187b      	adds	r3, r7, r1
 800179a:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 800179c:	230e      	movs	r3, #14
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	8819      	ldrh	r1, [r3, #0]
 80017a2:	1dbb      	adds	r3, r7, #6
 80017a4:	1dba      	adds	r2, r7, #6
 80017a6:	8812      	ldrh	r2, [r2, #0]
 80017a8:	188a      	adds	r2, r1, r2
 80017aa:	801a      	strh	r2, [r3, #0]
		} 
		if (e2 < dy) {
 80017ac:	230a      	movs	r3, #10
 80017ae:	18fa      	adds	r2, r7, r3
 80017b0:	2310      	movs	r3, #16
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2100      	movs	r1, #0
 80017b6:	5e52      	ldrsh	r2, [r2, r1]
 80017b8:	2100      	movs	r1, #0
 80017ba:	5e5b      	ldrsh	r3, [r3, r1]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dabe      	bge.n	800173e <SSD1306_DrawLine+0x26e>
			err += dx;
 80017c0:	2116      	movs	r1, #22
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	2312      	movs	r3, #18
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 80017d4:	230c      	movs	r3, #12
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	8819      	ldrh	r1, [r3, #0]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	8812      	ldrh	r2, [r2, #0]
 80017e0:	188a      	adds	r2, r1, r2
 80017e2:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 80017e4:	e7ab      	b.n	800173e <SSD1306_DrawLine+0x26e>
			break;
 80017e6:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b006      	add	sp, #24
 80017ec:	bdb0      	pop	{r4, r5, r7, pc}

080017ee <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80017ee:	b5b0      	push	{r4, r5, r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af02      	add	r7, sp, #8
 80017f4:	0005      	movs	r5, r0
 80017f6:	000c      	movs	r4, r1
 80017f8:	0010      	movs	r0, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	1c2a      	adds	r2, r5, #0
 8001800:	801a      	strh	r2, [r3, #0]
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	1c22      	adds	r2, r4, #0
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	1cbb      	adds	r3, r7, #2
 800180a:	1c02      	adds	r2, r0, #0
 800180c:	801a      	strh	r2, [r3, #0]
 800180e:	003b      	movs	r3, r7
 8001810:	1c0a      	adds	r2, r1, #0
 8001812:	801a      	strh	r2, [r3, #0]
	/* Check input parameters */
	if (
 8001814:	1dbb      	adds	r3, r7, #6
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2b7f      	cmp	r3, #127	; 0x7f
 800181a:	d900      	bls.n	800181e <SSD1306_DrawRectangle+0x30>
 800181c:	e07a      	b.n	8001914 <SSD1306_DrawRectangle+0x126>
		x >= SSD1306_WIDTH ||
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	2b3f      	cmp	r3, #63	; 0x3f
 8001824:	d900      	bls.n	8001828 <SSD1306_DrawRectangle+0x3a>
 8001826:	e075      	b.n	8001914 <SSD1306_DrawRectangle+0x126>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001828:	1dbb      	adds	r3, r7, #6
 800182a:	881a      	ldrh	r2, [r3, #0]
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	18d3      	adds	r3, r2, r3
 8001832:	2b7f      	cmp	r3, #127	; 0x7f
 8001834:	dd05      	ble.n	8001842 <SSD1306_DrawRectangle+0x54>
		w = SSD1306_WIDTH - x;
 8001836:	1cbb      	adds	r3, r7, #2
 8001838:	1dba      	adds	r2, r7, #6
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	1a8a      	subs	r2, r1, r2
 8001840:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	881a      	ldrh	r2, [r3, #0]
 8001846:	003b      	movs	r3, r7
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	18d3      	adds	r3, r2, r3
 800184c:	2b3f      	cmp	r3, #63	; 0x3f
 800184e:	dd05      	ble.n	800185c <SSD1306_DrawRectangle+0x6e>
		h = SSD1306_HEIGHT - y;
 8001850:	003b      	movs	r3, r7
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	1a8a      	subs	r2, r1, r2
 800185a:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800185c:	1dba      	adds	r2, r7, #6
 800185e:	1cbb      	adds	r3, r7, #2
 8001860:	8812      	ldrh	r2, [r2, #0]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	b29a      	uxth	r2, r3
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	881c      	ldrh	r4, [r3, #0]
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	8819      	ldrh	r1, [r3, #0]
 8001870:	1dbb      	adds	r3, r7, #6
 8001872:	8818      	ldrh	r0, [r3, #0]
 8001874:	2518      	movs	r5, #24
 8001876:	197b      	adds	r3, r7, r5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	0023      	movs	r3, r4
 800187e:	f7ff fe27 	bl	80014d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001882:	1d3a      	adds	r2, r7, #4
 8001884:	003b      	movs	r3, r7
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	b299      	uxth	r1, r3
 800188e:	1dba      	adds	r2, r7, #6
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	8812      	ldrh	r2, [r2, #0]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	18d3      	adds	r3, r2, r3
 8001898:	b29c      	uxth	r4, r3
 800189a:	1d3a      	adds	r2, r7, #4
 800189c:	003b      	movs	r3, r7
 800189e:	8812      	ldrh	r2, [r2, #0]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	18d3      	adds	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	1dbb      	adds	r3, r7, #6
 80018a8:	8818      	ldrh	r0, [r3, #0]
 80018aa:	197b      	adds	r3, r7, r5
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	0013      	movs	r3, r2
 80018b2:	0022      	movs	r2, r4
 80018b4:	f7ff fe0c 	bl	80014d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80018b8:	1d3a      	adds	r2, r7, #4
 80018ba:	003b      	movs	r3, r7
 80018bc:	8812      	ldrh	r2, [r2, #0]
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	18d3      	adds	r3, r2, r3
 80018c2:	b29c      	uxth	r4, r3
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	8819      	ldrh	r1, [r3, #0]
 80018cc:	1dbb      	adds	r3, r7, #6
 80018ce:	8818      	ldrh	r0, [r3, #0]
 80018d0:	197b      	adds	r3, r7, r5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	0023      	movs	r3, r4
 80018d8:	f7ff fdfa 	bl	80014d0 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80018dc:	1dba      	adds	r2, r7, #6
 80018de:	1cbb      	adds	r3, r7, #2
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	b298      	uxth	r0, r3
 80018e8:	1dba      	adds	r2, r7, #6
 80018ea:	1cbb      	adds	r3, r7, #2
 80018ec:	8812      	ldrh	r2, [r2, #0]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	18d3      	adds	r3, r2, r3
 80018f2:	b29c      	uxth	r4, r3
 80018f4:	1d3a      	adds	r2, r7, #4
 80018f6:	003b      	movs	r3, r7
 80018f8:	8812      	ldrh	r2, [r2, #0]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	b29a      	uxth	r2, r3
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	8819      	ldrh	r1, [r3, #0]
 8001904:	197b      	adds	r3, r7, r5
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	0013      	movs	r3, r2
 800190c:	0022      	movs	r2, r4
 800190e:	f7ff fddf 	bl	80014d0 <SSD1306_DrawLine>
 8001912:	e000      	b.n	8001916 <SSD1306_DrawRectangle+0x128>
		return;
 8001914:	46c0      	nop			; (mov r8, r8)
}
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bdb0      	pop	{r4, r5, r7, pc}

0800191c <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af02      	add	r7, sp, #8
 8001922:	0005      	movs	r5, r0
 8001924:	000c      	movs	r4, r1
 8001926:	0010      	movs	r0, r2
 8001928:	0019      	movs	r1, r3
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	1c2a      	adds	r2, r5, #0
 800192e:	801a      	strh	r2, [r3, #0]
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	1c22      	adds	r2, r4, #0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	1cbb      	adds	r3, r7, #2
 8001938:	1c02      	adds	r2, r0, #0
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	003b      	movs	r3, r7
 800193e:	1c0a      	adds	r2, r1, #0
 8001940:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001942:	1dbb      	adds	r3, r7, #6
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2b7f      	cmp	r3, #127	; 0x7f
 8001948:	d850      	bhi.n	80019ec <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2b3f      	cmp	r3, #63	; 0x3f
 8001950:	d84c      	bhi.n	80019ec <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001952:	1dbb      	adds	r3, r7, #6
 8001954:	881a      	ldrh	r2, [r3, #0]
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	18d3      	adds	r3, r2, r3
 800195c:	2b7f      	cmp	r3, #127	; 0x7f
 800195e:	dd05      	ble.n	800196c <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 8001960:	1cbb      	adds	r3, r7, #2
 8001962:	1dba      	adds	r2, r7, #6
 8001964:	8812      	ldrh	r2, [r2, #0]
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	1a8a      	subs	r2, r1, r2
 800196a:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	003b      	movs	r3, r7
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	2b3f      	cmp	r3, #63	; 0x3f
 8001978:	dd05      	ble.n	8001986 <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 800197a:	003b      	movs	r3, r7
 800197c:	1d3a      	adds	r2, r7, #4
 800197e:	8812      	ldrh	r2, [r2, #0]
 8001980:	2140      	movs	r1, #64	; 0x40
 8001982:	1a8a      	subs	r2, r1, r2
 8001984:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001986:	230f      	movs	r3, #15
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e024      	b.n	80019da <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001990:	200f      	movs	r0, #15
 8001992:	183b      	adds	r3, r7, r0
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	b299      	uxth	r1, r3
 80019a0:	1dba      	adds	r2, r7, #6
 80019a2:	1cbb      	adds	r3, r7, #2
 80019a4:	8812      	ldrh	r2, [r2, #0]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	18d3      	adds	r3, r2, r3
 80019aa:	b29c      	uxth	r4, r3
 80019ac:	0005      	movs	r5, r0
 80019ae:	183b      	adds	r3, r7, r0
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	18d3      	adds	r3, r2, r3
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	1dbb      	adds	r3, r7, #6
 80019be:	8818      	ldrh	r0, [r3, #0]
 80019c0:	2320      	movs	r3, #32
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	0013      	movs	r3, r2
 80019ca:	0022      	movs	r2, r4
 80019cc:	f7ff fd80 	bl	80014d0 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80019d0:	197b      	adds	r3, r7, r5
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	197b      	adds	r3, r7, r5
 80019d6:	3201      	adds	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	230f      	movs	r3, #15
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	003a      	movs	r2, r7
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d2d2      	bcs.n	8001990 <SSD1306_DrawFilledRectangle+0x74>
 80019ea:	e000      	b.n	80019ee <SSD1306_DrawFilledRectangle+0xd2>
		return;
 80019ec:	46c0      	nop			; (mov r8, r8)
	}
}
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}

080019f4 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fc21 	bl	8001240 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80019fe:	f7ff fbeb 	bl	80011d8 <SSD1306_UpdateScreen>
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SSD1306_SetContrast>:
	SSD1306_WRITECOMMAND(0x8D);  
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}

void SSD1306_SetContrast(const uint8_t value) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	0002      	movs	r2, r0
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001a14:	210f      	movs	r1, #15
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2281      	movs	r2, #129	; 0x81
 8001a1a:	701a      	strb	r2, [r3, #0]
    SSD1306_WRITECOMMAND(kSetContrastControlRegister);
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	001a      	movs	r2, r3
 8001a22:	2100      	movs	r1, #0
 8001a24:	2078      	movs	r0, #120	; 0x78
 8001a26:	f000 f88b 	bl	8001b40 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(value);
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	001a      	movs	r2, r3
 8001a30:	2100      	movs	r1, #0
 8001a32:	2078      	movs	r0, #120	; 0x78
 8001a34:	f000 f884 	bl	8001b40 <ssd1306_I2C_Write>
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b004      	add	sp, #16
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <ssd1306_I2C_Init+0x24>)
 8001a48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a4a:	e002      	b.n	8001a52 <ssd1306_I2C_Init+0x12>
		p--;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	0003d090 	.word	0x0003d090

08001a68 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b0c6      	sub	sp, #280	; 0x118
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	0004      	movs	r4, r0
 8001a70:	0008      	movs	r0, r1
 8001a72:	603a      	str	r2, [r7, #0]
 8001a74:	0019      	movs	r1, r3
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <ssd1306_I2C_WriteMulti+0xc4>)
 8001a78:	2588      	movs	r5, #136	; 0x88
 8001a7a:	006d      	lsls	r5, r5, #1
 8001a7c:	195b      	adds	r3, r3, r5
 8001a7e:	19db      	adds	r3, r3, r7
 8001a80:	1c22      	adds	r2, r4, #0
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <ssd1306_I2C_WriteMulti+0xc8>)
 8001a86:	002c      	movs	r4, r5
 8001a88:	191b      	adds	r3, r3, r4
 8001a8a:	19db      	adds	r3, r3, r7
 8001a8c:	1c02      	adds	r2, r0, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <ssd1306_I2C_WriteMulti+0xcc>)
 8001a92:	0020      	movs	r0, r4
 8001a94:	181b      	adds	r3, r3, r0
 8001a96:	19db      	adds	r3, r3, r7
 8001a98:	1c0a      	adds	r2, r1, #0
 8001a9a:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a9c:	4b26      	ldr	r3, [pc, #152]	; (8001b38 <ssd1306_I2C_WriteMulti+0xd0>)
 8001a9e:	181b      	adds	r3, r3, r0
 8001aa0:	19db      	adds	r3, r3, r7
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <ssd1306_I2C_WriteMulti+0xc8>)
 8001aa4:	1812      	adds	r2, r2, r0
 8001aa6:	19d2      	adds	r2, r2, r7
 8001aa8:	7812      	ldrb	r2, [r2, #0]
 8001aaa:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001aac:	2310      	movs	r3, #16
 8001aae:	33ff      	adds	r3, #255	; 0xff
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e014      	b.n	8001ae2 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8001ab8:	2010      	movs	r0, #16
 8001aba:	30ff      	adds	r0, #255	; 0xff
 8001abc:	183b      	adds	r3, r7, r0
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	18d2      	adds	r2, r2, r3
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	7811      	ldrb	r1, [r2, #0]
 8001acc:	4a1a      	ldr	r2, [pc, #104]	; (8001b38 <ssd1306_I2C_WriteMulti+0xd0>)
 8001ace:	2488      	movs	r4, #136	; 0x88
 8001ad0:	0064      	lsls	r4, r4, #1
 8001ad2:	1912      	adds	r2, r2, r4
 8001ad4:	19d2      	adds	r2, r2, r7
 8001ad6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ad8:	183b      	adds	r3, r7, r0
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	3201      	adds	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	33ff      	adds	r3, #255	; 0xff
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <ssd1306_I2C_WriteMulti+0xcc>)
 8001aee:	2188      	movs	r1, #136	; 0x88
 8001af0:	0049      	lsls	r1, r1, #1
 8001af2:	1852      	adds	r2, r2, r1
 8001af4:	19d2      	adds	r2, r2, r7
 8001af6:	8812      	ldrh	r2, [r2, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8dd      	bhi.n	8001ab8 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <ssd1306_I2C_WriteMulti+0xc4>)
 8001afe:	000a      	movs	r2, r1
 8001b00:	189b      	adds	r3, r3, r2
 8001b02:	19db      	adds	r3, r3, r7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b299      	uxth	r1, r3
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <ssd1306_I2C_WriteMulti+0xcc>)
 8001b0a:	189b      	adds	r3, r3, r2
 8001b0c:	19db      	adds	r3, r3, r7
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	220c      	movs	r2, #12
 8001b16:	18ba      	adds	r2, r7, r2
 8001b18:	4808      	ldr	r0, [pc, #32]	; (8001b3c <ssd1306_I2C_WriteMulti+0xd4>)
 8001b1a:	240a      	movs	r4, #10
 8001b1c:	9400      	str	r4, [sp, #0]
 8001b1e:	f001 fde1 	bl	80036e4 <HAL_I2C_Master_Transmit>
}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b044      	add	sp, #272	; 0x110
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	fffffef7 	.word	0xfffffef7
 8001b30:	fffffef6 	.word	0xfffffef6
 8001b34:	fffffef4 	.word	0xfffffef4
 8001b38:	fffffefc 	.word	0xfffffefc
 8001b3c:	200001b0 	.word	0x200001b0

08001b40 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	0004      	movs	r4, r0
 8001b48:	0008      	movs	r0, r1
 8001b4a:	0011      	movs	r1, r2
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	1c22      	adds	r2, r4, #0
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	1c02      	adds	r2, r0, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	1d7b      	adds	r3, r7, #5
 8001b5a:	1c0a      	adds	r2, r1, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001b5e:	200c      	movs	r0, #12
 8001b60:	183b      	adds	r3, r7, r0
 8001b62:	1dba      	adds	r2, r7, #6
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	1d7a      	adds	r2, r7, #5
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b299      	uxth	r1, r3
 8001b76:	183a      	adds	r2, r7, r0
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <ssd1306_I2C_Write+0x4c>)
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f001 fdb0 	bl	80036e4 <HAL_I2C_Master_Transmit>
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b005      	add	sp, #20
 8001b8a:	bd90      	pop	{r4, r7, pc}
 8001b8c:	200001b0 	.word	0x200001b0

08001b90 <setTheme>:
//markery wyboru
volatile int8_t markerPosition 		= 0; 			// polozenie wskaznika ustawianej wartosci
volatile int8_t arrayToken[5] 		= {0,0,0,0,0};	// ustawianie wartosci

void setTheme(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b092      	sub	sp, #72	; 0x48
 8001b94:	af00      	add	r7, sp, #0
	clearContent();
 8001b96:	f000 fe1b 	bl	80027d0 <clearContent>
	switch (workStep)
 8001b9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <setTheme+0x13c>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b0b      	cmp	r3, #11
 8001ba2:	d900      	bls.n	8001ba6 <setTheme+0x16>
 8001ba4:	e08c      	b.n	8001cc0 <setTheme+0x130>
 8001ba6:	009a      	lsls	r2, r3, #2
 8001ba8:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <setTheme+0x140>)
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	469f      	mov	pc, r3
	{
		case 0: // wyświetla logo
			showLogo();
 8001bb0:	f000 f8a2 	bl	8001cf8 <showLogo>
			workStep++;
 8001bb4:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <setTheme+0x13c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <setTheme+0x13c>)
 8001bc0:	701a      	strb	r2, [r3, #0]
			SSD1306_UpdateScreen();
 8001bc2:	f7ff fb09 	bl	80011d8 <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 8001bc6:	23fa      	movs	r3, #250	; 0xfa
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f001 f9b2 	bl	8002f34 <HAL_Delay>
			SSD1306_Clear();
 8001bd0:	f7ff ff10 	bl	80019f4 <SSD1306_Clear>
			SSD1306_UpdateScreen();
 8001bd4:	f7ff fb00 	bl	80011d8 <SSD1306_UpdateScreen>
			setTheme();
 8001bd8:	f7ff ffda 	bl	8001b90 <setTheme>
		break;
 8001bdc:	e070      	b.n	8001cc0 <setTheme+0x130>
		case 1: // wybór projektu - nowy lub istniejacy
			showLabelBar(DISP_PROJECT_LABEL);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <setTheme+0x144>)
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 fdd9 	bl	8002798 <showLabelBar>
			progressBarWidth = (128 / ((PROJECT_COUNT + 1) / 2) + ((PROJECT_COUNT + 1) % 2));
 8001be6:	2303      	movs	r3, #3
 8001be8:	3301      	adds	r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da00      	bge.n	8001bf0 <setTheme+0x60>
 8001bee:	3301      	adds	r3, #1
 8001bf0:	105b      	asrs	r3, r3, #1
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	2080      	movs	r0, #128	; 0x80
 8001bf6:	f7fe fb23 	bl	8000240 <__divsi3>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	2303      	movs	r3, #3
 8001c00:	3301      	adds	r3, #1
 8001c02:	4935      	ldr	r1, [pc, #212]	; (8001cd8 <setTheme+0x148>)
 8001c04:	400b      	ands	r3, r1
 8001c06:	d504      	bpl.n	8001c12 <setTheme+0x82>
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	4249      	negs	r1, r1
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	18d3      	adds	r3, r2, r3
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <setTheme+0x14c>)
 8001c1a:	701a      	strb	r2, [r3, #0]
			progressBarStep = projectSelect / 2;
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <setTheme+0x150>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <setTheme+0x154>)
 8001c28:	701a      	strb	r2, [r3, #0]
			paginationBar(progressBarWidth, progressBarStep);
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <setTheme+0x14c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <setTheme+0x154>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	0019      	movs	r1, r3
 8001c38:	0010      	movs	r0, r2
 8001c3a:	f000 fdd7 	bl	80027ec <paginationBar>
			showProjectSelectMenu();
 8001c3e:	f000 f86d 	bl	8001d1c <showProjectSelectMenu>
		break;
 8001c42:	e03d      	b.n	8001cc0 <setTheme+0x130>
		case 11:; // szczegoly projektu
			Project Handler = getProjectStructByID(projectSelect);
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <setTheme+0x150>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 fe1e 	bl	8002890 <getProjectStructByID>
			showProjectDetails(&Handler);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 f9c4 	bl	8001fe4 <showProjectDetails>
		break;
 8001c5c:	e030      	b.n	8001cc0 <setTheme+0x130>
		case 2: // ustawienie szerokości karkasu
			showLabelBar(DISP_SET_WIDTH_LABEL);
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <setTheme+0x158>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 fd99 	bl	8002798 <showLabelBar>
			showValueScreen(CARCASS_WIDTH, 0, 0, FIRST_RUN);
 8001c66:	2301      	movs	r3, #1
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f000 fa49 	bl	8002104 <showValueScreen>
		break;
 8001c72:	e025      	b.n	8001cc0 <setTheme+0x130>
		case 3: // ustawienie ilosci zwojow
			showLabelBar(DISP_SET_TURNS_LABEL);
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <setTheme+0x15c>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 fd8e 	bl	8002798 <showLabelBar>
			showValueScreen(CARCASS_COIL_TURNS, 0, 0, FIRST_RUN);
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 fa3e 	bl	8002104 <showValueScreen>
		break;
 8001c88:	e01a      	b.n	8001cc0 <setTheme+0x130>
		case 4: // srednica uzwojenia
			showLabelBar(DISP_SET_DIAMETER_LABEL);
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <setTheme+0x160>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 fd83 	bl	8002798 <showLabelBar>
			showValueScreen(WINDING_DIAMETER, 0, 0, FIRST_RUN);
 8001c92:	2301      	movs	r3, #1
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f000 fa33 	bl	8002104 <showValueScreen>
		break;
 8001c9e:	e00f      	b.n	8001cc0 <setTheme+0x130>
		case 5: // szybkosc nawijania
			showLabelBar(DISP_SET_DIAMETER_LABEL);
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <setTheme+0x160>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fd78 	bl	8002798 <showLabelBar>
			showValueScreen(WINDING_SPEED, 0, 0, FIRST_RUN);
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f000 fa28 	bl	8002104 <showValueScreen>
		break;
 8001cb4:	e004      	b.n	8001cc0 <setTheme+0x130>
		case 6: // podsumowanie
			showLabelBar(DISP_SET_SUMMARY_LABEL);
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <setTheme+0x164>)
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fd6d 	bl	8002798 <showLabelBar>
		break;
 8001cbe:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_UpdateScreen();
 8001cc0:	f7ff fa8a 	bl	80011d8 <SSD1306_UpdateScreen>
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b012      	add	sp, #72	; 0x48
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000060e 	.word	0x2000060e
 8001cd0:	08008c04 	.word	0x08008c04
 8001cd4:	08007680 	.word	0x08007680
 8001cd8:	80000001 	.word	0x80000001
 8001cdc:	20000610 	.word	0x20000610
 8001ce0:	2000060f 	.word	0x2000060f
 8001ce4:	20000611 	.word	0x20000611
 8001ce8:	08007694 	.word	0x08007694
 8001cec:	080076a4 	.word	0x080076a4
 8001cf0:	080076b4 	.word	0x080076b4
 8001cf4:	080076c4 	.word	0x080076c4

08001cf8 <showLogo>:

// start - 0
// -------------------------------------------------------------------------------------
void showLogo(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af02      	add	r7, sp, #8
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <showLogo+0x20>)
 8001d00:	2301      	movs	r3, #1
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	2340      	movs	r3, #64	; 0x40
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff f8ff 	bl	8000f10 <SSD1306_DrawBitmap>
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08007800 	.word	0x08007800

08001d1c <showProjectSelectMenu>:

// wybór projektu - 1
// -------------------------------------------------------------------------------------
void showProjectSelectMenu(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b092      	sub	sp, #72	; 0x48
 8001d20:	af00      	add	r7, sp, #0
	uint8_t side = 5;
 8001d22:	2347      	movs	r3, #71	; 0x47
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2205      	movs	r2, #5
 8001d28:	701a      	strb	r2, [r3, #0]
	uint8_t display = projectSelect;
 8001d2a:	2346      	movs	r3, #70	; 0x46
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <showProjectSelectMenu+0x10c>)
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	701a      	strb	r2, [r3, #0]
	uint8_t step = 0;
 8001d34:	2345      	movs	r3, #69	; 0x45
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]

		if(projectSelect < 2)
 8001d3c:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <showProjectSelectMenu+0x10c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d866      	bhi.n	8001e14 <showProjectSelectMenu+0xf8>
		{
			newTaskElement();
 8001d46:	f000 f871 	bl	8001e2c <newTaskElement>
			Project Handler = getProjectStructByID(1);
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 fd9e 	bl	8002890 <getProjectStructByID>
			showProjectElements(&Handler, 69);
 8001d54:	003b      	movs	r3, r7
 8001d56:	2145      	movs	r1, #69	; 0x45
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f8af 	bl	8001ebc <showProjectElements>
					showProjectElements(&Handler, side);
				}
				step++;
			}
		}
}
 8001d5e:	e05e      	b.n	8001e1e <showProjectSelectMenu+0x102>
				if(!step)
 8001d60:	2345      	movs	r3, #69	; 0x45
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d121      	bne.n	8001dae <showProjectSelectMenu+0x92>
					if(projectSelect % 2)
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <showProjectSelectMenu+0x10c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <showProjectSelectMenu+0x68>
						side = 68;
 8001d7a:	2347      	movs	r3, #71	; 0x47
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2244      	movs	r2, #68	; 0x44
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <showProjectSelectMenu+0x70>
						side = 5;
 8001d84:	2347      	movs	r3, #71	; 0x47
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2205      	movs	r2, #5
 8001d8a:	701a      	strb	r2, [r3, #0]
					Project Handler = getProjectStructByID(display);
 8001d8c:	003a      	movs	r2, r7
 8001d8e:	2346      	movs	r3, #70	; 0x46
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	0019      	movs	r1, r3
 8001d96:	0010      	movs	r0, r2
 8001d98:	f000 fd7a 	bl	8002890 <getProjectStructByID>
					showProjectElements(&Handler, side);
 8001d9c:	2347      	movs	r3, #71	; 0x47
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	003b      	movs	r3, r7
 8001da4:	0011      	movs	r1, r2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 f888 	bl	8001ebc <showProjectElements>
 8001dac:	e02c      	b.n	8001e08 <showProjectSelectMenu+0xec>
					if(projectSelect % 2)
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <showProjectSelectMenu+0x10c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <showProjectSelectMenu+0xb8>
						display--;
 8001dbe:	2146      	movs	r1, #70	; 0x46
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
						side = 5;
 8001dca:	2347      	movs	r3, #71	; 0x47
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2205      	movs	r2, #5
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e009      	b.n	8001de8 <showProjectSelectMenu+0xcc>
						display++;
 8001dd4:	2146      	movs	r1, #70	; 0x46
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	3201      	adds	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
						side = 68;
 8001de0:	2347      	movs	r3, #71	; 0x47
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2244      	movs	r2, #68	; 0x44
 8001de6:	701a      	strb	r2, [r3, #0]
					Project Handler = getProjectStructByID(display);
 8001de8:	003a      	movs	r2, r7
 8001dea:	2346      	movs	r3, #70	; 0x46
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	0019      	movs	r1, r3
 8001df2:	0010      	movs	r0, r2
 8001df4:	f000 fd4c 	bl	8002890 <getProjectStructByID>
					showProjectElements(&Handler, side);
 8001df8:	2347      	movs	r3, #71	; 0x47
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	003b      	movs	r3, r7
 8001e00:	0011      	movs	r1, r2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f85a 	bl	8001ebc <showProjectElements>
				step++;
 8001e08:	2145      	movs	r1, #69	; 0x45
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	3201      	adds	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
			while(step < 2)
 8001e14:	2345      	movs	r3, #69	; 0x45
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d9a0      	bls.n	8001d60 <showProjectSelectMenu+0x44>
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b012      	add	sp, #72	; 0x48
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	2000060f 	.word	0x2000060f

08001e2c <newTaskElement>:

void newTaskElement(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af02      	add	r7, sp, #8
	bool color = 0;
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
	if((projectSelect + 3) % 2)
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <newTaskElement+0x80>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3303      	adds	r3, #3
 8001e40:	001a      	movs	r2, r3
 8001e42:	2301      	movs	r3, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	d00b      	beq.n	8001e60 <newTaskElement+0x34>
	{
		SSD1306_DrawFilledRectangle(5, 25, 56, 47, 1);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	232f      	movs	r3, #47	; 0x2f
 8001e4e:	2238      	movs	r2, #56	; 0x38
 8001e50:	2119      	movs	r1, #25
 8001e52:	2005      	movs	r0, #5
 8001e54:	f7ff fd62 	bl	800191c <SSD1306_DrawFilledRectangle>
		color = 0;
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e00a      	b.n	8001e76 <newTaskElement+0x4a>
	}
	else
	{
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
 8001e60:	2301      	movs	r3, #1
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	232f      	movs	r3, #47	; 0x2f
 8001e66:	2238      	movs	r2, #56	; 0x38
 8001e68:	2119      	movs	r1, #25
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f7ff fcbf 	bl	80017ee <SSD1306_DrawRectangle>
		color = 1;
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
	}

	SSD1306_GotoXY(18, 33);
 8001e76:	2121      	movs	r1, #33	; 0x21
 8001e78:	2012      	movs	r0, #18
 8001e7a:	f7ff fa69 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts("Nowe", &Font_7x10, color);
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	490b      	ldr	r1, [pc, #44]	; (8001eb0 <newTaskElement+0x84>)
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <newTaskElement+0x88>)
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fafc 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(9, 46);
 8001e8c:	212e      	movs	r1, #46	; 0x2e
 8001e8e:	2009      	movs	r0, #9
 8001e90:	f7ff fa5e 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts("zadanie", &Font_7x10, color);
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	4905      	ldr	r1, [pc, #20]	; (8001eb0 <newTaskElement+0x84>)
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <newTaskElement+0x8c>)
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff faf1 	bl	8001484 <SSD1306_Puts>
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	2000060f 	.word	0x2000060f
 8001eb0:	20000114 	.word	0x20000114
 8001eb4:	080076d4 	.word	0x080076d4
 8001eb8:	080076dc 	.word	0x080076dc

08001ebc <showProjectElements>:

void showProjectElements(Project * project, uint8_t margin)
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	1cfb      	adds	r3, r7, #3
 8001ec8:	701a      	strb	r2, [r3, #0]
	bool color = 0;
 8001eca:	240f      	movs	r4, #15
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
	if(margin == 5)
 8001ed2:	1cfb      	adds	r3, r7, #3
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b05      	cmp	r3, #5
 8001ed8:	d124      	bne.n	8001f24 <showProjectElements+0x68>
	{
		if((projectSelect + 3) % 2)
 8001eda:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <showProjectElements+0x120>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <showProjectElements+0x4a>
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001eea:	1cfb      	adds	r3, r7, #3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	232f      	movs	r3, #47	; 0x2f
 8001ef6:	2238      	movs	r2, #56	; 0x38
 8001ef8:	2119      	movs	r1, #25
 8001efa:	f7ff fd0f 	bl	800191c <SSD1306_DrawFilledRectangle>
			color = 0;
 8001efe:	193b      	adds	r3, r7, r4
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e033      	b.n	8001f6e <showProjectElements+0xb2>
		}
		else
		{
			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001f06:	1cfb      	adds	r3, r7, #3
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b298      	uxth	r0, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	232f      	movs	r3, #47	; 0x2f
 8001f12:	2238      	movs	r2, #56	; 0x38
 8001f14:	2119      	movs	r1, #25
 8001f16:	f7ff fc6a 	bl	80017ee <SSD1306_DrawRectangle>
			color = 1;
 8001f1a:	230f      	movs	r3, #15
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e024      	b.n	8001f6e <showProjectElements+0xb2>
		}
	}
	else
	{
		if((projectSelect + 3) % 2)
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <showProjectElements+0x120>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3303      	adds	r3, #3
 8001f2c:	001a      	movs	r2, r3
 8001f2e:	2301      	movs	r3, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <showProjectElements+0x96>
		{

			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001f34:	1cfb      	adds	r3, r7, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	232f      	movs	r3, #47	; 0x2f
 8001f40:	2238      	movs	r2, #56	; 0x38
 8001f42:	2119      	movs	r1, #25
 8001f44:	f7ff fc53 	bl	80017ee <SSD1306_DrawRectangle>
			color = 1;
 8001f48:	230f      	movs	r3, #15
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e00d      	b.n	8001f6e <showProjectElements+0xb2>
		}
		else
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001f52:	1cfb      	adds	r3, r7, #3
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b298      	uxth	r0, r3
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	232f      	movs	r3, #47	; 0x2f
 8001f5e:	2238      	movs	r2, #56	; 0x38
 8001f60:	2119      	movs	r1, #25
 8001f62:	f7ff fcdb 	bl	800191c <SSD1306_DrawFilledRectangle>
			color = 0;
 8001f66:	230f      	movs	r3, #15
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
		}
	}
	margin = margin + 4;
 8001f6e:	1cfb      	adds	r3, r7, #3
 8001f70:	1cfa      	adds	r2, r7, #3
 8001f72:	7812      	ldrb	r2, [r2, #0]
 8001f74:	3204      	adds	r2, #4
 8001f76:	701a      	strb	r2, [r3, #0]
	SSD1306_GotoXY(margin, 29);
 8001f78:	1cfb      	adds	r3, r7, #3
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	211d      	movs	r1, #29
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7ff f9e5 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(project->shortName, &Font_7x10, color);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6858      	ldr	r0, [r3, #4]
 8001f8a:	240f      	movs	r4, #15
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <showProjectElements+0x124>)
 8001f92:	0019      	movs	r1, r3
 8001f94:	f7ff fa76 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 40);
 8001f98:	1cfb      	adds	r3, r7, #3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2128      	movs	r1, #40	; 0x28
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff f9d5 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(project->desc1, &Font_7x10, color);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6898      	ldr	r0, [r3, #8]
 8001faa:	193b      	adds	r3, r7, r4
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <showProjectElements+0x124>)
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	f7ff fa67 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 51);
 8001fb6:	1cfb      	adds	r3, r7, #3
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2133      	movs	r1, #51	; 0x33
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7ff f9c6 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(project->desc2, &Font_7x10, color);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68d8      	ldr	r0, [r3, #12]
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <showProjectElements+0x124>)
 8001fce:	0019      	movs	r1, r3
 8001fd0:	f7ff fa58 	bl	8001484 <SSD1306_Puts>
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b005      	add	sp, #20
 8001fda:	bd90      	pop	{r4, r7, pc}
 8001fdc:	2000060f 	.word	0x2000060f
 8001fe0:	20000114 	.word	0x20000114

08001fe4 <showProjectDetails>:

// szczegoly projektu - 11
// -------------------------------------------------------------------------------------

void showProjectDetails(Project * project)
{
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	b089      	sub	sp, #36	; 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

	char width[10];
	sprintf(width, "%i.%imm", project->width / 10, project->width % 10);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8b1b      	ldrh	r3, [r3, #24]
 8001ff0:	210a      	movs	r1, #10
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7fe f89a 	bl	800012c <__udivsi3>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	001c      	movs	r4, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	8b1b      	ldrh	r3, [r3, #24]
 8002002:	210a      	movs	r1, #10
 8002004:	0018      	movs	r0, r3
 8002006:	f7fe f917 	bl	8000238 <__aeabi_uidivmod>
 800200a:	000b      	movs	r3, r1
 800200c:	b29b      	uxth	r3, r3
 800200e:	4938      	ldr	r1, [pc, #224]	; (80020f0 <showProjectDetails+0x10c>)
 8002010:	250c      	movs	r5, #12
 8002012:	1978      	adds	r0, r7, r5
 8002014:	0022      	movs	r2, r4
 8002016:	f004 feb7 	bl	8006d88 <siprintf>
	showLabelBar(project->fullName);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fbba 	bl	8002798 <showLabelBar>
	SSD1306_GotoXY(0, 20);
 8002024:	2114      	movs	r1, #20
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff f992 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 800202c:	4931      	ldr	r1, [pc, #196]	; (80020f4 <showProjectDetails+0x110>)
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <showProjectDetails+0x114>)
 8002030:	2201      	movs	r2, #1
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff fa26 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8002038:	2114      	movs	r1, #20
 800203a:	2046      	movs	r0, #70	; 0x46
 800203c:	f7ff f988 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 8002040:	492c      	ldr	r1, [pc, #176]	; (80020f4 <showProjectDetails+0x110>)
 8002042:	197b      	adds	r3, r7, r5
 8002044:	2201      	movs	r2, #1
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff fa1c 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 800204c:	211f      	movs	r1, #31
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff f97e 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(TASK_NO_LABEL, &Font_7x10, 1);
 8002054:	4927      	ldr	r1, [pc, #156]	; (80020f4 <showProjectDetails+0x110>)
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <showProjectDetails+0x118>)
 8002058:	2201      	movs	r2, #1
 800205a:	0018      	movs	r0, r3
 800205c:	f7ff fa12 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(70, 31);
 8002060:	211f      	movs	r1, #31
 8002062:	2046      	movs	r0, #70	; 0x46
 8002064:	f7ff f974 	bl	8001350 <SSD1306_GotoXY>
	uint8_t count = countArray(project);
 8002068:	2617      	movs	r6, #23
 800206a:	19bc      	adds	r4, r7, r6
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fbdd 	bl	800282e <countArray>
 8002074:	0003      	movs	r3, r0
 8002076:	7023      	strb	r3, [r4, #0]
	sprintf(width, "%i", count);
 8002078:	19bb      	adds	r3, r7, r6
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	4920      	ldr	r1, [pc, #128]	; (8002100 <showProjectDetails+0x11c>)
 800207e:	197b      	adds	r3, r7, r5
 8002080:	0018      	movs	r0, r3
 8002082:	f004 fe81 	bl	8006d88 <siprintf>
	SSD1306_Puts(width, &Font_7x10, 1);
 8002086:	491b      	ldr	r1, [pc, #108]	; (80020f4 <showProjectDetails+0x110>)
 8002088:	197b      	adds	r3, r7, r5
 800208a:	2201      	movs	r2, #1
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff f9f9 	bl	8001484 <SSD1306_Puts>

	char * desc1;
	char * desc2;
	if(!project->desc1F)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <showProjectDetails+0xbe>
	{
		desc1 = project->desc1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e002      	b.n	80020a8 <showProjectDetails+0xc4>
	}
	else
	{
		desc1 = project->desc1F;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	61fb      	str	r3, [r7, #28]
	}
	if(!project->desc2F)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <showProjectDetails+0xd4>
	{
		desc2 = project->desc2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	e002      	b.n	80020be <showProjectDetails+0xda>
	}
	else
	{
		desc2 = project->desc2F;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	61bb      	str	r3, [r7, #24]
	}
	SSD1306_GotoXY(0, 42);
 80020be:	212a      	movs	r1, #42	; 0x2a
 80020c0:	2000      	movs	r0, #0
 80020c2:	f7ff f945 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(desc1, &Font_7x10, 1);
 80020c6:	490b      	ldr	r1, [pc, #44]	; (80020f4 <showProjectDetails+0x110>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2201      	movs	r2, #1
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff f9d9 	bl	8001484 <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 80020d2:	2135      	movs	r1, #53	; 0x35
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff f93b 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(desc2, &Font_7x10, 1);
 80020da:	4906      	ldr	r1, [pc, #24]	; (80020f4 <showProjectDetails+0x110>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2201      	movs	r2, #1
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff f9cf 	bl	8001484 <SSD1306_Puts>
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b009      	add	sp, #36	; 0x24
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	080076e4 	.word	0x080076e4
 80020f4:	20000114 	.word	0x20000114
 80020f8:	080076ec 	.word	0x080076ec
 80020fc:	080076f8 	.word	0x080076f8
 8002100:	08007704 	.word	0x08007704

08002104 <showValueScreen>:

// ustawianie wartosci - 2++
// -------------------------------------------------------------------------------------
void showValueScreen(VALUE_TYPE type, uint8_t runMode, bool direction, bool first)
{
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	0005      	movs	r5, r0
 800210c:	000c      	movs	r4, r1
 800210e:	0010      	movs	r0, r2
 8002110:	0019      	movs	r1, r3
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	1c2a      	adds	r2, r5, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	1dbb      	adds	r3, r7, #6
 800211a:	1c22      	adds	r2, r4, #0
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	1d7b      	adds	r3, r7, #5
 8002120:	1c02      	adds	r2, r0, #0
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	1c0a      	adds	r2, r1, #0
 8002128:	701a      	strb	r2, [r3, #0]
	char valueLettering[10];
	uint8_t typeToken = type;
 800212a:	2117      	movs	r1, #23
 800212c:	187b      	adds	r3, r7, r1
 800212e:	1dfa      	adds	r2, r7, #7
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	701a      	strb	r2, [r3, #0]

	switch (typeToken)
 8002134:	187b      	adds	r3, r7, r1
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d100      	bne.n	800213e <showValueScreen+0x3a>
 800213c:	e0c7      	b.n	80022ce <showValueScreen+0x1ca>
 800213e:	dd00      	ble.n	8002142 <showValueScreen+0x3e>
 8002140:	e0f7      	b.n	8002332 <showValueScreen+0x22e>
 8002142:	2b02      	cmp	r3, #2
 8002144:	d100      	bne.n	8002148 <showValueScreen+0x44>
 8002146:	e088      	b.n	800225a <showValueScreen+0x156>
 8002148:	dd00      	ble.n	800214c <showValueScreen+0x48>
 800214a:	e0f2      	b.n	8002332 <showValueScreen+0x22e>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <showValueScreen+0x52>
 8002150:	2b01      	cmp	r3, #1
 8002152:	d041      	beq.n	80021d8 <showValueScreen+0xd4>
 8002154:	e0ed      	b.n	8002332 <showValueScreen+0x22e>
	{
		case 0:
			if(first) {
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00d      	beq.n	800217a <showValueScreen+0x76>
				SSD1306_DrawBitmap(0, 0, width, 128, 64, 1);
 800215e:	4a7e      	ldr	r2, [pc, #504]	; (8002358 <showValueScreen+0x254>)
 8002160:	2301      	movs	r3, #1
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2340      	movs	r3, #64	; 0x40
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	2100      	movs	r1, #0
 800216c:	2000      	movs	r0, #0
 800216e:	f7fe fecf 	bl	8000f10 <SSD1306_DrawBitmap>
				intToArray_chVal(CARCASS_MIN_WIDTH);
 8002172:	2032      	movs	r0, #50	; 0x32
 8002174:	f000 fa54 	bl	8002620 <intToArray_chVal>
 8002178:	e012      	b.n	80021a0 <showValueScreen+0x9c>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, CARCASS_MIN_WIDTH, CARCASS_MAX_WIDTH);}
 800217a:	1dbb      	adds	r3, r7, #6
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <showValueScreen+0x96>
 8002182:	4b76      	ldr	r3, [pc, #472]	; (800235c <showValueScreen+0x258>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2d9      	uxtb	r1, r3
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <showValueScreen+0x25c>)
 800218c:	1d7b      	adds	r3, r7, #5
 800218e:	7818      	ldrb	r0, [r3, #0]
 8002190:	0013      	movs	r3, r2
 8002192:	2232      	movs	r2, #50	; 0x32
 8002194:	f000 f952 	bl	800243c <changeValue>
 8002198:	e002      	b.n	80021a0 <showValueScreen+0x9c>
				else{moveMarker(4);}
 800219a:	2004      	movs	r0, #4
 800219c:	f000 f92e 	bl	80023fc <moveMarker>
			}
			setMarkerPosition(1);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f000 f8f3 	bl	800238c <setMarkerPosition>
			sprintf(valueLettering, "%i%i%i.%imm", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 80021a6:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <showValueScreen+0x260>)
 80021a8:	78db      	ldrb	r3, [r3, #3]
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	001c      	movs	r4, r3
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <showValueScreen+0x260>)
 80021b0:	789b      	ldrb	r3, [r3, #2]
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	001d      	movs	r5, r3
 80021b6:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <showValueScreen+0x260>)
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	001a      	movs	r2, r3
 80021be:	4b69      	ldr	r3, [pc, #420]	; (8002364 <showValueScreen+0x260>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	4968      	ldr	r1, [pc, #416]	; (8002368 <showValueScreen+0x264>)
 80021c6:	200c      	movs	r0, #12
 80021c8:	1838      	adds	r0, r7, r0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	9200      	str	r2, [sp, #0]
 80021ce:	002b      	movs	r3, r5
 80021d0:	0022      	movs	r2, r4
 80021d2:	f004 fdd9 	bl	8006d88 <siprintf>
		break;
 80021d6:	e0ac      	b.n	8002332 <showValueScreen+0x22e>
		case 1:
			if(first) {
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <showValueScreen+0xf8>
				SSD1306_DrawBitmap(0, 0, turns, 128, 64, 1);
 80021e0:	4a62      	ldr	r2, [pc, #392]	; (800236c <showValueScreen+0x268>)
 80021e2:	2301      	movs	r3, #1
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	2100      	movs	r1, #0
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7fe fe8e 	bl	8000f10 <SSD1306_DrawBitmap>
				intToArray_chVal(CARCASS_MIN_TURNS);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f000 fa13 	bl	8002620 <intToArray_chVal>
 80021fa:	e012      	b.n	8002222 <showValueScreen+0x11e>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, CARCASS_MIN_TURNS, CARCASS_MAX_TURNS);}
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <showValueScreen+0x118>
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <showValueScreen+0x258>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	b2d9      	uxtb	r1, r3
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <showValueScreen+0x26c>)
 800220e:	1d7b      	adds	r3, r7, #5
 8002210:	7818      	ldrb	r0, [r3, #0]
 8002212:	0013      	movs	r3, r2
 8002214:	220a      	movs	r2, #10
 8002216:	f000 f911 	bl	800243c <changeValue>
 800221a:	e002      	b.n	8002222 <showValueScreen+0x11e>
				else{moveMarker(4);}
 800221c:	2004      	movs	r0, #4
 800221e:	f000 f8ed 	bl	80023fc <moveMarker>
			}
			setMarkerPosition(0);
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f8b2 	bl	800238c <setMarkerPosition>
			sprintf(valueLettering, "%i%i%i%izw.", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 8002228:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <showValueScreen+0x260>)
 800222a:	78db      	ldrb	r3, [r3, #3]
 800222c:	b25b      	sxtb	r3, r3
 800222e:	001c      	movs	r4, r3
 8002230:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <showValueScreen+0x260>)
 8002232:	789b      	ldrb	r3, [r3, #2]
 8002234:	b25b      	sxtb	r3, r3
 8002236:	001d      	movs	r5, r3
 8002238:	4b4a      	ldr	r3, [pc, #296]	; (8002364 <showValueScreen+0x260>)
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	b25b      	sxtb	r3, r3
 800223e:	001a      	movs	r2, r3
 8002240:	4b48      	ldr	r3, [pc, #288]	; (8002364 <showValueScreen+0x260>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b25b      	sxtb	r3, r3
 8002246:	494b      	ldr	r1, [pc, #300]	; (8002374 <showValueScreen+0x270>)
 8002248:	200c      	movs	r0, #12
 800224a:	1838      	adds	r0, r7, r0
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9200      	str	r2, [sp, #0]
 8002250:	002b      	movs	r3, r5
 8002252:	0022      	movs	r2, r4
 8002254:	f004 fd98 	bl	8006d88 <siprintf>
		break;
 8002258:	e06b      	b.n	8002332 <showValueScreen+0x22e>
		case 2:
			if(first) {
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <showValueScreen+0x17a>
				SSD1306_DrawBitmap(0, 0, diameter, 128, 64, 1);
 8002262:	4a45      	ldr	r2, [pc, #276]	; (8002378 <showValueScreen+0x274>)
 8002264:	2301      	movs	r3, #1
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	2340      	movs	r3, #64	; 0x40
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	2100      	movs	r1, #0
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fe4d 	bl	8000f10 <SSD1306_DrawBitmap>
				intToArray_chVal(WINDING_MIN_DIAMETER);
 8002276:	2001      	movs	r0, #1
 8002278:	f000 f9d2 	bl	8002620 <intToArray_chVal>
 800227c:	e011      	b.n	80022a2 <showValueScreen+0x19e>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, WINDING_MIN_DIAMETER, WINDING_MAX_DIAMETER);}
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <showValueScreen+0x198>
 8002286:	4b35      	ldr	r3, [pc, #212]	; (800235c <showValueScreen+0x258>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b25b      	sxtb	r3, r3
 800228c:	b2d9      	uxtb	r1, r3
 800228e:	1d7b      	adds	r3, r7, #5
 8002290:	7818      	ldrb	r0, [r3, #0]
 8002292:	23fa      	movs	r3, #250	; 0xfa
 8002294:	2201      	movs	r2, #1
 8002296:	f000 f8d1 	bl	800243c <changeValue>
 800229a:	e002      	b.n	80022a2 <showValueScreen+0x19e>
				else{moveMarker(3);}
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f8ad 	bl	80023fc <moveMarker>
			}
			setMarkerPosition(2);
 80022a2:	2002      	movs	r0, #2
 80022a4:	f000 f872 	bl	800238c <setMarkerPosition>
			sprintf(valueLettering, "~%i.%i%imm", arrayToken[2], arrayToken[1], arrayToken[0]);
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <showValueScreen+0x260>)
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	001a      	movs	r2, r3
 80022b0:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <showValueScreen+0x260>)
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	001c      	movs	r4, r3
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <showValueScreen+0x260>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	492f      	ldr	r1, [pc, #188]	; (800237c <showValueScreen+0x278>)
 80022c0:	200c      	movs	r0, #12
 80022c2:	1838      	adds	r0, r7, r0
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	0023      	movs	r3, r4
 80022c8:	f004 fd5e 	bl	8006d88 <siprintf>
		break;
 80022cc:	e031      	b.n	8002332 <showValueScreen+0x22e>
		case 3:
			if(first) {
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <showValueScreen+0x1ee>
				SSD1306_DrawBitmap(0, 0, speed, 128, 64, 1);
 80022d6:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <showValueScreen+0x27c>)
 80022d8:	2301      	movs	r3, #1
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	2100      	movs	r1, #0
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fe13 	bl	8000f10 <SSD1306_DrawBitmap>
				intToArray_chVal(WINDING_MIN_SPEED);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 f998 	bl	8002620 <intToArray_chVal>
 80022f0:	e011      	b.n	8002316 <showValueScreen+0x212>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, WINDING_MIN_SPEED, WINDING_MAX_SPEED);}
 80022f2:	1dbb      	adds	r3, r7, #6
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <showValueScreen+0x20c>
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <showValueScreen+0x258>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	b2d9      	uxtb	r1, r3
 8002302:	1d7b      	adds	r3, r7, #5
 8002304:	7818      	ldrb	r0, [r3, #0]
 8002306:	2309      	movs	r3, #9
 8002308:	2201      	movs	r2, #1
 800230a:	f000 f897 	bl	800243c <changeValue>
 800230e:	e002      	b.n	8002316 <showValueScreen+0x212>
				else{moveMarker(1);}
 8002310:	2001      	movs	r0, #1
 8002312:	f000 f873 	bl	80023fc <moveMarker>
			}
			setMarkerPosition(0);
 8002316:	2000      	movs	r0, #0
 8002318:	f000 f838 	bl	800238c <setMarkerPosition>
			sprintf(valueLettering, "   %i", arrayToken[0]);
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <showValueScreen+0x260>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b25b      	sxtb	r3, r3
 8002322:	001a      	movs	r2, r3
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <showValueScreen+0x280>)
 8002326:	230c      	movs	r3, #12
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	0018      	movs	r0, r3
 800232c:	f004 fd2c 	bl	8006d88 <siprintf>
		break;
 8002330:	46c0      	nop			; (mov r8, r8)
	}

	clearValue();
 8002332:	f000 fa14 	bl	800275e <clearValue>
	SSD1306_GotoXY(25, 20);
 8002336:	2114      	movs	r1, #20
 8002338:	2019      	movs	r0, #25
 800233a:	f7ff f809 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(valueLettering, &Font_11x18, 1);
 800233e:	4912      	ldr	r1, [pc, #72]	; (8002388 <showValueScreen+0x284>)
 8002340:	230c      	movs	r3, #12
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2201      	movs	r2, #1
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff f89c 	bl	8001484 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800234c:	f7fe ff44 	bl	80011d8 <SSD1306_UpdateScreen>
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b006      	add	sp, #24
 8002356:	bdb0      	pop	{r4, r5, r7, pc}
 8002358:	08007c00 	.word	0x08007c00
 800235c:	20000612 	.word	0x20000612
 8002360:	000004e2 	.word	0x000004e2
 8002364:	20000614 	.word	0x20000614
 8002368:	08007708 	.word	0x08007708
 800236c:	08008000 	.word	0x08008000
 8002370:	000009c4 	.word	0x000009c4
 8002374:	08007714 	.word	0x08007714
 8002378:	08008400 	.word	0x08008400
 800237c:	08007720 	.word	0x08007720
 8002380:	08008800 	.word	0x08008800
 8002384:	0800772c 	.word	0x0800772c
 8002388:	2000011c 	.word	0x2000011c

0800238c <setMarkerPosition>:

void setMarkerPosition(uint8_t divider)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	0002      	movs	r2, r0
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	701a      	strb	r2, [r3, #0]
	clearMarker();
 8002398:	f000 f9d3 	bl	8002742 <clearMarker>
	uint8_t correction = 0;
 800239c:	210f      	movs	r1, #15
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= divider)
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <setMarkerPosition+0x6c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	001a      	movs	r2, r3
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	db02      	blt.n	80023ba <setMarkerPosition+0x2e>
	{
		correction = 11;
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	220b      	movs	r2, #11
 80023b8:	701a      	strb	r2, [r3, #0]
	}
	char margin = (73 - ((markerPosition * 11) + correction));
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <setMarkerPosition+0x6c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	1c1a      	adds	r2, r3, #0
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	18d2      	adds	r2, r2, r3
 80023c8:	1892      	adds	r2, r2, r2
 80023ca:	18d3      	adds	r3, r2, r3
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	230f      	movs	r3, #15
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	200e      	movs	r0, #14
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	2149      	movs	r1, #73	; 0x49
 80023de:	1a8a      	subs	r2, r1, r2
 80023e0:	701a      	strb	r2, [r3, #0]
	drawMarker(margin, 39);
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2127      	movs	r1, #39	; 0x27
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 f95f 	bl	80026ac <drawMarker>
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b004      	add	sp, #16
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	20000612 	.word	0x20000612

080023fc <moveMarker>:

void moveMarker(uint8_t range)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	0002      	movs	r2, r0
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	701a      	strb	r2, [r3, #0]
	markerPosition++;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <moveMarker+0x3c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b25b      	sxtb	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	b25a      	sxtb	r2, r3
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <moveMarker+0x3c>)
 8002418:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= range) {markerPosition = 0;}
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <moveMarker+0x3c>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	001a      	movs	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	db02      	blt.n	8002430 <moveMarker+0x34>
 800242a:	4b03      	ldr	r3, [pc, #12]	; (8002438 <moveMarker+0x3c>)
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000612 	.word	0x20000612

0800243c <changeValue>:

void changeValue(bool set, uint8_t position, uint16_t min, uint16_t max)
{
 800243c:	b5b0      	push	{r4, r5, r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	0005      	movs	r5, r0
 8002444:	000c      	movs	r4, r1
 8002446:	0010      	movs	r0, r2
 8002448:	0019      	movs	r1, r3
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	1c2a      	adds	r2, r5, #0
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	1dbb      	adds	r3, r7, #6
 8002452:	1c22      	adds	r2, r4, #0
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	1c02      	adds	r2, r0, #0
 800245a:	801a      	strh	r2, [r3, #0]
 800245c:	1cbb      	adds	r3, r7, #2
 800245e:	1c0a      	adds	r2, r1, #0
 8002460:	801a      	strh	r2, [r3, #0]
	uint16_t value;
	uint16_t valueToken = arrayToInt_chVal();
 8002462:	2310      	movs	r3, #16
 8002464:	18fc      	adds	r4, r7, r3
 8002466:	f000 f8a1 	bl	80025ac <arrayToInt_chVal>
 800246a:	0003      	movs	r3, r0
 800246c:	8023      	strh	r3, [r4, #0]
	uint16_t expo 		= 1;
 800246e:	2314      	movs	r3, #20
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2201      	movs	r2, #1
 8002474:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < position; i++)
 8002476:	2313      	movs	r3, #19
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e00e      	b.n	800249e <changeValue+0x62>
	{
		expo = expo * 10;
 8002480:	2314      	movs	r3, #20
 8002482:	18fa      	adds	r2, r7, r3
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	1c19      	adds	r1, r3, #0
 800248a:	0089      	lsls	r1, r1, #2
 800248c:	18cb      	adds	r3, r1, r3
 800248e:	18db      	adds	r3, r3, r3
 8002490:	8013      	strh	r3, [r2, #0]
	for(uint8_t i = 0; i < position; i++)
 8002492:	2113      	movs	r1, #19
 8002494:	187b      	adds	r3, r7, r1
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	187b      	adds	r3, r7, r1
 800249a:	3201      	adds	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	2313      	movs	r3, #19
 80024a0:	18fa      	adds	r2, r7, r3
 80024a2:	1dbb      	adds	r3, r7, #6
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d3e9      	bcc.n	8002480 <changeValue+0x44>
	}

	uint8_t overflowFlag = arrayToken[position] = (valueToken / expo) % 10; // określa wartość cyfry nad markerem wyboru
 80024ac:	2410      	movs	r4, #16
 80024ae:	193a      	adds	r2, r7, r4
 80024b0:	2514      	movs	r5, #20
 80024b2:	197b      	adds	r3, r7, r5
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	0019      	movs	r1, r3
 80024ba:	0010      	movs	r0, r2
 80024bc:	f7fd fe36 	bl	800012c <__udivsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	210a      	movs	r1, #10
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7fd feb6 	bl	8000238 <__aeabi_uidivmod>
 80024cc:	000b      	movs	r3, r1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	1dbb      	adds	r3, r7, #6
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b251      	sxtb	r1, r2
 80024d6:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <changeValue+0x16c>)
 80024d8:	1c08      	adds	r0, r1, #0
 80024da:	54d0      	strb	r0, [r2, r3]
 80024dc:	200f      	movs	r0, #15
 80024de:	183b      	adds	r3, r7, r0
 80024e0:	1c0a      	adds	r2, r1, #0
 80024e2:	701a      	strb	r2, [r3, #0]

	if(set)
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01d      	beq.n	8002528 <changeValue+0xec>
	{
		if(overflowFlag >= 9)
 80024ec:	183b      	adds	r3, r7, r0
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d90e      	bls.n	8002512 <changeValue+0xd6>
		{
			value = valueToken - (expo * 9);
 80024f4:	197b      	adds	r3, r7, r5
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	1c1a      	adds	r2, r3, #0
 80024fa:	0352      	lsls	r2, r2, #13
 80024fc:	1ad2      	subs	r2, r2, r3
 80024fe:	00d2      	lsls	r2, r2, #3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	b299      	uxth	r1, r3
 8002504:	2316      	movs	r3, #22
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	193a      	adds	r2, r7, r4
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	188a      	adds	r2, r1, r2
 800250e:	801a      	strh	r2, [r3, #0]
 8002510:	e028      	b.n	8002564 <changeValue+0x128>
		}
		else
		{
			value = valueToken + expo;
 8002512:	2316      	movs	r3, #22
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2210      	movs	r2, #16
 8002518:	18b9      	adds	r1, r7, r2
 800251a:	2214      	movs	r2, #20
 800251c:	18ba      	adds	r2, r7, r2
 800251e:	8809      	ldrh	r1, [r1, #0]
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	188a      	adds	r2, r1, r2
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e01d      	b.n	8002564 <changeValue+0x128>
		}
	}
	else
	{
		if(overflowFlag <= 0)
 8002528:	230f      	movs	r3, #15
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <changeValue+0x114>
		{
			value = valueToken + (expo * 9);
 8002532:	2314      	movs	r3, #20
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	1c1a      	adds	r2, r3, #0
 800253a:	00d2      	lsls	r2, r2, #3
 800253c:	18d3      	adds	r3, r2, r3
 800253e:	b299      	uxth	r1, r3
 8002540:	2316      	movs	r3, #22
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	2210      	movs	r2, #16
 8002546:	18ba      	adds	r2, r7, r2
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	188a      	adds	r2, r1, r2
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	e009      	b.n	8002564 <changeValue+0x128>
		}
		else
		{
			value = valueToken - expo;
 8002550:	2316      	movs	r3, #22
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2210      	movs	r2, #16
 8002556:	18b9      	adds	r1, r7, r2
 8002558:	2214      	movs	r2, #20
 800255a:	18ba      	adds	r2, r7, r2
 800255c:	8809      	ldrh	r1, [r1, #0]
 800255e:	8812      	ldrh	r2, [r2, #0]
 8002560:	1a8a      	subs	r2, r1, r2
 8002562:	801a      	strh	r2, [r3, #0]
		}
	}
	if(value < min){value = valueToken;}
 8002564:	2116      	movs	r1, #22
 8002566:	187a      	adds	r2, r7, r1
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	8812      	ldrh	r2, [r2, #0]
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d204      	bcs.n	800257c <changeValue+0x140>
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2210      	movs	r2, #16
 8002576:	18ba      	adds	r2, r7, r2
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	801a      	strh	r2, [r3, #0]
	if(value > max){value = valueToken;}
 800257c:	2116      	movs	r1, #22
 800257e:	187a      	adds	r2, r7, r1
 8002580:	1cbb      	adds	r3, r7, #2
 8002582:	8812      	ldrh	r2, [r2, #0]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d904      	bls.n	8002594 <changeValue+0x158>
 800258a:	187b      	adds	r3, r7, r1
 800258c:	2210      	movs	r2, #16
 800258e:	18ba      	adds	r2, r7, r2
 8002590:	8812      	ldrh	r2, [r2, #0]
 8002592:	801a      	strh	r2, [r3, #0]
	intToArray_chVal(value);
 8002594:	2316      	movs	r3, #22
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 f840 	bl	8002620 <intToArray_chVal>
}
 80025a0:	46c0      	nop			; (mov r8, r8)
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b006      	add	sp, #24
 80025a6:	bdb0      	pop	{r4, r5, r7, pc}
 80025a8:	20000614 	.word	0x20000614

080025ac <arrayToInt_chVal>:

uint16_t arrayToInt_chVal(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
	uint16_t expo;
	uint16_t value = 0;
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < 5; i++)
 80025b8:	1cfb      	adds	r3, r7, #3
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	e023      	b.n	8002608 <arrayToInt_chVal+0x5c>
	{
		if(!i){expo = 1;}
 80025c0:	1cfb      	adds	r3, r7, #3
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <arrayToInt_chVal+0x24>
 80025c8:	1dbb      	adds	r3, r7, #6
 80025ca:	2201      	movs	r2, #1
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	e007      	b.n	80025e0 <arrayToInt_chVal+0x34>
		else{expo = expo * 10;}
 80025d0:	1dba      	adds	r2, r7, #6
 80025d2:	1dbb      	adds	r3, r7, #6
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	1c19      	adds	r1, r3, #0
 80025d8:	0089      	lsls	r1, r1, #2
 80025da:	18cb      	adds	r3, r1, r3
 80025dc:	18db      	adds	r3, r3, r3
 80025de:	8013      	strh	r3, [r2, #0]
		value = value + (expo * arrayToken[i]);
 80025e0:	1cfb      	adds	r3, r7, #3
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <arrayToInt_chVal+0x70>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	1dba      	adds	r2, r7, #6
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	4353      	muls	r3, r2
 80025f2:	b299      	uxth	r1, r3
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	188a      	adds	r2, r1, r2
 80025fc:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 80025fe:	1cfb      	adds	r3, r7, #3
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	1cfb      	adds	r3, r7, #3
 8002604:	3201      	adds	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	1cfb      	adds	r3, r7, #3
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d9d7      	bls.n	80025c0 <arrayToInt_chVal+0x14>
	}
	return value;
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	881b      	ldrh	r3, [r3, #0]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000614 	.word	0x20000614

08002620 <intToArray_chVal>:

void intToArray_chVal(uint16_t value)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	0002      	movs	r2, r0
 8002628:	1dbb      	adds	r3, r7, #6
 800262a:	801a      	strh	r2, [r3, #0]
	uint16_t expo;
	for(uint8_t i = 0; i < 5; i++)
 800262c:	230d      	movs	r3, #13
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e02e      	b.n	8002694 <intToArray_chVal+0x74>
	{
		if(!i){expo = 1;}
 8002636:	230d      	movs	r3, #13
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <intToArray_chVal+0x2a>
 8002640:	230e      	movs	r3, #14
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2201      	movs	r2, #1
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	e008      	b.n	800265c <intToArray_chVal+0x3c>
		else{expo = expo * 10;}
 800264a:	230e      	movs	r3, #14
 800264c:	18fa      	adds	r2, r7, r3
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	1c19      	adds	r1, r3, #0
 8002654:	0089      	lsls	r1, r1, #2
 8002656:	18cb      	adds	r3, r1, r3
 8002658:	18db      	adds	r3, r3, r3
 800265a:	8013      	strh	r3, [r2, #0]
		arrayToken[i] = (value / expo) % 10;
 800265c:	1dba      	adds	r2, r7, #6
 800265e:	230e      	movs	r3, #14
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	0019      	movs	r1, r3
 8002668:	0010      	movs	r0, r2
 800266a:	f7fd fd5f 	bl	800012c <__udivsi3>
 800266e:	0003      	movs	r3, r0
 8002670:	b29b      	uxth	r3, r3
 8002672:	210a      	movs	r1, #10
 8002674:	0018      	movs	r0, r3
 8002676:	f7fd fddf 	bl	8000238 <__aeabi_uidivmod>
 800267a:	000b      	movs	r3, r1
 800267c:	b29a      	uxth	r2, r3
 800267e:	200d      	movs	r0, #13
 8002680:	183b      	adds	r3, r7, r0
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b251      	sxtb	r1, r2
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <intToArray_chVal+0x88>)
 8002688:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 800268a:	183b      	adds	r3, r7, r0
 800268c:	781a      	ldrb	r2, [r3, #0]
 800268e:	183b      	adds	r3, r7, r0
 8002690:	3201      	adds	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	230d      	movs	r3, #13
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d9cb      	bls.n	8002636 <intToArray_chVal+0x16>
	}
}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b004      	add	sp, #16
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000614 	.word	0x20000614

080026ac <drawMarker>:

void drawMarker(uint8_t width, uint8_t height)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	0002      	movs	r2, r0
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	1c0a      	adds	r2, r1, #0
 80026bc:	701a      	strb	r2, [r3, #0]
	for(uint8_t h = 0; h < 5; h++)
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e032      	b.n	800272e <drawMarker+0x82>
	{
		uint8_t w = 0;
 80026c8:	230e      	movs	r3, #14
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 80026d0:	e01f      	b.n	8002712 <drawMarker+0x66>
		{
			SSD1306_DrawPixel(((width - h) + w), height + h, 1);
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	210f      	movs	r1, #15
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	240e      	movs	r4, #14
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	b298      	uxth	r0, r3
 80026f0:	1dbb      	adds	r3, r7, #6
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2201      	movs	r2, #1
 8002702:	0019      	movs	r1, r3
 8002704:	f7fe fdb6 	bl	8001274 <SSD1306_DrawPixel>
			w++;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	781a      	ldrb	r2, [r3, #0]
 800270c:	193b      	adds	r3, r7, r4
 800270e:	3201      	adds	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002712:	230e      	movs	r3, #14
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	210f      	movs	r1, #15
 800271a:	187b      	adds	r3, r7, r1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	429a      	cmp	r2, r3
 8002722:	ddd6      	ble.n	80026d2 <drawMarker+0x26>
	for(uint8_t h = 0; h < 5; h++)
 8002724:	187b      	adds	r3, r7, r1
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	187b      	adds	r3, r7, r1
 800272a:	3201      	adds	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	230f      	movs	r3, #15
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d9c7      	bls.n	80026c8 <drawMarker+0x1c>
		}
	}
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b005      	add	sp, #20
 8002740:	bd90      	pop	{r4, r7, pc}

08002742 <clearMarker>:
void clearMarker(void)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 39, 80, 5, 0);
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2305      	movs	r3, #5
 800274e:	2250      	movs	r2, #80	; 0x50
 8002750:	2127      	movs	r1, #39	; 0x27
 8002752:	2014      	movs	r0, #20
 8002754:	f7ff f8e2 	bl	800191c <SSD1306_DrawFilledRectangle>
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <clearValue>:
void clearValue(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 20, 100, 18, 0);
 8002764:	2300      	movs	r3, #0
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2312      	movs	r3, #18
 800276a:	2264      	movs	r2, #100	; 0x64
 800276c:	2114      	movs	r1, #20
 800276e:	2014      	movs	r0, #20
 8002770:	f7ff f8d4 	bl	800191c <SSD1306_DrawFilledRectangle>
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <clearSettings>:

void clearSettings(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	intToArray_chVal(CARCASS_MIN_TURNS);
 8002780:	200a      	movs	r0, #10
 8002782:	f7ff ff4d 	bl	8002620 <intToArray_chVal>
	markerPosition = 0;
 8002786:	4b03      	ldr	r3, [pc, #12]	; (8002794 <clearSettings+0x18>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	20000612 	.word	0x20000612

08002798 <showLabelBar>:

// uniwersalne
// -------------------------------------------------------------------------------------
void showLabelBar(char* label)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af02      	add	r7, sp, #8
 800279e:	6078      	str	r0, [r7, #4]
	SSD1306_DrawFilledRectangle(0, 0, 128, 16, 1);
 80027a0:	2301      	movs	r3, #1
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2310      	movs	r3, #16
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7ff f8b6 	bl	800191c <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY(4, 4);
 80027b0:	2104      	movs	r1, #4
 80027b2:	2004      	movs	r0, #4
 80027b4:	f7fe fdcc 	bl	8001350 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, 0);
 80027b8:	4904      	ldr	r1, [pc, #16]	; (80027cc <showLabelBar+0x34>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	0018      	movs	r0, r3
 80027c0:	f7fe fe60 	bl	8001484 <SSD1306_Puts>
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000114 	.word	0x20000114

080027d0 <clearContent>:


void clearContent(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 18, 128, 46, 0);
 80027d6:	2300      	movs	r3, #0
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	232e      	movs	r3, #46	; 0x2e
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	2112      	movs	r1, #18
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff f89b 	bl	800191c <SSD1306_DrawFilledRectangle>
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <paginationBar>:

void paginationBar(uint8_t pageBarWidth, uint8_t pageNo)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	0002      	movs	r2, r0
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	1c0a      	adds	r2, r1, #0
 80027fc:	701a      	strb	r2, [r3, #0]
	uint8_t pageBarMargin = pageBarWidth * pageNo;
 80027fe:	200f      	movs	r0, #15
 8002800:	183b      	adds	r3, r7, r0
 8002802:	1dfa      	adds	r2, r7, #7
 8002804:	1db9      	adds	r1, r7, #6
 8002806:	7812      	ldrb	r2, [r2, #0]
 8002808:	7809      	ldrb	r1, [r1, #0]
 800280a:	434a      	muls	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 800280e:	183b      	adds	r3, r7, r0
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b298      	uxth	r0, r3
 8002814:	1dfb      	adds	r3, r7, #7
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b29a      	uxth	r2, r3
 800281a:	2301      	movs	r3, #1
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2303      	movs	r3, #3
 8002820:	2112      	movs	r1, #18
 8002822:	f7ff f87b 	bl	800191c <SSD1306_DrawFilledRectangle>
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}

0800282e <countArray>:

uint8_t countArray(Project * project)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8002836:	230f      	movs	r3, #15
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 800283e:	230e      	movs	r3, #14
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e016      	b.n	8002876 <countArray+0x48>
	{
		if(project->coil[i][0] > 0)
 8002848:	230e      	movs	r3, #14
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	3306      	adds	r3, #6
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	18d3      	adds	r3, r2, r3
 8002856:	3302      	adds	r3, #2
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <countArray+0x3c>
		{
			count++;
 800285e:	210f      	movs	r1, #15
 8002860:	187b      	adds	r3, r7, r1
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	187b      	adds	r3, r7, r1
 8002866:	3201      	adds	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 800286a:	210e      	movs	r1, #14
 800286c:	187b      	adds	r3, r7, r1
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	187b      	adds	r3, r7, r1
 8002872:	3201      	adds	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	230e      	movs	r3, #14
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d9e3      	bls.n	8002848 <countArray+0x1a>
		}
	}
	return count;
 8002880:	230f      	movs	r3, #15
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <getProjectStructByID>:
	0,
	{{}}
};

Project getProjectStructByID(uint8_t id)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	000a      	movs	r2, r1
 800289a:	1cfb      	adds	r3, r7, #3
 800289c:	701a      	strb	r2, [r3, #0]
	switch(id)
 800289e:	1cfb      	adds	r3, r7, #3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <getProjectStructByID+0x46>
 80028a6:	dc1f      	bgt.n	80028e8 <getProjectStructByID+0x58>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d002      	beq.n	80028b2 <getProjectStructByID+0x22>
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d009      	beq.n	80028c4 <getProjectStructByID+0x34>
 80028b0:	e01a      	b.n	80028e8 <getProjectStructByID+0x58>
	{
		case 1:
			return PeaveyC30_MAIN;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <getProjectStructByID+0x70>)
 80028b6:	0010      	movs	r0, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	2344      	movs	r3, #68	; 0x44
 80028bc:	001a      	movs	r2, r3
 80028be:	f004 fa51 	bl	8006d64 <memcpy>
 80028c2:	e019      	b.n	80028f8 <getProjectStructByID+0x68>
		break;
		case 2:
			return PeaveyC30_SPK;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <getProjectStructByID+0x74>)
 80028c8:	0010      	movs	r0, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	2344      	movs	r3, #68	; 0x44
 80028ce:	001a      	movs	r2, r3
 80028d0:	f004 fa48 	bl	8006d64 <memcpy>
 80028d4:	e010      	b.n	80028f8 <getProjectStructByID+0x68>
		break;
		case 3:
			return Test_Trafo;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <getProjectStructByID+0x78>)
 80028da:	0010      	movs	r0, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	2344      	movs	r3, #68	; 0x44
 80028e0:	001a      	movs	r2, r3
 80028e2:	f004 fa3f 	bl	8006d64 <memcpy>
 80028e6:	e007      	b.n	80028f8 <getProjectStructByID+0x68>
		break;
	}
	return Empty;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <getProjectStructByID+0x7c>)
 80028ec:	0010      	movs	r0, r2
 80028ee:	0019      	movs	r1, r3
 80028f0:	2344      	movs	r3, #68	; 0x44
 80028f2:	001a      	movs	r2, r3
 80028f4:	f004 fa36 	bl	8006d64 <memcpy>
}
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000004 	.word	0x20000004
 8002904:	20000048 	.word	0x20000048
 8002908:	2000008c 	.word	0x2000008c
 800290c:	200000d0 	.word	0x200000d0

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_MspInit+0x24>)
 8002916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_MspInit+0x24>)
 800291a:	2101      	movs	r1, #1
 800291c:	430a      	orrs	r2, r1
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_MspInit+0x24>)
 8002922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_MspInit+0x24>)
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	0549      	lsls	r1, r1, #21
 800292a:	430a      	orrs	r2, r1
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800293c:	e7fe      	b.n	800293c <NMI_Handler+0x4>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x4>

08002944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 face 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 800296a:	2010      	movs	r0, #16
 800296c:	f000 fe08 	bl	8003580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <TIM2_IRQHandler+0x14>)
 800297e:	0018      	movs	r0, r3
 8002980:	f002 fc4f 	bl	8005222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000620 	.word	0x20000620

08002990 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <TIM6_DAC_IRQHandler+0x14>)
 8002996:	0018      	movs	r0, r3
 8002998:	f002 fc43 	bl	8005222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	20000660 	.word	0x20000660

080029a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <TIM7_IRQHandler+0x14>)
 80029ae:	0018      	movs	r0, r3
 80029b0:	f002 fc37 	bl	8005222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	200006a0 	.word	0x200006a0

080029c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <USART2_IRQHandler+0x14>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f002 ff88 	bl	80058dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	200006e0 	.word	0x200006e0

080029d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <_sbrk+0x5c>)
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <_sbrk+0x60>)
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <_sbrk+0x64>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <_sbrk+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a08:	f004 f982 	bl	8006d10 <__errno>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	220c      	movs	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	425b      	negs	r3, r3
 8002a16:	e009      	b.n	8002a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	18d2      	adds	r2, r2, r3
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <_sbrk+0x64>)
 8002a28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b006      	add	sp, #24
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20005000 	.word	0x20005000
 8002a38:	00000400 	.word	0x00000400
 8002a3c:	2000061c 	.word	0x2000061c
 8002a40:	20000778 	.word	0x20000778

08002a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08d      	sub	sp, #52	; 0x34
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a56:	240c      	movs	r4, #12
 8002a58:	193b      	adds	r3, r7, r4
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	2324      	movs	r3, #36	; 0x24
 8002a5e:	001a      	movs	r2, r3
 8002a60:	2100      	movs	r1, #0
 8002a62:	f004 f988 	bl	8006d76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	0018      	movs	r0, r3
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f004 f981 	bl	8006d76 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	05d2      	lsls	r2, r2, #23
 8002a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a88:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <MX_TIM2_Init+0xc4>)
 8002a8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a94:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a9a:	0021      	movs	r1, r4
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	2201      	movs	r2, #1
 8002aac:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	220f      	movs	r2, #15
 8002ad0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ad2:	187a      	adds	r2, r7, r1
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f002 fa6d 	bl	8004fb8 <HAL_TIM_Encoder_Init>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ae2:	f7fe f9ed 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	2200      	movs	r2, #0
 8002af0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af2:	1d3a      	adds	r2, r7, #4
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <MX_TIM2_Init+0xc0>)
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f002 fd2d 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	1e03      	subs	r3, r0, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002b02:	f7fe f9dd 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b00d      	add	sp, #52	; 0x34
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000620 	.word	0x20000620
 8002b14:	0000ffff 	.word	0x0000ffff

08002b18 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b1e:	003b      	movs	r3, r7
 8002b20:	0018      	movs	r0, r3
 8002b22:	2308      	movs	r3, #8
 8002b24:	001a      	movs	r2, r3
 8002b26:	2100      	movs	r1, #0
 8002b28:	f004 f925 	bl	8006d76 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b2e:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <MX_TIM6_Init+0x70>)
 8002b30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <MX_TIM6_Init+0x74>)
 8002b36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b40:	2263      	movs	r2, #99	; 0x63
 8002b42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f002 f97b 	bl	8004e48 <HAL_TIM_Base_Init>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b56:	f7fe f9b3 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b60:	003b      	movs	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b66:	003a      	movs	r2, r7
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_TIM6_Init+0x6c>)
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f002 fcf3 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002b76:	f7fe f9a3 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b002      	add	sp, #8
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	20000660 	.word	0x20000660
 8002b88:	40001000 	.word	0x40001000
 8002b8c:	00001f3f 	.word	0x00001f3f

08002b90 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b96:	003b      	movs	r3, r7
 8002b98:	0018      	movs	r0, r3
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	f004 f8e9 	bl	8006d76 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002ba6:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <MX_TIM7_Init+0x70>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002bac:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <MX_TIM7_Init+0x74>)
 8002bae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002bb8:	2263      	movs	r2, #99	; 0x63
 8002bba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f002 f93f 	bl	8004e48 <HAL_TIM_Base_Init>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002bce:	f7fe f977 	bl	8000ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd2:	003b      	movs	r3, r7
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd8:	003b      	movs	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002bde:	003a      	movs	r2, r7
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MX_TIM7_Init+0x6c>)
 8002be2:	0011      	movs	r1, r2
 8002be4:	0018      	movs	r0, r3
 8002be6:	f002 fcb7 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002bee:	f7fe f967 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	200006a0 	.word	0x200006a0
 8002c00:	40001400 	.word	0x40001400
 8002c04:	00001f3f 	.word	0x00001f3f

08002c08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	240c      	movs	r4, #12
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	0018      	movs	r0, r3
 8002c16:	2314      	movs	r3, #20
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f004 f8ab 	bl	8006d76 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d130      	bne.n	8002c8e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x90>)
 8002c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x90>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x90>)
 8002c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x90>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	430a      	orrs	r2, r1
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_TIM_Encoder_MspInit+0x90>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c50:	0021      	movs	r1, r4
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2203      	movs	r2, #3
 8002c56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	187a      	adds	r2, r7, r1
 8002c72:	23a0      	movs	r3, #160	; 0xa0
 8002c74:	05db      	lsls	r3, r3, #23
 8002c76:	0011      	movs	r1, r2
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fae5 	bl	8003248 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	200f      	movs	r0, #15
 8002c84:	f000 fa26 	bl	80030d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c88:	200f      	movs	r0, #15
 8002c8a:	f000 fa38 	bl	80030fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b009      	add	sp, #36	; 0x24
 8002c94:	bd90      	pop	{r4, r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_TIM_Base_MspInit+0x60>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_TIM_Base_MspInit+0x64>)
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_TIM_Base_MspInit+0x64>)
 8002cb4:	2110      	movs	r1, #16
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2011      	movs	r0, #17
 8002cc0:	f000 fa08 	bl	80030d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cc4:	2011      	movs	r0, #17
 8002cc6:	f000 fa1a 	bl	80030fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002cca:	e012      	b.n	8002cf2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_TIM_Base_MspInit+0x68>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_TIM_Base_MspInit+0x64>)
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_TIM_Base_MspInit+0x64>)
 8002cdc:	2120      	movs	r1, #32
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2012      	movs	r0, #18
 8002ce8:	f000 f9f4 	bl	80030d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cec:	2012      	movs	r0, #18
 8002cee:	f000 fa06 	bl	80030fe <HAL_NVIC_EnableIRQ>
}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	40001000 	.word	0x40001000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40001400 	.word	0x40001400

08002d08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <MX_USART2_UART_Init+0x5c>)
 8002d10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d14:	22e1      	movs	r2, #225	; 0xe1
 8002d16:	0252      	lsls	r2, r2, #9
 8002d18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d2e:	220c      	movs	r2, #12
 8002d30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <MX_USART2_UART_Init+0x58>)
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f002 fc61 	bl	8005614 <HAL_UART_Init>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d001      	beq.n	8002d5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d56:	f7fe f8b3 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	200006e0 	.word	0x200006e0
 8002d64:	40004400 	.word	0x40004400

08002d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	240c      	movs	r4, #12
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	0018      	movs	r0, r3
 8002d76:	2314      	movs	r3, #20
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f003 fffb 	bl	8006d76 <memset>
  if(uartHandle->Instance==USART2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	; (8002df8 <HAL_UART_MspInit+0x90>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d131      	bne.n	8002dee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_UART_MspInit+0x94>)
 8002d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_UART_MspInit+0x94>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0289      	lsls	r1, r1, #10
 8002d94:	430a      	orrs	r2, r1
 8002d96:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_UART_MspInit+0x94>)
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_UART_MspInit+0x94>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_UART_MspInit+0x94>)
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002db0:	0021      	movs	r1, r4
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	220c      	movs	r2, #12
 8002db6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2202      	movs	r2, #2
 8002dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2204      	movs	r2, #4
 8002dce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd0:	187a      	adds	r2, r7, r1
 8002dd2:	23a0      	movs	r3, #160	; 0xa0
 8002dd4:	05db      	lsls	r3, r3, #23
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 fa35 	bl	8003248 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	201c      	movs	r0, #28
 8002de4:	f000 f976 	bl	80030d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002de8:	201c      	movs	r0, #28
 8002dea:	f000 f988 	bl	80030fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b009      	add	sp, #36	; 0x24
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	40004400 	.word	0x40004400
 8002dfc:	40021000 	.word	0x40021000

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002e00:	480d      	ldr	r0, [pc, #52]	; (8002e38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002e02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e04:	480d      	ldr	r0, [pc, #52]	; (8002e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e06:	490e      	ldr	r1, [pc, #56]	; (8002e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <LoopForever+0xe>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e1c:	4c0b      	ldr	r4, [pc, #44]	; (8002e4c <LoopForever+0x16>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e2a:	f7ff fe0b 	bl	8002a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f003 ff75 	bl	8006d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7fd fd7d 	bl	8000930 <main>

08002e36 <LoopForever>:

LoopForever:
    b LoopForever
 8002e36:	e7fe      	b.n	8002e36 <LoopForever>
   ldr   r0, =_estack
 8002e38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002e44:	0800a1ac 	.word	0x0800a1ac
  ldr r2, =_sbss
 8002e48:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002e4c:	20000778 	.word	0x20000778

08002e50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC1_COMP_IRQHandler>
	...

08002e54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_Init+0x3c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_Init+0x3c>)
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f000 f811 	bl	8002e94 <HAL_InitTick>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002e76:	1dfb      	adds	r3, r7, #7
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
 8002e7c:	e001      	b.n	8002e82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e7e:	f7ff fd47 	bl	8002910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	781b      	ldrb	r3, [r3, #0]
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_InitTick+0x5c>)
 8002e9e:	681c      	ldr	r4, [r3, #0]
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_InitTick+0x60>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	23fa      	movs	r3, #250	; 0xfa
 8002ea8:	0098      	lsls	r0, r3, #2
 8002eaa:	f7fd f93f 	bl	800012c <__udivsi3>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	0020      	movs	r0, r4
 8002eb4:	f7fd f93a 	bl	800012c <__udivsi3>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f92f 	bl	800311e <HAL_SYSTICK_Config>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e00f      	b.n	8002ee8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d80b      	bhi.n	8002ee6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	425b      	negs	r3, r3
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 f8fc 	bl	80030d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_InitTick+0x64>)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b003      	add	sp, #12
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	20000124 	.word	0x20000124
 8002ef4:	2000012c 	.word	0x2000012c
 8002ef8:	20000128 	.word	0x20000128

08002efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x1c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	001a      	movs	r2, r3
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_IncTick+0x20>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	18d2      	adds	r2, r2, r3
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_IncTick+0x20>)
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	2000012c 	.word	0x2000012c
 8002f1c:	20000764 	.word	0x20000764

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <HAL_GetTick+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	20000764 	.word	0x20000764

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_GetTick>
 8002f40:	0003      	movs	r3, r0
 8002f42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	001a      	movs	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	189b      	adds	r3, r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	f7ff ffe0 	bl	8002f20 <HAL_GetTick>
 8002f60:	0002      	movs	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b004      	add	sp, #16
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	2000012c 	.word	0x2000012c

08002f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	0002      	movs	r2, r0
 8002f84:	1dfb      	adds	r3, r7, #7
 8002f86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8e:	d809      	bhi.n	8002fa4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	001a      	movs	r2, r3
 8002f96:	231f      	movs	r3, #31
 8002f98:	401a      	ands	r2, r3
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <__NVIC_EnableIRQ+0x30>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4091      	lsls	r1, r2
 8002fa0:	000a      	movs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
  }
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc4:	d828      	bhi.n	8003018 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <__NVIC_SetPriority+0xd4>)
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	33c0      	adds	r3, #192	; 0xc0
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	589b      	ldr	r3, [r3, r2]
 8002fd6:	1dfa      	adds	r2, r7, #7
 8002fd8:	7812      	ldrb	r2, [r2, #0]
 8002fda:	0011      	movs	r1, r2
 8002fdc:	2203      	movs	r2, #3
 8002fde:	400a      	ands	r2, r1
 8002fe0:	00d2      	lsls	r2, r2, #3
 8002fe2:	21ff      	movs	r1, #255	; 0xff
 8002fe4:	4091      	lsls	r1, r2
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	43d2      	mvns	r2, r2
 8002fea:	401a      	ands	r2, r3
 8002fec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	4003      	ands	r3, r0
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003004:	481f      	ldr	r0, [pc, #124]	; (8003084 <__NVIC_SetPriority+0xd4>)
 8003006:	1dfb      	adds	r3, r7, #7
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	b25b      	sxtb	r3, r3
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	430a      	orrs	r2, r1
 8003010:	33c0      	adds	r3, #192	; 0xc0
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003016:	e031      	b.n	800307c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <__NVIC_SetPriority+0xd8>)
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	0019      	movs	r1, r3
 8003020:	230f      	movs	r3, #15
 8003022:	400b      	ands	r3, r1
 8003024:	3b08      	subs	r3, #8
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3306      	adds	r3, #6
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	18d3      	adds	r3, r2, r3
 800302e:	3304      	adds	r3, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1dfa      	adds	r2, r7, #7
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	0011      	movs	r1, r2
 8003038:	2203      	movs	r2, #3
 800303a:	400a      	ands	r2, r1
 800303c:	00d2      	lsls	r2, r2, #3
 800303e:	21ff      	movs	r1, #255	; 0xff
 8003040:	4091      	lsls	r1, r2
 8003042:	000a      	movs	r2, r1
 8003044:	43d2      	mvns	r2, r2
 8003046:	401a      	ands	r2, r3
 8003048:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	401a      	ands	r2, r3
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	0018      	movs	r0, r3
 8003058:	2303      	movs	r3, #3
 800305a:	4003      	ands	r3, r0
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <__NVIC_SetPriority+0xd8>)
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	001c      	movs	r4, r3
 8003068:	230f      	movs	r3, #15
 800306a:	4023      	ands	r3, r4
 800306c:	3b08      	subs	r3, #8
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	430a      	orrs	r2, r1
 8003072:	3306      	adds	r3, #6
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	18c3      	adds	r3, r0, r3
 8003078:	3304      	adds	r3, #4
 800307a:	601a      	str	r2, [r3, #0]
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b003      	add	sp, #12
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	1e5a      	subs	r2, r3, #1
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	045b      	lsls	r3, r3, #17
 800309c:	429a      	cmp	r2, r3
 800309e:	d301      	bcc.n	80030a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a0:	2301      	movs	r3, #1
 80030a2:	e010      	b.n	80030c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <SysTick_Config+0x44>)
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	3a01      	subs	r2, #1
 80030aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ac:	2301      	movs	r3, #1
 80030ae:	425b      	negs	r3, r3
 80030b0:	2103      	movs	r1, #3
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff ff7c 	bl	8002fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <SysTick_Config+0x44>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <SysTick_Config+0x44>)
 80030c0:	2207      	movs	r2, #7
 80030c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b002      	add	sp, #8
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	e000e010 	.word	0xe000e010

080030d4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	210f      	movs	r1, #15
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	1c02      	adds	r2, r0, #0
 80030e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	187b      	adds	r3, r7, r1
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	0011      	movs	r1, r2
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff ff5d 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b004      	add	sp, #16
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	0002      	movs	r2, r0
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	b25b      	sxtb	r3, r3
 8003110:	0018      	movs	r0, r3
 8003112:	f7ff ff33 	bl	8002f7c <__NVIC_EnableIRQ>
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b002      	add	sp, #8
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff ffaf 	bl	800308c <SysTick_Config>
 800312e:	0003      	movs	r3, r0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2225      	movs	r2, #37	; 0x25
 800314c:	5c9b      	ldrb	r3, [r3, r2]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d008      	beq.n	8003166 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2224      	movs	r2, #36	; 0x24
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e024      	b.n	80031b0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	210e      	movs	r1, #14
 8003172:	438a      	bics	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	438a      	bics	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	221c      	movs	r2, #28
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2101      	movs	r1, #1
 8003194:	4091      	lsls	r1, r2
 8003196:	000a      	movs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2225      	movs	r2, #37	; 0x25
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2224      	movs	r2, #36	; 0x24
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

    return status;
 80031aa:	230f      	movs	r3, #15
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	210f      	movs	r1, #15
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2225      	movs	r2, #37	; 0x25
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d006      	beq.n	80031e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2204      	movs	r2, #4
 80031d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e02a      	b.n	8003238 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	210e      	movs	r1, #14
 80031ee:	438a      	bics	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	438a      	bics	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	221c      	movs	r2, #28
 8003208:	401a      	ands	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2101      	movs	r1, #1
 8003210:	4091      	lsls	r1, r2
 8003212:	000a      	movs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2225      	movs	r2, #37	; 0x25
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	; 0x24
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	0010      	movs	r0, r2
 8003236:	4798      	blx	r3
    }
  }
  return status;
 8003238:	230f      	movs	r3, #15
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	781b      	ldrb	r3, [r3, #0]
}
 800323e:	0018      	movs	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	b004      	add	sp, #16
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800325e:	e155      	b.n	800350c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4091      	lsls	r1, r2
 800326a:	000a      	movs	r2, r1
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d100      	bne.n	8003278 <HAL_GPIO_Init+0x30>
 8003276:	e146      	b.n	8003506 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	4013      	ands	r3, r2
 8003280:	2b01      	cmp	r3, #1
 8003282:	d005      	beq.n	8003290 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2203      	movs	r2, #3
 800328a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800328c:	2b02      	cmp	r3, #2
 800328e:	d130      	bne.n	80032f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	409a      	lsls	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	43da      	mvns	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	409a      	lsls	r2, r3
 80032b2:	0013      	movs	r3, r2
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c6:	2201      	movs	r2, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
 80032cc:	0013      	movs	r3, r2
 80032ce:	43da      	mvns	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	2201      	movs	r2, #1
 80032de:	401a      	ands	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	409a      	lsls	r2, r3
 80032e4:	0013      	movs	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d017      	beq.n	800332e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	2203      	movs	r2, #3
 800330a:	409a      	lsls	r2, r3
 800330c:	0013      	movs	r3, r2
 800330e:	43da      	mvns	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	0013      	movs	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2203      	movs	r2, #3
 8003334:	4013      	ands	r3, r2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d123      	bne.n	8003382 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	08da      	lsrs	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3208      	adds	r2, #8
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	58d3      	ldr	r3, [r2, r3]
 8003346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2207      	movs	r2, #7
 800334c:	4013      	ands	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	409a      	lsls	r2, r3
 8003354:	0013      	movs	r3, r2
 8003356:	43da      	mvns	r2, r3
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4013      	ands	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2107      	movs	r1, #7
 8003366:	400b      	ands	r3, r1
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	08da      	lsrs	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3208      	adds	r2, #8
 800337c:	0092      	lsls	r2, r2, #2
 800337e:	6939      	ldr	r1, [r7, #16]
 8003380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	2203      	movs	r2, #3
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	43da      	mvns	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2203      	movs	r2, #3
 80033a0:	401a      	ands	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	0013      	movs	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	23c0      	movs	r3, #192	; 0xc0
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	4013      	ands	r3, r2
 80033c0:	d100      	bne.n	80033c4 <HAL_GPIO_Init+0x17c>
 80033c2:	e0a0      	b.n	8003506 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c4:	4b57      	ldr	r3, [pc, #348]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <HAL_GPIO_Init+0x2dc>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	430a      	orrs	r2, r1
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d0:	4a55      	ldr	r2, [pc, #340]	; (8003528 <HAL_GPIO_Init+0x2e0>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	589b      	ldr	r3, [r3, r2]
 80033dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2203      	movs	r2, #3
 80033e2:	4013      	ands	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	220f      	movs	r2, #15
 80033e8:	409a      	lsls	r2, r3
 80033ea:	0013      	movs	r3, r2
 80033ec:	43da      	mvns	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	23a0      	movs	r3, #160	; 0xa0
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d01f      	beq.n	800343e <HAL_GPIO_Init+0x1f6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_GPIO_Init+0x2e4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d019      	beq.n	800343a <HAL_GPIO_Init+0x1f2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a49      	ldr	r2, [pc, #292]	; (8003530 <HAL_GPIO_Init+0x2e8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <HAL_GPIO_Init+0x1ee>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a48      	ldr	r2, [pc, #288]	; (8003534 <HAL_GPIO_Init+0x2ec>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00d      	beq.n	8003432 <HAL_GPIO_Init+0x1ea>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a47      	ldr	r2, [pc, #284]	; (8003538 <HAL_GPIO_Init+0x2f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d007      	beq.n	800342e <HAL_GPIO_Init+0x1e6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a46      	ldr	r2, [pc, #280]	; (800353c <HAL_GPIO_Init+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d101      	bne.n	800342a <HAL_GPIO_Init+0x1e2>
 8003426:	2305      	movs	r3, #5
 8003428:	e00a      	b.n	8003440 <HAL_GPIO_Init+0x1f8>
 800342a:	2306      	movs	r3, #6
 800342c:	e008      	b.n	8003440 <HAL_GPIO_Init+0x1f8>
 800342e:	2304      	movs	r3, #4
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x1f8>
 8003432:	2303      	movs	r3, #3
 8003434:	e004      	b.n	8003440 <HAL_GPIO_Init+0x1f8>
 8003436:	2302      	movs	r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x1f8>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_GPIO_Init+0x1f8>
 800343e:	2300      	movs	r3, #0
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	2103      	movs	r1, #3
 8003444:	400a      	ands	r2, r1
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4093      	lsls	r3, r2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003450:	4935      	ldr	r1, [pc, #212]	; (8003528 <HAL_GPIO_Init+0x2e0>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	3302      	adds	r3, #2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345e:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	43da      	mvns	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	025b      	lsls	r3, r3, #9
 8003476:	4013      	ands	r3, r2
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003482:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43da      	mvns	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	029b      	lsls	r3, r3, #10
 80034a0:	4013      	ands	r3, r2
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034ac:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	035b      	lsls	r3, r3, #13
 80034ca:	4013      	ands	r3, r2
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80034dc:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	039b      	lsls	r3, r3, #14
 80034f4:	4013      	ands	r3, r2
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	3301      	adds	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	40da      	lsrs	r2, r3
 8003514:	1e13      	subs	r3, r2, #0
 8003516:	d000      	beq.n	800351a <HAL_GPIO_Init+0x2d2>
 8003518:	e6a2      	b.n	8003260 <HAL_GPIO_Init+0x18>
  }
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46c0      	nop			; (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b006      	add	sp, #24
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	40010000 	.word	0x40010000
 800352c:	50000400 	.word	0x50000400
 8003530:	50000800 	.word	0x50000800
 8003534:	50000c00 	.word	0x50000c00
 8003538:	50001000 	.word	0x50001000
 800353c:	50001c00 	.word	0x50001c00
 8003540:	40010400 	.word	0x40010400

08003544 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	000a      	movs	r2, r1
 800354e:	1cbb      	adds	r3, r7, #2
 8003550:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	1cba      	adds	r2, r7, #2
 8003558:	8812      	ldrh	r2, [r2, #0]
 800355a:	4013      	ands	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800355e:	230f      	movs	r3, #15
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e003      	b.n	8003570 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003568:	230f      	movs	r3, #15
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003570:	230f      	movs	r3, #15
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	781b      	ldrb	r3, [r3, #0]
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	0002      	movs	r2, r0
 8003588:	1dbb      	adds	r3, r7, #6
 800358a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	1dba      	adds	r2, r7, #6
 8003592:	8812      	ldrh	r2, [r2, #0]
 8003594:	4013      	ands	r3, r2
 8003596:	d008      	beq.n	80035aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800359a:	1dba      	adds	r2, r7, #6
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a0:	1dbb      	adds	r3, r7, #6
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fc69 	bl	8000e7c <HAL_GPIO_EXTI_Callback>
  }
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40010400 	.word	0x40010400

080035b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e082      	b.n	80036d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2241      	movs	r2, #65	; 0x41
 80035ce:	5c9b      	ldrb	r3, [r3, r2]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	2100      	movs	r1, #0
 80035dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fd f95f 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2241      	movs	r2, #65	; 0x41
 80035ea:	2124      	movs	r1, #36	; 0x24
 80035ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	438a      	bics	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4934      	ldr	r1, [pc, #208]	; (80036d8 <HAL_I2C_Init+0x120>)
 8003608:	400a      	ands	r2, r1
 800360a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4931      	ldr	r1, [pc, #196]	; (80036dc <HAL_I2C_Init+0x124>)
 8003618:	400a      	ands	r2, r1
 800361a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d108      	bne.n	8003636 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	0209      	lsls	r1, r1, #8
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	e007      	b.n	8003646 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2184      	movs	r1, #132	; 0x84
 8003640:	0209      	lsls	r1, r1, #8
 8003642:	430a      	orrs	r2, r1
 8003644:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d104      	bne.n	8003658 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	0112      	lsls	r2, r2, #4
 8003656:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	491f      	ldr	r1, [pc, #124]	; (80036e0 <HAL_I2C_Init+0x128>)
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	491a      	ldr	r1, [pc, #104]	; (80036dc <HAL_I2C_Init+0x124>)
 8003674:	400a      	ands	r2, r1
 8003676:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	431a      	orrs	r2, r3
 8003682:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69d9      	ldr	r1, [r3, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1a      	ldr	r2, [r3, #32]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2101      	movs	r1, #1
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2241      	movs	r2, #65	; 0x41
 80036bc:	2120      	movs	r1, #32
 80036be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2242      	movs	r2, #66	; 0x42
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	f0ffffff 	.word	0xf0ffffff
 80036dc:	ffff7fff 	.word	0xffff7fff
 80036e0:	02008000 	.word	0x02008000

080036e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	0008      	movs	r0, r1
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	0019      	movs	r1, r3
 80036f2:	230a      	movs	r3, #10
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	1c02      	adds	r2, r0, #0
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	2308      	movs	r3, #8
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	1c0a      	adds	r2, r1, #0
 8003700:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2241      	movs	r2, #65	; 0x41
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b20      	cmp	r3, #32
 800370c:	d000      	beq.n	8003710 <HAL_I2C_Master_Transmit+0x2c>
 800370e:	e0e7      	b.n	80038e0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	5c9b      	ldrb	r3, [r3, r2]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_I2C_Master_Transmit+0x3a>
 800371a:	2302      	movs	r3, #2
 800371c:	e0e1      	b.n	80038e2 <HAL_I2C_Master_Transmit+0x1fe>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2240      	movs	r2, #64	; 0x40
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003726:	f7ff fbfb 	bl	8002f20 <HAL_GetTick>
 800372a:	0003      	movs	r3, r0
 800372c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	0219      	lsls	r1, r3, #8
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2319      	movs	r3, #25
 800373a:	2201      	movs	r2, #1
 800373c:	f000 fa16 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003740:	1e03      	subs	r3, r0, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0cc      	b.n	80038e2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2241      	movs	r2, #65	; 0x41
 800374c:	2121      	movs	r1, #33	; 0x21
 800374e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2242      	movs	r2, #66	; 0x42
 8003754:	2110      	movs	r1, #16
 8003756:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2208      	movs	r2, #8
 8003768:	18ba      	adds	r2, r7, r2
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2bff      	cmp	r3, #255	; 0xff
 800377c:	d911      	bls.n	80037a2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	b2da      	uxtb	r2, r3
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	045c      	lsls	r4, r3, #17
 800378e:	230a      	movs	r3, #10
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	8819      	ldrh	r1, [r3, #0]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	4b55      	ldr	r3, [pc, #340]	; (80038ec <HAL_I2C_Master_Transmit+0x208>)
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	0023      	movs	r3, r4
 800379c:	f000 fb1a 	bl	8003dd4 <I2C_TransferConfig>
 80037a0:	e075      	b.n	800388e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	049c      	lsls	r4, r3, #18
 80037b6:	230a      	movs	r3, #10
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	8819      	ldrh	r1, [r3, #0]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_I2C_Master_Transmit+0x208>)
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	0023      	movs	r3, r4
 80037c4:	f000 fb06 	bl	8003dd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037c8:	e061      	b.n	800388e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f000 fa0a 	bl	8003bea <I2C_WaitOnTXISFlagUntilTimeout>
 80037d6:	1e03      	subs	r3, r0, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e081      	b.n	80038e2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03a      	beq.n	800388e <HAL_I2C_Master_Transmit+0x1aa>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d136      	bne.n	800388e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	0013      	movs	r3, r2
 800382a:	2200      	movs	r2, #0
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	f000 f99d 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e053      	b.n	80038e2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2bff      	cmp	r3, #255	; 0xff
 8003842:	d911      	bls.n	8003868 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	045c      	lsls	r4, r3, #17
 8003854:	230a      	movs	r3, #10
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	8819      	ldrh	r1, [r3, #0]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	0023      	movs	r3, r4
 8003862:	f000 fab7 	bl	8003dd4 <I2C_TransferConfig>
 8003866:	e012      	b.n	800388e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	b2da      	uxtb	r2, r3
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	049c      	lsls	r4, r3, #18
 800387c:	230a      	movs	r3, #10
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	8819      	ldrh	r1, [r3, #0]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	2300      	movs	r3, #0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	0023      	movs	r3, r4
 800388a:	f000 faa3 	bl	8003dd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d198      	bne.n	80037ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 f9e2 	bl	8003c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e01a      	b.n	80038e2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2220      	movs	r2, #32
 80038b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	490c      	ldr	r1, [pc, #48]	; (80038f0 <HAL_I2C_Master_Transmit+0x20c>)
 80038c0:	400a      	ands	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2241      	movs	r2, #65	; 0x41
 80038c8:	2120      	movs	r1, #32
 80038ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2242      	movs	r2, #66	; 0x42
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	2100      	movs	r1, #0
 80038da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b007      	add	sp, #28
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	80002000 	.word	0x80002000
 80038f0:	fe00e800 	.word	0xfe00e800

080038f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	230a      	movs	r3, #10
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	1c0a      	adds	r2, r1, #0
 8003906:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2241      	movs	r2, #65	; 0x41
 8003910:	5c9b      	ldrb	r3, [r3, r2]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	d000      	beq.n	800391a <HAL_I2C_IsDeviceReady+0x26>
 8003918:	e0fe      	b.n	8003b18 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	401a      	ands	r2, r3
 8003926:	2380      	movs	r3, #128	; 0x80
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	429a      	cmp	r2, r3
 800392c:	d101      	bne.n	8003932 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
 8003930:	e0f3      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_I2C_IsDeviceReady+0x4c>
 800393c:	2302      	movs	r3, #2
 800393e:	e0ec      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2240      	movs	r2, #64	; 0x40
 8003944:	2101      	movs	r1, #1
 8003946:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2241      	movs	r2, #65	; 0x41
 800394c:	2124      	movs	r1, #36	; 0x24
 800394e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_I2C_IsDeviceReady+0x7a>
 800395e:	230a      	movs	r3, #10
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	059b      	lsls	r3, r3, #22
 8003966:	0d9b      	lsrs	r3, r3, #22
 8003968:	4a6e      	ldr	r2, [pc, #440]	; (8003b24 <HAL_I2C_IsDeviceReady+0x230>)
 800396a:	431a      	orrs	r2, r3
 800396c:	e007      	b.n	800397e <HAL_I2C_IsDeviceReady+0x8a>
 800396e:	230a      	movs	r3, #10
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	059b      	lsls	r3, r3, #22
 8003976:	0d9b      	lsrs	r3, r3, #22
 8003978:	22a0      	movs	r2, #160	; 0xa0
 800397a:	0192      	lsls	r2, r2, #6
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003984:	f7ff facc 	bl	8002f20 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2220      	movs	r2, #32
 8003994:	4013      	ands	r3, r2
 8003996:	3b20      	subs	r3, #32
 8003998:	425a      	negs	r2, r3
 800399a:	4153      	adcs	r3, r2
 800399c:	b2da      	uxtb	r2, r3
 800399e:	231f      	movs	r3, #31
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2210      	movs	r2, #16
 80039ac:	4013      	ands	r3, r2
 80039ae:	3b10      	subs	r3, #16
 80039b0:	425a      	negs	r2, r3
 80039b2:	4153      	adcs	r3, r2
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	231e      	movs	r3, #30
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039bc:	e035      	b.n	8003a2a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	d01a      	beq.n	80039fa <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7ff faac 	bl	8002f20 <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <HAL_I2C_IsDeviceReady+0xe6>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2241      	movs	r2, #65	; 0x41
 80039de:	2120      	movs	r1, #32
 80039e0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	2220      	movs	r2, #32
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2240      	movs	r2, #64	; 0x40
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e08f      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2220      	movs	r2, #32
 8003a02:	4013      	ands	r3, r2
 8003a04:	3b20      	subs	r3, #32
 8003a06:	425a      	negs	r2, r3
 8003a08:	4153      	adcs	r3, r2
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	231f      	movs	r3, #31
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	3b10      	subs	r3, #16
 8003a1e:	425a      	negs	r2, r3
 8003a20:	4153      	adcs	r3, r2
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	231e      	movs	r3, #30
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a2a:	231f      	movs	r3, #31
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <HAL_I2C_IsDeviceReady+0x14a>
 8003a34:	231e      	movs	r3, #30
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0bf      	beq.n	80039be <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2210      	movs	r2, #16
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d01a      	beq.n	8003a82 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	0013      	movs	r3, r2
 8003a56:	2200      	movs	r2, #0
 8003a58:	2120      	movs	r1, #32
 8003a5a:	f000 f887 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e059      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2241      	movs	r2, #65	; 0x41
 8003a72:	2120      	movs	r1, #32
 8003a74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2240      	movs	r2, #64	; 0x40
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e04b      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	0013      	movs	r3, r2
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2120      	movs	r1, #32
 8003a90:	f000 f86c 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e03e      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d119      	bne.n	8003ae8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	01c9      	lsls	r1, r1, #7
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	0013      	movs	r3, r2
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	f000 f84a 	bl	8003b6c <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e01c      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3301      	adds	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d900      	bls.n	8003af8 <HAL_I2C_IsDeviceReady+0x204>
 8003af6:	e72e      	b.n	8003956 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2241      	movs	r2, #65	; 0x41
 8003afc:	2120      	movs	r1, #32
 8003afe:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	2220      	movs	r2, #32
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2240      	movs	r2, #64	; 0x40
 8003b10:	2100      	movs	r1, #0
 8003b12:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b008      	add	sp, #32
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	02002000 	.word	0x02002000

08003b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2202      	movs	r2, #2
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d103      	bne.n	8003b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d007      	beq.n	8003b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2101      	movs	r1, #1
 8003b60:	430a      	orrs	r2, r1
 8003b62:	619a      	str	r2, [r3, #24]
  }
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7c:	e021      	b.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	d01e      	beq.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7ff f9cc 	bl	8002f20 <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d113      	bne.n	8003bc2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2241      	movs	r2, #65	; 0x41
 8003baa:	2120      	movs	r1, #32
 8003bac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2242      	movs	r2, #66	; 0x42
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2240      	movs	r2, #64	; 0x40
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	4153      	adcs	r3, r2
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	1dfb      	adds	r3, r7, #7
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d0ce      	beq.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}

08003bea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bf6:	e02b      	b.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f86e 	bl	8003ce0 <I2C_IsAcknowledgeFailed>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e029      	b.n	8003c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	d01e      	beq.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7ff f985 	bl	8002f20 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d113      	bne.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2241      	movs	r2, #65	; 0x41
 8003c38:	2120      	movs	r1, #32
 8003c3a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2242      	movs	r2, #66	; 0x42
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e007      	b.n	8003c60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d1cc      	bne.n	8003bf8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	0018      	movs	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b004      	add	sp, #16
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c74:	e028      	b.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 f82f 	bl	8003ce0 <I2C_IsAcknowledgeFailed>
 8003c82:	1e03      	subs	r3, r0, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e026      	b.n	8003cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7ff f949 	bl	8002f20 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d113      	bne.n	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2241      	movs	r2, #65	; 0x41
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2242      	movs	r2, #66	; 0x42
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e007      	b.n	8003cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d1cf      	bne.n	8003c76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b004      	add	sp, #16
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d164      	bne.n	8003dc4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	049b      	lsls	r3, r3, #18
 8003d04:	401a      	ands	r2, r3
 8003d06:	2380      	movs	r3, #128	; 0x80
 8003d08:	049b      	lsls	r3, r3, #18
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d02b      	beq.n	8003d66 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	01c9      	lsls	r1, r1, #7
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d20:	e021      	b.n	8003d66 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3301      	adds	r3, #1
 8003d26:	d01e      	beq.n	8003d66 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d28:	f7ff f8fa 	bl	8002f20 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <I2C_IsAcknowledgeFailed+0x5e>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d113      	bne.n	8003d66 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	2220      	movs	r2, #32
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2241      	movs	r2, #65	; 0x41
 8003d4e:	2120      	movs	r1, #32
 8003d50:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2242      	movs	r2, #66	; 0x42
 8003d56:	2100      	movs	r1, #0
 8003d58:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2240      	movs	r2, #64	; 0x40
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02f      	b.n	8003dc6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d1d6      	bne.n	8003d22 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2220      	movs	r2, #32
 8003d82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fece 	bl	8003b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	2204      	movs	r2, #4
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2241      	movs	r2, #65	; 0x41
 8003dac:	2120      	movs	r1, #32
 8003dae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2242      	movs	r2, #66	; 0x42
 8003db4:	2100      	movs	r1, #0
 8003db6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	fe00e800 	.word	0xfe00e800

08003dd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	0008      	movs	r0, r1
 8003dde:	0011      	movs	r1, r2
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	240a      	movs	r4, #10
 8003de4:	193b      	adds	r3, r7, r4
 8003de6:	1c02      	adds	r2, r0, #0
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	2009      	movs	r0, #9
 8003dec:	183b      	adds	r3, r7, r0
 8003dee:	1c0a      	adds	r2, r1, #0
 8003df0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	6a3a      	ldr	r2, [r7, #32]
 8003dfa:	0d51      	lsrs	r1, r2, #21
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	00d2      	lsls	r2, r2, #3
 8003e00:	400a      	ands	r2, r1
 8003e02:	490e      	ldr	r1, [pc, #56]	; (8003e3c <I2C_TransferConfig+0x68>)
 8003e04:	430a      	orrs	r2, r1
 8003e06:	43d2      	mvns	r2, r2
 8003e08:	401a      	ands	r2, r3
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	193b      	adds	r3, r7, r4
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	059b      	lsls	r3, r3, #22
 8003e12:	0d9a      	lsrs	r2, r3, #22
 8003e14:	183b      	adds	r3, r7, r0
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	0418      	lsls	r0, r3, #16
 8003e1a:	23ff      	movs	r3, #255	; 0xff
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	4003      	ands	r3, r0
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b005      	add	sp, #20
 8003e38:	bd90      	pop	{r4, r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	03ff63ff 	.word	0x03ff63ff

08003e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2241      	movs	r2, #65	; 0x41
 8003e4e:	5c9b      	ldrb	r3, [r3, r2]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d138      	bne.n	8003ec8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e032      	b.n	8003eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2241      	movs	r2, #65	; 0x41
 8003e70:	2124      	movs	r1, #36	; 0x24
 8003e72:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2101      	movs	r1, #1
 8003e80:	438a      	bics	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4911      	ldr	r1, [pc, #68]	; (8003ed4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2241      	movs	r2, #65	; 0x41
 8003eb8:	2120      	movs	r1, #32
 8003eba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2240      	movs	r2, #64	; 0x40
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e000      	b.n	8003eca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
  }
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	ffffefff 	.word	0xffffefff

08003ed8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2241      	movs	r2, #65	; 0x41
 8003ee6:	5c9b      	ldrb	r3, [r3, r2]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d139      	bne.n	8003f62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2240      	movs	r2, #64	; 0x40
 8003ef2:	5c9b      	ldrb	r3, [r3, r2]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e033      	b.n	8003f64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2240      	movs	r2, #64	; 0x40
 8003f00:	2101      	movs	r1, #1
 8003f02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2241      	movs	r2, #65	; 0x41
 8003f08:	2124      	movs	r1, #36	; 0x24
 8003f0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2101      	movs	r1, #1
 8003f18:	438a      	bics	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2241      	movs	r2, #65	; 0x41
 8003f52:	2120      	movs	r1, #32
 8003f54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2240      	movs	r2, #64	; 0x40
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
  }
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	fffff0ff 	.word	0xfffff0ff

08003f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f70:	b5b0      	push	{r4, r5, r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f000 fbbf 	bl	8004702 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f84:	4bc9      	ldr	r3, [pc, #804]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	220c      	movs	r2, #12
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f8e:	4bc7      	ldr	r3, [pc, #796]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	025b      	lsls	r3, r3, #9
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x36>
 8003fa4:	e07e      	b.n	80040a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d007      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d112      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x68>
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	025b      	lsls	r3, r3, #9
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	4bbb      	ldr	r3, [pc, #748]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	029b      	lsls	r3, r3, #10
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d100      	bne.n	8003fca <HAL_RCC_OscConfig+0x5a>
 8003fc8:	e06b      	b.n	80040a2 <HAL_RCC_OscConfig+0x132>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d167      	bne.n	80040a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f000 fb95 	bl	8004702 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	025b      	lsls	r3, r3, #9
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x84>
 8003fe4:	4bb1      	ldr	r3, [pc, #708]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4bb0      	ldr	r3, [pc, #704]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	0249      	lsls	r1, r1, #9
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e027      	b.n	8004044 <HAL_RCC_OscConfig+0xd4>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	23a0      	movs	r3, #160	; 0xa0
 8003ffa:	02db      	lsls	r3, r3, #11
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d10e      	bne.n	800401e <HAL_RCC_OscConfig+0xae>
 8004000:	4baa      	ldr	r3, [pc, #680]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4ba9      	ldr	r3, [pc, #676]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	02c9      	lsls	r1, r1, #11
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	4ba7      	ldr	r3, [pc, #668]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4ba6      	ldr	r3, [pc, #664]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0249      	lsls	r1, r1, #9
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e012      	b.n	8004044 <HAL_RCC_OscConfig+0xd4>
 800401e:	4ba3      	ldr	r3, [pc, #652]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4ba2      	ldr	r3, [pc, #648]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004024:	49a2      	ldr	r1, [pc, #648]	; (80042b0 <HAL_RCC_OscConfig+0x340>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	4ba0      	ldr	r3, [pc, #640]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	2380      	movs	r3, #128	; 0x80
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4b9c      	ldr	r3, [pc, #624]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b9b      	ldr	r3, [pc, #620]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800403e:	499d      	ldr	r1, [pc, #628]	; (80042b4 <HAL_RCC_OscConfig+0x344>)
 8004040:	400a      	ands	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fe ff68 	bl	8002f20 <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004054:	e009      	b.n	800406a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004056:	f7fe ff63 	bl	8002f20 <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	; 0x64
 8004062:	d902      	bls.n	800406a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	f000 fb4c 	bl	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800406a:	4b90      	ldr	r3, [pc, #576]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	029b      	lsls	r3, r3, #10
 8004072:	4013      	ands	r3, r2
 8004074:	d0ef      	beq.n	8004056 <HAL_RCC_OscConfig+0xe6>
 8004076:	e015      	b.n	80040a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fe ff52 	bl	8002f20 <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004082:	f7fe ff4d 	bl	8002f20 <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	; 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e336      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004094:	4b85      	ldr	r3, [pc, #532]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	4013      	ands	r3, r2
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x112>
 80040a0:	e000      	b.n	80040a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2202      	movs	r2, #2
 80040aa:	4013      	ands	r3, r2
 80040ac:	d100      	bne.n	80040b0 <HAL_RCC_OscConfig+0x140>
 80040ae:	e099      	b.n	80041e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	2220      	movs	r2, #32
 80040ba:	4013      	ands	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80040be:	4b7b      	ldr	r3, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b7a      	ldr	r3, [pc, #488]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80040c4:	2120      	movs	r1, #32
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2220      	movs	r2, #32
 80040ce:	4393      	bics	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d13e      	bne.n	800415c <HAL_RCC_OscConfig+0x1ec>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d13b      	bne.n	800415c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80040e4:	4b71      	ldr	r3, [pc, #452]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2204      	movs	r2, #4
 80040ea:	4013      	ands	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_RCC_OscConfig+0x188>
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e304      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f8:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a6e      	ldr	r2, [pc, #440]	; (80042b8 <HAL_RCC_OscConfig+0x348>)
 80040fe:	4013      	ands	r3, r2
 8004100:	0019      	movs	r1, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800410e:	4b67      	ldr	r3, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2209      	movs	r2, #9
 8004114:	4393      	bics	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	4b64      	ldr	r3, [pc, #400]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004120:	f000 fc42 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004124:	0001      	movs	r1, r0
 8004126:	4b61      	ldr	r3, [pc, #388]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	220f      	movs	r2, #15
 800412e:	4013      	ands	r3, r2
 8004130:	4a62      	ldr	r2, [pc, #392]	; (80042bc <HAL_RCC_OscConfig+0x34c>)
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	000a      	movs	r2, r1
 8004136:	40da      	lsrs	r2, r3
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCC_OscConfig+0x350>)
 800413a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_OscConfig+0x354>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2513      	movs	r5, #19
 8004142:	197c      	adds	r4, r7, r5
 8004144:	0018      	movs	r0, r3
 8004146:	f7fe fea5 	bl	8002e94 <HAL_InitTick>
 800414a:	0003      	movs	r3, r0
 800414c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800414e:	197b      	adds	r3, r7, r5
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d046      	beq.n	80041e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004156:	197b      	adds	r3, r7, r5
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	e2d2      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d027      	beq.n	80041b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004162:	4b52      	ldr	r3, [pc, #328]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2209      	movs	r2, #9
 8004168:	4393      	bics	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800416e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004170:	430a      	orrs	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe fed4 	bl	8002f20 <HAL_GetTick>
 8004178:	0003      	movs	r3, r0
 800417a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe fecf 	bl	8002f20 <HAL_GetTick>
 8004182:	0002      	movs	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e2b8      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004190:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2204      	movs	r2, #4
 8004196:	4013      	ands	r3, r2
 8004198:	d0f1      	beq.n	800417e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b44      	ldr	r3, [pc, #272]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4a46      	ldr	r2, [pc, #280]	; (80042b8 <HAL_RCC_OscConfig+0x348>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	0019      	movs	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	021a      	lsls	r2, r3, #8
 80041aa:	4b40      	ldr	r3, [pc, #256]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e018      	b.n	80041e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80041b8:	2101      	movs	r1, #1
 80041ba:	438a      	bics	r2, r1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fe feaf 	bl	8002f20 <HAL_GetTick>
 80041c2:	0003      	movs	r3, r0
 80041c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c8:	f7fe feaa 	bl	8002f20 <HAL_GetTick>
 80041cc:	0002      	movs	r2, r0
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e293      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041da:	4b34      	ldr	r3, [pc, #208]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2204      	movs	r2, #4
 80041e0:	4013      	ands	r3, r2
 80041e2:	d1f1      	bne.n	80041c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2210      	movs	r2, #16
 80041ea:	4013      	ands	r3, r2
 80041ec:	d100      	bne.n	80041f0 <HAL_RCC_OscConfig+0x280>
 80041ee:	e0a2      	b.n	8004336 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d140      	bne.n	8004278 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4013      	ands	r3, r2
 8004200:	d005      	beq.n	800420e <HAL_RCC_OscConfig+0x29e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e279      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x358>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421c:	4b23      	ldr	r3, [pc, #140]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	0a19      	lsrs	r1, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	061a      	lsls	r2, r3, #24
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	0b5b      	lsrs	r3, r3, #13
 800423c:	3301      	adds	r3, #1
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	0212      	lsls	r2, r2, #8
 8004242:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	210f      	movs	r1, #15
 800424c:	400b      	ands	r3, r1
 800424e:	491b      	ldr	r1, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x34c>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCC_OscConfig+0x350>)
 8004256:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004258:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_RCC_OscConfig+0x354>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2513      	movs	r5, #19
 800425e:	197c      	adds	r4, r7, r5
 8004260:	0018      	movs	r0, r3
 8004262:	f7fe fe17 	bl	8002e94 <HAL_InitTick>
 8004266:	0003      	movs	r3, r0
 8004268:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800426a:	197b      	adds	r3, r7, r5
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d061      	beq.n	8004336 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004272:	197b      	adds	r3, r7, r5
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	e244      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d040      	beq.n	8004302 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_OscConfig+0x33c>)
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	0049      	lsls	r1, r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428e:	f7fe fe47 	bl	8002f20 <HAL_GetTick>
 8004292:	0003      	movs	r3, r0
 8004294:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004296:	e019      	b.n	80042cc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004298:	f7fe fe42 	bl	8002f20 <HAL_GetTick>
 800429c:	0002      	movs	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d912      	bls.n	80042cc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e22b      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	40021000 	.word	0x40021000
 80042b0:	fffeffff 	.word	0xfffeffff
 80042b4:	fffbffff 	.word	0xfffbffff
 80042b8:	ffffe0ff 	.word	0xffffe0ff
 80042bc:	0800a0fc 	.word	0x0800a0fc
 80042c0:	20000124 	.word	0x20000124
 80042c4:	20000128 	.word	0x20000128
 80042c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042cc:	4bca      	ldr	r3, [pc, #808]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2380      	movs	r3, #128	; 0x80
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4013      	ands	r3, r2
 80042d6:	d0df      	beq.n	8004298 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d8:	4bc7      	ldr	r3, [pc, #796]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4ac7      	ldr	r2, [pc, #796]	; (80045fc <HAL_RCC_OscConfig+0x68c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	0019      	movs	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e6:	4bc4      	ldr	r3, [pc, #784]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ec:	4bc2      	ldr	r3, [pc, #776]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	0a19      	lsrs	r1, r3, #8
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	061a      	lsls	r2, r3, #24
 80042fa:	4bbf      	ldr	r3, [pc, #764]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	e019      	b.n	8004336 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004302:	4bbd      	ldr	r3, [pc, #756]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4bbc      	ldr	r3, [pc, #752]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004308:	49bd      	ldr	r1, [pc, #756]	; (8004600 <HAL_RCC_OscConfig+0x690>)
 800430a:	400a      	ands	r2, r1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7fe fe07 	bl	8002f20 <HAL_GetTick>
 8004312:	0003      	movs	r3, r0
 8004314:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004318:	f7fe fe02 	bl	8002f20 <HAL_GetTick>
 800431c:	0002      	movs	r2, r0
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1eb      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800432a:	4bb3      	ldr	r3, [pc, #716]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4013      	ands	r3, r2
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2208      	movs	r2, #8
 800433c:	4013      	ands	r3, r2
 800433e:	d036      	beq.n	80043ae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d019      	beq.n	800437c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004348:	4bab      	ldr	r3, [pc, #684]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800434a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800434c:	4baa      	ldr	r3, [pc, #680]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800434e:	2101      	movs	r1, #1
 8004350:	430a      	orrs	r2, r1
 8004352:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fe fde4 	bl	8002f20 <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435e:	f7fe fddf 	bl	8002f20 <HAL_GetTick>
 8004362:	0002      	movs	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e1c8      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004370:	4ba1      	ldr	r3, [pc, #644]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	2202      	movs	r2, #2
 8004376:	4013      	ands	r3, r2
 8004378:	d0f1      	beq.n	800435e <HAL_RCC_OscConfig+0x3ee>
 800437a:	e018      	b.n	80043ae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	4b9e      	ldr	r3, [pc, #632]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800437e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004380:	4b9d      	ldr	r3, [pc, #628]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004382:	2101      	movs	r1, #1
 8004384:	438a      	bics	r2, r1
 8004386:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004388:	f7fe fdca 	bl	8002f20 <HAL_GetTick>
 800438c:	0003      	movs	r3, r0
 800438e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004392:	f7fe fdc5 	bl	8002f20 <HAL_GetTick>
 8004396:	0002      	movs	r2, r0
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1ae      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043a4:	4b94      	ldr	r3, [pc, #592]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	2202      	movs	r2, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	d1f1      	bne.n	8004392 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2204      	movs	r2, #4
 80043b4:	4013      	ands	r3, r2
 80043b6:	d100      	bne.n	80043ba <HAL_RCC_OscConfig+0x44a>
 80043b8:	e0ae      	b.n	8004518 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ba:	2023      	movs	r0, #35	; 0x23
 80043bc:	183b      	adds	r3, r7, r0
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c2:	4b8d      	ldr	r3, [pc, #564]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	055b      	lsls	r3, r3, #21
 80043ca:	4013      	ands	r3, r2
 80043cc:	d109      	bne.n	80043e2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ce:	4b8a      	ldr	r3, [pc, #552]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	4b89      	ldr	r3, [pc, #548]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	0549      	lsls	r1, r1, #21
 80043d8:	430a      	orrs	r2, r1
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80043dc:	183b      	adds	r3, r7, r0
 80043de:	2201      	movs	r2, #1
 80043e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x694>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d11a      	bne.n	8004424 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ee:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCC_OscConfig+0x694>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b84      	ldr	r3, [pc, #528]	; (8004604 <HAL_RCC_OscConfig+0x694>)
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	0049      	lsls	r1, r1, #1
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fc:	f7fe fd90 	bl	8002f20 <HAL_GetTick>
 8004400:	0003      	movs	r3, r0
 8004402:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fe fd8b 	bl	8002f20 <HAL_GetTick>
 800440a:	0002      	movs	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b64      	cmp	r3, #100	; 0x64
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e174      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	4b7a      	ldr	r3, [pc, #488]	; (8004604 <HAL_RCC_OscConfig+0x694>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4013      	ands	r3, r2
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4d0>
 8004430:	4b71      	ldr	r3, [pc, #452]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004434:	4b70      	ldr	r3, [pc, #448]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004436:	2180      	movs	r1, #128	; 0x80
 8004438:	0049      	lsls	r1, r1, #1
 800443a:	430a      	orrs	r2, r1
 800443c:	651a      	str	r2, [r3, #80]	; 0x50
 800443e:	e031      	b.n	80044a4 <HAL_RCC_OscConfig+0x534>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10c      	bne.n	8004462 <HAL_RCC_OscConfig+0x4f2>
 8004448:	4b6b      	ldr	r3, [pc, #428]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800444a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800444e:	496c      	ldr	r1, [pc, #432]	; (8004600 <HAL_RCC_OscConfig+0x690>)
 8004450:	400a      	ands	r2, r1
 8004452:	651a      	str	r2, [r3, #80]	; 0x50
 8004454:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004458:	4b67      	ldr	r3, [pc, #412]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800445a:	496b      	ldr	r1, [pc, #428]	; (8004608 <HAL_RCC_OscConfig+0x698>)
 800445c:	400a      	ands	r2, r1
 800445e:	651a      	str	r2, [r3, #80]	; 0x50
 8004460:	e020      	b.n	80044a4 <HAL_RCC_OscConfig+0x534>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	23a0      	movs	r3, #160	; 0xa0
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	429a      	cmp	r2, r3
 800446c:	d10e      	bne.n	800448c <HAL_RCC_OscConfig+0x51c>
 800446e:	4b62      	ldr	r3, [pc, #392]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004472:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	00c9      	lsls	r1, r1, #3
 8004478:	430a      	orrs	r2, r1
 800447a:	651a      	str	r2, [r3, #80]	; 0x50
 800447c:	4b5e      	ldr	r3, [pc, #376]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800447e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004480:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	0049      	lsls	r1, r1, #1
 8004486:	430a      	orrs	r2, r1
 8004488:	651a      	str	r2, [r3, #80]	; 0x50
 800448a:	e00b      	b.n	80044a4 <HAL_RCC_OscConfig+0x534>
 800448c:	4b5a      	ldr	r3, [pc, #360]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800448e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004492:	495b      	ldr	r1, [pc, #364]	; (8004600 <HAL_RCC_OscConfig+0x690>)
 8004494:	400a      	ands	r2, r1
 8004496:	651a      	str	r2, [r3, #80]	; 0x50
 8004498:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800449a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800449c:	4b56      	ldr	r3, [pc, #344]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800449e:	495a      	ldr	r1, [pc, #360]	; (8004608 <HAL_RCC_OscConfig+0x698>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d015      	beq.n	80044d8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ac:	f7fe fd38 	bl	8002f20 <HAL_GetTick>
 80044b0:	0003      	movs	r3, r0
 80044b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044b4:	e009      	b.n	80044ca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fe fd33 	bl	8002f20 <HAL_GetTick>
 80044ba:	0002      	movs	r2, r0
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	4a52      	ldr	r2, [pc, #328]	; (800460c <HAL_RCC_OscConfig+0x69c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e11b      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ca:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80044cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4013      	ands	r3, r2
 80044d4:	d0ef      	beq.n	80044b6 <HAL_RCC_OscConfig+0x546>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d8:	f7fe fd22 	bl	8002f20 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044e0:	e009      	b.n	80044f6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e2:	f7fe fd1d 	bl	8002f20 <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	4a47      	ldr	r2, [pc, #284]	; (800460c <HAL_RCC_OscConfig+0x69c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e105      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044f6:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80044f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4013      	ands	r3, r2
 8004500:	d1ef      	bne.n	80044e2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004502:	2323      	movs	r3, #35	; 0x23
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800450e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004512:	493f      	ldr	r1, [pc, #252]	; (8004610 <HAL_RCC_OscConfig+0x6a0>)
 8004514:	400a      	ands	r2, r1
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2220      	movs	r2, #32
 800451e:	4013      	ands	r3, r2
 8004520:	d049      	beq.n	80045b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d026      	beq.n	8004578 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004530:	2101      	movs	r1, #1
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 8004538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453a:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800453c:	2101      	movs	r1, #1
 800453e:	430a      	orrs	r2, r1
 8004540:	635a      	str	r2, [r3, #52]	; 0x34
 8004542:	4b34      	ldr	r3, [pc, #208]	; (8004614 <HAL_RCC_OscConfig+0x6a4>)
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	4b33      	ldr	r3, [pc, #204]	; (8004614 <HAL_RCC_OscConfig+0x6a4>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0189      	lsls	r1, r1, #6
 800454c:	430a      	orrs	r2, r1
 800454e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fe fce6 	bl	8002f20 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800455a:	f7fe fce1 	bl	8002f20 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0ca      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800456c:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2202      	movs	r2, #2
 8004572:	4013      	ands	r3, r2
 8004574:	d0f1      	beq.n	800455a <HAL_RCC_OscConfig+0x5ea>
 8004576:	e01e      	b.n	80045b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004578:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 800457e:	2101      	movs	r1, #1
 8004580:	438a      	bics	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	4b23      	ldr	r3, [pc, #140]	; (8004614 <HAL_RCC_OscConfig+0x6a4>)
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_RCC_OscConfig+0x6a4>)
 800458a:	4923      	ldr	r1, [pc, #140]	; (8004618 <HAL_RCC_OscConfig+0x6a8>)
 800458c:	400a      	ands	r2, r1
 800458e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe fcc6 	bl	8002f20 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459a:	f7fe fcc1 	bl	8002f20 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0aa      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045ac:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d1f1      	bne.n	800459a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d100      	bne.n	80045c0 <HAL_RCC_OscConfig+0x650>
 80045be:	e09f      	b.n	8004700 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d100      	bne.n	80045c8 <HAL_RCC_OscConfig+0x658>
 80045c6:	e078      	b.n	80046ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d159      	bne.n	8004684 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_RCC_OscConfig+0x688>)
 80045d6:	4911      	ldr	r1, [pc, #68]	; (800461c <HAL_RCC_OscConfig+0x6ac>)
 80045d8:	400a      	ands	r2, r1
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fe fca0 	bl	8002f20 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045e4:	e01c      	b.n	8004620 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e6:	f7fe fc9b 	bl	8002f20 <HAL_GetTick>
 80045ea:	0002      	movs	r2, r0
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d915      	bls.n	8004620 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e084      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
 80045f8:	40021000 	.word	0x40021000
 80045fc:	ffff1fff 	.word	0xffff1fff
 8004600:	fffffeff 	.word	0xfffffeff
 8004604:	40007000 	.word	0x40007000
 8004608:	fffffbff 	.word	0xfffffbff
 800460c:	00001388 	.word	0x00001388
 8004610:	efffffff 	.word	0xefffffff
 8004614:	40010000 	.word	0x40010000
 8004618:	ffffdfff 	.word	0xffffdfff
 800461c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004620:	4b3a      	ldr	r3, [pc, #232]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	049b      	lsls	r3, r3, #18
 8004628:	4013      	ands	r3, r2
 800462a:	d1dc      	bne.n	80045e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800462c:	4b37      	ldr	r3, [pc, #220]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a37      	ldr	r2, [pc, #220]	; (8004710 <HAL_RCC_OscConfig+0x7a0>)
 8004632:	4013      	ands	r3, r2
 8004634:	0019      	movs	r1, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	431a      	orrs	r2, r3
 8004646:	4b31      	ldr	r3, [pc, #196]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 8004648:	430a      	orrs	r2, r1
 800464a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464c:	4b2f      	ldr	r3, [pc, #188]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b2e      	ldr	r3, [pc, #184]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 8004652:	2180      	movs	r1, #128	; 0x80
 8004654:	0449      	lsls	r1, r1, #17
 8004656:	430a      	orrs	r2, r1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fe fc61 	bl	8002f20 <HAL_GetTick>
 800465e:	0003      	movs	r3, r0
 8004660:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fc5c 	bl	8002f20 <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e045      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004676:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	049b      	lsls	r3, r3, #18
 800467e:	4013      	ands	r3, r2
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x6f4>
 8004682:	e03d      	b.n	8004700 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004684:	4b21      	ldr	r3, [pc, #132]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b20      	ldr	r3, [pc, #128]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 800468a:	4922      	ldr	r1, [pc, #136]	; (8004714 <HAL_RCC_OscConfig+0x7a4>)
 800468c:	400a      	ands	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004690:	f7fe fc46 	bl	8002f20 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469a:	f7fe fc41 	bl	8002f20 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e02a      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046ac:	4b17      	ldr	r3, [pc, #92]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	049b      	lsls	r3, r3, #18
 80046b4:	4013      	ands	r3, r2
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x72a>
 80046b8:	e022      	b.n	8004700 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e01d      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_OscConfig+0x79c>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	2380      	movs	r3, #128	; 0x80
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	401a      	ands	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	429a      	cmp	r2, r3
 80046da:	d10f      	bne.n	80046fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	23f0      	movs	r3, #240	; 0xf0
 80046e0:	039b      	lsls	r3, r3, #14
 80046e2:	401a      	ands	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	23c0      	movs	r3, #192	; 0xc0
 80046f0:	041b      	lsls	r3, r3, #16
 80046f2:	401a      	ands	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	0018      	movs	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	b00a      	add	sp, #40	; 0x28
 8004708:	bdb0      	pop	{r4, r5, r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	40021000 	.word	0x40021000
 8004710:	ff02ffff 	.word	0xff02ffff
 8004714:	feffffff 	.word	0xfeffffff

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b5b0      	push	{r4, r5, r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e128      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b96      	ldr	r3, [pc, #600]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	4013      	ands	r3, r2
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d91e      	bls.n	8004778 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b93      	ldr	r3, [pc, #588]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	4393      	bics	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	4b90      	ldr	r3, [pc, #576]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800474c:	f7fe fbe8 	bl	8002f20 <HAL_GetTick>
 8004750:	0003      	movs	r3, r0
 8004752:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004754:	e009      	b.n	800476a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004756:	f7fe fbe3 	bl	8002f20 <HAL_GetTick>
 800475a:	0002      	movs	r2, r0
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	4a8a      	ldr	r2, [pc, #552]	; (800498c <HAL_RCC_ClockConfig+0x274>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e109      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b87      	ldr	r3, [pc, #540]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2201      	movs	r2, #1
 8004770:	4013      	ands	r3, r2
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d1ee      	bne.n	8004756 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2202      	movs	r2, #2
 800477e:	4013      	ands	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004782:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	22f0      	movs	r2, #240	; 0xf0
 8004788:	4393      	bics	r3, r2
 800478a:	0019      	movs	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	4b7f      	ldr	r3, [pc, #508]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 8004792:	430a      	orrs	r2, r1
 8004794:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	4013      	ands	r3, r2
 800479e:	d100      	bne.n	80047a2 <HAL_RCC_ClockConfig+0x8a>
 80047a0:	e089      	b.n	80048b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047aa:	4b79      	ldr	r3, [pc, #484]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	4013      	ands	r3, r2
 80047b4:	d120      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0e1      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047c2:	4b73      	ldr	r3, [pc, #460]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	049b      	lsls	r3, r3, #18
 80047ca:	4013      	ands	r3, r2
 80047cc:	d114      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0d5      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d106      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2204      	movs	r2, #4
 80047e0:	4013      	ands	r3, r2
 80047e2:	d109      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0ca      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047e8:	4b69      	ldr	r3, [pc, #420]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4013      	ands	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0c2      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f8:	4b65      	ldr	r3, [pc, #404]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	2203      	movs	r2, #3
 80047fe:	4393      	bics	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4b62      	ldr	r3, [pc, #392]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 8004808:	430a      	orrs	r2, r1
 800480a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7fe fb88 	bl	8002f20 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d111      	bne.n	8004840 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800481c:	e009      	b.n	8004832 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481e:	f7fe fb7f 	bl	8002f20 <HAL_GetTick>
 8004822:	0002      	movs	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	4a58      	ldr	r2, [pc, #352]	; (800498c <HAL_RCC_ClockConfig+0x274>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e0a5      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004832:	4b57      	ldr	r3, [pc, #348]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	220c      	movs	r2, #12
 8004838:	4013      	ands	r3, r2
 800483a:	2b08      	cmp	r3, #8
 800483c:	d1ef      	bne.n	800481e <HAL_RCC_ClockConfig+0x106>
 800483e:	e03a      	b.n	80048b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d111      	bne.n	800486c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004848:	e009      	b.n	800485e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800484a:	f7fe fb69 	bl	8002f20 <HAL_GetTick>
 800484e:	0002      	movs	r2, r0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	4a4d      	ldr	r2, [pc, #308]	; (800498c <HAL_RCC_ClockConfig+0x274>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e08f      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800485e:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	220c      	movs	r2, #12
 8004864:	4013      	ands	r3, r2
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d1ef      	bne.n	800484a <HAL_RCC_ClockConfig+0x132>
 800486a:	e024      	b.n	80048b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d11b      	bne.n	80048ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004874:	e009      	b.n	800488a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004876:	f7fe fb53 	bl	8002f20 <HAL_GetTick>
 800487a:	0002      	movs	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	4a42      	ldr	r2, [pc, #264]	; (800498c <HAL_RCC_ClockConfig+0x274>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e079      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	220c      	movs	r2, #12
 8004890:	4013      	ands	r3, r2
 8004892:	2b04      	cmp	r3, #4
 8004894:	d1ef      	bne.n	8004876 <HAL_RCC_ClockConfig+0x15e>
 8004896:	e00e      	b.n	80048b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe fb42 	bl	8002f20 <HAL_GetTick>
 800489c:	0002      	movs	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	4a3a      	ldr	r2, [pc, #232]	; (800498c <HAL_RCC_ClockConfig+0x274>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e068      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048ac:	4b38      	ldr	r3, [pc, #224]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	220c      	movs	r2, #12
 80048b2:	4013      	ands	r3, r2
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b6:	4b34      	ldr	r3, [pc, #208]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2201      	movs	r2, #1
 80048bc:	4013      	ands	r3, r2
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d21e      	bcs.n	8004902 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c4:	4b30      	ldr	r3, [pc, #192]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	4393      	bics	r3, r2
 80048cc:	0019      	movs	r1, r3
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048d6:	f7fe fb23 	bl	8002f20 <HAL_GetTick>
 80048da:	0003      	movs	r3, r0
 80048dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	e009      	b.n	80048f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e0:	f7fe fb1e 	bl	8002f20 <HAL_GetTick>
 80048e4:	0002      	movs	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	4a28      	ldr	r2, [pc, #160]	; (800498c <HAL_RCC_ClockConfig+0x274>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e044      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f4:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_ClockConfig+0x270>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2201      	movs	r2, #1
 80048fa:	4013      	ands	r3, r2
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d1ee      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2204      	movs	r2, #4
 8004908:	4013      	ands	r3, r2
 800490a:	d009      	beq.n	8004920 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800490c:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a20      	ldr	r2, [pc, #128]	; (8004994 <HAL_RCC_ClockConfig+0x27c>)
 8004912:	4013      	ands	r3, r2
 8004914:	0019      	movs	r1, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 800491c:	430a      	orrs	r2, r1
 800491e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	4013      	ands	r3, r2
 8004928:	d00a      	beq.n	8004940 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a1a      	ldr	r2, [pc, #104]	; (8004998 <HAL_RCC_ClockConfig+0x280>)
 8004930:	4013      	ands	r3, r2
 8004932:	0019      	movs	r1, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	00da      	lsls	r2, r3, #3
 800493a:	4b15      	ldr	r3, [pc, #84]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004940:	f000 f832 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004944:	0001      	movs	r1, r0
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <HAL_RCC_ClockConfig+0x278>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	091b      	lsrs	r3, r3, #4
 800494c:	220f      	movs	r2, #15
 800494e:	4013      	ands	r3, r2
 8004950:	4a12      	ldr	r2, [pc, #72]	; (800499c <HAL_RCC_ClockConfig+0x284>)
 8004952:	5cd3      	ldrb	r3, [r2, r3]
 8004954:	000a      	movs	r2, r1
 8004956:	40da      	lsrs	r2, r3
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_RCC_ClockConfig+0x288>)
 800495a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_RCC_ClockConfig+0x28c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	250b      	movs	r5, #11
 8004962:	197c      	adds	r4, r7, r5
 8004964:	0018      	movs	r0, r3
 8004966:	f7fe fa95 	bl	8002e94 <HAL_InitTick>
 800496a:	0003      	movs	r3, r0
 800496c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800496e:	197b      	adds	r3, r7, r5
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004976:	197b      	adds	r3, r7, r5
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	e000      	b.n	800497e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	0018      	movs	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	b004      	add	sp, #16
 8004984:	bdb0      	pop	{r4, r5, r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	40022000 	.word	0x40022000
 800498c:	00001388 	.word	0x00001388
 8004990:	40021000 	.word	0x40021000
 8004994:	fffff8ff 	.word	0xfffff8ff
 8004998:	ffffc7ff 	.word	0xffffc7ff
 800499c:	0800a0fc 	.word	0x0800a0fc
 80049a0:	20000124 	.word	0x20000124
 80049a4:	20000128 	.word	0x20000128

080049a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a8:	b5b0      	push	{r4, r5, r7, lr}
 80049aa:	b08e      	sub	sp, #56	; 0x38
 80049ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80049ae:	4b4c      	ldr	r3, [pc, #304]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b6:	230c      	movs	r3, #12
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d014      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x40>
 80049be:	d900      	bls.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80049c0:	e07b      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x112>
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d002      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0x24>
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ca:	e076      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80049cc:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2210      	movs	r2, #16
 80049d2:	4013      	ands	r3, r2
 80049d4:	d002      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80049d6:	4b43      	ldr	r3, [pc, #268]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80049da:	e07c      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80049dc:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x140>)
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049e0:	e079      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049e2:	4b42      	ldr	r3, [pc, #264]	; (8004aec <HAL_RCC_GetSysClockFreq+0x144>)
 80049e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80049e6:	e076      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	0c9a      	lsrs	r2, r3, #18
 80049ec:	230f      	movs	r3, #15
 80049ee:	401a      	ands	r2, r3
 80049f0:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x148>)
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	0d9a      	lsrs	r2, r3, #22
 80049fa:	2303      	movs	r3, #3
 80049fc:	4013      	ands	r3, r2
 80049fe:	3301      	adds	r3, #1
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a02:	4b37      	ldr	r3, [pc, #220]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	025b      	lsls	r3, r3, #9
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d01a      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
 8004a16:	4a35      	ldr	r2, [pc, #212]	; (8004aec <HAL_RCC_GetSysClockFreq+0x144>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	69b8      	ldr	r0, [r7, #24]
 8004a1c:	69f9      	ldr	r1, [r7, #28]
 8004a1e:	f7fb fd1b 	bl	8000458 <__aeabi_lmul>
 8004a22:	0002      	movs	r2, r0
 8004a24:	000b      	movs	r3, r1
 8004a26:	0010      	movs	r0, r2
 8004a28:	0019      	movs	r1, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f7fb fcef 	bl	8000418 <__aeabi_uldivmod>
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	000b      	movs	r3, r1
 8004a3e:	0013      	movs	r3, r2
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
 8004a42:	e037      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2210      	movs	r2, #16
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	d01a      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	68b8      	ldr	r0, [r7, #8]
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	f7fb fcfb 	bl	8000458 <__aeabi_lmul>
 8004a62:	0002      	movs	r2, r0
 8004a64:	000b      	movs	r3, r1
 8004a66:	0010      	movs	r0, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f7fb fccf 	bl	8000418 <__aeabi_uldivmod>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	000b      	movs	r3, r1
 8004a7e:	0013      	movs	r3, r2
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	e017      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	0018      	movs	r0, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f7fb fce2 	bl	8000458 <__aeabi_lmul>
 8004a94:	0002      	movs	r2, r0
 8004a96:	000b      	movs	r3, r1
 8004a98:	0010      	movs	r0, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	001c      	movs	r4, r3
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	001d      	movs	r5, r3
 8004aa4:	0022      	movs	r2, r4
 8004aa6:	002b      	movs	r3, r5
 8004aa8:	f7fb fcb6 	bl	8000418 <__aeabi_uldivmod>
 8004aac:	0002      	movs	r2, r0
 8004aae:	000b      	movs	r3, r1
 8004ab0:	0013      	movs	r3, r2
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab8:	e00d      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004aba:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	0b5b      	lsrs	r3, r3, #13
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	0212      	lsls	r2, r2, #8
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	0013      	movs	r3, r2
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ad4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	b00e      	add	sp, #56	; 0x38
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	003d0900 	.word	0x003d0900
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	007a1200 	.word	0x007a1200
 8004af0:	0800a114 	.word	0x0800a114

08004af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af8:	4b02      	ldr	r3, [pc, #8]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20000124 	.word	0x20000124

08004b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b0c:	f7ff fff2 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b10:	0001      	movs	r1, r0
 8004b12:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	0a1b      	lsrs	r3, r3, #8
 8004b18:	2207      	movs	r2, #7
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b1e:	5cd3      	ldrb	r3, [r2, r3]
 8004b20:	40d9      	lsrs	r1, r3
 8004b22:	000b      	movs	r3, r1
}
 8004b24:	0018      	movs	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	0800a10c 	.word	0x0800a10c

08004b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b38:	f7ff ffdc 	bl	8004af4 <HAL_RCC_GetHCLKFreq>
 8004b3c:	0001      	movs	r1, r0
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	0adb      	lsrs	r3, r3, #11
 8004b44:	2207      	movs	r2, #7
 8004b46:	4013      	ands	r3, r2
 8004b48:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	40d9      	lsrs	r1, r3
 8004b4e:	000b      	movs	r3, r1
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	0800a10c 	.word	0x0800a10c

08004b60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004b68:	2317      	movs	r3, #23
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2220      	movs	r2, #32
 8004b76:	4013      	ands	r3, r2
 8004b78:	d106      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	4013      	ands	r3, r2
 8004b84:	d100      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004b86:	e0d9      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b88:	4ba4      	ldr	r3, [pc, #656]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	055b      	lsls	r3, r3, #21
 8004b90:	4013      	ands	r3, r2
 8004b92:	d10a      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4ba1      	ldr	r3, [pc, #644]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b98:	4ba0      	ldr	r3, [pc, #640]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	0549      	lsls	r1, r1, #21
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004ba2:	2317      	movs	r3, #23
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	4b9d      	ldr	r3, [pc, #628]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d11a      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb6:	4b9a      	ldr	r3, [pc, #616]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4b99      	ldr	r3, [pc, #612]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	0049      	lsls	r1, r1, #1
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc4:	f7fe f9ac 	bl	8002f20 <HAL_GetTick>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fe f9a7 	bl	8002f20 <HAL_GetTick>
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	; 0x64
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e118      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b8f      	ldr	r3, [pc, #572]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4013      	ands	r3, r2
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004bec:	4b8b      	ldr	r3, [pc, #556]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	23c0      	movs	r3, #192	; 0xc0
 8004bf2:	039b      	lsls	r3, r3, #14
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	23c0      	movs	r3, #192	; 0xc0
 8004bfe:	039b      	lsls	r3, r3, #14
 8004c00:	4013      	ands	r3, r2
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d107      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	23c0      	movs	r3, #192	; 0xc0
 8004c0e:	039b      	lsls	r3, r3, #14
 8004c10:	4013      	ands	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d013      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	23c0      	movs	r3, #192	; 0xc0
 8004c1e:	029b      	lsls	r3, r3, #10
 8004c20:	401a      	ands	r2, r3
 8004c22:	23c0      	movs	r3, #192	; 0xc0
 8004c24:	029b      	lsls	r3, r3, #10
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d10a      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c2a:	4b7c      	ldr	r3, [pc, #496]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	401a      	ands	r2, r3
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	029b      	lsls	r3, r3, #10
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0e8      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004c40:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c44:	23c0      	movs	r3, #192	; 0xc0
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d049      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	23c0      	movs	r3, #192	; 0xc0
 8004c58:	029b      	lsls	r3, r3, #10
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d004      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2220      	movs	r2, #32
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d10d      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	23c0      	movs	r3, #192	; 0xc0
 8004c72:	029b      	lsls	r3, r3, #10
 8004c74:	4013      	ands	r3, r2
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d034      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	4013      	ands	r3, r2
 8004c86:	d02e      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c88:	4b64      	ldr	r3, [pc, #400]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8c:	4a65      	ldr	r2, [pc, #404]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c92:	4b62      	ldr	r3, [pc, #392]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c96:	4b61      	ldr	r3, [pc, #388]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c98:	2180      	movs	r1, #128	; 0x80
 8004c9a:	0309      	lsls	r1, r1, #12
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca0:	4b5e      	ldr	r3, [pc, #376]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ca4:	4b5d      	ldr	r3, [pc, #372]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ca6:	4960      	ldr	r1, [pc, #384]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004cac:	4b5b      	ldr	r3, [pc, #364]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d014      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe f930 	bl	8002f20 <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc4:	e009      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc6:	f7fe f92b 	bl	8002f20 <HAL_GetTick>
 8004cca:	0002      	movs	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	4a56      	ldr	r2, [pc, #344]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e09b      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cda:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d0ef      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	23c0      	movs	r3, #192	; 0xc0
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	401a      	ands	r2, r3
 8004cf0:	23c0      	movs	r3, #192	; 0xc0
 8004cf2:	029b      	lsls	r3, r3, #10
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d10c      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004cf8:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a4c      	ldr	r2, [pc, #304]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	0019      	movs	r1, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	23c0      	movs	r3, #192	; 0xc0
 8004d08:	039b      	lsls	r3, r3, #14
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	4b42      	ldr	r3, [pc, #264]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	23c0      	movs	r3, #192	; 0xc0
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	401a      	ands	r2, r3
 8004d20:	4b3e      	ldr	r3, [pc, #248]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d22:	430a      	orrs	r2, r1
 8004d24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d26:	2317      	movs	r3, #23
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d30:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d34:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d36:	493f      	ldr	r1, [pc, #252]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d38:	400a      	ands	r2, r1
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	4013      	ands	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d46:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	4393      	bics	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d56:	430a      	orrs	r2, r1
 8004d58:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	4013      	ands	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d64:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	220c      	movs	r2, #12
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d74:	430a      	orrs	r2, r1
 8004d76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	4a2c      	ldr	r2, [pc, #176]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	4b22      	ldr	r3, [pc, #136]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d92:	430a      	orrs	r2, r1
 8004d94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004da0:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	d009      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dc0:	4b16      	ldr	r3, [pc, #88]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0019      	movs	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dde:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de2:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dee:	430a      	orrs	r2, r1
 8004df0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004dfc:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	40007000 	.word	0x40007000
 8004e24:	fffcffff 	.word	0xfffcffff
 8004e28:	fff7ffff 	.word	0xfff7ffff
 8004e2c:	00001388 	.word	0x00001388
 8004e30:	ffcfffff 	.word	0xffcfffff
 8004e34:	efffffff 	.word	0xefffffff
 8004e38:	fffff3ff 	.word	0xfffff3ff
 8004e3c:	ffffcfff 	.word	0xffffcfff
 8004e40:	fbffffff 	.word	0xfbffffff
 8004e44:	fff3ffff 	.word	0xfff3ffff

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e032      	b.n	8004ec0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2239      	movs	r2, #57	; 0x39
 8004e5e:	5c9b      	ldrb	r3, [r3, r2]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2238      	movs	r2, #56	; 0x38
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7fd ff13 	bl	8002c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2239      	movs	r2, #57	; 0x39
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3304      	adds	r3, #4
 8004e86:	0019      	movs	r1, r3
 8004e88:	0010      	movs	r0, r2
 8004e8a:	f000 fae3 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223e      	movs	r2, #62	; 0x3e
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	223a      	movs	r2, #58	; 0x3a
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	223b      	movs	r2, #59	; 0x3b
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	223c      	movs	r2, #60	; 0x3c
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	223d      	movs	r2, #61	; 0x3d
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2239      	movs	r2, #57	; 0x39
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2239      	movs	r2, #57	; 0x39
 8004ed4:	5c9b      	ldrb	r3, [r3, r2]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d001      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e03b      	b.n	8004f58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2239      	movs	r2, #57	; 0x39
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	05db      	lsls	r3, r3, #23
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d00e      	beq.n	8004f22 <HAL_TIM_Base_Start_IT+0x5a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <HAL_TIM_Base_Start_IT+0x98>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_TIM_Base_Start_IT+0x5a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_Base_Start_IT+0x5a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a12      	ldr	r2, [pc, #72]	; (8004f68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d111      	bne.n	8004f46 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2207      	movs	r2, #7
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b06      	cmp	r3, #6
 8004f32:	d010      	beq.n	8004f56 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2101      	movs	r1, #1
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f44:	e007      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2101      	movs	r1, #1
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	0018      	movs	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	b004      	add	sp, #16
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40010800 	.word	0x40010800
 8004f68:	40011400 	.word	0x40011400

08004f6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2101      	movs	r1, #1
 8004f80:	438a      	bics	r2, r1
 8004f82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	; (8004fb4 <HAL_TIM_Base_Stop_IT+0x48>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d107      	bne.n	8004fa0 <HAL_TIM_Base_Stop_IT+0x34>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2239      	movs	r2, #57	; 0x39
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b002      	add	sp, #8
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	00001111 	.word	0x00001111

08004fb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e088      	b.n	80050de <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2239      	movs	r2, #57	; 0x39
 8004fd0:	5c9b      	ldrb	r3, [r3, r2]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2238      	movs	r2, #56	; 0x38
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7fd fe10 	bl	8002c08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2239      	movs	r2, #57	; 0x39
 8004fec:	2102      	movs	r1, #2
 8004fee:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	493b      	ldr	r1, [pc, #236]	; (80050e8 <HAL_TIM_Encoder_Init+0x130>)
 8004ffc:	400a      	ands	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	0019      	movs	r1, r3
 800500a:	0010      	movs	r0, r2
 800500c:	f000 fa22 	bl	8005454 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4a2d      	ldr	r2, [pc, #180]	; (80050ec <HAL_TIM_Encoder_Init+0x134>)
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	4313      	orrs	r3, r2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <HAL_TIM_Encoder_Init+0x138>)
 8005050:	4013      	ands	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <HAL_TIM_Encoder_Init+0x13c>)
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	4313      	orrs	r3, r2
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	011a      	lsls	r2, r3, #4
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	4313      	orrs	r3, r2
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2222      	movs	r2, #34	; 0x22
 8005086:	4393      	bics	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2288      	movs	r2, #136	; 0x88
 800508e:	4393      	bics	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	4313      	orrs	r3, r2
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	223e      	movs	r2, #62	; 0x3e
 80050c0:	2101      	movs	r1, #1
 80050c2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	223a      	movs	r2, #58	; 0x3a
 80050c8:	2101      	movs	r1, #1
 80050ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223b      	movs	r2, #59	; 0x3b
 80050d0:	2101      	movs	r1, #1
 80050d2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2239      	movs	r2, #57	; 0x39
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b006      	add	sp, #24
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	ffffbff8 	.word	0xffffbff8
 80050ec:	fffffcfc 	.word	0xfffffcfc
 80050f0:	fffff3f3 	.word	0xfffff3f3
 80050f4:	ffff0f0f 	.word	0xffff0f0f

080050f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005102:	200f      	movs	r0, #15
 8005104:	183b      	adds	r3, r7, r0
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	213a      	movs	r1, #58	; 0x3a
 800510a:	5c52      	ldrb	r2, [r2, r1]
 800510c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800510e:	230e      	movs	r3, #14
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	213b      	movs	r1, #59	; 0x3b
 8005116:	5c52      	ldrb	r2, [r2, r1]
 8005118:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <HAL_TIM_Encoder_Start_IT+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005120:	183b      	adds	r3, r7, r0
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Encoder_Start_IT+0x34>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e076      	b.n	800521a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	223a      	movs	r2, #58	; 0x3a
 8005130:	2102      	movs	r1, #2
 8005132:	5499      	strb	r1, [r3, r2]
 8005134:	e022      	b.n	800517c <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d10b      	bne.n	8005154 <HAL_TIM_Encoder_Start_IT+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800513c:	230e      	movs	r3, #14
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <HAL_TIM_Encoder_Start_IT+0x52>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e067      	b.n	800521a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	223b      	movs	r2, #59	; 0x3b
 800514e:	2102      	movs	r1, #2
 8005150:	5499      	strb	r1, [r3, r2]
 8005152:	e013      	b.n	800517c <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005154:	230f      	movs	r3, #15
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d104      	bne.n	8005168 <HAL_TIM_Encoder_Start_IT+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800515e:	230e      	movs	r3, #14
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Encoder_Start_IT+0x74>
    {
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e056      	b.n	800521a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223a      	movs	r2, #58	; 0x3a
 8005170:	2102      	movs	r1, #2
 8005172:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	223b      	movs	r2, #59	; 0x3b
 8005178:	2102      	movs	r1, #2
 800517a:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_Encoder_Start_IT+0x92>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d010      	beq.n	80051aa <HAL_TIM_Encoder_Start_IT+0xb2>
 8005188:	e01f      	b.n	80051ca <HAL_TIM_Encoder_Start_IT+0xd2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2201      	movs	r2, #1
 8005190:	2100      	movs	r1, #0
 8005192:	0018      	movs	r0, r3
 8005194:	f000 f9bc 	bl	8005510 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2102      	movs	r1, #2
 80051a4:	430a      	orrs	r2, r1
 80051a6:	60da      	str	r2, [r3, #12]
      break;
 80051a8:	e02e      	b.n	8005208 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	2104      	movs	r1, #4
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f9ac 	bl	8005510 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2104      	movs	r1, #4
 80051c4:	430a      	orrs	r2, r1
 80051c6:	60da      	str	r2, [r3, #12]
      break;
 80051c8:	e01e      	b.n	8005208 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2201      	movs	r2, #1
 80051d0:	2100      	movs	r1, #0
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 f99c 	bl	8005510 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	2104      	movs	r1, #4
 80051e0:	0018      	movs	r0, r3
 80051e2:	f000 f995 	bl	8005510 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2102      	movs	r1, #2
 80051f2:	430a      	orrs	r2, r1
 80051f4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2104      	movs	r1, #4
 8005202:	430a      	orrs	r2, r1
 8005204:	60da      	str	r2, [r3, #12]
      break;
 8005206:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2101      	movs	r1, #1
 8005214:	430a      	orrs	r2, r1
 8005216:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b004      	add	sp, #16
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2202      	movs	r2, #2
 8005232:	4013      	ands	r3, r2
 8005234:	2b02      	cmp	r3, #2
 8005236:	d124      	bne.n	8005282 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2202      	movs	r2, #2
 8005240:	4013      	ands	r3, r2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d11d      	bne.n	8005282 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2203      	movs	r2, #3
 800524c:	4252      	negs	r2, r2
 800524e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2203      	movs	r2, #3
 800525e:	4013      	ands	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0018      	movs	r0, r3
 8005266:	f7fb fc25 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 800526a:	e007      	b.n	800527c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	0018      	movs	r0, r3
 8005270:	f000 f8bf 	bl	80053f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0018      	movs	r0, r3
 8005278:	f000 f8c3 	bl	8005402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2204      	movs	r2, #4
 800528a:	4013      	ands	r3, r2
 800528c:	2b04      	cmp	r3, #4
 800528e:	d125      	bne.n	80052dc <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2204      	movs	r2, #4
 8005298:	4013      	ands	r3, r2
 800529a:	2b04      	cmp	r3, #4
 800529c:	d11e      	bne.n	80052dc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2205      	movs	r2, #5
 80052a4:	4252      	negs	r2, r2
 80052a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	23c0      	movs	r3, #192	; 0xc0
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4013      	ands	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0018      	movs	r0, r3
 80052c0:	f7fb fbf8 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e007      	b.n	80052d6 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f000 f892 	bl	80053f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 f896 	bl	8005402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2208      	movs	r2, #8
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d124      	bne.n	8005334 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2208      	movs	r2, #8
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d11d      	bne.n	8005334 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2209      	movs	r2, #9
 80052fe:	4252      	negs	r2, r2
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	2203      	movs	r2, #3
 8005310:	4013      	ands	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0018      	movs	r0, r3
 8005318:	f7fb fbcc 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 800531c:	e007      	b.n	800532e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0018      	movs	r0, r3
 8005322:	f000 f866 	bl	80053f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f86a 	bl	8005402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2210      	movs	r2, #16
 800533c:	4013      	ands	r3, r2
 800533e:	2b10      	cmp	r3, #16
 8005340:	d125      	bne.n	800538e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2210      	movs	r2, #16
 800534a:	4013      	ands	r3, r2
 800534c:	2b10      	cmp	r3, #16
 800534e:	d11e      	bne.n	800538e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2211      	movs	r2, #17
 8005356:	4252      	negs	r2, r2
 8005358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2208      	movs	r2, #8
 800535e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	23c0      	movs	r3, #192	; 0xc0
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	0018      	movs	r0, r3
 8005372:	f7fb fb9f 	bl	8000ab4 <HAL_TIM_IC_CaptureCallback>
 8005376:	e007      	b.n	8005388 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0018      	movs	r0, r3
 800537c:	f000 f839 	bl	80053f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 f83d 	bl	8005402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2201      	movs	r2, #1
 8005396:	4013      	ands	r3, r2
 8005398:	2b01      	cmp	r3, #1
 800539a:	d10f      	bne.n	80053bc <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d108      	bne.n	80053bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2202      	movs	r2, #2
 80053b0:	4252      	negs	r2, r2
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7fb fba8 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2240      	movs	r2, #64	; 0x40
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d10f      	bne.n	80053ea <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2240      	movs	r2, #64	; 0x40
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d108      	bne.n	80053ea <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2241      	movs	r2, #65	; 0x41
 80053de:	4252      	negs	r2, r2
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f814 	bl	8005412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b002      	add	sp, #8
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b002      	add	sp, #8
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b002      	add	sp, #8
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	46bd      	mov	sp, r7
 800541e:	b002      	add	sp, #8
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  return htim->State;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2239      	movs	r2, #57	; 0x39
 800542e:	5c9b      	ldrb	r3, [r3, r2]
 8005430:	b2db      	uxtb	r3, r3
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	b002      	add	sp, #8
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2239      	movs	r2, #57	; 0x39
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	b2db      	uxtb	r3, r3
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	2380      	movs	r3, #128	; 0x80
 8005468:	05db      	lsls	r3, r3, #23
 800546a:	429a      	cmp	r2, r3
 800546c:	d00b      	beq.n	8005486 <TIM_Base_SetConfig+0x32>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a23      	ldr	r2, [pc, #140]	; (8005500 <TIM_Base_SetConfig+0xac>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_Base_SetConfig+0x32>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <TIM_Base_SetConfig+0xb0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_Base_SetConfig+0x32>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a21      	ldr	r2, [pc, #132]	; (8005508 <TIM_Base_SetConfig+0xb4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d108      	bne.n	8005498 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2270      	movs	r2, #112	; 0x70
 800548a:	4393      	bics	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	05db      	lsls	r3, r3, #23
 800549e:	429a      	cmp	r2, r3
 80054a0:	d00b      	beq.n	80054ba <TIM_Base_SetConfig+0x66>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <TIM_Base_SetConfig+0xac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <TIM_Base_SetConfig+0x66>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <TIM_Base_SetConfig+0xb0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_Base_SetConfig+0x66>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <TIM_Base_SetConfig+0xb4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <TIM_Base_SetConfig+0xb8>)
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2280      	movs	r2, #128	; 0x80
 80054d0:	4393      	bics	r3, r2
 80054d2:	001a      	movs	r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	615a      	str	r2, [r3, #20]
}
 80054f8:	46c0      	nop			; (mov r8, r8)
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b004      	add	sp, #16
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40000400 	.word	0x40000400
 8005504:	40010800 	.word	0x40010800
 8005508:	40011400 	.word	0x40011400
 800550c:	fffffcff 	.word	0xfffffcff

08005510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	221f      	movs	r2, #31
 8005520:	4013      	ands	r3, r2
 8005522:	2201      	movs	r2, #1
 8005524:	409a      	lsls	r2, r3
 8005526:	0013      	movs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	43d2      	mvns	r2, r2
 8005532:	401a      	ands	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1a      	ldr	r2, [r3, #32]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	211f      	movs	r1, #31
 8005540:	400b      	ands	r3, r1
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4099      	lsls	r1, r3
 8005546:	000b      	movs	r3, r1
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b006      	add	sp, #24
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2238      	movs	r2, #56	; 0x38
 8005566:	5c9b      	ldrb	r3, [r3, r2]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e047      	b.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2238      	movs	r2, #56	; 0x38
 8005574:	2101      	movs	r1, #1
 8005576:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2239      	movs	r2, #57	; 0x39
 800557c:	2102      	movs	r1, #2
 800557e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2270      	movs	r2, #112	; 0x70
 8005594:	4393      	bics	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	2380      	movs	r3, #128	; 0x80
 80055b0:	05db      	lsls	r3, r3, #23
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d00e      	beq.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d004      	beq.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a10      	ldr	r2, [pc, #64]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10c      	bne.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	4393      	bics	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2239      	movs	r2, #57	; 0x39
 80055f2:	2101      	movs	r1, #1
 80055f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2238      	movs	r2, #56	; 0x38
 80055fa:	2100      	movs	r1, #0
 80055fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	0018      	movs	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	b004      	add	sp, #16
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40000400 	.word	0x40000400
 800560c:	40010800 	.word	0x40010800
 8005610:	40011400 	.word	0x40011400

08005614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e044      	b.n	80056b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2274      	movs	r2, #116	; 0x74
 8005632:	2100      	movs	r1, #0
 8005634:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f7fd fb95 	bl	8002d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2224      	movs	r2, #36	; 0x24
 8005642:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2101      	movs	r1, #1
 8005650:	438a      	bics	r2, r1
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0018      	movs	r0, r3
 8005658:	f000 fc36 	bl	8005ec8 <UART_SetConfig>
 800565c:	0003      	movs	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e024      	b.n	80056b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	0018      	movs	r0, r3
 8005672:	f000 fec9 	bl	8006408 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	490d      	ldr	r1, [pc, #52]	; (80056b8 <HAL_UART_Init+0xa4>)
 8005682:	400a      	ands	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	212a      	movs	r1, #42	; 0x2a
 8005692:	438a      	bics	r2, r1
 8005694:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2101      	movs	r1, #1
 80056a2:	430a      	orrs	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 ff61 	bl	8006570 <UART_CheckIdleState>
 80056ae:	0003      	movs	r3, r0
}
 80056b0:	0018      	movs	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b002      	add	sp, #8
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	ffffb7ff 	.word	0xffffb7ff

080056bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	1dbb      	adds	r3, r7, #6
 80056ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d000      	beq.n	80056d6 <HAL_UART_Transmit+0x1a>
 80056d4:	e095      	b.n	8005802 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_UART_Transmit+0x28>
 80056dc:	1dbb      	adds	r3, r7, #6
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e08d      	b.n	8005804 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	015b      	lsls	r3, r3, #5
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d109      	bne.n	8005708 <HAL_UART_Transmit+0x4c>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2201      	movs	r2, #1
 8005700:	4013      	ands	r3, r2
 8005702:	d001      	beq.n	8005708 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e07d      	b.n	8005804 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2274      	movs	r2, #116	; 0x74
 800570c:	5c9b      	ldrb	r3, [r3, r2]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_UART_Transmit+0x5a>
 8005712:	2302      	movs	r3, #2
 8005714:	e076      	b.n	8005804 <HAL_UART_Transmit+0x148>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2274      	movs	r2, #116	; 0x74
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	2100      	movs	r1, #0
 8005724:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2221      	movs	r2, #33	; 0x21
 800572a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800572c:	f7fd fbf8 	bl	8002f20 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1dba      	adds	r2, r7, #6
 8005738:	2150      	movs	r1, #80	; 0x50
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1dba      	adds	r2, r7, #6
 8005742:	2152      	movs	r1, #82	; 0x52
 8005744:	8812      	ldrh	r2, [r2, #0]
 8005746:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	015b      	lsls	r3, r3, #5
 8005750:	429a      	cmp	r2, r3
 8005752:	d108      	bne.n	8005766 <HAL_UART_Transmit+0xaa>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800575c:	2300      	movs	r3, #0
 800575e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	61bb      	str	r3, [r7, #24]
 8005764:	e003      	b.n	800576e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2274      	movs	r2, #116	; 0x74
 8005772:	2100      	movs	r1, #0
 8005774:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005776:	e02c      	b.n	80057d2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	0013      	movs	r3, r2
 8005782:	2200      	movs	r2, #0
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	f000 ff3b 	bl	8006600 <UART_WaitOnFlagUntilTimeout>
 800578a:	1e03      	subs	r3, r0, #0
 800578c:	d001      	beq.n	8005792 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e038      	b.n	8005804 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	001a      	movs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	05d2      	lsls	r2, r2, #23
 80057a4:	0dd2      	lsrs	r2, r2, #23
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	3302      	adds	r3, #2
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e007      	b.n	80057c0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	781a      	ldrb	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2252      	movs	r2, #82	; 0x52
 80057c4:	5a9b      	ldrh	r3, [r3, r2]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b299      	uxth	r1, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2252      	movs	r2, #82	; 0x52
 80057d0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2252      	movs	r2, #82	; 0x52
 80057d6:	5a9b      	ldrh	r3, [r3, r2]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1cc      	bne.n	8005778 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	0013      	movs	r3, r2
 80057e8:	2200      	movs	r2, #0
 80057ea:	2140      	movs	r1, #64	; 0x40
 80057ec:	f000 ff08 	bl	8006600 <UART_WaitOnFlagUntilTimeout>
 80057f0:	1e03      	subs	r3, r0, #0
 80057f2:	d001      	beq.n	80057f8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e005      	b.n	8005804 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	e000      	b.n	8005804 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
  }
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b008      	add	sp, #32
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	1dbb      	adds	r3, r7, #6
 8005818:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581e:	2b20      	cmp	r3, #32
 8005820:	d155      	bne.n	80058ce <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_UART_Receive_IT+0x24>
 8005828:	1dbb      	adds	r3, r7, #6
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e04d      	b.n	80058d0 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	015b      	lsls	r3, r3, #5
 800583c:	429a      	cmp	r2, r3
 800583e:	d109      	bne.n	8005854 <HAL_UART_Receive_IT+0x48>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d105      	bne.n	8005854 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2201      	movs	r2, #1
 800584c:	4013      	ands	r3, r2
 800584e:	d001      	beq.n	8005854 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e03d      	b.n	80058d0 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2274      	movs	r2, #116	; 0x74
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_UART_Receive_IT+0x56>
 800585e:	2302      	movs	r3, #2
 8005860:	e036      	b.n	80058d0 <HAL_UART_Receive_IT+0xc4>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2274      	movs	r2, #116	; 0x74
 8005866:	2101      	movs	r1, #1
 8005868:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_UART_Receive_IT+0xcc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d020      	beq.n	80058bc <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	041b      	lsls	r3, r3, #16
 8005884:	4013      	ands	r3, r2
 8005886:	d019      	beq.n	80058bc <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005888:	f3ef 8310 	mrs	r3, PRIMASK
 800588c:	613b      	str	r3, [r7, #16]
  return(result);
 800588e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	2301      	movs	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	04c9      	lsls	r1, r1, #19
 80058ac:	430a      	orrs	r2, r1
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f383 8810 	msr	PRIMASK, r3
}
 80058ba:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058bc:	1dbb      	adds	r3, r7, #6
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 ff5f 	bl	8006788 <UART_Start_Receive_IT>
 80058ca:	0003      	movs	r3, r0
 80058cc:	e000      	b.n	80058d0 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b008      	add	sp, #32
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40004800 	.word	0x40004800

080058dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b0ab      	sub	sp, #172	; 0xac
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	22a4      	movs	r2, #164	; 0xa4
 80058ec:	18b9      	adds	r1, r7, r2
 80058ee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	20a0      	movs	r0, #160	; 0xa0
 80058f8:	1839      	adds	r1, r7, r0
 80058fa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	219c      	movs	r1, #156	; 0x9c
 8005904:	1879      	adds	r1, r7, r1
 8005906:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005908:	0011      	movs	r1, r2
 800590a:	18bb      	adds	r3, r7, r2
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a99      	ldr	r2, [pc, #612]	; (8005b74 <HAL_UART_IRQHandler+0x298>)
 8005910:	4013      	ands	r3, r2
 8005912:	2298      	movs	r2, #152	; 0x98
 8005914:	18bc      	adds	r4, r7, r2
 8005916:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005918:	18bb      	adds	r3, r7, r2
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d114      	bne.n	800594a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005920:	187b      	adds	r3, r7, r1
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2220      	movs	r2, #32
 8005926:	4013      	ands	r3, r2
 8005928:	d00f      	beq.n	800594a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800592a:	183b      	adds	r3, r7, r0
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2220      	movs	r2, #32
 8005930:	4013      	ands	r3, r2
 8005932:	d00a      	beq.n	800594a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005938:	2b00      	cmp	r3, #0
 800593a:	d100      	bne.n	800593e <HAL_UART_IRQHandler+0x62>
 800593c:	e298      	b.n	8005e70 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	0010      	movs	r0, r2
 8005946:	4798      	blx	r3
      }
      return;
 8005948:	e292      	b.n	8005e70 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800594a:	2398      	movs	r3, #152	; 0x98
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d100      	bne.n	8005956 <HAL_UART_IRQHandler+0x7a>
 8005954:	e114      	b.n	8005b80 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005956:	239c      	movs	r3, #156	; 0x9c
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2201      	movs	r2, #1
 800595e:	4013      	ands	r3, r2
 8005960:	d106      	bne.n	8005970 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005962:	23a0      	movs	r3, #160	; 0xa0
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a83      	ldr	r2, [pc, #524]	; (8005b78 <HAL_UART_IRQHandler+0x29c>)
 800596a:	4013      	ands	r3, r2
 800596c:	d100      	bne.n	8005970 <HAL_UART_IRQHandler+0x94>
 800596e:	e107      	b.n	8005b80 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005970:	23a4      	movs	r3, #164	; 0xa4
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2201      	movs	r2, #1
 8005978:	4013      	ands	r3, r2
 800597a:	d012      	beq.n	80059a2 <HAL_UART_IRQHandler+0xc6>
 800597c:	23a0      	movs	r3, #160	; 0xa0
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	2380      	movs	r3, #128	; 0x80
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4013      	ands	r3, r2
 8005988:	d00b      	beq.n	80059a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	589b      	ldr	r3, [r3, r2]
 8005998:	2201      	movs	r2, #1
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2180      	movs	r1, #128	; 0x80
 80059a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a2:	23a4      	movs	r3, #164	; 0xa4
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2202      	movs	r2, #2
 80059aa:	4013      	ands	r3, r2
 80059ac:	d011      	beq.n	80059d2 <HAL_UART_IRQHandler+0xf6>
 80059ae:	239c      	movs	r3, #156	; 0x9c
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	d00b      	beq.n	80059d2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2202      	movs	r2, #2
 80059c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2280      	movs	r2, #128	; 0x80
 80059c6:	589b      	ldr	r3, [r3, r2]
 80059c8:	2204      	movs	r2, #4
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d2:	23a4      	movs	r3, #164	; 0xa4
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2204      	movs	r2, #4
 80059da:	4013      	ands	r3, r2
 80059dc:	d011      	beq.n	8005a02 <HAL_UART_IRQHandler+0x126>
 80059de:	239c      	movs	r3, #156	; 0x9c
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2201      	movs	r2, #1
 80059e6:	4013      	ands	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2204      	movs	r2, #4
 80059f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2280      	movs	r2, #128	; 0x80
 80059f6:	589b      	ldr	r3, [r3, r2]
 80059f8:	2202      	movs	r2, #2
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2180      	movs	r1, #128	; 0x80
 8005a00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a02:	23a4      	movs	r3, #164	; 0xa4
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d017      	beq.n	8005a3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a0e:	23a0      	movs	r3, #160	; 0xa0
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2220      	movs	r2, #32
 8005a16:	4013      	ands	r3, r2
 8005a18:	d105      	bne.n	8005a26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a1a:	239c      	movs	r3, #156	; 0x9c
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2201      	movs	r2, #1
 8005a22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a24:	d00b      	beq.n	8005a3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	589b      	ldr	r3, [r3, r2]
 8005a34:	2208      	movs	r2, #8
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a3e:	23a4      	movs	r3, #164	; 0xa4
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_UART_IRQHandler+0x198>
 8005a4c:	23a0      	movs	r3, #160	; 0xa0
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	04db      	lsls	r3, r3, #19
 8005a56:	4013      	ands	r3, r2
 8005a58:	d00c      	beq.n	8005a74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	0112      	lsls	r2, r2, #4
 8005a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	589b      	ldr	r3, [r3, r2]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2180      	movs	r1, #128	; 0x80
 8005a72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2280      	movs	r2, #128	; 0x80
 8005a78:	589b      	ldr	r3, [r3, r2]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d100      	bne.n	8005a80 <HAL_UART_IRQHandler+0x1a4>
 8005a7e:	e1f9      	b.n	8005e74 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a80:	23a4      	movs	r3, #164	; 0xa4
 8005a82:	18fb      	adds	r3, r7, r3
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2220      	movs	r2, #32
 8005a88:	4013      	ands	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a8c:	23a0      	movs	r3, #160	; 0xa0
 8005a8e:	18fb      	adds	r3, r7, r3
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2220      	movs	r2, #32
 8005a94:	4013      	ands	r3, r2
 8005a96:	d008      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d004      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	0010      	movs	r0, r2
 8005aa8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2280      	movs	r2, #128	; 0x80
 8005aae:	589b      	ldr	r3, [r3, r2]
 8005ab0:	2194      	movs	r1, #148	; 0x94
 8005ab2:	187a      	adds	r2, r7, r1
 8005ab4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2240      	movs	r2, #64	; 0x40
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d004      	beq.n	8005ace <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2228      	movs	r2, #40	; 0x28
 8005aca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005acc:	d047      	beq.n	8005b5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f000 ff09 	bl	80068e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2240      	movs	r2, #64	; 0x40
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b40      	cmp	r3, #64	; 0x40
 8005ae2:	d137      	bne.n	8005b54 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aec:	2090      	movs	r0, #144	; 0x90
 8005aee:	183a      	adds	r2, r7, r0
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	2301      	movs	r3, #1
 8005af4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af8:	f383 8810 	msr	PRIMASK, r3
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2140      	movs	r1, #64	; 0x40
 8005b0a:	438a      	bics	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b16:	f383 8810 	msr	PRIMASK, r3
}
 8005b1a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d012      	beq.n	8005b4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <HAL_UART_IRQHandler+0x2a0>)
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7fd fb41 	bl	80031b8 <HAL_DMA_Abort_IT>
 8005b36:	1e03      	subs	r3, r0, #0
 8005b38:	d01a      	beq.n	8005b70 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	0018      	movs	r0, r3
 8005b46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e012      	b.n	8005b70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f000 f9a7 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b52:	e00d      	b.n	8005b70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0018      	movs	r0, r3
 8005b58:	f000 f9a2 	bl	8005ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e008      	b.n	8005b70 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 f99d 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b6e:	e181      	b.n	8005e74 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b70:	46c0      	nop			; (mov r8, r8)
    return;
 8005b72:	e17f      	b.n	8005e74 <HAL_UART_IRQHandler+0x598>
 8005b74:	0000080f 	.word	0x0000080f
 8005b78:	04000120 	.word	0x04000120
 8005b7c:	080069ad 	.word	0x080069ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d000      	beq.n	8005b8a <HAL_UART_IRQHandler+0x2ae>
 8005b88:	e133      	b.n	8005df2 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8a:	23a4      	movs	r3, #164	; 0xa4
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	4013      	ands	r3, r2
 8005b94:	d100      	bne.n	8005b98 <HAL_UART_IRQHandler+0x2bc>
 8005b96:	e12c      	b.n	8005df2 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b98:	23a0      	movs	r3, #160	; 0xa0
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2210      	movs	r2, #16
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x2ca>
 8005ba4:	e125      	b.n	8005df2 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2240      	movs	r2, #64	; 0x40
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d000      	beq.n	8005bbe <HAL_UART_IRQHandler+0x2e2>
 8005bbc:	e09d      	b.n	8005cfa <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	217e      	movs	r1, #126	; 0x7e
 8005bc8:	187b      	adds	r3, r7, r1
 8005bca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005bcc:	187b      	adds	r3, r7, r1
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d100      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x2fa>
 8005bd4:	e150      	b.n	8005e78 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2258      	movs	r2, #88	; 0x58
 8005bda:	5a9b      	ldrh	r3, [r3, r2]
 8005bdc:	187a      	adds	r2, r7, r1
 8005bde:	8812      	ldrh	r2, [r2, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d300      	bcc.n	8005be6 <HAL_UART_IRQHandler+0x30a>
 8005be4:	e148      	b.n	8005e78 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	187a      	adds	r2, r7, r1
 8005bea:	215a      	movs	r1, #90	; 0x5a
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d16e      	bne.n	8005cdc <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c06:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c08:	2301      	movs	r3, #1
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	499a      	ldr	r1, [pc, #616]	; (8005e88 <HAL_UART_IRQHandler+0x5ac>)
 8005c20:	400a      	ands	r2, r1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c30:	f3ef 8310 	mrs	r3, PRIMASK
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	677b      	str	r3, [r7, #116]	; 0x74
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c40:	f383 8810 	msr	PRIMASK, r3
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2101      	movs	r1, #1
 8005c52:	438a      	bics	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c58:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5c:	f383 8810 	msr	PRIMASK, r3
}
 8005c60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c62:	f3ef 8310 	mrs	r3, PRIMASK
 8005c66:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c72:	f383 8810 	msr	PRIMASK, r3
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2140      	movs	r1, #64	; 0x40
 8005c84:	438a      	bics	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8e:	f383 8810 	msr	PRIMASK, r3
}
 8005c92:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005caa:	2301      	movs	r3, #1
 8005cac:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb0:	f383 8810 	msr	PRIMASK, r3
}
 8005cb4:	46c0      	nop			; (mov r8, r8)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2110      	movs	r1, #16
 8005cc2:	438a      	bics	r2, r1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ccc:	f383 8810 	msr	PRIMASK, r3
}
 8005cd0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f7fd fa2e 	bl	8003138 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2258      	movs	r2, #88	; 0x58
 8005ce0:	5a9a      	ldrh	r2, [r3, r2]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	215a      	movs	r1, #90	; 0x5a
 8005ce6:	5a5b      	ldrh	r3, [r3, r1]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0011      	movs	r1, r2
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 f8dc 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cf8:	e0be      	b.n	8005e78 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2258      	movs	r2, #88	; 0x58
 8005cfe:	5a99      	ldrh	r1, [r3, r2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	225a      	movs	r2, #90	; 0x5a
 8005d04:	5a9b      	ldrh	r3, [r3, r2]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	208e      	movs	r0, #142	; 0x8e
 8005d0a:	183b      	adds	r3, r7, r0
 8005d0c:	1a8a      	subs	r2, r1, r2
 8005d0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	225a      	movs	r2, #90	; 0x5a
 8005d14:	5a9b      	ldrh	r3, [r3, r2]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d100      	bne.n	8005d1e <HAL_UART_IRQHandler+0x442>
 8005d1c:	e0ae      	b.n	8005e7c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8005d1e:	183b      	adds	r3, r7, r0
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d100      	bne.n	8005d28 <HAL_UART_IRQHandler+0x44c>
 8005d26:	e0a9      	b.n	8005e7c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d28:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d30:	2488      	movs	r4, #136	; 0x88
 8005d32:	193a      	adds	r2, r7, r4
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	2301      	movs	r3, #1
 8005d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f383 8810 	msr	PRIMASK, r3
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	494f      	ldr	r1, [pc, #316]	; (8005e8c <HAL_UART_IRQHandler+0x5b0>)
 8005d4e:	400a      	ands	r2, r1
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	193b      	adds	r3, r7, r4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f383 8810 	msr	PRIMASK, r3
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d60:	f3ef 8310 	mrs	r3, PRIMASK
 8005d64:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d68:	2484      	movs	r4, #132	; 0x84
 8005d6a:	193a      	adds	r2, r7, r4
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f383 8810 	msr	PRIMASK, r3
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2101      	movs	r1, #1
 8005d86:	438a      	bics	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	f383 8810 	msr	PRIMASK, r3
}
 8005d96:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005daa:	f3ef 8310 	mrs	r3, PRIMASK
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db2:	2480      	movs	r4, #128	; 0x80
 8005db4:	193a      	adds	r2, r7, r4
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	2301      	movs	r3, #1
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	f383 8810 	msr	PRIMASK, r3
}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2110      	movs	r1, #16
 8005dd0:	438a      	bics	r2, r1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	193b      	adds	r3, r7, r4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	f383 8810 	msr	PRIMASK, r3
}
 8005de0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de2:	183b      	adds	r3, r7, r0
 8005de4:	881a      	ldrh	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	0011      	movs	r1, r2
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f860 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df0:	e044      	b.n	8005e7c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005df2:	23a4      	movs	r3, #164	; 0xa4
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	035b      	lsls	r3, r3, #13
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d010      	beq.n	8005e22 <HAL_UART_IRQHandler+0x546>
 8005e00:	239c      	movs	r3, #156	; 0x9c
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	03db      	lsls	r3, r3, #15
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d009      	beq.n	8005e22 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	0352      	lsls	r2, r2, #13
 8005e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 ff70 	bl	8006d00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e20:	e02f      	b.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e22:	23a4      	movs	r3, #164	; 0xa4
 8005e24:	18fb      	adds	r3, r7, r3
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d00f      	beq.n	8005e4e <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e2e:	23a0      	movs	r3, #160	; 0xa0
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	4013      	ands	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01e      	beq.n	8005e80 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	0010      	movs	r0, r2
 8005e4a:	4798      	blx	r3
    }
    return;
 8005e4c:	e018      	b.n	8005e80 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e4e:	23a4      	movs	r3, #164	; 0xa4
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2240      	movs	r2, #64	; 0x40
 8005e56:	4013      	ands	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
 8005e5a:	23a0      	movs	r3, #160	; 0xa0
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2240      	movs	r2, #64	; 0x40
 8005e62:	4013      	ands	r3, r2
 8005e64:	d00d      	beq.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 fdb6 	bl	80069da <UART_EndTransmit_IT>
    return;
 8005e6e:	e008      	b.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	e006      	b.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
    return;
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	e004      	b.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	e002      	b.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005e7c:	46c0      	nop			; (mov r8, r8)
 8005e7e:	e000      	b.n	8005e82 <HAL_UART_IRQHandler+0x5a6>
    return;
 8005e80:	46c0      	nop			; (mov r8, r8)
  }

}
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b02b      	add	sp, #172	; 0xac
 8005e86:	bd90      	pop	{r4, r7, pc}
 8005e88:	fffffeff 	.word	0xfffffeff
 8005e8c:	fffffedf 	.word	0xfffffedf

08005e90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e98:	46c0      	nop			; (mov r8, r8)
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b002      	add	sp, #8
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b002      	add	sp, #8
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	000a      	movs	r2, r1
 8005eba:	1cbb      	adds	r3, r7, #2
 8005ebc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b002      	add	sp, #8
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec8:	b5b0      	push	{r4, r5, r7, lr}
 8005eca:	b08e      	sub	sp, #56	; 0x38
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed0:	231a      	movs	r3, #26
 8005ed2:	2218      	movs	r2, #24
 8005ed4:	189b      	adds	r3, r3, r2
 8005ed6:	19db      	adds	r3, r3, r7
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4ac3      	ldr	r2, [pc, #780]	; (8006208 <UART_SetConfig+0x340>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	0019      	movs	r1, r3
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f06:	430a      	orrs	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4abe      	ldr	r2, [pc, #760]	; (800620c <UART_SetConfig+0x344>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4ab8      	ldr	r2, [pc, #736]	; (8006210 <UART_SetConfig+0x348>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4ab4      	ldr	r2, [pc, #720]	; (8006214 <UART_SetConfig+0x34c>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	0019      	movs	r1, r3
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4ab0      	ldr	r2, [pc, #704]	; (8006218 <UART_SetConfig+0x350>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d131      	bne.n	8005fc0 <UART_SetConfig+0xf8>
 8005f5c:	4baf      	ldr	r3, [pc, #700]	; (800621c <UART_SetConfig+0x354>)
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f60:	2203      	movs	r2, #3
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d01d      	beq.n	8005fa4 <UART_SetConfig+0xdc>
 8005f68:	d823      	bhi.n	8005fb2 <UART_SetConfig+0xea>
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d00c      	beq.n	8005f88 <UART_SetConfig+0xc0>
 8005f6e:	d820      	bhi.n	8005fb2 <UART_SetConfig+0xea>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <UART_SetConfig+0xb2>
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d00e      	beq.n	8005f96 <UART_SetConfig+0xce>
 8005f78:	e01b      	b.n	8005fb2 <UART_SetConfig+0xea>
 8005f7a:	231b      	movs	r3, #27
 8005f7c:	2218      	movs	r2, #24
 8005f7e:	189b      	adds	r3, r3, r2
 8005f80:	19db      	adds	r3, r3, r7
 8005f82:	2201      	movs	r2, #1
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e0b4      	b.n	80060f2 <UART_SetConfig+0x22a>
 8005f88:	231b      	movs	r3, #27
 8005f8a:	2218      	movs	r2, #24
 8005f8c:	189b      	adds	r3, r3, r2
 8005f8e:	19db      	adds	r3, r3, r7
 8005f90:	2202      	movs	r2, #2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e0ad      	b.n	80060f2 <UART_SetConfig+0x22a>
 8005f96:	231b      	movs	r3, #27
 8005f98:	2218      	movs	r2, #24
 8005f9a:	189b      	adds	r3, r3, r2
 8005f9c:	19db      	adds	r3, r3, r7
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e0a6      	b.n	80060f2 <UART_SetConfig+0x22a>
 8005fa4:	231b      	movs	r3, #27
 8005fa6:	2218      	movs	r2, #24
 8005fa8:	189b      	adds	r3, r3, r2
 8005faa:	19db      	adds	r3, r3, r7
 8005fac:	2208      	movs	r2, #8
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e09f      	b.n	80060f2 <UART_SetConfig+0x22a>
 8005fb2:	231b      	movs	r3, #27
 8005fb4:	2218      	movs	r2, #24
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	19db      	adds	r3, r3, r7
 8005fba:	2210      	movs	r2, #16
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e098      	b.n	80060f2 <UART_SetConfig+0x22a>
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a96      	ldr	r2, [pc, #600]	; (8006220 <UART_SetConfig+0x358>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d131      	bne.n	800602e <UART_SetConfig+0x166>
 8005fca:	4b94      	ldr	r3, [pc, #592]	; (800621c <UART_SetConfig+0x354>)
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	220c      	movs	r2, #12
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	2b0c      	cmp	r3, #12
 8005fd4:	d01d      	beq.n	8006012 <UART_SetConfig+0x14a>
 8005fd6:	d823      	bhi.n	8006020 <UART_SetConfig+0x158>
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d00c      	beq.n	8005ff6 <UART_SetConfig+0x12e>
 8005fdc:	d820      	bhi.n	8006020 <UART_SetConfig+0x158>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <UART_SetConfig+0x120>
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d00e      	beq.n	8006004 <UART_SetConfig+0x13c>
 8005fe6:	e01b      	b.n	8006020 <UART_SetConfig+0x158>
 8005fe8:	231b      	movs	r3, #27
 8005fea:	2218      	movs	r2, #24
 8005fec:	189b      	adds	r3, r3, r2
 8005fee:	19db      	adds	r3, r3, r7
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	e07d      	b.n	80060f2 <UART_SetConfig+0x22a>
 8005ff6:	231b      	movs	r3, #27
 8005ff8:	2218      	movs	r2, #24
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	19db      	adds	r3, r3, r7
 8005ffe:	2202      	movs	r2, #2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e076      	b.n	80060f2 <UART_SetConfig+0x22a>
 8006004:	231b      	movs	r3, #27
 8006006:	2218      	movs	r2, #24
 8006008:	189b      	adds	r3, r3, r2
 800600a:	19db      	adds	r3, r3, r7
 800600c:	2204      	movs	r2, #4
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	e06f      	b.n	80060f2 <UART_SetConfig+0x22a>
 8006012:	231b      	movs	r3, #27
 8006014:	2218      	movs	r2, #24
 8006016:	189b      	adds	r3, r3, r2
 8006018:	19db      	adds	r3, r3, r7
 800601a:	2208      	movs	r2, #8
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e068      	b.n	80060f2 <UART_SetConfig+0x22a>
 8006020:	231b      	movs	r3, #27
 8006022:	2218      	movs	r2, #24
 8006024:	189b      	adds	r3, r3, r2
 8006026:	19db      	adds	r3, r3, r7
 8006028:	2210      	movs	r2, #16
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e061      	b.n	80060f2 <UART_SetConfig+0x22a>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a7c      	ldr	r2, [pc, #496]	; (8006224 <UART_SetConfig+0x35c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d106      	bne.n	8006046 <UART_SetConfig+0x17e>
 8006038:	231b      	movs	r3, #27
 800603a:	2218      	movs	r2, #24
 800603c:	189b      	adds	r3, r3, r2
 800603e:	19db      	adds	r3, r3, r7
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e055      	b.n	80060f2 <UART_SetConfig+0x22a>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a77      	ldr	r2, [pc, #476]	; (8006228 <UART_SetConfig+0x360>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d106      	bne.n	800605e <UART_SetConfig+0x196>
 8006050:	231b      	movs	r3, #27
 8006052:	2218      	movs	r2, #24
 8006054:	189b      	adds	r3, r3, r2
 8006056:	19db      	adds	r3, r3, r7
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e049      	b.n	80060f2 <UART_SetConfig+0x22a>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6b      	ldr	r2, [pc, #428]	; (8006210 <UART_SetConfig+0x348>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d13e      	bne.n	80060e6 <UART_SetConfig+0x21e>
 8006068:	4b6c      	ldr	r3, [pc, #432]	; (800621c <UART_SetConfig+0x354>)
 800606a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800606c:	23c0      	movs	r3, #192	; 0xc0
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	4013      	ands	r3, r2
 8006072:	22c0      	movs	r2, #192	; 0xc0
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	4293      	cmp	r3, r2
 8006078:	d027      	beq.n	80060ca <UART_SetConfig+0x202>
 800607a:	22c0      	movs	r2, #192	; 0xc0
 800607c:	0112      	lsls	r2, r2, #4
 800607e:	4293      	cmp	r3, r2
 8006080:	d82a      	bhi.n	80060d8 <UART_SetConfig+0x210>
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	0112      	lsls	r2, r2, #4
 8006086:	4293      	cmp	r3, r2
 8006088:	d011      	beq.n	80060ae <UART_SetConfig+0x1e6>
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	0112      	lsls	r2, r2, #4
 800608e:	4293      	cmp	r3, r2
 8006090:	d822      	bhi.n	80060d8 <UART_SetConfig+0x210>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <UART_SetConfig+0x1d8>
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	00d2      	lsls	r2, r2, #3
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <UART_SetConfig+0x1f4>
 800609e:	e01b      	b.n	80060d8 <UART_SetConfig+0x210>
 80060a0:	231b      	movs	r3, #27
 80060a2:	2218      	movs	r2, #24
 80060a4:	189b      	adds	r3, r3, r2
 80060a6:	19db      	adds	r3, r3, r7
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e021      	b.n	80060f2 <UART_SetConfig+0x22a>
 80060ae:	231b      	movs	r3, #27
 80060b0:	2218      	movs	r2, #24
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	19db      	adds	r3, r3, r7
 80060b6:	2202      	movs	r2, #2
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e01a      	b.n	80060f2 <UART_SetConfig+0x22a>
 80060bc:	231b      	movs	r3, #27
 80060be:	2218      	movs	r2, #24
 80060c0:	189b      	adds	r3, r3, r2
 80060c2:	19db      	adds	r3, r3, r7
 80060c4:	2204      	movs	r2, #4
 80060c6:	701a      	strb	r2, [r3, #0]
 80060c8:	e013      	b.n	80060f2 <UART_SetConfig+0x22a>
 80060ca:	231b      	movs	r3, #27
 80060cc:	2218      	movs	r2, #24
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	19db      	adds	r3, r3, r7
 80060d2:	2208      	movs	r2, #8
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e00c      	b.n	80060f2 <UART_SetConfig+0x22a>
 80060d8:	231b      	movs	r3, #27
 80060da:	2218      	movs	r2, #24
 80060dc:	189b      	adds	r3, r3, r2
 80060de:	19db      	adds	r3, r3, r7
 80060e0:	2210      	movs	r2, #16
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e005      	b.n	80060f2 <UART_SetConfig+0x22a>
 80060e6:	231b      	movs	r3, #27
 80060e8:	2218      	movs	r2, #24
 80060ea:	189b      	adds	r3, r3, r2
 80060ec:	19db      	adds	r3, r3, r7
 80060ee:	2210      	movs	r2, #16
 80060f0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a46      	ldr	r2, [pc, #280]	; (8006210 <UART_SetConfig+0x348>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d000      	beq.n	80060fe <UART_SetConfig+0x236>
 80060fc:	e09a      	b.n	8006234 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060fe:	231b      	movs	r3, #27
 8006100:	2218      	movs	r2, #24
 8006102:	189b      	adds	r3, r3, r2
 8006104:	19db      	adds	r3, r3, r7
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d01d      	beq.n	8006148 <UART_SetConfig+0x280>
 800610c:	dc20      	bgt.n	8006150 <UART_SetConfig+0x288>
 800610e:	2b04      	cmp	r3, #4
 8006110:	d015      	beq.n	800613e <UART_SetConfig+0x276>
 8006112:	dc1d      	bgt.n	8006150 <UART_SetConfig+0x288>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <UART_SetConfig+0x256>
 8006118:	2b02      	cmp	r3, #2
 800611a:	d005      	beq.n	8006128 <UART_SetConfig+0x260>
 800611c:	e018      	b.n	8006150 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611e:	f7fe fcf3 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8006122:	0003      	movs	r3, r0
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006126:	e01c      	b.n	8006162 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006128:	4b3c      	ldr	r3, [pc, #240]	; (800621c <UART_SetConfig+0x354>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2210      	movs	r2, #16
 800612e:	4013      	ands	r3, r2
 8006130:	d002      	beq.n	8006138 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006132:	4b3e      	ldr	r3, [pc, #248]	; (800622c <UART_SetConfig+0x364>)
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006136:	e014      	b.n	8006162 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006138:	4b3d      	ldr	r3, [pc, #244]	; (8006230 <UART_SetConfig+0x368>)
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800613c:	e011      	b.n	8006162 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe fc33 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8006142:	0003      	movs	r3, r0
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006146:	e00c      	b.n	8006162 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800614e:	e008      	b.n	8006162 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006154:	231a      	movs	r3, #26
 8006156:	2218      	movs	r2, #24
 8006158:	189b      	adds	r3, r3, r2
 800615a:	19db      	adds	r3, r3, r7
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
        break;
 8006160:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d100      	bne.n	800616a <UART_SetConfig+0x2a2>
 8006168:	e134      	b.n	80063d4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	0013      	movs	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	189b      	adds	r3, r3, r2
 8006174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006176:	429a      	cmp	r2, r3
 8006178:	d305      	bcc.n	8006186 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006182:	429a      	cmp	r2, r3
 8006184:	d906      	bls.n	8006194 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006186:	231a      	movs	r3, #26
 8006188:	2218      	movs	r2, #24
 800618a:	189b      	adds	r3, r3, r2
 800618c:	19db      	adds	r3, r3, r7
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e11f      	b.n	80063d4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	6939      	ldr	r1, [r7, #16]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	000b      	movs	r3, r1
 80061a2:	0e1b      	lsrs	r3, r3, #24
 80061a4:	0010      	movs	r0, r2
 80061a6:	0205      	lsls	r5, r0, #8
 80061a8:	431d      	orrs	r5, r3
 80061aa:	000b      	movs	r3, r1
 80061ac:	021c      	lsls	r4, r3, #8
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	68b8      	ldr	r0, [r7, #8]
 80061bc:	68f9      	ldr	r1, [r7, #12]
 80061be:	1900      	adds	r0, r0, r4
 80061c0:	4169      	adcs	r1, r5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	2300      	movs	r3, #0
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f7fa f922 	bl	8000418 <__aeabi_uldivmod>
 80061d4:	0002      	movs	r2, r0
 80061d6:	000b      	movs	r3, r1
 80061d8:	0013      	movs	r3, r2
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061de:	23c0      	movs	r3, #192	; 0xc0
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d309      	bcc.n	80061fa <UART_SetConfig+0x332>
 80061e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	035b      	lsls	r3, r3, #13
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d204      	bcs.n	80061fa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e0ec      	b.n	80063d4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80061fa:	231a      	movs	r3, #26
 80061fc:	2218      	movs	r2, #24
 80061fe:	189b      	adds	r3, r3, r2
 8006200:	19db      	adds	r3, r3, r7
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e0e5      	b.n	80063d4 <UART_SetConfig+0x50c>
 8006208:	efff69f3 	.word	0xefff69f3
 800620c:	ffffcfff 	.word	0xffffcfff
 8006210:	40004800 	.word	0x40004800
 8006214:	fffff4ff 	.word	0xfffff4ff
 8006218:	40013800 	.word	0x40013800
 800621c:	40021000 	.word	0x40021000
 8006220:	40004400 	.word	0x40004400
 8006224:	40004c00 	.word	0x40004c00
 8006228:	40005000 	.word	0x40005000
 800622c:	003d0900 	.word	0x003d0900
 8006230:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	429a      	cmp	r2, r3
 800623e:	d000      	beq.n	8006242 <UART_SetConfig+0x37a>
 8006240:	e071      	b.n	8006326 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006242:	231b      	movs	r3, #27
 8006244:	2218      	movs	r2, #24
 8006246:	189b      	adds	r3, r3, r2
 8006248:	19db      	adds	r3, r3, r7
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d822      	bhi.n	8006296 <UART_SetConfig+0x3ce>
 8006250:	009a      	lsls	r2, r3, #2
 8006252:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <UART_SetConfig+0x52c>)
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625a:	f7fe fc55 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 800625e:	0003      	movs	r3, r0
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006262:	e021      	b.n	80062a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006264:	f7fe fc66 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 8006268:	0003      	movs	r3, r0
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800626c:	e01c      	b.n	80062a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800626e:	4b62      	ldr	r3, [pc, #392]	; (80063f8 <UART_SetConfig+0x530>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2210      	movs	r2, #16
 8006274:	4013      	ands	r3, r2
 8006276:	d002      	beq.n	800627e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006278:	4b60      	ldr	r3, [pc, #384]	; (80063fc <UART_SetConfig+0x534>)
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800627c:	e014      	b.n	80062a8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800627e:	4b60      	ldr	r3, [pc, #384]	; (8006400 <UART_SetConfig+0x538>)
 8006280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006282:	e011      	b.n	80062a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006284:	f7fe fb90 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8006288:	0003      	movs	r3, r0
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800628c:	e00c      	b.n	80062a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006294:	e008      	b.n	80062a8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800629a:	231a      	movs	r3, #26
 800629c:	2218      	movs	r2, #24
 800629e:	189b      	adds	r3, r3, r2
 80062a0:	19db      	adds	r3, r3, r7
 80062a2:	2201      	movs	r2, #1
 80062a4:	701a      	strb	r2, [r3, #0]
        break;
 80062a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d100      	bne.n	80062b0 <UART_SetConfig+0x3e8>
 80062ae:	e091      	b.n	80063d4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	005a      	lsls	r2, r3, #1
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	18d2      	adds	r2, r2, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	0019      	movs	r1, r3
 80062c2:	0010      	movs	r0, r2
 80062c4:	f7f9 ff32 	bl	800012c <__udivsi3>
 80062c8:	0003      	movs	r3, r0
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	2b0f      	cmp	r3, #15
 80062d2:	d921      	bls.n	8006318 <UART_SetConfig+0x450>
 80062d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	025b      	lsls	r3, r3, #9
 80062da:	429a      	cmp	r2, r3
 80062dc:	d21c      	bcs.n	8006318 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	200e      	movs	r0, #14
 80062e4:	2418      	movs	r4, #24
 80062e6:	1903      	adds	r3, r0, r4
 80062e8:	19db      	adds	r3, r3, r7
 80062ea:	210f      	movs	r1, #15
 80062ec:	438a      	bics	r2, r1
 80062ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2207      	movs	r2, #7
 80062f8:	4013      	ands	r3, r2
 80062fa:	b299      	uxth	r1, r3
 80062fc:	1903      	adds	r3, r0, r4
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	1902      	adds	r2, r0, r4
 8006302:	19d2      	adds	r2, r2, r7
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	1902      	adds	r2, r0, r4
 8006310:	19d2      	adds	r2, r2, r7
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	60da      	str	r2, [r3, #12]
 8006316:	e05d      	b.n	80063d4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006318:	231a      	movs	r3, #26
 800631a:	2218      	movs	r2, #24
 800631c:	189b      	adds	r3, r3, r2
 800631e:	19db      	adds	r3, r3, r7
 8006320:	2201      	movs	r2, #1
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e056      	b.n	80063d4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006326:	231b      	movs	r3, #27
 8006328:	2218      	movs	r2, #24
 800632a:	189b      	adds	r3, r3, r2
 800632c:	19db      	adds	r3, r3, r7
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d822      	bhi.n	800637a <UART_SetConfig+0x4b2>
 8006334:	009a      	lsls	r2, r3, #2
 8006336:	4b33      	ldr	r3, [pc, #204]	; (8006404 <UART_SetConfig+0x53c>)
 8006338:	18d3      	adds	r3, r2, r3
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800633e:	f7fe fbe3 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8006342:	0003      	movs	r3, r0
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006346:	e021      	b.n	800638c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006348:	f7fe fbf4 	bl	8004b34 <HAL_RCC_GetPCLK2Freq>
 800634c:	0003      	movs	r3, r0
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006350:	e01c      	b.n	800638c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006352:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <UART_SetConfig+0x530>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2210      	movs	r2, #16
 8006358:	4013      	ands	r3, r2
 800635a:	d002      	beq.n	8006362 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800635c:	4b27      	ldr	r3, [pc, #156]	; (80063fc <UART_SetConfig+0x534>)
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006360:	e014      	b.n	800638c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8006362:	4b27      	ldr	r3, [pc, #156]	; (8006400 <UART_SetConfig+0x538>)
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006366:	e011      	b.n	800638c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006368:	f7fe fb1e 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 800636c:	0003      	movs	r3, r0
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006370:	e00c      	b.n	800638c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006378:	e008      	b.n	800638c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800637e:	231a      	movs	r3, #26
 8006380:	2218      	movs	r2, #24
 8006382:	189b      	adds	r3, r3, r2
 8006384:	19db      	adds	r3, r3, r7
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
        break;
 800638a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d020      	beq.n	80063d4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	085a      	lsrs	r2, r3, #1
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	18d2      	adds	r2, r2, r3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	0019      	movs	r1, r3
 80063a2:	0010      	movs	r0, r2
 80063a4:	f7f9 fec2 	bl	800012c <__udivsi3>
 80063a8:	0003      	movs	r3, r0
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	2b0f      	cmp	r3, #15
 80063b2:	d909      	bls.n	80063c8 <UART_SetConfig+0x500>
 80063b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	025b      	lsls	r3, r3, #9
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d204      	bcs.n	80063c8 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	60da      	str	r2, [r3, #12]
 80063c6:	e005      	b.n	80063d4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80063c8:	231a      	movs	r3, #26
 80063ca:	2218      	movs	r2, #24
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	19db      	adds	r3, r3, r7
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2200      	movs	r2, #0
 80063d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2200      	movs	r2, #0
 80063de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063e0:	231a      	movs	r3, #26
 80063e2:	2218      	movs	r2, #24
 80063e4:	189b      	adds	r3, r3, r2
 80063e6:	19db      	adds	r3, r3, r7
 80063e8:	781b      	ldrb	r3, [r3, #0]
}
 80063ea:	0018      	movs	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b00e      	add	sp, #56	; 0x38
 80063f0:	bdb0      	pop	{r4, r5, r7, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	0800a120 	.word	0x0800a120
 80063f8:	40021000 	.word	0x40021000
 80063fc:	003d0900 	.word	0x003d0900
 8006400:	00f42400 	.word	0x00f42400
 8006404:	0800a144 	.word	0x0800a144

08006408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2201      	movs	r2, #1
 8006416:	4013      	ands	r3, r2
 8006418:	d00b      	beq.n	8006432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a4a      	ldr	r2, [pc, #296]	; (800654c <UART_AdvFeatureConfig+0x144>)
 8006422:	4013      	ands	r3, r2
 8006424:	0019      	movs	r1, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2202      	movs	r2, #2
 8006438:	4013      	ands	r3, r2
 800643a:	d00b      	beq.n	8006454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4a43      	ldr	r2, [pc, #268]	; (8006550 <UART_AdvFeatureConfig+0x148>)
 8006444:	4013      	ands	r3, r2
 8006446:	0019      	movs	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	2204      	movs	r2, #4
 800645a:	4013      	ands	r3, r2
 800645c:	d00b      	beq.n	8006476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a3b      	ldr	r2, [pc, #236]	; (8006554 <UART_AdvFeatureConfig+0x14c>)
 8006466:	4013      	ands	r3, r2
 8006468:	0019      	movs	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2208      	movs	r2, #8
 800647c:	4013      	ands	r3, r2
 800647e:	d00b      	beq.n	8006498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4a34      	ldr	r2, [pc, #208]	; (8006558 <UART_AdvFeatureConfig+0x150>)
 8006488:	4013      	ands	r3, r2
 800648a:	0019      	movs	r1, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2210      	movs	r2, #16
 800649e:	4013      	ands	r3, r2
 80064a0:	d00b      	beq.n	80064ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <UART_AdvFeatureConfig+0x154>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2220      	movs	r2, #32
 80064c0:	4013      	ands	r3, r2
 80064c2:	d00b      	beq.n	80064dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	4a25      	ldr	r2, [pc, #148]	; (8006560 <UART_AdvFeatureConfig+0x158>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	0019      	movs	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	2240      	movs	r2, #64	; 0x40
 80064e2:	4013      	ands	r3, r2
 80064e4:	d01d      	beq.n	8006522 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <UART_AdvFeatureConfig+0x15c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	0019      	movs	r1, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	035b      	lsls	r3, r3, #13
 8006506:	429a      	cmp	r2, r3
 8006508:	d10b      	bne.n	8006522 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a15      	ldr	r2, [pc, #84]	; (8006568 <UART_AdvFeatureConfig+0x160>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2280      	movs	r2, #128	; 0x80
 8006528:	4013      	ands	r3, r2
 800652a:	d00b      	beq.n	8006544 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a0e      	ldr	r2, [pc, #56]	; (800656c <UART_AdvFeatureConfig+0x164>)
 8006534:	4013      	ands	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}
 800654c:	fffdffff 	.word	0xfffdffff
 8006550:	fffeffff 	.word	0xfffeffff
 8006554:	fffbffff 	.word	0xfffbffff
 8006558:	ffff7fff 	.word	0xffff7fff
 800655c:	ffffefff 	.word	0xffffefff
 8006560:	ffffdfff 	.word	0xffffdfff
 8006564:	ffefffff 	.word	0xffefffff
 8006568:	ff9fffff 	.word	0xff9fffff
 800656c:	fff7ffff 	.word	0xfff7ffff

08006570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2280      	movs	r2, #128	; 0x80
 800657c:	2100      	movs	r1, #0
 800657e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006580:	f7fc fcce 	bl	8002f20 <HAL_GetTick>
 8006584:	0003      	movs	r3, r0
 8006586:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2208      	movs	r2, #8
 8006590:	4013      	ands	r3, r2
 8006592:	2b08      	cmp	r3, #8
 8006594:	d10c      	bne.n	80065b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2280      	movs	r2, #128	; 0x80
 800659a:	0391      	lsls	r1, r2, #14
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4a17      	ldr	r2, [pc, #92]	; (80065fc <UART_CheckIdleState+0x8c>)
 80065a0:	9200      	str	r2, [sp, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f000 f82c 	bl	8006600 <UART_WaitOnFlagUntilTimeout>
 80065a8:	1e03      	subs	r3, r0, #0
 80065aa:	d001      	beq.n	80065b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e021      	b.n	80065f4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2204      	movs	r2, #4
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d10c      	bne.n	80065d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2280      	movs	r2, #128	; 0x80
 80065c2:	03d1      	lsls	r1, r2, #15
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <UART_CheckIdleState+0x8c>)
 80065c8:	9200      	str	r2, [sp, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f000 f818 	bl	8006600 <UART_WaitOnFlagUntilTimeout>
 80065d0:	1e03      	subs	r3, r0, #0
 80065d2:	d001      	beq.n	80065d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e00d      	b.n	80065f4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2274      	movs	r2, #116	; 0x74
 80065ee:	2100      	movs	r1, #0
 80065f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	0018      	movs	r0, r3
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b004      	add	sp, #16
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	01ffffff 	.word	0x01ffffff

08006600 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b094      	sub	sp, #80	; 0x50
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	1dfb      	adds	r3, r7, #7
 800660e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006610:	e0a3      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006614:	3301      	adds	r3, #1
 8006616:	d100      	bne.n	800661a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006618:	e09f      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661a:	f7fc fc81 	bl	8002f20 <HAL_GetTick>
 800661e:	0002      	movs	r2, r0
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <UART_WaitOnFlagUntilTimeout+0x30>
 800662a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800662c:	2b00      	cmp	r3, #0
 800662e:	d13d      	bne.n	80066ac <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006630:	f3ef 8310 	mrs	r3, PRIMASK
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006638:	647b      	str	r3, [r7, #68]	; 0x44
 800663a:	2301      	movs	r3, #1
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	494c      	ldr	r1, [pc, #304]	; (8006784 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006652:	400a      	ands	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006658:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006662:	f3ef 8310 	mrs	r3, PRIMASK
 8006666:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	643b      	str	r3, [r7, #64]	; 0x40
 800666c:	2301      	movs	r3, #1
 800666e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006672:	f383 8810 	msr	PRIMASK, r3
}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2101      	movs	r1, #1
 8006684:	438a      	bics	r2, r1
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	f383 8810 	msr	PRIMASK, r3
}
 8006692:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2274      	movs	r2, #116	; 0x74
 80066a4:	2100      	movs	r1, #0
 80066a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e067      	b.n	800677c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	4013      	ands	r3, r2
 80066b6:	d050      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69da      	ldr	r2, [r3, #28]
 80066be:	2380      	movs	r3, #128	; 0x80
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	401a      	ands	r2, r3
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d146      	bne.n	800675a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2280      	movs	r2, #128	; 0x80
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	613b      	str	r3, [r7, #16]
  return(result);
 80066dc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4923      	ldr	r1, [pc, #140]	; (8006784 <UART_WaitOnFlagUntilTimeout+0x184>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006708:	f3ef 8310 	mrs	r3, PRIMASK
 800670c:	61fb      	str	r3, [r7, #28]
  return(result);
 800670e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	64bb      	str	r3, [r7, #72]	; 0x48
 8006712:	2301      	movs	r3, #1
 8006714:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f383 8810 	msr	PRIMASK, r3
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2101      	movs	r1, #1
 800672a:	438a      	bics	r2, r1
 800672c:	609a      	str	r2, [r3, #8]
 800672e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	f383 8810 	msr	PRIMASK, r3
}
 8006738:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2280      	movs	r2, #128	; 0x80
 800674a:	2120      	movs	r1, #32
 800674c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2274      	movs	r2, #116	; 0x74
 8006752:	2100      	movs	r1, #0
 8006754:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e010      	b.n	800677c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	425a      	negs	r2, r3
 800676a:	4153      	adcs	r3, r2
 800676c:	b2db      	uxtb	r3, r3
 800676e:	001a      	movs	r2, r3
 8006770:	1dfb      	adds	r3, r7, #7
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d100      	bne.n	800677a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006778:	e74b      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	0018      	movs	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	b014      	add	sp, #80	; 0x50
 8006782:	bd80      	pop	{r7, pc}
 8006784:	fffffe5f 	.word	0xfffffe5f

08006788 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08c      	sub	sp, #48	; 0x30
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	1dbb      	adds	r3, r7, #6
 8006794:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1dba      	adds	r2, r7, #6
 80067a0:	2158      	movs	r1, #88	; 0x58
 80067a2:	8812      	ldrh	r2, [r2, #0]
 80067a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1dba      	adds	r2, r7, #6
 80067aa:	215a      	movs	r1, #90	; 0x5a
 80067ac:	8812      	ldrh	r2, [r2, #0]
 80067ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	015b      	lsls	r3, r3, #5
 80067be:	429a      	cmp	r2, r3
 80067c0:	d10d      	bne.n	80067de <UART_Start_Receive_IT+0x56>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <UART_Start_Receive_IT+0x4c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	225c      	movs	r2, #92	; 0x5c
 80067ce:	4943      	ldr	r1, [pc, #268]	; (80068dc <UART_Start_Receive_IT+0x154>)
 80067d0:	5299      	strh	r1, [r3, r2]
 80067d2:	e02e      	b.n	8006832 <UART_Start_Receive_IT+0xaa>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	225c      	movs	r2, #92	; 0x5c
 80067d8:	21ff      	movs	r1, #255	; 0xff
 80067da:	5299      	strh	r1, [r3, r2]
 80067dc:	e029      	b.n	8006832 <UART_Start_Receive_IT+0xaa>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <UART_Start_Receive_IT+0x7a>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <UART_Start_Receive_IT+0x70>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	225c      	movs	r2, #92	; 0x5c
 80067f2:	21ff      	movs	r1, #255	; 0xff
 80067f4:	5299      	strh	r1, [r3, r2]
 80067f6:	e01c      	b.n	8006832 <UART_Start_Receive_IT+0xaa>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	225c      	movs	r2, #92	; 0x5c
 80067fc:	217f      	movs	r1, #127	; 0x7f
 80067fe:	5299      	strh	r1, [r3, r2]
 8006800:	e017      	b.n	8006832 <UART_Start_Receive_IT+0xaa>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	2380      	movs	r3, #128	; 0x80
 8006808:	055b      	lsls	r3, r3, #21
 800680a:	429a      	cmp	r2, r3
 800680c:	d10d      	bne.n	800682a <UART_Start_Receive_IT+0xa2>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <UART_Start_Receive_IT+0x98>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	225c      	movs	r2, #92	; 0x5c
 800681a:	217f      	movs	r1, #127	; 0x7f
 800681c:	5299      	strh	r1, [r3, r2]
 800681e:	e008      	b.n	8006832 <UART_Start_Receive_IT+0xaa>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	225c      	movs	r2, #92	; 0x5c
 8006824:	213f      	movs	r1, #63	; 0x3f
 8006826:	5299      	strh	r1, [r3, r2]
 8006828:	e003      	b.n	8006832 <UART_Start_Receive_IT+0xaa>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	225c      	movs	r2, #92	; 0x5c
 800682e:	2100      	movs	r1, #0
 8006830:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2280      	movs	r2, #128	; 0x80
 8006836:	2100      	movs	r1, #0
 8006838:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2222      	movs	r2, #34	; 0x22
 800683e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006840:	f3ef 8310 	mrs	r3, PRIMASK
 8006844:	61fb      	str	r3, [r7, #28]
  return(result);
 8006846:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684a:	2301      	movs	r3, #1
 800684c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	46c0      	nop			; (mov r8, r8)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2101      	movs	r1, #1
 8006862:	430a      	orrs	r2, r1
 8006864:	609a      	str	r2, [r3, #8]
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	f383 8810 	msr	PRIMASK, r3
}
 8006870:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	2380      	movs	r3, #128	; 0x80
 8006878:	015b      	lsls	r3, r3, #5
 800687a:	429a      	cmp	r2, r3
 800687c:	d107      	bne.n	800688e <UART_Start_Receive_IT+0x106>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <UART_Start_Receive_IT+0x158>)
 800688a:	665a      	str	r2, [r3, #100]	; 0x64
 800688c:	e002      	b.n	8006894 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a14      	ldr	r2, [pc, #80]	; (80068e4 <UART_Start_Receive_IT+0x15c>)
 8006892:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2274      	movs	r2, #116	; 0x74
 8006898:	2100      	movs	r1, #0
 800689a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689c:	f3ef 8310 	mrs	r3, PRIMASK
 80068a0:	613b      	str	r3, [r7, #16]
  return(result);
 80068a2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a6:	2301      	movs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f383 8810 	msr	PRIMASK, r3
}
 80068b0:	46c0      	nop			; (mov r8, r8)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2190      	movs	r1, #144	; 0x90
 80068be:	0049      	lsls	r1, r1, #1
 80068c0:	430a      	orrs	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f383 8810 	msr	PRIMASK, r3
}
 80068ce:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	0018      	movs	r0, r3
 80068d4:	46bd      	mov	sp, r7
 80068d6:	b00c      	add	sp, #48	; 0x30
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	000001ff 	.word	0x000001ff
 80068e0:	08006b99 	.word	0x08006b99
 80068e4:	08006a31 	.word	0x08006a31

080068e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	; 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f0:	f3ef 8310 	mrs	r3, PRIMASK
 80068f4:	617b      	str	r3, [r7, #20]
  return(result);
 80068f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
 80068fa:	2301      	movs	r3, #1
 80068fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f383 8810 	msr	PRIMASK, r3
}
 8006904:	46c0      	nop			; (mov r8, r8)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4925      	ldr	r1, [pc, #148]	; (80069a8 <UART_EndRxTransfer+0xc0>)
 8006912:	400a      	ands	r2, r1
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f383 8810 	msr	PRIMASK, r3
}
 8006920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006922:	f3ef 8310 	mrs	r3, PRIMASK
 8006926:	623b      	str	r3, [r7, #32]
  return(result);
 8006928:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	633b      	str	r3, [r7, #48]	; 0x30
 800692c:	2301      	movs	r3, #1
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2101      	movs	r1, #1
 8006944:	438a      	bics	r2, r1
 8006946:	609a      	str	r2, [r3, #8]
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	f383 8810 	msr	PRIMASK, r3
}
 8006952:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	2b01      	cmp	r3, #1
 800695a:	d118      	bne.n	800698e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800695c:	f3ef 8310 	mrs	r3, PRIMASK
 8006960:	60bb      	str	r3, [r7, #8]
  return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006966:	2301      	movs	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f383 8810 	msr	PRIMASK, r3
}
 8006970:	46c0      	nop			; (mov r8, r8)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2110      	movs	r1, #16
 800697e:	438a      	bics	r2, r1
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f383 8810 	msr	PRIMASK, r3
}
 800698c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b00e      	add	sp, #56	; 0x38
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	fffffedf 	.word	0xfffffedf

080069ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	225a      	movs	r2, #90	; 0x5a
 80069be:	2100      	movs	r1, #0
 80069c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2252      	movs	r2, #82	; 0x52
 80069c6:	2100      	movs	r1, #0
 80069c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7ff fa67 	bl	8005ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b004      	add	sp, #16
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e2:	f3ef 8310 	mrs	r3, PRIMASK
 80069e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80069e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	2301      	movs	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f383 8810 	msr	PRIMASK, r3
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2140      	movs	r1, #64	; 0x40
 8006a04:	438a      	bics	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f383 8810 	msr	PRIMASK, r3
}
 8006a12:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f7ff fa34 	bl	8005e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b006      	add	sp, #24
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b090      	sub	sp, #64	; 0x40
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a38:	203e      	movs	r0, #62	; 0x3e
 8006a3a:	183b      	adds	r3, r7, r0
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	215c      	movs	r1, #92	; 0x5c
 8006a40:	5a52      	ldrh	r2, [r2, r1]
 8006a42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a48:	2b22      	cmp	r3, #34	; 0x22
 8006a4a:	d000      	beq.n	8006a4e <UART_RxISR_8BIT+0x1e>
 8006a4c:	e095      	b.n	8006b7a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a54:	213c      	movs	r1, #60	; 0x3c
 8006a56:	187b      	adds	r3, r7, r1
 8006a58:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a5a:	187b      	adds	r3, r7, r1
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	183b      	adds	r3, r7, r0
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b2d9      	uxtb	r1, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	400a      	ands	r2, r1
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	225a      	movs	r2, #90	; 0x5a
 8006a7e:	5a9b      	ldrh	r3, [r3, r2]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b299      	uxth	r1, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	225a      	movs	r2, #90	; 0x5a
 8006a8a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	225a      	movs	r2, #90	; 0x5a
 8006a90:	5a9b      	ldrh	r3, [r3, r2]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d178      	bne.n	8006b8a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a98:	f3ef 8310 	mrs	r3, PRIMASK
 8006a9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	f383 8810 	msr	PRIMASK, r3
}
 8006aac:	46c0      	nop			; (mov r8, r8)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4936      	ldr	r1, [pc, #216]	; (8006b94 <UART_RxISR_8BIT+0x164>)
 8006aba:	400a      	ands	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f383 8810 	msr	PRIMASK, r3
}
 8006ac8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aca:	f3ef 8310 	mrs	r3, PRIMASK
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	f383 8810 	msr	PRIMASK, r3
}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2101      	movs	r1, #1
 8006aec:	438a      	bics	r2, r1
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	f383 8810 	msr	PRIMASK, r3
}
 8006afa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d12f      	bne.n	8006b70 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b16:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b1c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b20:	2301      	movs	r3, #1
 8006b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f383 8810 	msr	PRIMASK, r3
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2110      	movs	r1, #16
 8006b38:	438a      	bics	r2, r1
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f383 8810 	msr	PRIMASK, r3
}
 8006b46:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d103      	bne.n	8006b5e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2258      	movs	r2, #88	; 0x58
 8006b62:	5a9a      	ldrh	r2, [r3, r2]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	0011      	movs	r1, r2
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7ff f9a1 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b6e:	e00c      	b.n	8006b8a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7f9 ff7a 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8006b78:	e007      	b.n	8006b8a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2108      	movs	r1, #8
 8006b86:	430a      	orrs	r2, r1
 8006b88:	619a      	str	r2, [r3, #24]
}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b010      	add	sp, #64	; 0x40
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	fffffedf 	.word	0xfffffedf

08006b98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b090      	sub	sp, #64	; 0x40
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ba0:	203e      	movs	r0, #62	; 0x3e
 8006ba2:	183b      	adds	r3, r7, r0
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	215c      	movs	r1, #92	; 0x5c
 8006ba8:	5a52      	ldrh	r2, [r2, r1]
 8006baa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bb0:	2b22      	cmp	r3, #34	; 0x22
 8006bb2:	d000      	beq.n	8006bb6 <UART_RxISR_16BIT+0x1e>
 8006bb4:	e095      	b.n	8006ce2 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbc:	213c      	movs	r1, #60	; 0x3c
 8006bbe:	187b      	adds	r3, r7, r1
 8006bc0:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	183a      	adds	r2, r7, r0
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	8812      	ldrh	r2, [r2, #0]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	1c9a      	adds	r2, r3, #2
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	225a      	movs	r2, #90	; 0x5a
 8006be6:	5a9b      	ldrh	r3, [r3, r2]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b299      	uxth	r1, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	225a      	movs	r2, #90	; 0x5a
 8006bf2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	225a      	movs	r2, #90	; 0x5a
 8006bf8:	5a9b      	ldrh	r3, [r3, r2]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d178      	bne.n	8006cf2 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c00:	f3ef 8310 	mrs	r3, PRIMASK
 8006c04:	617b      	str	r3, [r7, #20]
  return(result);
 8006c06:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f383 8810 	msr	PRIMASK, r3
}
 8006c14:	46c0      	nop			; (mov r8, r8)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4936      	ldr	r1, [pc, #216]	; (8006cfc <UART_RxISR_16BIT+0x164>)
 8006c22:	400a      	ands	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f383 8810 	msr	PRIMASK, r3
}
 8006c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c32:	f3ef 8310 	mrs	r3, PRIMASK
 8006c36:	623b      	str	r3, [r7, #32]
  return(result);
 8006c38:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2101      	movs	r1, #1
 8006c54:	438a      	bics	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d12f      	bne.n	8006cd8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c82:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c84:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	2301      	movs	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f383 8810 	msr	PRIMASK, r3
}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2110      	movs	r1, #16
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f383 8810 	msr	PRIMASK, r3
}
 8006cae:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	2210      	movs	r2, #16
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d103      	bne.n	8006cc6 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2258      	movs	r2, #88	; 0x58
 8006cca:	5a9a      	ldrh	r2, [r3, r2]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0011      	movs	r1, r2
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7ff f8ed 	bl	8005eb0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cd6:	e00c      	b.n	8006cf2 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7f9 fec6 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8006ce0:	e007      	b.n	8006cf2 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2108      	movs	r1, #8
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	619a      	str	r2, [r3, #24]
}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b010      	add	sp, #64	; 0x40
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	fffffedf 	.word	0xfffffedf

08006d00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d08:	46c0      	nop			; (mov r8, r8)
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b002      	add	sp, #8
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <__errno>:
 8006d10:	4b01      	ldr	r3, [pc, #4]	; (8006d18 <__errno+0x8>)
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	4770      	bx	lr
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	20000130 	.word	0x20000130

08006d1c <__libc_init_array>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	2600      	movs	r6, #0
 8006d20:	4d0c      	ldr	r5, [pc, #48]	; (8006d54 <__libc_init_array+0x38>)
 8006d22:	4c0d      	ldr	r4, [pc, #52]	; (8006d58 <__libc_init_array+0x3c>)
 8006d24:	1b64      	subs	r4, r4, r5
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	42a6      	cmp	r6, r4
 8006d2a:	d109      	bne.n	8006d40 <__libc_init_array+0x24>
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	f000 fc8b 	bl	8007648 <_init>
 8006d32:	4d0a      	ldr	r5, [pc, #40]	; (8006d5c <__libc_init_array+0x40>)
 8006d34:	4c0a      	ldr	r4, [pc, #40]	; (8006d60 <__libc_init_array+0x44>)
 8006d36:	1b64      	subs	r4, r4, r5
 8006d38:	10a4      	asrs	r4, r4, #2
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d105      	bne.n	8006d4a <__libc_init_array+0x2e>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	00b3      	lsls	r3, r6, #2
 8006d42:	58eb      	ldr	r3, [r5, r3]
 8006d44:	4798      	blx	r3
 8006d46:	3601      	adds	r6, #1
 8006d48:	e7ee      	b.n	8006d28 <__libc_init_array+0xc>
 8006d4a:	00b3      	lsls	r3, r6, #2
 8006d4c:	58eb      	ldr	r3, [r5, r3]
 8006d4e:	4798      	blx	r3
 8006d50:	3601      	adds	r6, #1
 8006d52:	e7f2      	b.n	8006d3a <__libc_init_array+0x1e>
 8006d54:	0800a1a4 	.word	0x0800a1a4
 8006d58:	0800a1a4 	.word	0x0800a1a4
 8006d5c:	0800a1a4 	.word	0x0800a1a4
 8006d60:	0800a1a8 	.word	0x0800a1a8

08006d64 <memcpy>:
 8006d64:	2300      	movs	r3, #0
 8006d66:	b510      	push	{r4, lr}
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d100      	bne.n	8006d6e <memcpy+0xa>
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	5ccc      	ldrb	r4, [r1, r3]
 8006d70:	54c4      	strb	r4, [r0, r3]
 8006d72:	3301      	adds	r3, #1
 8006d74:	e7f8      	b.n	8006d68 <memcpy+0x4>

08006d76 <memset>:
 8006d76:	0003      	movs	r3, r0
 8006d78:	1882      	adds	r2, r0, r2
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d100      	bne.n	8006d80 <memset+0xa>
 8006d7e:	4770      	bx	lr
 8006d80:	7019      	strb	r1, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	e7f9      	b.n	8006d7a <memset+0x4>
	...

08006d88 <siprintf>:
 8006d88:	b40e      	push	{r1, r2, r3}
 8006d8a:	b500      	push	{lr}
 8006d8c:	490b      	ldr	r1, [pc, #44]	; (8006dbc <siprintf+0x34>)
 8006d8e:	b09c      	sub	sp, #112	; 0x70
 8006d90:	ab1d      	add	r3, sp, #116	; 0x74
 8006d92:	9002      	str	r0, [sp, #8]
 8006d94:	9006      	str	r0, [sp, #24]
 8006d96:	9107      	str	r1, [sp, #28]
 8006d98:	9104      	str	r1, [sp, #16]
 8006d9a:	4809      	ldr	r0, [pc, #36]	; (8006dc0 <siprintf+0x38>)
 8006d9c:	4909      	ldr	r1, [pc, #36]	; (8006dc4 <siprintf+0x3c>)
 8006d9e:	cb04      	ldmia	r3!, {r2}
 8006da0:	9105      	str	r1, [sp, #20]
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	a902      	add	r1, sp, #8
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	f000 f870 	bl	8006e8c <_svfiprintf_r>
 8006dac:	2300      	movs	r3, #0
 8006dae:	9a02      	ldr	r2, [sp, #8]
 8006db0:	7013      	strb	r3, [r2, #0]
 8006db2:	b01c      	add	sp, #112	; 0x70
 8006db4:	bc08      	pop	{r3}
 8006db6:	b003      	add	sp, #12
 8006db8:	4718      	bx	r3
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	7fffffff 	.word	0x7fffffff
 8006dc0:	20000130 	.word	0x20000130
 8006dc4:	ffff0208 	.word	0xffff0208

08006dc8 <__ssputs_r>:
 8006dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dca:	688e      	ldr	r6, [r1, #8]
 8006dcc:	b085      	sub	sp, #20
 8006dce:	0007      	movs	r7, r0
 8006dd0:	000c      	movs	r4, r1
 8006dd2:	9203      	str	r2, [sp, #12]
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	429e      	cmp	r6, r3
 8006dd8:	d83c      	bhi.n	8006e54 <__ssputs_r+0x8c>
 8006dda:	2390      	movs	r3, #144	; 0x90
 8006ddc:	898a      	ldrh	r2, [r1, #12]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	421a      	tst	r2, r3
 8006de2:	d034      	beq.n	8006e4e <__ssputs_r+0x86>
 8006de4:	6909      	ldr	r1, [r1, #16]
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	6960      	ldr	r0, [r4, #20]
 8006dea:	1a5b      	subs	r3, r3, r1
 8006dec:	9302      	str	r3, [sp, #8]
 8006dee:	2303      	movs	r3, #3
 8006df0:	4343      	muls	r3, r0
 8006df2:	0fdd      	lsrs	r5, r3, #31
 8006df4:	18ed      	adds	r5, r5, r3
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	9802      	ldr	r0, [sp, #8]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	181b      	adds	r3, r3, r0
 8006dfe:	106d      	asrs	r5, r5, #1
 8006e00:	42ab      	cmp	r3, r5
 8006e02:	d900      	bls.n	8006e06 <__ssputs_r+0x3e>
 8006e04:	001d      	movs	r5, r3
 8006e06:	0553      	lsls	r3, r2, #21
 8006e08:	d532      	bpl.n	8006e70 <__ssputs_r+0xa8>
 8006e0a:	0029      	movs	r1, r5
 8006e0c:	0038      	movs	r0, r7
 8006e0e:	f000 fb49 	bl	80074a4 <_malloc_r>
 8006e12:	1e06      	subs	r6, r0, #0
 8006e14:	d109      	bne.n	8006e2a <__ssputs_r+0x62>
 8006e16:	230c      	movs	r3, #12
 8006e18:	603b      	str	r3, [r7, #0]
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	89a2      	ldrh	r2, [r4, #12]
 8006e20:	4240      	negs	r0, r0
 8006e22:	4313      	orrs	r3, r2
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	b005      	add	sp, #20
 8006e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e2a:	9a02      	ldr	r2, [sp, #8]
 8006e2c:	6921      	ldr	r1, [r4, #16]
 8006e2e:	f7ff ff99 	bl	8006d64 <memcpy>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	4a14      	ldr	r2, [pc, #80]	; (8006e88 <__ssputs_r+0xc0>)
 8006e36:	401a      	ands	r2, r3
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	6126      	str	r6, [r4, #16]
 8006e42:	18f6      	adds	r6, r6, r3
 8006e44:	6026      	str	r6, [r4, #0]
 8006e46:	6165      	str	r5, [r4, #20]
 8006e48:	9e01      	ldr	r6, [sp, #4]
 8006e4a:	1aed      	subs	r5, r5, r3
 8006e4c:	60a5      	str	r5, [r4, #8]
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	429e      	cmp	r6, r3
 8006e52:	d900      	bls.n	8006e56 <__ssputs_r+0x8e>
 8006e54:	9e01      	ldr	r6, [sp, #4]
 8006e56:	0032      	movs	r2, r6
 8006e58:	9903      	ldr	r1, [sp, #12]
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	f000 faa3 	bl	80073a6 <memmove>
 8006e60:	68a3      	ldr	r3, [r4, #8]
 8006e62:	2000      	movs	r0, #0
 8006e64:	1b9b      	subs	r3, r3, r6
 8006e66:	60a3      	str	r3, [r4, #8]
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	199e      	adds	r6, r3, r6
 8006e6c:	6026      	str	r6, [r4, #0]
 8006e6e:	e7da      	b.n	8006e26 <__ssputs_r+0x5e>
 8006e70:	002a      	movs	r2, r5
 8006e72:	0038      	movs	r0, r7
 8006e74:	f000 fb8c 	bl	8007590 <_realloc_r>
 8006e78:	1e06      	subs	r6, r0, #0
 8006e7a:	d1e0      	bne.n	8006e3e <__ssputs_r+0x76>
 8006e7c:	0038      	movs	r0, r7
 8006e7e:	6921      	ldr	r1, [r4, #16]
 8006e80:	f000 faa4 	bl	80073cc <_free_r>
 8006e84:	e7c7      	b.n	8006e16 <__ssputs_r+0x4e>
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	fffffb7f 	.word	0xfffffb7f

08006e8c <_svfiprintf_r>:
 8006e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e8e:	b0a1      	sub	sp, #132	; 0x84
 8006e90:	9003      	str	r0, [sp, #12]
 8006e92:	001d      	movs	r5, r3
 8006e94:	898b      	ldrh	r3, [r1, #12]
 8006e96:	000f      	movs	r7, r1
 8006e98:	0016      	movs	r6, r2
 8006e9a:	061b      	lsls	r3, r3, #24
 8006e9c:	d511      	bpl.n	8006ec2 <_svfiprintf_r+0x36>
 8006e9e:	690b      	ldr	r3, [r1, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10e      	bne.n	8006ec2 <_svfiprintf_r+0x36>
 8006ea4:	2140      	movs	r1, #64	; 0x40
 8006ea6:	f000 fafd 	bl	80074a4 <_malloc_r>
 8006eaa:	6038      	str	r0, [r7, #0]
 8006eac:	6138      	str	r0, [r7, #16]
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d105      	bne.n	8006ebe <_svfiprintf_r+0x32>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	9a03      	ldr	r2, [sp, #12]
 8006eb6:	3801      	subs	r0, #1
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	b021      	add	sp, #132	; 0x84
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ebe:	2340      	movs	r3, #64	; 0x40
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	ac08      	add	r4, sp, #32
 8006ec6:	6163      	str	r3, [r4, #20]
 8006ec8:	3320      	adds	r3, #32
 8006eca:	7663      	strb	r3, [r4, #25]
 8006ecc:	3310      	adds	r3, #16
 8006ece:	76a3      	strb	r3, [r4, #26]
 8006ed0:	9507      	str	r5, [sp, #28]
 8006ed2:	0035      	movs	r5, r6
 8006ed4:	782b      	ldrb	r3, [r5, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <_svfiprintf_r+0x52>
 8006eda:	2b25      	cmp	r3, #37	; 0x25
 8006edc:	d147      	bne.n	8006f6e <_svfiprintf_r+0xe2>
 8006ede:	1bab      	subs	r3, r5, r6
 8006ee0:	9305      	str	r3, [sp, #20]
 8006ee2:	42b5      	cmp	r5, r6
 8006ee4:	d00c      	beq.n	8006f00 <_svfiprintf_r+0x74>
 8006ee6:	0032      	movs	r2, r6
 8006ee8:	0039      	movs	r1, r7
 8006eea:	9803      	ldr	r0, [sp, #12]
 8006eec:	f7ff ff6c 	bl	8006dc8 <__ssputs_r>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d100      	bne.n	8006ef6 <_svfiprintf_r+0x6a>
 8006ef4:	e0ae      	b.n	8007054 <_svfiprintf_r+0x1c8>
 8006ef6:	6962      	ldr	r2, [r4, #20]
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	4694      	mov	ip, r2
 8006efc:	4463      	add	r3, ip
 8006efe:	6163      	str	r3, [r4, #20]
 8006f00:	782b      	ldrb	r3, [r5, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d100      	bne.n	8006f08 <_svfiprintf_r+0x7c>
 8006f06:	e0a5      	b.n	8007054 <_svfiprintf_r+0x1c8>
 8006f08:	2201      	movs	r2, #1
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4252      	negs	r2, r2
 8006f0e:	6062      	str	r2, [r4, #4]
 8006f10:	a904      	add	r1, sp, #16
 8006f12:	3254      	adds	r2, #84	; 0x54
 8006f14:	1852      	adds	r2, r2, r1
 8006f16:	1c6e      	adds	r6, r5, #1
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	60e3      	str	r3, [r4, #12]
 8006f1c:	60a3      	str	r3, [r4, #8]
 8006f1e:	7013      	strb	r3, [r2, #0]
 8006f20:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f22:	2205      	movs	r2, #5
 8006f24:	7831      	ldrb	r1, [r6, #0]
 8006f26:	4854      	ldr	r0, [pc, #336]	; (8007078 <_svfiprintf_r+0x1ec>)
 8006f28:	f000 fa32 	bl	8007390 <memchr>
 8006f2c:	1c75      	adds	r5, r6, #1
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d11f      	bne.n	8006f72 <_svfiprintf_r+0xe6>
 8006f32:	6822      	ldr	r2, [r4, #0]
 8006f34:	06d3      	lsls	r3, r2, #27
 8006f36:	d504      	bpl.n	8006f42 <_svfiprintf_r+0xb6>
 8006f38:	2353      	movs	r3, #83	; 0x53
 8006f3a:	a904      	add	r1, sp, #16
 8006f3c:	185b      	adds	r3, r3, r1
 8006f3e:	2120      	movs	r1, #32
 8006f40:	7019      	strb	r1, [r3, #0]
 8006f42:	0713      	lsls	r3, r2, #28
 8006f44:	d504      	bpl.n	8006f50 <_svfiprintf_r+0xc4>
 8006f46:	2353      	movs	r3, #83	; 0x53
 8006f48:	a904      	add	r1, sp, #16
 8006f4a:	185b      	adds	r3, r3, r1
 8006f4c:	212b      	movs	r1, #43	; 0x2b
 8006f4e:	7019      	strb	r1, [r3, #0]
 8006f50:	7833      	ldrb	r3, [r6, #0]
 8006f52:	2b2a      	cmp	r3, #42	; 0x2a
 8006f54:	d016      	beq.n	8006f84 <_svfiprintf_r+0xf8>
 8006f56:	0035      	movs	r5, r6
 8006f58:	2100      	movs	r1, #0
 8006f5a:	200a      	movs	r0, #10
 8006f5c:	68e3      	ldr	r3, [r4, #12]
 8006f5e:	782a      	ldrb	r2, [r5, #0]
 8006f60:	1c6e      	adds	r6, r5, #1
 8006f62:	3a30      	subs	r2, #48	; 0x30
 8006f64:	2a09      	cmp	r2, #9
 8006f66:	d94e      	bls.n	8007006 <_svfiprintf_r+0x17a>
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	d111      	bne.n	8006f90 <_svfiprintf_r+0x104>
 8006f6c:	e017      	b.n	8006f9e <_svfiprintf_r+0x112>
 8006f6e:	3501      	adds	r5, #1
 8006f70:	e7b0      	b.n	8006ed4 <_svfiprintf_r+0x48>
 8006f72:	4b41      	ldr	r3, [pc, #260]	; (8007078 <_svfiprintf_r+0x1ec>)
 8006f74:	6822      	ldr	r2, [r4, #0]
 8006f76:	1ac0      	subs	r0, r0, r3
 8006f78:	2301      	movs	r3, #1
 8006f7a:	4083      	lsls	r3, r0
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	002e      	movs	r6, r5
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	e7ce      	b.n	8006f22 <_svfiprintf_r+0x96>
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	1d19      	adds	r1, r3, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	9107      	str	r1, [sp, #28]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	db01      	blt.n	8006f94 <_svfiprintf_r+0x108>
 8006f90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f92:	e004      	b.n	8006f9e <_svfiprintf_r+0x112>
 8006f94:	425b      	negs	r3, r3
 8006f96:	60e3      	str	r3, [r4, #12]
 8006f98:	2302      	movs	r3, #2
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	782b      	ldrb	r3, [r5, #0]
 8006fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fa2:	d10a      	bne.n	8006fba <_svfiprintf_r+0x12e>
 8006fa4:	786b      	ldrb	r3, [r5, #1]
 8006fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fa8:	d135      	bne.n	8007016 <_svfiprintf_r+0x18a>
 8006faa:	9b07      	ldr	r3, [sp, #28]
 8006fac:	3502      	adds	r5, #2
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	9207      	str	r2, [sp, #28]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	db2b      	blt.n	8007010 <_svfiprintf_r+0x184>
 8006fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fba:	4e30      	ldr	r6, [pc, #192]	; (800707c <_svfiprintf_r+0x1f0>)
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	0030      	movs	r0, r6
 8006fc0:	7829      	ldrb	r1, [r5, #0]
 8006fc2:	f000 f9e5 	bl	8007390 <memchr>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d006      	beq.n	8006fd8 <_svfiprintf_r+0x14c>
 8006fca:	2340      	movs	r3, #64	; 0x40
 8006fcc:	1b80      	subs	r0, r0, r6
 8006fce:	4083      	lsls	r3, r0
 8006fd0:	6822      	ldr	r2, [r4, #0]
 8006fd2:	3501      	adds	r5, #1
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	7829      	ldrb	r1, [r5, #0]
 8006fda:	2206      	movs	r2, #6
 8006fdc:	4828      	ldr	r0, [pc, #160]	; (8007080 <_svfiprintf_r+0x1f4>)
 8006fde:	1c6e      	adds	r6, r5, #1
 8006fe0:	7621      	strb	r1, [r4, #24]
 8006fe2:	f000 f9d5 	bl	8007390 <memchr>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d03c      	beq.n	8007064 <_svfiprintf_r+0x1d8>
 8006fea:	4b26      	ldr	r3, [pc, #152]	; (8007084 <_svfiprintf_r+0x1f8>)
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d125      	bne.n	800703c <_svfiprintf_r+0x1b0>
 8006ff0:	2207      	movs	r2, #7
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	3307      	adds	r3, #7
 8006ff6:	4393      	bics	r3, r2
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	9307      	str	r3, [sp, #28]
 8006ffc:	6963      	ldr	r3, [r4, #20]
 8006ffe:	9a04      	ldr	r2, [sp, #16]
 8007000:	189b      	adds	r3, r3, r2
 8007002:	6163      	str	r3, [r4, #20]
 8007004:	e765      	b.n	8006ed2 <_svfiprintf_r+0x46>
 8007006:	4343      	muls	r3, r0
 8007008:	0035      	movs	r5, r6
 800700a:	2101      	movs	r1, #1
 800700c:	189b      	adds	r3, r3, r2
 800700e:	e7a6      	b.n	8006f5e <_svfiprintf_r+0xd2>
 8007010:	2301      	movs	r3, #1
 8007012:	425b      	negs	r3, r3
 8007014:	e7d0      	b.n	8006fb8 <_svfiprintf_r+0x12c>
 8007016:	2300      	movs	r3, #0
 8007018:	200a      	movs	r0, #10
 800701a:	001a      	movs	r2, r3
 800701c:	3501      	adds	r5, #1
 800701e:	6063      	str	r3, [r4, #4]
 8007020:	7829      	ldrb	r1, [r5, #0]
 8007022:	1c6e      	adds	r6, r5, #1
 8007024:	3930      	subs	r1, #48	; 0x30
 8007026:	2909      	cmp	r1, #9
 8007028:	d903      	bls.n	8007032 <_svfiprintf_r+0x1a6>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0c5      	beq.n	8006fba <_svfiprintf_r+0x12e>
 800702e:	9209      	str	r2, [sp, #36]	; 0x24
 8007030:	e7c3      	b.n	8006fba <_svfiprintf_r+0x12e>
 8007032:	4342      	muls	r2, r0
 8007034:	0035      	movs	r5, r6
 8007036:	2301      	movs	r3, #1
 8007038:	1852      	adds	r2, r2, r1
 800703a:	e7f1      	b.n	8007020 <_svfiprintf_r+0x194>
 800703c:	ab07      	add	r3, sp, #28
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	003a      	movs	r2, r7
 8007042:	0021      	movs	r1, r4
 8007044:	4b10      	ldr	r3, [pc, #64]	; (8007088 <_svfiprintf_r+0x1fc>)
 8007046:	9803      	ldr	r0, [sp, #12]
 8007048:	e000      	b.n	800704c <_svfiprintf_r+0x1c0>
 800704a:	bf00      	nop
 800704c:	9004      	str	r0, [sp, #16]
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	3301      	adds	r3, #1
 8007052:	d1d3      	bne.n	8006ffc <_svfiprintf_r+0x170>
 8007054:	89bb      	ldrh	r3, [r7, #12]
 8007056:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007058:	065b      	lsls	r3, r3, #25
 800705a:	d400      	bmi.n	800705e <_svfiprintf_r+0x1d2>
 800705c:	e72d      	b.n	8006eba <_svfiprintf_r+0x2e>
 800705e:	2001      	movs	r0, #1
 8007060:	4240      	negs	r0, r0
 8007062:	e72a      	b.n	8006eba <_svfiprintf_r+0x2e>
 8007064:	ab07      	add	r3, sp, #28
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	003a      	movs	r2, r7
 800706a:	0021      	movs	r1, r4
 800706c:	4b06      	ldr	r3, [pc, #24]	; (8007088 <_svfiprintf_r+0x1fc>)
 800706e:	9803      	ldr	r0, [sp, #12]
 8007070:	f000 f87c 	bl	800716c <_printf_i>
 8007074:	e7ea      	b.n	800704c <_svfiprintf_r+0x1c0>
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	0800a168 	.word	0x0800a168
 800707c:	0800a16e 	.word	0x0800a16e
 8007080:	0800a172 	.word	0x0800a172
 8007084:	00000000 	.word	0x00000000
 8007088:	08006dc9 	.word	0x08006dc9

0800708c <_printf_common>:
 800708c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800708e:	0015      	movs	r5, r2
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	688a      	ldr	r2, [r1, #8]
 8007094:	690b      	ldr	r3, [r1, #16]
 8007096:	000c      	movs	r4, r1
 8007098:	9000      	str	r0, [sp, #0]
 800709a:	4293      	cmp	r3, r2
 800709c:	da00      	bge.n	80070a0 <_printf_common+0x14>
 800709e:	0013      	movs	r3, r2
 80070a0:	0022      	movs	r2, r4
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	3243      	adds	r2, #67	; 0x43
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	2a00      	cmp	r2, #0
 80070aa:	d001      	beq.n	80070b0 <_printf_common+0x24>
 80070ac:	3301      	adds	r3, #1
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	069b      	lsls	r3, r3, #26
 80070b4:	d502      	bpl.n	80070bc <_printf_common+0x30>
 80070b6:	682b      	ldr	r3, [r5, #0]
 80070b8:	3302      	adds	r3, #2
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	6822      	ldr	r2, [r4, #0]
 80070be:	2306      	movs	r3, #6
 80070c0:	0017      	movs	r7, r2
 80070c2:	401f      	ands	r7, r3
 80070c4:	421a      	tst	r2, r3
 80070c6:	d027      	beq.n	8007118 <_printf_common+0x8c>
 80070c8:	0023      	movs	r3, r4
 80070ca:	3343      	adds	r3, #67	; 0x43
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	1e5a      	subs	r2, r3, #1
 80070d0:	4193      	sbcs	r3, r2
 80070d2:	6822      	ldr	r2, [r4, #0]
 80070d4:	0692      	lsls	r2, r2, #26
 80070d6:	d430      	bmi.n	800713a <_printf_common+0xae>
 80070d8:	0022      	movs	r2, r4
 80070da:	9901      	ldr	r1, [sp, #4]
 80070dc:	9800      	ldr	r0, [sp, #0]
 80070de:	9e08      	ldr	r6, [sp, #32]
 80070e0:	3243      	adds	r2, #67	; 0x43
 80070e2:	47b0      	blx	r6
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d025      	beq.n	8007134 <_printf_common+0xa8>
 80070e8:	2306      	movs	r3, #6
 80070ea:	6820      	ldr	r0, [r4, #0]
 80070ec:	682a      	ldr	r2, [r5, #0]
 80070ee:	68e1      	ldr	r1, [r4, #12]
 80070f0:	2500      	movs	r5, #0
 80070f2:	4003      	ands	r3, r0
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d103      	bne.n	8007100 <_printf_common+0x74>
 80070f8:	1a8d      	subs	r5, r1, r2
 80070fa:	43eb      	mvns	r3, r5
 80070fc:	17db      	asrs	r3, r3, #31
 80070fe:	401d      	ands	r5, r3
 8007100:	68a3      	ldr	r3, [r4, #8]
 8007102:	6922      	ldr	r2, [r4, #16]
 8007104:	4293      	cmp	r3, r2
 8007106:	dd01      	ble.n	800710c <_printf_common+0x80>
 8007108:	1a9b      	subs	r3, r3, r2
 800710a:	18ed      	adds	r5, r5, r3
 800710c:	2700      	movs	r7, #0
 800710e:	42bd      	cmp	r5, r7
 8007110:	d120      	bne.n	8007154 <_printf_common+0xc8>
 8007112:	2000      	movs	r0, #0
 8007114:	e010      	b.n	8007138 <_printf_common+0xac>
 8007116:	3701      	adds	r7, #1
 8007118:	68e3      	ldr	r3, [r4, #12]
 800711a:	682a      	ldr	r2, [r5, #0]
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	42bb      	cmp	r3, r7
 8007120:	ddd2      	ble.n	80070c8 <_printf_common+0x3c>
 8007122:	0022      	movs	r2, r4
 8007124:	2301      	movs	r3, #1
 8007126:	9901      	ldr	r1, [sp, #4]
 8007128:	9800      	ldr	r0, [sp, #0]
 800712a:	9e08      	ldr	r6, [sp, #32]
 800712c:	3219      	adds	r2, #25
 800712e:	47b0      	blx	r6
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d1f0      	bne.n	8007116 <_printf_common+0x8a>
 8007134:	2001      	movs	r0, #1
 8007136:	4240      	negs	r0, r0
 8007138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800713a:	2030      	movs	r0, #48	; 0x30
 800713c:	18e1      	adds	r1, r4, r3
 800713e:	3143      	adds	r1, #67	; 0x43
 8007140:	7008      	strb	r0, [r1, #0]
 8007142:	0021      	movs	r1, r4
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	3145      	adds	r1, #69	; 0x45
 8007148:	7809      	ldrb	r1, [r1, #0]
 800714a:	18a2      	adds	r2, r4, r2
 800714c:	3243      	adds	r2, #67	; 0x43
 800714e:	3302      	adds	r3, #2
 8007150:	7011      	strb	r1, [r2, #0]
 8007152:	e7c1      	b.n	80070d8 <_printf_common+0x4c>
 8007154:	0022      	movs	r2, r4
 8007156:	2301      	movs	r3, #1
 8007158:	9901      	ldr	r1, [sp, #4]
 800715a:	9800      	ldr	r0, [sp, #0]
 800715c:	9e08      	ldr	r6, [sp, #32]
 800715e:	321a      	adds	r2, #26
 8007160:	47b0      	blx	r6
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d0e6      	beq.n	8007134 <_printf_common+0xa8>
 8007166:	3701      	adds	r7, #1
 8007168:	e7d1      	b.n	800710e <_printf_common+0x82>
	...

0800716c <_printf_i>:
 800716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716e:	b08b      	sub	sp, #44	; 0x2c
 8007170:	9206      	str	r2, [sp, #24]
 8007172:	000a      	movs	r2, r1
 8007174:	3243      	adds	r2, #67	; 0x43
 8007176:	9307      	str	r3, [sp, #28]
 8007178:	9005      	str	r0, [sp, #20]
 800717a:	9204      	str	r2, [sp, #16]
 800717c:	7e0a      	ldrb	r2, [r1, #24]
 800717e:	000c      	movs	r4, r1
 8007180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007182:	2a78      	cmp	r2, #120	; 0x78
 8007184:	d807      	bhi.n	8007196 <_printf_i+0x2a>
 8007186:	2a62      	cmp	r2, #98	; 0x62
 8007188:	d809      	bhi.n	800719e <_printf_i+0x32>
 800718a:	2a00      	cmp	r2, #0
 800718c:	d100      	bne.n	8007190 <_printf_i+0x24>
 800718e:	e0c1      	b.n	8007314 <_printf_i+0x1a8>
 8007190:	2a58      	cmp	r2, #88	; 0x58
 8007192:	d100      	bne.n	8007196 <_printf_i+0x2a>
 8007194:	e08c      	b.n	80072b0 <_printf_i+0x144>
 8007196:	0026      	movs	r6, r4
 8007198:	3642      	adds	r6, #66	; 0x42
 800719a:	7032      	strb	r2, [r6, #0]
 800719c:	e022      	b.n	80071e4 <_printf_i+0x78>
 800719e:	0010      	movs	r0, r2
 80071a0:	3863      	subs	r0, #99	; 0x63
 80071a2:	2815      	cmp	r0, #21
 80071a4:	d8f7      	bhi.n	8007196 <_printf_i+0x2a>
 80071a6:	f7f8 ffb7 	bl	8000118 <__gnu_thumb1_case_shi>
 80071aa:	0016      	.short	0x0016
 80071ac:	fff6001f 	.word	0xfff6001f
 80071b0:	fff6fff6 	.word	0xfff6fff6
 80071b4:	001ffff6 	.word	0x001ffff6
 80071b8:	fff6fff6 	.word	0xfff6fff6
 80071bc:	fff6fff6 	.word	0xfff6fff6
 80071c0:	003600a8 	.word	0x003600a8
 80071c4:	fff6009a 	.word	0xfff6009a
 80071c8:	00b9fff6 	.word	0x00b9fff6
 80071cc:	0036fff6 	.word	0x0036fff6
 80071d0:	fff6fff6 	.word	0xfff6fff6
 80071d4:	009e      	.short	0x009e
 80071d6:	0026      	movs	r6, r4
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	3642      	adds	r6, #66	; 0x42
 80071dc:	1d11      	adds	r1, r2, #4
 80071de:	6019      	str	r1, [r3, #0]
 80071e0:	6813      	ldr	r3, [r2, #0]
 80071e2:	7033      	strb	r3, [r6, #0]
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0a7      	b.n	8007338 <_printf_i+0x1cc>
 80071e8:	6808      	ldr	r0, [r1, #0]
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	1d0a      	adds	r2, r1, #4
 80071ee:	0605      	lsls	r5, r0, #24
 80071f0:	d50b      	bpl.n	800720a <_printf_i+0x9e>
 80071f2:	680d      	ldr	r5, [r1, #0]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	2d00      	cmp	r5, #0
 80071f8:	da03      	bge.n	8007202 <_printf_i+0x96>
 80071fa:	232d      	movs	r3, #45	; 0x2d
 80071fc:	9a04      	ldr	r2, [sp, #16]
 80071fe:	426d      	negs	r5, r5
 8007200:	7013      	strb	r3, [r2, #0]
 8007202:	4b61      	ldr	r3, [pc, #388]	; (8007388 <_printf_i+0x21c>)
 8007204:	270a      	movs	r7, #10
 8007206:	9303      	str	r3, [sp, #12]
 8007208:	e01b      	b.n	8007242 <_printf_i+0xd6>
 800720a:	680d      	ldr	r5, [r1, #0]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	0641      	lsls	r1, r0, #25
 8007210:	d5f1      	bpl.n	80071f6 <_printf_i+0x8a>
 8007212:	b22d      	sxth	r5, r5
 8007214:	e7ef      	b.n	80071f6 <_printf_i+0x8a>
 8007216:	680d      	ldr	r5, [r1, #0]
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	1d08      	adds	r0, r1, #4
 800721c:	6018      	str	r0, [r3, #0]
 800721e:	062e      	lsls	r6, r5, #24
 8007220:	d501      	bpl.n	8007226 <_printf_i+0xba>
 8007222:	680d      	ldr	r5, [r1, #0]
 8007224:	e003      	b.n	800722e <_printf_i+0xc2>
 8007226:	066d      	lsls	r5, r5, #25
 8007228:	d5fb      	bpl.n	8007222 <_printf_i+0xb6>
 800722a:	680d      	ldr	r5, [r1, #0]
 800722c:	b2ad      	uxth	r5, r5
 800722e:	4b56      	ldr	r3, [pc, #344]	; (8007388 <_printf_i+0x21c>)
 8007230:	2708      	movs	r7, #8
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	2a6f      	cmp	r2, #111	; 0x6f
 8007236:	d000      	beq.n	800723a <_printf_i+0xce>
 8007238:	3702      	adds	r7, #2
 800723a:	0023      	movs	r3, r4
 800723c:	2200      	movs	r2, #0
 800723e:	3343      	adds	r3, #67	; 0x43
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	6863      	ldr	r3, [r4, #4]
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	db03      	blt.n	8007252 <_printf_i+0xe6>
 800724a:	2204      	movs	r2, #4
 800724c:	6821      	ldr	r1, [r4, #0]
 800724e:	4391      	bics	r1, r2
 8007250:	6021      	str	r1, [r4, #0]
 8007252:	2d00      	cmp	r5, #0
 8007254:	d102      	bne.n	800725c <_printf_i+0xf0>
 8007256:	9e04      	ldr	r6, [sp, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00c      	beq.n	8007276 <_printf_i+0x10a>
 800725c:	9e04      	ldr	r6, [sp, #16]
 800725e:	0028      	movs	r0, r5
 8007260:	0039      	movs	r1, r7
 8007262:	f7f8 ffe9 	bl	8000238 <__aeabi_uidivmod>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	3e01      	subs	r6, #1
 800726a:	5c5b      	ldrb	r3, [r3, r1]
 800726c:	7033      	strb	r3, [r6, #0]
 800726e:	002b      	movs	r3, r5
 8007270:	0005      	movs	r5, r0
 8007272:	429f      	cmp	r7, r3
 8007274:	d9f3      	bls.n	800725e <_printf_i+0xf2>
 8007276:	2f08      	cmp	r7, #8
 8007278:	d109      	bne.n	800728e <_printf_i+0x122>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07db      	lsls	r3, r3, #31
 800727e:	d506      	bpl.n	800728e <_printf_i+0x122>
 8007280:	6863      	ldr	r3, [r4, #4]
 8007282:	6922      	ldr	r2, [r4, #16]
 8007284:	4293      	cmp	r3, r2
 8007286:	dc02      	bgt.n	800728e <_printf_i+0x122>
 8007288:	2330      	movs	r3, #48	; 0x30
 800728a:	3e01      	subs	r6, #1
 800728c:	7033      	strb	r3, [r6, #0]
 800728e:	9b04      	ldr	r3, [sp, #16]
 8007290:	1b9b      	subs	r3, r3, r6
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	9b07      	ldr	r3, [sp, #28]
 8007296:	0021      	movs	r1, r4
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	9805      	ldr	r0, [sp, #20]
 800729c:	9b06      	ldr	r3, [sp, #24]
 800729e:	aa09      	add	r2, sp, #36	; 0x24
 80072a0:	f7ff fef4 	bl	800708c <_printf_common>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d14c      	bne.n	8007342 <_printf_i+0x1d6>
 80072a8:	2001      	movs	r0, #1
 80072aa:	4240      	negs	r0, r0
 80072ac:	b00b      	add	sp, #44	; 0x2c
 80072ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b0:	3145      	adds	r1, #69	; 0x45
 80072b2:	700a      	strb	r2, [r1, #0]
 80072b4:	4a34      	ldr	r2, [pc, #208]	; (8007388 <_printf_i+0x21c>)
 80072b6:	9203      	str	r2, [sp, #12]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	6821      	ldr	r1, [r4, #0]
 80072bc:	ca20      	ldmia	r2!, {r5}
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	0608      	lsls	r0, r1, #24
 80072c2:	d516      	bpl.n	80072f2 <_printf_i+0x186>
 80072c4:	07cb      	lsls	r3, r1, #31
 80072c6:	d502      	bpl.n	80072ce <_printf_i+0x162>
 80072c8:	2320      	movs	r3, #32
 80072ca:	4319      	orrs	r1, r3
 80072cc:	6021      	str	r1, [r4, #0]
 80072ce:	2710      	movs	r7, #16
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	d1b2      	bne.n	800723a <_printf_i+0xce>
 80072d4:	2320      	movs	r3, #32
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	439a      	bics	r2, r3
 80072da:	6022      	str	r2, [r4, #0]
 80072dc:	e7ad      	b.n	800723a <_printf_i+0xce>
 80072de:	2220      	movs	r2, #32
 80072e0:	6809      	ldr	r1, [r1, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	0022      	movs	r2, r4
 80072e8:	2178      	movs	r1, #120	; 0x78
 80072ea:	3245      	adds	r2, #69	; 0x45
 80072ec:	7011      	strb	r1, [r2, #0]
 80072ee:	4a27      	ldr	r2, [pc, #156]	; (800738c <_printf_i+0x220>)
 80072f0:	e7e1      	b.n	80072b6 <_printf_i+0x14a>
 80072f2:	0648      	lsls	r0, r1, #25
 80072f4:	d5e6      	bpl.n	80072c4 <_printf_i+0x158>
 80072f6:	b2ad      	uxth	r5, r5
 80072f8:	e7e4      	b.n	80072c4 <_printf_i+0x158>
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	680d      	ldr	r5, [r1, #0]
 80072fe:	1d10      	adds	r0, r2, #4
 8007300:	6949      	ldr	r1, [r1, #20]
 8007302:	6018      	str	r0, [r3, #0]
 8007304:	6813      	ldr	r3, [r2, #0]
 8007306:	062e      	lsls	r6, r5, #24
 8007308:	d501      	bpl.n	800730e <_printf_i+0x1a2>
 800730a:	6019      	str	r1, [r3, #0]
 800730c:	e002      	b.n	8007314 <_printf_i+0x1a8>
 800730e:	066d      	lsls	r5, r5, #25
 8007310:	d5fb      	bpl.n	800730a <_printf_i+0x19e>
 8007312:	8019      	strh	r1, [r3, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	9e04      	ldr	r6, [sp, #16]
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	e7bb      	b.n	8007294 <_printf_i+0x128>
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	1d11      	adds	r1, r2, #4
 8007320:	6019      	str	r1, [r3, #0]
 8007322:	6816      	ldr	r6, [r2, #0]
 8007324:	2100      	movs	r1, #0
 8007326:	0030      	movs	r0, r6
 8007328:	6862      	ldr	r2, [r4, #4]
 800732a:	f000 f831 	bl	8007390 <memchr>
 800732e:	2800      	cmp	r0, #0
 8007330:	d001      	beq.n	8007336 <_printf_i+0x1ca>
 8007332:	1b80      	subs	r0, r0, r6
 8007334:	6060      	str	r0, [r4, #4]
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	9a04      	ldr	r2, [sp, #16]
 800733e:	7013      	strb	r3, [r2, #0]
 8007340:	e7a8      	b.n	8007294 <_printf_i+0x128>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	0032      	movs	r2, r6
 8007346:	9906      	ldr	r1, [sp, #24]
 8007348:	9805      	ldr	r0, [sp, #20]
 800734a:	9d07      	ldr	r5, [sp, #28]
 800734c:	47a8      	blx	r5
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d0aa      	beq.n	80072a8 <_printf_i+0x13c>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	079b      	lsls	r3, r3, #30
 8007356:	d415      	bmi.n	8007384 <_printf_i+0x218>
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	68e0      	ldr	r0, [r4, #12]
 800735c:	4298      	cmp	r0, r3
 800735e:	daa5      	bge.n	80072ac <_printf_i+0x140>
 8007360:	0018      	movs	r0, r3
 8007362:	e7a3      	b.n	80072ac <_printf_i+0x140>
 8007364:	0022      	movs	r2, r4
 8007366:	2301      	movs	r3, #1
 8007368:	9906      	ldr	r1, [sp, #24]
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	9e07      	ldr	r6, [sp, #28]
 800736e:	3219      	adds	r2, #25
 8007370:	47b0      	blx	r6
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	d098      	beq.n	80072a8 <_printf_i+0x13c>
 8007376:	3501      	adds	r5, #1
 8007378:	68e3      	ldr	r3, [r4, #12]
 800737a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	42ab      	cmp	r3, r5
 8007380:	dcf0      	bgt.n	8007364 <_printf_i+0x1f8>
 8007382:	e7e9      	b.n	8007358 <_printf_i+0x1ec>
 8007384:	2500      	movs	r5, #0
 8007386:	e7f7      	b.n	8007378 <_printf_i+0x20c>
 8007388:	0800a179 	.word	0x0800a179
 800738c:	0800a18a 	.word	0x0800a18a

08007390 <memchr>:
 8007390:	b2c9      	uxtb	r1, r1
 8007392:	1882      	adds	r2, r0, r2
 8007394:	4290      	cmp	r0, r2
 8007396:	d101      	bne.n	800739c <memchr+0xc>
 8007398:	2000      	movs	r0, #0
 800739a:	4770      	bx	lr
 800739c:	7803      	ldrb	r3, [r0, #0]
 800739e:	428b      	cmp	r3, r1
 80073a0:	d0fb      	beq.n	800739a <memchr+0xa>
 80073a2:	3001      	adds	r0, #1
 80073a4:	e7f6      	b.n	8007394 <memchr+0x4>

080073a6 <memmove>:
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4288      	cmp	r0, r1
 80073aa:	d902      	bls.n	80073b2 <memmove+0xc>
 80073ac:	188b      	adds	r3, r1, r2
 80073ae:	4298      	cmp	r0, r3
 80073b0:	d303      	bcc.n	80073ba <memmove+0x14>
 80073b2:	2300      	movs	r3, #0
 80073b4:	e007      	b.n	80073c6 <memmove+0x20>
 80073b6:	5c8b      	ldrb	r3, [r1, r2]
 80073b8:	5483      	strb	r3, [r0, r2]
 80073ba:	3a01      	subs	r2, #1
 80073bc:	d2fb      	bcs.n	80073b6 <memmove+0x10>
 80073be:	bd10      	pop	{r4, pc}
 80073c0:	5ccc      	ldrb	r4, [r1, r3]
 80073c2:	54c4      	strb	r4, [r0, r3]
 80073c4:	3301      	adds	r3, #1
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d1fa      	bne.n	80073c0 <memmove+0x1a>
 80073ca:	e7f8      	b.n	80073be <memmove+0x18>

080073cc <_free_r>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	0005      	movs	r5, r0
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d010      	beq.n	80073f6 <_free_r+0x2a>
 80073d4:	1f0c      	subs	r4, r1, #4
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da00      	bge.n	80073de <_free_r+0x12>
 80073dc:	18e4      	adds	r4, r4, r3
 80073de:	0028      	movs	r0, r5
 80073e0:	f000 f918 	bl	8007614 <__malloc_lock>
 80073e4:	4a1d      	ldr	r2, [pc, #116]	; (800745c <_free_r+0x90>)
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <_free_r+0x2c>
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	6014      	str	r4, [r2, #0]
 80073f0:	0028      	movs	r0, r5
 80073f2:	f000 f917 	bl	8007624 <__malloc_unlock>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	d908      	bls.n	800740e <_free_r+0x42>
 80073fc:	6821      	ldr	r1, [r4, #0]
 80073fe:	1860      	adds	r0, r4, r1
 8007400:	4283      	cmp	r3, r0
 8007402:	d1f3      	bne.n	80073ec <_free_r+0x20>
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	1841      	adds	r1, r0, r1
 800740a:	6021      	str	r1, [r4, #0]
 800740c:	e7ee      	b.n	80073ec <_free_r+0x20>
 800740e:	001a      	movs	r2, r3
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <_free_r+0x4e>
 8007416:	42a3      	cmp	r3, r4
 8007418:	d9f9      	bls.n	800740e <_free_r+0x42>
 800741a:	6811      	ldr	r1, [r2, #0]
 800741c:	1850      	adds	r0, r2, r1
 800741e:	42a0      	cmp	r0, r4
 8007420:	d10b      	bne.n	800743a <_free_r+0x6e>
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	1809      	adds	r1, r1, r0
 8007426:	1850      	adds	r0, r2, r1
 8007428:	6011      	str	r1, [r2, #0]
 800742a:	4283      	cmp	r3, r0
 800742c:	d1e0      	bne.n	80073f0 <_free_r+0x24>
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	1841      	adds	r1, r0, r1
 8007434:	6011      	str	r1, [r2, #0]
 8007436:	6053      	str	r3, [r2, #4]
 8007438:	e7da      	b.n	80073f0 <_free_r+0x24>
 800743a:	42a0      	cmp	r0, r4
 800743c:	d902      	bls.n	8007444 <_free_r+0x78>
 800743e:	230c      	movs	r3, #12
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	e7d5      	b.n	80073f0 <_free_r+0x24>
 8007444:	6821      	ldr	r1, [r4, #0]
 8007446:	1860      	adds	r0, r4, r1
 8007448:	4283      	cmp	r3, r0
 800744a:	d103      	bne.n	8007454 <_free_r+0x88>
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	1841      	adds	r1, r0, r1
 8007452:	6021      	str	r1, [r4, #0]
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	6054      	str	r4, [r2, #4]
 8007458:	e7ca      	b.n	80073f0 <_free_r+0x24>
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	20000768 	.word	0x20000768

08007460 <sbrk_aligned>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4e0f      	ldr	r6, [pc, #60]	; (80074a0 <sbrk_aligned+0x40>)
 8007464:	000d      	movs	r5, r1
 8007466:	6831      	ldr	r1, [r6, #0]
 8007468:	0004      	movs	r4, r0
 800746a:	2900      	cmp	r1, #0
 800746c:	d102      	bne.n	8007474 <sbrk_aligned+0x14>
 800746e:	f000 f8bf 	bl	80075f0 <_sbrk_r>
 8007472:	6030      	str	r0, [r6, #0]
 8007474:	0029      	movs	r1, r5
 8007476:	0020      	movs	r0, r4
 8007478:	f000 f8ba 	bl	80075f0 <_sbrk_r>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d00a      	beq.n	8007496 <sbrk_aligned+0x36>
 8007480:	2303      	movs	r3, #3
 8007482:	1cc5      	adds	r5, r0, #3
 8007484:	439d      	bics	r5, r3
 8007486:	42a8      	cmp	r0, r5
 8007488:	d007      	beq.n	800749a <sbrk_aligned+0x3a>
 800748a:	1a29      	subs	r1, r5, r0
 800748c:	0020      	movs	r0, r4
 800748e:	f000 f8af 	bl	80075f0 <_sbrk_r>
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	d101      	bne.n	800749a <sbrk_aligned+0x3a>
 8007496:	2501      	movs	r5, #1
 8007498:	426d      	negs	r5, r5
 800749a:	0028      	movs	r0, r5
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	2000076c 	.word	0x2000076c

080074a4 <_malloc_r>:
 80074a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074a6:	2203      	movs	r2, #3
 80074a8:	1ccb      	adds	r3, r1, #3
 80074aa:	4393      	bics	r3, r2
 80074ac:	3308      	adds	r3, #8
 80074ae:	0006      	movs	r6, r0
 80074b0:	001f      	movs	r7, r3
 80074b2:	2b0c      	cmp	r3, #12
 80074b4:	d232      	bcs.n	800751c <_malloc_r+0x78>
 80074b6:	270c      	movs	r7, #12
 80074b8:	42b9      	cmp	r1, r7
 80074ba:	d831      	bhi.n	8007520 <_malloc_r+0x7c>
 80074bc:	0030      	movs	r0, r6
 80074be:	f000 f8a9 	bl	8007614 <__malloc_lock>
 80074c2:	4d32      	ldr	r5, [pc, #200]	; (800758c <_malloc_r+0xe8>)
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	001c      	movs	r4, r3
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d12e      	bne.n	800752a <_malloc_r+0x86>
 80074cc:	0039      	movs	r1, r7
 80074ce:	0030      	movs	r0, r6
 80074d0:	f7ff ffc6 	bl	8007460 <sbrk_aligned>
 80074d4:	0004      	movs	r4, r0
 80074d6:	1c43      	adds	r3, r0, #1
 80074d8:	d11e      	bne.n	8007518 <_malloc_r+0x74>
 80074da:	682c      	ldr	r4, [r5, #0]
 80074dc:	0025      	movs	r5, r4
 80074de:	2d00      	cmp	r5, #0
 80074e0:	d14a      	bne.n	8007578 <_malloc_r+0xd4>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	0029      	movs	r1, r5
 80074e6:	18e3      	adds	r3, r4, r3
 80074e8:	0030      	movs	r0, r6
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	f000 f880 	bl	80075f0 <_sbrk_r>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	4283      	cmp	r3, r0
 80074f4:	d143      	bne.n	800757e <_malloc_r+0xda>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	3703      	adds	r7, #3
 80074fa:	1aff      	subs	r7, r7, r3
 80074fc:	2303      	movs	r3, #3
 80074fe:	439f      	bics	r7, r3
 8007500:	3708      	adds	r7, #8
 8007502:	2f0c      	cmp	r7, #12
 8007504:	d200      	bcs.n	8007508 <_malloc_r+0x64>
 8007506:	270c      	movs	r7, #12
 8007508:	0039      	movs	r1, r7
 800750a:	0030      	movs	r0, r6
 800750c:	f7ff ffa8 	bl	8007460 <sbrk_aligned>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d034      	beq.n	800757e <_malloc_r+0xda>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	19df      	adds	r7, r3, r7
 8007518:	6027      	str	r7, [r4, #0]
 800751a:	e013      	b.n	8007544 <_malloc_r+0xa0>
 800751c:	2b00      	cmp	r3, #0
 800751e:	dacb      	bge.n	80074b8 <_malloc_r+0x14>
 8007520:	230c      	movs	r3, #12
 8007522:	2500      	movs	r5, #0
 8007524:	6033      	str	r3, [r6, #0]
 8007526:	0028      	movs	r0, r5
 8007528:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	1bd1      	subs	r1, r2, r7
 800752e:	d420      	bmi.n	8007572 <_malloc_r+0xce>
 8007530:	290b      	cmp	r1, #11
 8007532:	d917      	bls.n	8007564 <_malloc_r+0xc0>
 8007534:	19e2      	adds	r2, r4, r7
 8007536:	6027      	str	r7, [r4, #0]
 8007538:	42a3      	cmp	r3, r4
 800753a:	d111      	bne.n	8007560 <_malloc_r+0xbc>
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	6053      	str	r3, [r2, #4]
 8007544:	0030      	movs	r0, r6
 8007546:	0025      	movs	r5, r4
 8007548:	f000 f86c 	bl	8007624 <__malloc_unlock>
 800754c:	2207      	movs	r2, #7
 800754e:	350b      	adds	r5, #11
 8007550:	1d23      	adds	r3, r4, #4
 8007552:	4395      	bics	r5, r2
 8007554:	1aea      	subs	r2, r5, r3
 8007556:	429d      	cmp	r5, r3
 8007558:	d0e5      	beq.n	8007526 <_malloc_r+0x82>
 800755a:	1b5b      	subs	r3, r3, r5
 800755c:	50a3      	str	r3, [r4, r2]
 800755e:	e7e2      	b.n	8007526 <_malloc_r+0x82>
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	e7ec      	b.n	800753e <_malloc_r+0x9a>
 8007564:	6862      	ldr	r2, [r4, #4]
 8007566:	42a3      	cmp	r3, r4
 8007568:	d101      	bne.n	800756e <_malloc_r+0xca>
 800756a:	602a      	str	r2, [r5, #0]
 800756c:	e7ea      	b.n	8007544 <_malloc_r+0xa0>
 800756e:	605a      	str	r2, [r3, #4]
 8007570:	e7e8      	b.n	8007544 <_malloc_r+0xa0>
 8007572:	0023      	movs	r3, r4
 8007574:	6864      	ldr	r4, [r4, #4]
 8007576:	e7a7      	b.n	80074c8 <_malloc_r+0x24>
 8007578:	002c      	movs	r4, r5
 800757a:	686d      	ldr	r5, [r5, #4]
 800757c:	e7af      	b.n	80074de <_malloc_r+0x3a>
 800757e:	230c      	movs	r3, #12
 8007580:	0030      	movs	r0, r6
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	f000 f84e 	bl	8007624 <__malloc_unlock>
 8007588:	e7cd      	b.n	8007526 <_malloc_r+0x82>
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	20000768 	.word	0x20000768

08007590 <_realloc_r>:
 8007590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007592:	0007      	movs	r7, r0
 8007594:	000e      	movs	r6, r1
 8007596:	0014      	movs	r4, r2
 8007598:	2900      	cmp	r1, #0
 800759a:	d105      	bne.n	80075a8 <_realloc_r+0x18>
 800759c:	0011      	movs	r1, r2
 800759e:	f7ff ff81 	bl	80074a4 <_malloc_r>
 80075a2:	0005      	movs	r5, r0
 80075a4:	0028      	movs	r0, r5
 80075a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	d103      	bne.n	80075b4 <_realloc_r+0x24>
 80075ac:	f7ff ff0e 	bl	80073cc <_free_r>
 80075b0:	0025      	movs	r5, r4
 80075b2:	e7f7      	b.n	80075a4 <_realloc_r+0x14>
 80075b4:	f000 f83e 	bl	8007634 <_malloc_usable_size_r>
 80075b8:	9001      	str	r0, [sp, #4]
 80075ba:	4284      	cmp	r4, r0
 80075bc:	d803      	bhi.n	80075c6 <_realloc_r+0x36>
 80075be:	0035      	movs	r5, r6
 80075c0:	0843      	lsrs	r3, r0, #1
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d3ee      	bcc.n	80075a4 <_realloc_r+0x14>
 80075c6:	0021      	movs	r1, r4
 80075c8:	0038      	movs	r0, r7
 80075ca:	f7ff ff6b 	bl	80074a4 <_malloc_r>
 80075ce:	1e05      	subs	r5, r0, #0
 80075d0:	d0e8      	beq.n	80075a4 <_realloc_r+0x14>
 80075d2:	9b01      	ldr	r3, [sp, #4]
 80075d4:	0022      	movs	r2, r4
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d900      	bls.n	80075dc <_realloc_r+0x4c>
 80075da:	001a      	movs	r2, r3
 80075dc:	0031      	movs	r1, r6
 80075de:	0028      	movs	r0, r5
 80075e0:	f7ff fbc0 	bl	8006d64 <memcpy>
 80075e4:	0031      	movs	r1, r6
 80075e6:	0038      	movs	r0, r7
 80075e8:	f7ff fef0 	bl	80073cc <_free_r>
 80075ec:	e7da      	b.n	80075a4 <_realloc_r+0x14>
	...

080075f0 <_sbrk_r>:
 80075f0:	2300      	movs	r3, #0
 80075f2:	b570      	push	{r4, r5, r6, lr}
 80075f4:	4d06      	ldr	r5, [pc, #24]	; (8007610 <_sbrk_r+0x20>)
 80075f6:	0004      	movs	r4, r0
 80075f8:	0008      	movs	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fb f9ec 	bl	80029d8 <_sbrk>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d103      	bne.n	800760c <_sbrk_r+0x1c>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d000      	beq.n	800760c <_sbrk_r+0x1c>
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20000770 	.word	0x20000770

08007614 <__malloc_lock>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4802      	ldr	r0, [pc, #8]	; (8007620 <__malloc_lock+0xc>)
 8007618:	f000 f814 	bl	8007644 <__retarget_lock_acquire_recursive>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	20000774 	.word	0x20000774

08007624 <__malloc_unlock>:
 8007624:	b510      	push	{r4, lr}
 8007626:	4802      	ldr	r0, [pc, #8]	; (8007630 <__malloc_unlock+0xc>)
 8007628:	f000 f80d 	bl	8007646 <__retarget_lock_release_recursive>
 800762c:	bd10      	pop	{r4, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	20000774 	.word	0x20000774

08007634 <_malloc_usable_size_r>:
 8007634:	1f0b      	subs	r3, r1, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	1f18      	subs	r0, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	da01      	bge.n	8007642 <_malloc_usable_size_r+0xe>
 800763e:	580b      	ldr	r3, [r1, r0]
 8007640:	18c0      	adds	r0, r0, r3
 8007642:	4770      	bx	lr

08007644 <__retarget_lock_acquire_recursive>:
 8007644:	4770      	bx	lr

08007646 <__retarget_lock_release_recursive>:
 8007646:	4770      	bx	lr

08007648 <_init>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr

08007654 <_fini>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr
