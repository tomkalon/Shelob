
Szeloba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cd4  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f58  08007f58  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f60  08007f60  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00017f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  20000084  08007fec  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  08007fec  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab06  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fba  00000000  00000000  0003abb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0003db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0003eb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce2  00000000  00000000  0003fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3a3  00000000  00000000  0005693a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086fbb  00000000  00000000  00071cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8c98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  000f8ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000126fb  00000000  00000000  000fbc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800526c 	.word	0x0800526c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	0800526c 	.word	0x0800526c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	46ce      	mov	lr, r9
 80004c0:	4647      	mov	r7, r8
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	2214      	movs	r2, #20
 80004c8:	2100      	movs	r1, #0
 80004ca:	a805      	add	r0, sp, #20
 80004cc:	f004 fa65 	bl	800499a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d0:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <MX_GPIO_Init+0x10c>)
 80004d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d4:	2104      	movs	r1, #4
 80004d6:	4688      	mov	r8, r1
 80004d8:	430a      	orrs	r2, r1
 80004da:	62da      	str	r2, [r3, #44]	; 0x2c
 80004dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004de:	400a      	ands	r2, r1
 80004e0:	9200      	str	r2, [sp, #0]
 80004e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	4311      	orrs	r1, r2
 80004ea:	62d9      	str	r1, [r3, #44]	; 0x2c
 80004ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004ee:	400a      	ands	r2, r1
 80004f0:	9201      	str	r2, [sp, #4]
 80004f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004f6:	2701      	movs	r7, #1
 80004f8:	433a      	orrs	r2, r7
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80004fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fe:	403a      	ands	r2, r7
 8000500:	9202      	str	r2, [sp, #8]
 8000502:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000506:	2102      	movs	r1, #2
 8000508:	4689      	mov	r9, r1
 800050a:	430a      	orrs	r2, r1
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
 800050e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000510:	400a      	ands	r2, r1
 8000512:	9203      	str	r2, [sp, #12]
 8000514:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000518:	2208      	movs	r2, #8
 800051a:	4311      	orrs	r1, r2
 800051c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800051e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000520:	401a      	ands	r2, r3
 8000522:	9204      	str	r2, [sp, #16]
 8000524:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_LED_GPIO_Port, C_LED_Pin, GPIO_PIN_RESET);
 8000526:	26a0      	movs	r6, #160	; 0xa0
 8000528:	05f6      	lsls	r6, r6, #23
 800052a:	2200      	movs	r2, #0
 800052c:	2120      	movs	r1, #32
 800052e:	0030      	movs	r0, r6
 8000530:	f002 f9a0 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <MX_GPIO_Init+0x110>)
 8000536:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	2503      	movs	r5, #3
 800053a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	2400      	movs	r4, #0
 800053e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000540:	a905      	add	r1, sp, #20
 8000542:	4823      	ldr	r0, [pc, #140]	; (80005d0 <MX_GPIO_Init+0x114>)
 8000544:	f002 f896 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000548:	464b      	mov	r3, r9
 800054a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000550:	a905      	add	r1, sp, #20
 8000552:	4820      	ldr	r0, [pc, #128]	; (80005d4 <MX_GPIO_Init+0x118>)
 8000554:	f002 f88e 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAIN_BTN_Pin;
 8000558:	2310      	movs	r3, #16
 800055a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	2384      	movs	r3, #132	; 0x84
 800055e:	039b      	lsls	r3, r3, #14
 8000560:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000562:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(MAIN_BTN_GPIO_Port, &GPIO_InitStruct);
 8000564:	a905      	add	r1, sp, #20
 8000566:	0030      	movs	r0, r6
 8000568:	f002 f884 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = C_LED_Pin;
 800056c:	2320      	movs	r3, #32
 800056e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(C_LED_GPIO_Port, &GPIO_InitStruct);
 8000576:	a905      	add	r1, sp, #20
 8000578:	0030      	movs	r0, r6
 800057a:	f002 f87b 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_GPIO_Init+0x11c>)
 8000580:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000582:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	a905      	add	r1, sp, #20
 8000588:	0030      	movs	r0, r6
 800058a:	f002 f873 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_GPIO_Init+0x120>)
 8000590:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000592:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	a905      	add	r1, sp, #20
 8000598:	4811      	ldr	r0, [pc, #68]	; (80005e0 <MX_GPIO_Init+0x124>)
 800059a:	f002 f86b 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800059e:	4643      	mov	r3, r8
 80005a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005a6:	a905      	add	r1, sp, #20
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_GPIO_Init+0x128>)
 80005aa:	f002 f863 	bl	8002674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2007      	movs	r0, #7
 80005b4:	f002 f804 	bl	80025c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005b8:	2007      	movs	r0, #7
 80005ba:	f002 f833 	bl	8002624 <HAL_NVIC_EnableIRQ>

}
 80005be:	b00b      	add	sp, #44	; 0x2c
 80005c0:	bcc0      	pop	{r6, r7}
 80005c2:	46b9      	mov	r9, r7
 80005c4:	46b0      	mov	r8, r6
 80005c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	00003fff 	.word	0x00003fff
 80005d0:	50000800 	.word	0x50000800
 80005d4:	50001c00 	.word	0x50001c00
 80005d8:	00009f80 	.word	0x00009f80
 80005dc:	0000dcff 	.word	0x0000dcff
 80005e0:	50000400 	.word	0x50000400
 80005e4:	50000c00 	.word	0x50000c00

080005e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005e8:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <MX_I2C1_Init+0x54>)
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_I2C1_Init+0x58>)
 80005ee:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_I2C1_Init+0x5c>)
 80005f2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	2201      	movs	r2, #1
 80005fa:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000602:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000604:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000606:	f002 fa41 	bl	8002a8c <HAL_I2C_Init>
 800060a:	2800      	cmp	r0, #0
 800060c:	d10c      	bne.n	8000628 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060e:	2100      	movs	r1, #0
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <MX_I2C1_Init+0x54>)
 8000612:	f002 fc2b 	bl	8002e6c <HAL_I2CEx_ConfigAnalogFilter>
 8000616:	2800      	cmp	r0, #0
 8000618:	d109      	bne.n	800062e <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800061a:	2100      	movs	r1, #0
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <MX_I2C1_Init+0x54>)
 800061e:	f002 fc51 	bl	8002ec4 <HAL_I2CEx_ConfigDigitalFilter>
 8000622:	2800      	cmp	r0, #0
 8000624:	d106      	bne.n	8000634 <MX_I2C1_Init+0x4c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000626:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000628:	f000 fa54 	bl	8000ad4 <Error_Handler>
 800062c:	e7ef      	b.n	800060e <MX_I2C1_Init+0x26>
    Error_Handler();
 800062e:	f000 fa51 	bl	8000ad4 <Error_Handler>
 8000632:	e7f2      	b.n	800061a <MX_I2C1_Init+0x32>
    Error_Handler();
 8000634:	f000 fa4e 	bl	8000ad4 <Error_Handler>
}
 8000638:	e7f5      	b.n	8000626 <MX_I2C1_Init+0x3e>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	200000a0 	.word	0x200000a0
 8000640:	40005400 	.word	0x40005400
 8000644:	0010061a 	.word	0x0010061a

08000648 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000648:	b510      	push	{r4, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	2214      	movs	r2, #20
 8000650:	2100      	movs	r1, #0
 8000652:	a801      	add	r0, sp, #4
 8000654:	f004 f9a1 	bl	800499a <memset>
  if(i2cHandle->Instance==I2C1)
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_I2C_MspInit+0x54>)
 800065a:	6822      	ldr	r2, [r4, #0]
 800065c:	429a      	cmp	r2, r3
 800065e:	d001      	beq.n	8000664 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000660:	b006      	add	sp, #24
 8000662:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000664:	4c0e      	ldr	r4, [pc, #56]	; (80006a0 <HAL_I2C_MspInit+0x58>)
 8000666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000668:	2302      	movs	r3, #2
 800066a:	431a      	orrs	r2, r3
 800066c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800066e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000670:	4013      	ands	r3, r2
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000676:	23c0      	movs	r3, #192	; 0xc0
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800067c:	2312      	movs	r3, #18
 800067e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	3b0f      	subs	r3, #15
 8000682:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000684:	3301      	adds	r3, #1
 8000686:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000688:	a901      	add	r1, sp, #4
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <HAL_I2C_MspInit+0x5c>)
 800068c:	f001 fff2 	bl	8002674 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	039b      	lsls	r3, r3, #14
 8000696:	4313      	orrs	r3, r2
 8000698:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800069a:	e7e1      	b.n	8000660 <HAL_I2C_MspInit+0x18>
 800069c:	40005400 	.word	0x40005400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	50000400 	.word	0x50000400

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b500      	push	{lr}
 80006aa:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ac:	2238      	movs	r2, #56	; 0x38
 80006ae:	2100      	movs	r1, #0
 80006b0:	a810      	add	r0, sp, #64	; 0x40
 80006b2:	f004 f972 	bl	800499a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	a80b      	add	r0, sp, #44	; 0x2c
 80006bc:	f004 f96d 	bl	800499a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	2228      	movs	r2, #40	; 0x28
 80006c2:	2100      	movs	r1, #0
 80006c4:	a801      	add	r0, sp, #4
 80006c6:	f004 f968 	bl	800499a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ca:	491f      	ldr	r1, [pc, #124]	; (8000748 <SystemClock_Config+0xa0>)
 80006cc:	680b      	ldr	r3, [r1, #0]
 80006ce:	4a1f      	ldr	r2, [pc, #124]	; (800074c <SystemClock_Config+0xa4>)
 80006d0:	401a      	ands	r2, r3
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4313      	orrs	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	2301      	movs	r3, #1
 80006dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	02db      	lsls	r3, r3, #11
 80006e2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	025b      	lsls	r3, r3, #9
 80006ec:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	02db      	lsls	r3, r3, #11
 80006f2:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	03db      	lsls	r3, r3, #15
 80006f8:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	a810      	add	r0, sp, #64	; 0x40
 80006fc:	f002 fc66 	bl	8002fcc <HAL_RCC_OscConfig>
 8000700:	2800      	cmp	r0, #0
 8000702:	d11a      	bne.n	800073a <SystemClock_Config+0x92>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	930b      	str	r3, [sp, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	3b0c      	subs	r3, #12
 800070a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	930f      	str	r3, [sp, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	a80b      	add	r0, sp, #44	; 0x2c
 8000718:	f002 ff5e 	bl	80035d8 <HAL_RCC_ClockConfig>
 800071c:	2800      	cmp	r0, #0
 800071e:	d10e      	bne.n	800073e <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000720:	230a      	movs	r3, #10
 8000722:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000724:	3b06      	subs	r3, #6
 8000726:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000728:	2300      	movs	r3, #0
 800072a:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072c:	a801      	add	r0, sp, #4
 800072e:	f003 f873 	bl	8003818 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	2800      	cmp	r0, #0
 8000734:	d105      	bne.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
  }
}
 8000736:	b01f      	add	sp, #124	; 0x7c
 8000738:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <SystemClock_Config+0x94>
 800073e:	b672      	cpsid	i
 8000740:	e7fe      	b.n	8000740 <SystemClock_Config+0x98>
 8000742:	b672      	cpsid	i
 8000744:	e7fe      	b.n	8000744 <SystemClock_Config+0x9c>
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40007000 	.word	0x40007000
 800074c:	ffffe7ff 	.word	0xffffe7ff

08000750 <main>:
{
 8000750:	b510      	push	{r4, lr}
  HAL_Init();
 8000752:	f001 fefd 	bl	8002550 <HAL_Init>
  SystemClock_Config();
 8000756:	f7ff ffa7 	bl	80006a8 <SystemClock_Config>
  MX_GPIO_Init();
 800075a:	f7ff feaf 	bl	80004bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075e:	f001 fe5b 	bl	8002418 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000762:	f7ff ff41 	bl	80005e8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000766:	f001 fc43 	bl	8001ff0 <MX_TIM2_Init>
  MX_TIM6_Init();
 800076a:	f001 fc79 	bl	8002060 <MX_TIM6_Init>
  MX_TIM7_Init();
 800076e:	f001 fca3 	bl	80020b8 <MX_TIM7_Init>
  MX_TIM21_Init();
 8000772:	f001 fd91 	bl	8002298 <MX_TIM21_Init>
  MX_TIM22_Init();
 8000776:	f001 fdf1 	bl	800235c <MX_TIM22_Init>
  Structures_Init();
 800077a:	f001 fb01 	bl	8001d80 <Structures_Init>
  SSD1306_Init();
 800077e:	f000 fc53 	bl	8001028 <SSD1306_Init>
  SSD1306_SetContrast(0);
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fd06 	bl	8001194 <SSD1306_SetContrast>
  Set_Theme();
 8000788:	f001 fa14 	bl	8001bb4 <Set_Theme>
  __HAL_TIM_SET_COUNTER(&TIMER_ENCODER, 32000);
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <main+0x50>)
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	22fa      	movs	r2, #250	; 0xfa
 8000792:	01d2      	lsls	r2, r2, #7
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start_IT(&TIMER_ENCODER, TIM_CHANNEL_ALL);
 8000796:	213c      	movs	r1, #60	; 0x3c
 8000798:	f003 fb4e 	bl	8003e38 <HAL_TIM_Encoder_Start_IT>
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x4c>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	20000640 	.word	0x20000640

080007a4 <HAL_TIM_IC_CaptureCallback>:
{
 80007a4:	b510      	push	{r4, lr}
	if (htim->Instance == TIM2)
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	6802      	ldr	r2, [r0, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d000      	beq.n	80007b2 <HAL_TIM_IC_CaptureCallback+0xe>
}
 80007b0:	bd10      	pop	{r4, pc}
		uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&TIMER_ENCODER_BUFFER);
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80007b4:	f003 fdc8 	bl	8004348 <HAL_TIM_Base_GetState>
 80007b8:	0004      	movs	r4, r0
		uint8_t encoderBusyFlag = HAL_TIM_Encoder_GetState(&TIMER_ENCODER);
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007bc:	f003 fdc8 	bl	8004350 <HAL_TIM_Encoder_GetState>
		if (tim7BusyFlag == 1 && encoderBusyFlag == 1) HAL_TIM_Base_Start_IT(&TIMER_ENCODER_BUFFER);
 80007c0:	2c01      	cmp	r4, #1
 80007c2:	d1f5      	bne.n	80007b0 <HAL_TIM_IC_CaptureCallback+0xc>
 80007c4:	2801      	cmp	r0, #1
 80007c6:	d1f3      	bne.n	80007b0 <HAL_TIM_IC_CaptureCallback+0xc>
 80007c8:	4801      	ldr	r0, [pc, #4]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80007ca:	f003 fa6b 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
}
 80007ce:	e7ef      	b.n	80007b0 <HAL_TIM_IC_CaptureCallback+0xc>
 80007d0:	20000740 	.word	0x20000740
 80007d4:	20000640 	.word	0x20000640

080007d8 <HAL_TIM_PeriodElapsedCallback>:
{
 80007d8:	b570      	push	{r4, r5, r6, lr}
 80007da:	0004      	movs	r4, r0
	if (htim->Instance == TIM22)
 80007dc:	4b9c      	ldr	r3, [pc, #624]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80007de:	6802      	ldr	r2, [r0, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d009      	beq.n	80007f8 <HAL_TIM_PeriodElapsedCallback+0x20>
	if (htim->Instance == TIM6)
 80007e4:	4b9b      	ldr	r3, [pc, #620]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d00b      	beq.n	8000804 <HAL_TIM_PeriodElapsedCallback+0x2c>
	if (htim->Instance == TIM7)
 80007ec:	4b9a      	ldr	r3, [pc, #616]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d100      	bne.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80007f4:	e0c4      	b.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x1a8>
}
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(C_LED_GPIO_Port, C_LED_Pin);
 80007f8:	20a0      	movs	r0, #160	; 0xa0
 80007fa:	2120      	movs	r1, #32
 80007fc:	05c0      	lsls	r0, r0, #23
 80007fe:	f002 f83f 	bl	8002880 <HAL_GPIO_TogglePin>
 8000802:	e7ef      	b.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0xc>
		bool btnBusyFlag = HAL_GPIO_ReadPin(GPIOA, MAIN_BTN_Pin);
 8000804:	20a0      	movs	r0, #160	; 0xa0
 8000806:	2110      	movs	r1, #16
 8000808:	05c0      	lsls	r0, r0, #23
 800080a:	f002 f82d 	bl	8002868 <HAL_GPIO_ReadPin>
 800080e:	0005      	movs	r5, r0
		HAL_TIM_Base_Stop_IT(&TIMER_BUTTON_BUFFER);
 8000810:	4892      	ldr	r0, [pc, #584]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000812:	f003 fa7b 	bl	8003d0c <HAL_TIM_Base_Stop_IT>
		if (!btnBusyFlag)
 8000816:	2d00      	cmp	r5, #0
 8000818:	d00b      	beq.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x5a>
			pressBtnCounter = 0;
 800081a:	4b91      	ldr	r3, [pc, #580]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
			switch (g_workStep)
 8000820:	4b90      	ldr	r3, [pc, #576]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b0b      	cmp	r3, #11
 8000828:	d8e0      	bhi.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4a8e      	ldr	r2, [pc, #568]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800082e:	58d3      	ldr	r3, [r2, r3]
 8000830:	469f      	mov	pc, r3
			HAL_TIM_Base_Start_IT(&TIMER_BUTTON_BUFFER);
 8000832:	488a      	ldr	r0, [pc, #552]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000834:	f003 fa36 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
			if ((g_workStep >= 2 && g_workStep <=61)) pressBtnCounter++;
 8000838:	4b8a      	ldr	r3, [pc, #552]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b01      	cmp	r3, #1
 8000840:	d909      	bls.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8000842:	4b88      	ldr	r3, [pc, #544]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b3d      	cmp	r3, #61	; 0x3d
 800084a:	d804      	bhi.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x7e>
 800084c:	4a84      	ldr	r2, [pc, #528]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800084e:	7813      	ldrb	r3, [r2, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	7013      	strb	r3, [r2, #0]
			if (pressBtnCounter > PRESS_BTN_TIME)
 8000856:	4b82      	ldr	r3, [pc, #520]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b0a      	cmp	r3, #10
 800085e:	d9c5      	bls.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
				HAL_TIM_Base_Stop_IT(&TIMER_BUTTON_BUFFER);
 8000860:	487e      	ldr	r0, [pc, #504]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8000862:	f003 fa53 	bl	8003d0c <HAL_TIM_Base_Stop_IT>
				switch (g_workStep)
 8000866:	4b7f      	ldr	r3, [pc, #508]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b0c      	cmp	r3, #12
 800086e:	d807      	bhi.n	8000880 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8000870:	2b01      	cmp	r3, #1
 8000872:	d922      	bls.n	80008ba <HAL_TIM_PeriodElapsedCallback+0xe2>
 8000874:	2b0c      	cmp	r3, #12
 8000876:	d820      	bhi.n	80008ba <HAL_TIM_PeriodElapsedCallback+0xe2>
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4a7c      	ldr	r2, [pc, #496]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800087c:	58d3      	ldr	r3, [r2, r3]
 800087e:	469f      	mov	pc, r3
 8000880:	2b3d      	cmp	r3, #61	; 0x3d
 8000882:	d11a      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0xe2>
						if (!g_selector) g_workStep = STEP_START_POSITION_SET;
 8000884:	4b7a      	ldr	r3, [pc, #488]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d13c      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x12e>
 800088c:	4b75      	ldr	r3, [pc, #468]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800088e:	2207      	movs	r2, #7
 8000890:	701a      	strb	r2, [r3, #0]
						g_selector = 0;
 8000892:	4b77      	ldr	r3, [pc, #476]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
				if (!exception)
 8000898:	e014      	b.n	80008c4 <HAL_TIM_PeriodElapsedCallback+0xec>
						g_workStep = STEP_PROJECT_TASKS_LIST;
 800089a:	4b72      	ldr	r3, [pc, #456]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800089c:	220c      	movs	r2, #12
 800089e:	701a      	strb	r2, [r3, #0]
				if (!exception)
 80008a0:	e010      	b.n	80008c4 <HAL_TIM_PeriodElapsedCallback+0xec>
						g_workStep = STEP_SELECT_PROJECT;
 80008a2:	4b70      	ldr	r3, [pc, #448]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
				if (!exception)
 80008a8:	e00c      	b.n	80008c4 <HAL_TIM_PeriodElapsedCallback+0xec>
						g_width_MAIN = Array_To_Int_Change_Value();
 80008aa:	f000 fd13 	bl	80012d4 <Array_To_Int_Change_Value>
 80008ae:	4b71      	ldr	r3, [pc, #452]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80008b0:	8018      	strh	r0, [r3, #0]
						Save_Set_Value(g_width_MAIN);
 80008b2:	8818      	ldrh	r0, [r3, #0]
 80008b4:	b280      	uxth	r0, r0
 80008b6:	f000 fdbd 	bl	8001434 <Save_Set_Value>
					g_workStep++;
 80008ba:	4a6a      	ldr	r2, [pc, #424]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80008bc:	7813      	ldrb	r3, [r2, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	7013      	strb	r3, [r2, #0]
				pressBtnCounter = 0;
 80008c4:	4b66      	ldr	r3, [pc, #408]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
				Set_Theme();
 80008ca:	f001 f973 	bl	8001bb4 <Set_Theme>
 80008ce:	e78d      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
						g_turns_MAIN = Array_To_Int_Change_Value();
 80008d0:	f000 fd00 	bl	80012d4 <Array_To_Int_Change_Value>
 80008d4:	4b68      	ldr	r3, [pc, #416]	; (8000a78 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80008d6:	8018      	strh	r0, [r3, #0]
						Save_Set_Value(g_turns_MAIN);
 80008d8:	8818      	ldrh	r0, [r3, #0]
 80008da:	b280      	uxth	r0, r0
 80008dc:	f000 fdaa 	bl	8001434 <Save_Set_Value>
				if (!exception)
 80008e0:	e7eb      	b.n	80008ba <HAL_TIM_PeriodElapsedCallback+0xe2>
						g_diameter_MAIN = Array_To_Int_Change_Value();
 80008e2:	f000 fcf7 	bl	80012d4 <Array_To_Int_Change_Value>
 80008e6:	4b65      	ldr	r3, [pc, #404]	; (8000a7c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80008e8:	8018      	strh	r0, [r3, #0]
						Save_Set_Value(g_diameter_MAIN);
 80008ea:	8818      	ldrh	r0, [r3, #0]
 80008ec:	b280      	uxth	r0, r0
 80008ee:	f000 fda1 	bl	8001434 <Save_Set_Value>
				if (!exception)
 80008f2:	e7e2      	b.n	80008ba <HAL_TIM_PeriodElapsedCallback+0xe2>
						g_speed_MAIN = Array_To_Int_Change_Value();
 80008f4:	f000 fcee 	bl	80012d4 <Array_To_Int_Change_Value>
 80008f8:	4b61      	ldr	r3, [pc, #388]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80008fa:	8018      	strh	r0, [r3, #0]
						Save_Set_Value(g_speed_MAIN);
 80008fc:	8818      	ldrh	r0, [r3, #0]
 80008fe:	b280      	uxth	r0, r0
 8000900:	f000 fd98 	bl	8001434 <Save_Set_Value>
				if (!exception)
 8000904:	e7d9      	b.n	80008ba <HAL_TIM_PeriodElapsedCallback+0xe2>
							g_workStep = STEP_WIDTH_SET;
 8000906:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000908:	2202      	movs	r2, #2
 800090a:	701a      	strb	r2, [r3, #0]
							g_correctionFlag = 1;
 800090c:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800090e:	3a01      	subs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	e7be      	b.n	8000892 <HAL_TIM_PeriodElapsedCallback+0xba>
					if (g_projectSelect == 0) g_workStep = STEP_WIDTH_SET;
 8000914:	4b5c      	ldr	r3, [pc, #368]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d105      	bne.n	8000928 <HAL_TIM_PeriodElapsedCallback+0x150>
 800091c:	4b51      	ldr	r3, [pc, #324]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800091e:	2202      	movs	r2, #2
 8000920:	701a      	strb	r2, [r3, #0]
					Set_Theme();
 8000922:	f001 f947 	bl	8001bb4 <Set_Theme>
					break;
 8000926:	e761      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
					else g_workStep = STEP_PROJECT_DETAILS;
 8000928:	4b4e      	ldr	r3, [pc, #312]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800092a:	220b      	movs	r2, #11
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	e7f8      	b.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x14a>
					g_workStep = STEP_SELECT_PROJECT;
 8000930:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
					Set_Theme();
 8000936:	f001 f93d 	bl	8001bb4 <Set_Theme>
					break;
 800093a:	e757      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
					Show_Value_Screen(VAL_TYPE_CARCASS_WIDTH, VALUE_CHANGE_FLAG_NO, 0, RUN_FLAG_CONTI);
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fdcc 	bl	80014e0 <Show_Value_Screen>
					break;
 8000948:	e750      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
					Show_Value_Screen(VAL_TYPE_CARCASS_COIL_TURNS, VALUE_CHANGE_FLAG_NO, 0, RUN_FLAG_CONTI);
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fdc5 	bl	80014e0 <Show_Value_Screen>
					break;
 8000956:	e749      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
					Show_Value_Screen(VAL_TYPE_WINDING_DIAMETER, VALUE_CHANGE_FLAG_NO, 0, RUN_FLAG_CONTI);
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2002      	movs	r0, #2
 8000960:	f000 fdbe 	bl	80014e0 <Show_Value_Screen>
					break;
 8000964:	e742      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
					Show_Value_Screen(VAL_TYPE_WINDING_SPEED, VALUE_CHANGE_FLAG_NO, 0, RUN_FLAG_CONTI);
 8000966:	2300      	movs	r3, #0
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2003      	movs	r0, #3
 800096e:	f000 fdb7 	bl	80014e0 <Show_Value_Screen>
					break;
 8000972:	e73b      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
					g_workStep = STEP_CORRECTNES_QUERY;
 8000974:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000976:	223d      	movs	r2, #61	; 0x3d
 8000978:	701a      	strb	r2, [r3, #0]
					Set_Theme();
 800097a:	f001 f91b 	bl	8001bb4 <Set_Theme>
					break;
 800097e:	e735      	b.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x14>
		HAL_TIM_Base_Stop_IT(&TIMER_ENCODER_BUFFER);
 8000980:	4842      	ldr	r0, [pc, #264]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000982:	f003 f9c3 	bl	8003d0c <HAL_TIM_Base_Stop_IT>
		encoderCount = (__HAL_TIM_GET_COUNTER(&TIMER_ENCODER) / 2);
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	b29b      	uxth	r3, r3
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000992:	8013      	strh	r3, [r2, #0]
		if (encoderCount != encoderCountPrev)
 8000994:	8813      	ldrh	r3, [r2, #0]
 8000996:	4a40      	ldr	r2, [pc, #256]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	4293      	cmp	r3, r2
 800099e:	d100      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x1ca>
 80009a0:	e729      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
			if (encoderCount > encoderCountPrev) direction = 1;
 80009a2:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80009a4:	881c      	ldrh	r4, [r3, #0]
 80009a6:	b2a4      	uxth	r4, r4
 80009a8:	483b      	ldr	r0, [pc, #236]	; (8000a98 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80009aa:	8801      	ldrh	r1, [r0, #0]
 80009ac:	b289      	uxth	r1, r1
 80009ae:	42a1      	cmp	r1, r4
 80009b0:	4192      	sbcs	r2, r2
 80009b2:	4252      	negs	r2, r2
			encoderCountPrev = encoderCount;
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	8003      	strh	r3, [r0, #0]
			switch (g_workStep)
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d809      	bhi.n	80009d8 <HAL_TIM_PeriodElapsedCallback+0x200>
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d100      	bne.n	80009ca <HAL_TIM_PeriodElapsedCallback+0x1f2>
 80009c8:	e715      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80009ca:	2b05      	cmp	r3, #5
 80009cc:	d900      	bls.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80009ce:	e712      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4832      	ldr	r0, [pc, #200]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80009d4:	58c3      	ldr	r3, [r0, r3]
 80009d6:	469f      	mov	pc, r3
 80009d8:	2b3d      	cmp	r3, #61	; 0x3d
 80009da:	d000      	beq.n	80009de <HAL_TIM_PeriodElapsedCallback+0x206>
 80009dc:	e70b      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
					Show_Summary_Correctness_Query(direction, RUN_FLAG_CONTI);
 80009de:	2100      	movs	r1, #0
 80009e0:	0010      	movs	r0, r2
 80009e2:	f001 f837 	bl	8001a54 <Show_Summary_Correctness_Query>
}
 80009e6:	e706      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
					if (!direction)
 80009e8:	428c      	cmp	r4, r1
 80009ea:	d80b      	bhi.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x22c>
						if (g_projectSelect > 0) g_projectSelect--;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d004      	beq.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x226>
 80009f4:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009f6:	7813      	ldrb	r3, [r2, #0]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	7013      	strb	r3, [r2, #0]
					Set_Theme();
 80009fe:	f001 f8d9 	bl	8001bb4 <Set_Theme>
					break;
 8000a02:	e6f8      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
						if ((g_projectSelect) < G_PROJECT_COUNT) g_projectSelect++;
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d9f5      	bls.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x226>
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a14:	7813      	ldrb	r3, [r2, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	7013      	strb	r3, [r2, #0]
 8000a1c:	e7ef      	b.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x226>
					Show_Value_Screen(VAL_TYPE_CARCASS_WIDTH, VALUE_CHANGE_FLAG_YES, direction, RUN_FLAG_CONTI);
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2101      	movs	r1, #1
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fd5c 	bl	80014e0 <Show_Value_Screen>
					break;
 8000a28:	e6e5      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
					Show_Value_Screen(VAL_TYPE_CARCASS_COIL_TURNS, VALUE_CHANGE_FLAG_YES, direction, RUN_FLAG_CONTI);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f000 fd56 	bl	80014e0 <Show_Value_Screen>
					break;
 8000a34:	e6df      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
					Show_Value_Screen(VAL_TYPE_WINDING_DIAMETER, VALUE_CHANGE_FLAG_YES, direction, RUN_FLAG_CONTI);
 8000a36:	2300      	movs	r3, #0
 8000a38:	2101      	movs	r1, #1
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f000 fd50 	bl	80014e0 <Show_Value_Screen>
					break;
 8000a40:	e6d9      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
					Show_Value_Screen(VAL_TYPE_WINDING_SPEED, VALUE_CHANGE_FLAG_YES, direction, RUN_FLAG_CONTI);
 8000a42:	2300      	movs	r3, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	2003      	movs	r0, #3
 8000a48:	f000 fd4a 	bl	80014e0 <Show_Value_Screen>
					break;
 8000a4c:	e6d3      	b.n	80007f6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40011400 	.word	0x40011400
 8000a54:	40001000 	.word	0x40001000
 8000a58:	40001400 	.word	0x40001400
 8000a5c:	20000700 	.word	0x20000700
 8000a60:	200000f6 	.word	0x200000f6
 8000a64:	20000638 	.word	0x20000638
 8000a68:	08005284 	.word	0x08005284
 8000a6c:	080052b4 	.word	0x080052b4
 8000a70:	20000636 	.word	0x20000636
 8000a74:	200000f4 	.word	0x200000f4
 8000a78:	200000f2 	.word	0x200000f2
 8000a7c:	200000ee 	.word	0x200000ee
 8000a80:	200000f0 	.word	0x200000f0
 8000a84:	20000634 	.word	0x20000634
 8000a88:	20000635 	.word	0x20000635
 8000a8c:	20000740 	.word	0x20000740
 8000a90:	20000640 	.word	0x20000640
 8000a94:	200000ec 	.word	0x200000ec
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	080052e8 	.word	0x080052e8
 8000aa0:	080055ed 	.word	0x080055ed

08000aa4 <HAL_GPIO_EXTI_Callback>:
{
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	0005      	movs	r5, r0
	uint8_t tim6BusyFlag = HAL_TIM_Base_GetState(&TIMER_BUTTON_BUFFER);
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <HAL_GPIO_EXTI_Callback+0x28>)
 8000aaa:	f003 fc4d 	bl	8004348 <HAL_TIM_Base_GetState>
 8000aae:	0004      	movs	r4, r0
	uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&TIMER_ENCODER_BUFFER);
 8000ab0:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ab2:	f003 fc49 	bl	8004348 <HAL_TIM_Base_GetState>
	if ((tim6BusyFlag == 1) && (tim7BusyFlag == 1))
 8000ab6:	2c01      	cmp	r4, #1
 8000ab8:	d000      	beq.n	8000abc <HAL_GPIO_EXTI_Callback+0x18>
}
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
	if ((tim6BusyFlag == 1) && (tim7BusyFlag == 1))
 8000abc:	2801      	cmp	r0, #1
 8000abe:	d1fc      	bne.n	8000aba <HAL_GPIO_EXTI_Callback+0x16>
		if (GPIO_Pin == MAIN_BTN_Pin) HAL_TIM_Base_Start_IT(&TIMER_BUTTON_BUFFER);
 8000ac0:	2d10      	cmp	r5, #16
 8000ac2:	d1fa      	bne.n	8000aba <HAL_GPIO_EXTI_Callback+0x16>
 8000ac4:	4801      	ldr	r0, [pc, #4]	; (8000acc <HAL_GPIO_EXTI_Callback+0x28>)
 8000ac6:	f003 f8ed 	bl	8003ca4 <HAL_TIM_Base_Start_IT>
}
 8000aca:	e7f6      	b.n	8000aba <HAL_GPIO_EXTI_Callback+0x16>
 8000acc:	20000700 	.word	0x20000700
 8000ad0:	20000740 	.word	0x20000740

08000ad4 <Error_Handler>:
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <Error_Handler+0x2>

08000ad8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000ad8:	b510      	push	{r4, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000ada:	4243      	negs	r3, r0
 8000adc:	4158      	adcs	r0, r3
 8000ade:	4241      	negs	r1, r0
 8000ae0:	23fe      	movs	r3, #254	; 0xfe
 8000ae2:	4399      	bics	r1, r3
 8000ae4:	31ff      	adds	r1, #255	; 0xff
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	00d2      	lsls	r2, r2, #3
 8000aea:	4802      	ldr	r0, [pc, #8]	; (8000af4 <SSD1306_Fill+0x1c>)
 8000aec:	f003 ff55 	bl	800499a <memset>
}
 8000af0:	bd10      	pop	{r4, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	20000100 	.word	0x20000100

08000af8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000af8:	b510      	push	{r4, lr}
	if (
 8000afa:	287f      	cmp	r0, #127	; 0x7f
 8000afc:	d812      	bhi.n	8000b24 <SSD1306_DrawPixel+0x2c>
		x >= SSD1306_WIDTH ||
 8000afe:	293f      	cmp	r1, #63	; 0x3f
 8000b00:	d810      	bhi.n	8000b24 <SSD1306_DrawPixel+0x2c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <SSD1306_DrawPixel+0x4c>)
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00d      	beq.n	8000b26 <SSD1306_DrawPixel+0x2e>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d00d      	beq.n	8000b2a <SSD1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b0e:	08cb      	lsrs	r3, r1, #3
 8000b10:	01db      	lsls	r3, r3, #7
 8000b12:	1818      	adds	r0, r3, r0
 8000b14:	4c0c      	ldr	r4, [pc, #48]	; (8000b48 <SSD1306_DrawPixel+0x50>)
 8000b16:	2307      	movs	r3, #7
 8000b18:	4019      	ands	r1, r3
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	408a      	lsls	r2, r1
 8000b1e:	5c23      	ldrb	r3, [r4, r0]
 8000b20:	4393      	bics	r3, r2
 8000b22:	5423      	strb	r3, [r4, r0]
	}
}
 8000b24:	bd10      	pop	{r4, pc}
	if (color == SSD1306_COLOR_WHITE) {
 8000b26:	2a01      	cmp	r2, #1
 8000b28:	d1f1      	bne.n	8000b0e <SSD1306_DrawPixel+0x16>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b2a:	08cb      	lsrs	r3, r1, #3
 8000b2c:	01db      	lsls	r3, r3, #7
 8000b2e:	1818      	adds	r0, r3, r0
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SSD1306_DrawPixel+0x50>)
 8000b32:	2307      	movs	r3, #7
 8000b34:	4019      	ands	r1, r3
 8000b36:	3b06      	subs	r3, #6
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	5c11      	ldrb	r1, [r2, r0]
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	5413      	strb	r3, [r2, r0]
 8000b40:	e7f0      	b.n	8000b24 <SSD1306_DrawPixel+0x2c>
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	200000f8 	.word	0x200000f8
 8000b48:	20000100 	.word	0x20000100

08000b4c <SSD1306_DrawBitmap>:
{
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	46de      	mov	lr, fp
 8000b50:	4657      	mov	r7, sl
 8000b52:	464e      	mov	r6, r9
 8000b54:	4645      	mov	r5, r8
 8000b56:	b5e0      	push	{r5, r6, r7, lr}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	4683      	mov	fp, r0
 8000b5c:	9100      	str	r1, [sp, #0]
 8000b5e:	9203      	str	r2, [sp, #12]
 8000b60:	001f      	movs	r7, r3
 8000b62:	ab0e      	add	r3, sp, #56	; 0x38
 8000b64:	2400      	movs	r4, #0
 8000b66:	5f1c      	ldrsh	r4, [r3, r4]
 8000b68:	9401      	str	r4, [sp, #4]
 8000b6a:	ab0f      	add	r3, sp, #60	; 0x3c
 8000b6c:	8819      	ldrh	r1, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b6e:	1dfa      	adds	r2, r7, #7
 8000b70:	17d0      	asrs	r0, r2, #31
 8000b72:	2307      	movs	r3, #7
 8000b74:	4003      	ands	r3, r0
 8000b76:	189b      	adds	r3, r3, r2
 8000b78:	10db      	asrs	r3, r3, #3
 8000b7a:	9302      	str	r3, [sp, #8]
    for(int16_t j=0; j<h; j++, y++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	469a      	mov	sl, r3
    uint8_t byte = 0;
 8000b80:	2500      	movs	r5, #0
    for(int16_t j=0; j<h; j++, y++)
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	dd34      	ble.n	8000bf0 <SSD1306_DrawBitmap+0xa4>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b86:	b2cb      	uxtb	r3, r1
 8000b88:	4699      	mov	r9, r3
 8000b8a:	e026      	b.n	8000bda <SSD1306_DrawBitmap+0x8e>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b8c:	17da      	asrs	r2, r3, #31
 8000b8e:	4032      	ands	r2, r6
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	10db      	asrs	r3, r3, #3
 8000b94:	4642      	mov	r2, r8
 8000b96:	5cd5      	ldrb	r5, [r2, r3]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b98:	b26b      	sxtb	r3, r5
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db09      	blt.n	8000bb2 <SSD1306_DrawBitmap+0x66>
        for(int16_t i=0; i<w; i++)
 8000b9e:	3401      	adds	r4, #1
 8000ba0:	b223      	sxth	r3, r4
 8000ba2:	42bb      	cmp	r3, r7
 8000ba4:	d00e      	beq.n	8000bc4 <SSD1306_DrawBitmap+0x78>
            if(i & 7)
 8000ba6:	b29c      	uxth	r4, r3
 8000ba8:	4233      	tst	r3, r6
 8000baa:	d0ef      	beq.n	8000b8c <SSD1306_DrawBitmap+0x40>
               byte <<= 1;
 8000bac:	006d      	lsls	r5, r5, #1
 8000bae:	b2ed      	uxtb	r5, r5
 8000bb0:	e7f2      	b.n	8000b98 <SSD1306_DrawBitmap+0x4c>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000bb2:	466b      	mov	r3, sp
 8000bb4:	8819      	ldrh	r1, [r3, #0]
 8000bb6:	465b      	mov	r3, fp
 8000bb8:	18e0      	adds	r0, r4, r3
 8000bba:	b280      	uxth	r0, r0
 8000bbc:	464a      	mov	r2, r9
 8000bbe:	f7ff ff9b 	bl	8000af8 <SSD1306_DrawPixel>
 8000bc2:	e7ec      	b.n	8000b9e <SSD1306_DrawBitmap+0x52>
    for(int16_t j=0; j<h; j++, y++)
 8000bc4:	4653      	mov	r3, sl
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	469a      	mov	sl, r3
 8000bcc:	9b00      	ldr	r3, [sp, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	9b01      	ldr	r3, [sp, #4]
 8000bd6:	4553      	cmp	r3, sl
 8000bd8:	dd0a      	ble.n	8000bf0 <SSD1306_DrawBitmap+0xa4>
        for(int16_t i=0; i<w; i++)
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	ddf2      	ble.n	8000bc4 <SSD1306_DrawBitmap+0x78>
 8000bde:	2300      	movs	r3, #0
            if(i & 7)
 8000be0:	2607      	movs	r6, #7
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000be2:	4652      	mov	r2, sl
 8000be4:	9902      	ldr	r1, [sp, #8]
 8000be6:	434a      	muls	r2, r1
 8000be8:	9903      	ldr	r1, [sp, #12]
 8000bea:	4688      	mov	r8, r1
 8000bec:	4490      	add	r8, r2
 8000bee:	e7da      	b.n	8000ba6 <SSD1306_DrawBitmap+0x5a>
}
 8000bf0:	b005      	add	sp, #20
 8000bf2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bf4:	46bb      	mov	fp, r7
 8000bf6:	46b2      	mov	sl, r6
 8000bf8:	46a9      	mov	r9, r5
 8000bfa:	46a0      	mov	r8, r4
 8000bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000c00 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <SSD1306_GotoXY+0x8>)
 8000c02:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000c04:	8059      	strh	r1, [r3, #2]
}
 8000c06:	4770      	bx	lr
 8000c08:	200000f8 	.word	0x200000f8

08000c0c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	46de      	mov	lr, fp
 8000c10:	4657      	mov	r7, sl
 8000c12:	464e      	mov	r6, r9
 8000c14:	4645      	mov	r5, r8
 8000c16:	b5e0      	push	{r5, r6, r7, lr}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	9002      	str	r0, [sp, #8]
 8000c1c:	000e      	movs	r6, r1
 8000c1e:	0010      	movs	r0, r2
 8000c20:	9201      	str	r2, [sp, #4]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <SSD1306_Putc+0xd4>)
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	0019      	movs	r1, r3
 8000c28:	9303      	str	r3, [sp, #12]
 8000c2a:	7833      	ldrb	r3, [r6, #0]
 8000c2c:	468c      	mov	ip, r1
 8000c2e:	4463      	add	r3, ip
	if (
 8000c30:	2b7f      	cmp	r3, #127	; 0x7f
 8000c32:	dc51      	bgt.n	8000cd8 <SSD1306_Putc+0xcc>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <SSD1306_Putc+0xd4>)
 8000c36:	885f      	ldrh	r7, [r3, #2]
 8000c38:	7873      	ldrb	r3, [r6, #1]
 8000c3a:	18fa      	adds	r2, r7, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c3c:	2a3f      	cmp	r2, #63	; 0x3f
 8000c3e:	dc4d      	bgt.n	8000cdc <SSD1306_Putc+0xd0>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d03b      	beq.n	8000cbc <SSD1306_Putc+0xb0>
 8000c44:	2100      	movs	r1, #0
 8000c46:	468b      	mov	fp, r1
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c48:	0001      	movs	r1, r0
 8000c4a:	424a      	negs	r2, r1
 8000c4c:	414a      	adcs	r2, r1
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	4692      	mov	sl, r2
 8000c52:	e01f      	b.n	8000c94 <SSD1306_Putc+0x88>
 8000c54:	4652      	mov	r2, sl
 8000c56:	0039      	movs	r1, r7
 8000c58:	0020      	movs	r0, r4
 8000c5a:	f7ff ff4d 	bl	8000af8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c5e:	3501      	adds	r5, #1
 8000c60:	3401      	adds	r4, #1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	4643      	mov	r3, r8
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	d90a      	bls.n	8000c82 <SSD1306_Putc+0x76>
			if ((b << j) & 0x8000) {
 8000c6c:	0033      	movs	r3, r6
 8000c6e:	40ab      	lsls	r3, r5
 8000c70:	464a      	mov	r2, r9
 8000c72:	4213      	tst	r3, r2
 8000c74:	d0ee      	beq.n	8000c54 <SSD1306_Putc+0x48>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c76:	9a01      	ldr	r2, [sp, #4]
 8000c78:	0039      	movs	r1, r7
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	f7ff ff3c 	bl	8000af8 <SSD1306_DrawPixel>
 8000c80:	e7ed      	b.n	8000c5e <SSD1306_Putc+0x52>
 8000c82:	4646      	mov	r6, r8
	for (i = 0; i < Font->FontHeight; i++) {
 8000c84:	2301      	movs	r3, #1
 8000c86:	469c      	mov	ip, r3
 8000c88:	44e3      	add	fp, ip
 8000c8a:	7873      	ldrb	r3, [r6, #1]
 8000c8c:	3701      	adds	r7, #1
 8000c8e:	b2bf      	uxth	r7, r7
 8000c90:	455b      	cmp	r3, fp
 8000c92:	d913      	bls.n	8000cbc <SSD1306_Putc+0xb0>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c94:	9a02      	ldr	r2, [sp, #8]
 8000c96:	3a20      	subs	r2, #32
 8000c98:	4353      	muls	r3, r2
 8000c9a:	445b      	add	r3, fp
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	6872      	ldr	r2, [r6, #4]
 8000ca0:	5a9b      	ldrh	r3, [r3, r2]
 8000ca2:	4698      	mov	r8, r3
		for (j = 0; j < Font->FontWidth; j++) {
 8000ca4:	7833      	ldrb	r3, [r6, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0ec      	beq.n	8000c84 <SSD1306_Putc+0x78>
 8000caa:	9c03      	ldr	r4, [sp, #12]
 8000cac:	2500      	movs	r5, #0
			if ((b << j) & 0x8000) {
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	0033      	movs	r3, r6
 8000cb6:	4646      	mov	r6, r8
 8000cb8:	4698      	mov	r8, r3
 8000cba:	e7d7      	b.n	8000c6c <SSD1306_Putc+0x60>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cbc:	7833      	ldrb	r3, [r6, #0]
 8000cbe:	9a03      	ldr	r2, [sp, #12]
 8000cc0:	4694      	mov	ip, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <SSD1306_Putc+0xd4>)
 8000cc6:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8000cc8:	9802      	ldr	r0, [sp, #8]
}
 8000cca:	b005      	add	sp, #20
 8000ccc:	bcf0      	pop	{r4, r5, r6, r7}
 8000cce:	46bb      	mov	fp, r7
 8000cd0:	46b2      	mov	sl, r6
 8000cd2:	46a9      	mov	r9, r5
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
 8000cd8:	2000      	movs	r0, #0
 8000cda:	e7f6      	b.n	8000cca <SSD1306_Putc+0xbe>
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e7f4      	b.n	8000cca <SSD1306_Putc+0xbe>
 8000ce0:	200000f8 	.word	0x200000f8

08000ce4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	0004      	movs	r4, r0
 8000ce8:	000e      	movs	r6, r1
 8000cea:	0015      	movs	r5, r2
	/* Write characters */
	while (*str) {
 8000cec:	7800      	ldrb	r0, [r0, #0]
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d00b      	beq.n	8000d0a <SSD1306_Puts+0x26>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000cf2:	002a      	movs	r2, r5
 8000cf4:	0031      	movs	r1, r6
 8000cf6:	f7ff ff89 	bl	8000c0c <SSD1306_Putc>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	7820      	ldrb	r0, [r4, #0]
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	d103      	bne.n	8000d0a <SSD1306_Puts+0x26>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8000d02:	3401      	adds	r4, #1
	while (*str) {
 8000d04:	7820      	ldrb	r0, [r4, #0]
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d1f3      	bne.n	8000cf2 <SSD1306_Puts+0xe>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}

08000d0c <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d0e:	46de      	mov	lr, fp
 8000d10:	4657      	mov	r7, sl
 8000d12:	464e      	mov	r6, r9
 8000d14:	4645      	mov	r5, r8
 8000d16:	b5e0      	push	{r5, r6, r7, lr}
 8000d18:	b085      	sub	sp, #20
 8000d1a:	ac0e      	add	r4, sp, #56	; 0x38
 8000d1c:	7824      	ldrb	r4, [r4, #0]
 8000d1e:	46a1      	mov	r9, r4
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d20:	1c04      	adds	r4, r0, #0
 8000d22:	287f      	cmp	r0, #127	; 0x7f
 8000d24:	d900      	bls.n	8000d28 <SSD1306_DrawLine+0x1c>
 8000d26:	247f      	movs	r4, #127	; 0x7f
 8000d28:	b2a4      	uxth	r4, r4
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d2a:	1c10      	adds	r0, r2, #0
 8000d2c:	2a7f      	cmp	r2, #127	; 0x7f
 8000d2e:	d900      	bls.n	8000d32 <SSD1306_DrawLine+0x26>
 8000d30:	207f      	movs	r0, #127	; 0x7f
 8000d32:	b282      	uxth	r2, r0
 8000d34:	4690      	mov	r8, r2
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d36:	1c0d      	adds	r5, r1, #0
 8000d38:	293f      	cmp	r1, #63	; 0x3f
 8000d3a:	d900      	bls.n	8000d3e <SSD1306_DrawLine+0x32>
 8000d3c:	253f      	movs	r5, #63	; 0x3f
 8000d3e:	b2ad      	uxth	r5, r5
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d40:	1c1a      	adds	r2, r3, #0
 8000d42:	2b3f      	cmp	r3, #63	; 0x3f
 8000d44:	d900      	bls.n	8000d48 <SSD1306_DrawLine+0x3c>
 8000d46:	223f      	movs	r2, #63	; 0x3f
 8000d48:	b292      	uxth	r2, r2
 8000d4a:	9201      	str	r2, [sp, #4]
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d4c:	4544      	cmp	r4, r8
 8000d4e:	d20f      	bcs.n	8000d70 <SSD1306_DrawLine+0x64>
 8000d50:	4643      	mov	r3, r8
 8000d52:	1b1b      	subs	r3, r3, r4
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	469a      	mov	sl, r3
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d58:	4295      	cmp	r5, r2
 8000d5a:	d319      	bcc.n	8000d90 <SSD1306_DrawLine+0x84>
 8000d5c:	9b01      	ldr	r3, [sp, #4]
 8000d5e:	1aef      	subs	r7, r5, r3
 8000d60:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8000d62:	4544      	cmp	r4, r8
 8000d64:	d247      	bcs.n	8000df6 <SSD1306_DrawLine+0xea>
 8000d66:	2301      	movs	r3, #1
 8000d68:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	e017      	b.n	8000da0 <SSD1306_DrawLine+0x94>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d70:	4643      	mov	r3, r8
 8000d72:	1ae3      	subs	r3, r4, r3
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	469a      	mov	sl, r3
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	429d      	cmp	r5, r3
 8000d7c:	d2ee      	bcs.n	8000d5c <SSD1306_DrawLine+0x50>
 8000d7e:	9b01      	ldr	r3, [sp, #4]
 8000d80:	1b5f      	subs	r7, r3, r5
 8000d82:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
 8000d88:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	e007      	b.n	8000da0 <SSD1306_DrawLine+0x94>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d90:	9b01      	ldr	r3, [sp, #4]
 8000d92:	1b5f      	subs	r7, r3, r5
 8000d94:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8000d96:	2301      	movs	r3, #1
 8000d98:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000d9a:	9302      	str	r3, [sp, #8]
	sx = (x0 < x1) ? 1 : -1; 
 8000d9c:	4544      	cmp	r4, r8
 8000d9e:	d227      	bcs.n	8000df0 <SSD1306_DrawLine+0xe4>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000da0:	4557      	cmp	r7, sl
 8000da2:	da2d      	bge.n	8000e00 <SSD1306_DrawLine+0xf4>
 8000da4:	4653      	mov	r3, sl
 8000da6:	0fde      	lsrs	r6, r3, #31
 8000da8:	4456      	add	r6, sl
 8000daa:	1076      	asrs	r6, r6, #1

	if (dx == 0) {
 8000dac:	4653      	mov	r3, sl
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d02c      	beq.n	8000e0c <SSD1306_DrawLine+0x100>
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 8000db2:	425b      	negs	r3, r3
 8000db4:	469b      	mov	fp, r3
	if (dy == 0) {
 8000db6:	2f00      	cmp	r7, #0
 8000db8:	d144      	bne.n	8000e44 <SSD1306_DrawLine+0x138>
		if (y1 < y0) {
 8000dba:	1c2b      	adds	r3, r5, #0
 8000dbc:	9a01      	ldr	r2, [sp, #4]
 8000dbe:	4295      	cmp	r5, r2
 8000dc0:	d900      	bls.n	8000dc4 <SSD1306_DrawLine+0xb8>
 8000dc2:	1c13      	adds	r3, r2, #0
 8000dc4:	b29d      	uxth	r5, r3
		if (x1 < x0) {
 8000dc6:	4544      	cmp	r4, r8
 8000dc8:	d902      	bls.n	8000dd0 <SSD1306_DrawLine+0xc4>
 8000dca:	0023      	movs	r3, r4
			x0 = tmp;
 8000dcc:	4644      	mov	r4, r8
			x1 = x0;
 8000dce:	4698      	mov	r8, r3
		for (i = x0; i <= x1; i++) {
 8000dd0:	b224      	sxth	r4, r4
 8000dd2:	4646      	mov	r6, r8
 8000dd4:	4544      	cmp	r4, r8
 8000dd6:	dc51      	bgt.n	8000e7c <SSD1306_DrawLine+0x170>
 8000dd8:	464f      	mov	r7, r9
			SSD1306_DrawPixel(i, y0, c);
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	003a      	movs	r2, r7
 8000dde:	0029      	movs	r1, r5
 8000de0:	0020      	movs	r0, r4
 8000de2:	f7ff fe89 	bl	8000af8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000de6:	3401      	adds	r4, #1
 8000de8:	b224      	sxth	r4, r4
 8000dea:	42b4      	cmp	r4, r6
 8000dec:	ddf5      	ble.n	8000dda <SSD1306_DrawLine+0xce>
 8000dee:	e045      	b.n	8000e7c <SSD1306_DrawLine+0x170>
	sx = (x0 < x1) ? 1 : -1; 
 8000df0:	3b02      	subs	r3, #2
 8000df2:	9303      	str	r3, [sp, #12]
 8000df4:	e7d4      	b.n	8000da0 <SSD1306_DrawLine+0x94>
 8000df6:	2301      	movs	r3, #1
 8000df8:	425b      	negs	r3, r3
 8000dfa:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8000dfc:	9302      	str	r3, [sp, #8]
 8000dfe:	e7cf      	b.n	8000da0 <SSD1306_DrawLine+0x94>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000e00:	0ffe      	lsrs	r6, r7, #31
 8000e02:	19f6      	adds	r6, r6, r7
 8000e04:	1076      	asrs	r6, r6, #1
 8000e06:	4276      	negs	r6, r6
 8000e08:	b236      	sxth	r6, r6
 8000e0a:	e7cf      	b.n	8000dac <SSD1306_DrawLine+0xa0>
		if (y1 < y0) {
 8000e0c:	9a01      	ldr	r2, [sp, #4]
 8000e0e:	4295      	cmp	r5, r2
 8000e10:	d902      	bls.n	8000e18 <SSD1306_DrawLine+0x10c>
 8000e12:	002b      	movs	r3, r5
			y0 = tmp;
 8000e14:	0015      	movs	r5, r2
			y1 = y0;
 8000e16:	9301      	str	r3, [sp, #4]
		if (x1 < x0) {
 8000e18:	1c23      	adds	r3, r4, #0
 8000e1a:	4544      	cmp	r4, r8
 8000e1c:	d900      	bls.n	8000e20 <SSD1306_DrawLine+0x114>
 8000e1e:	4643      	mov	r3, r8
 8000e20:	b29c      	uxth	r4, r3
		for (i = y0; i <= y1; i++) {
 8000e22:	b22d      	sxth	r5, r5
 8000e24:	9e01      	ldr	r6, [sp, #4]
 8000e26:	42b5      	cmp	r5, r6
 8000e28:	dc28      	bgt.n	8000e7c <SSD1306_DrawLine+0x170>
 8000e2a:	464f      	mov	r7, r9
			SSD1306_DrawPixel(x0, i, c);
 8000e2c:	b2ad      	uxth	r5, r5
 8000e2e:	003a      	movs	r2, r7
 8000e30:	0029      	movs	r1, r5
 8000e32:	0020      	movs	r0, r4
 8000e34:	f7ff fe60 	bl	8000af8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e38:	3501      	adds	r5, #1
 8000e3a:	b22d      	sxth	r5, r5
 8000e3c:	42b5      	cmp	r5, r6
 8000e3e:	ddf5      	ble.n	8000e2c <SSD1306_DrawLine+0x120>
 8000e40:	e01c      	b.n	8000e7c <SSD1306_DrawLine+0x170>
			x1 = x0;
 8000e42:	001e      	movs	r6, r3
		SSD1306_DrawPixel(x0, y0, c);
 8000e44:	464a      	mov	r2, r9
 8000e46:	0029      	movs	r1, r5
 8000e48:	0020      	movs	r0, r4
 8000e4a:	f7ff fe55 	bl	8000af8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000e4e:	45a0      	cmp	r8, r4
 8000e50:	d011      	beq.n	8000e76 <SSD1306_DrawLine+0x16a>
		if (e2 > -dx) {
 8000e52:	0033      	movs	r3, r6
 8000e54:	455e      	cmp	r6, fp
 8000e56:	dd05      	ble.n	8000e64 <SSD1306_DrawLine+0x158>
			err -= dy;
 8000e58:	1bf3      	subs	r3, r6, r7
 8000e5a:	b21b      	sxth	r3, r3
			x0 += sx;
 8000e5c:	9a03      	ldr	r2, [sp, #12]
 8000e5e:	4694      	mov	ip, r2
 8000e60:	4464      	add	r4, ip
 8000e62:	b2a4      	uxth	r4, r4
		} 
		if (e2 < dy) {
 8000e64:	42be      	cmp	r6, r7
 8000e66:	daec      	bge.n	8000e42 <SSD1306_DrawLine+0x136>
			err += dx;
 8000e68:	4453      	add	r3, sl
 8000e6a:	b21b      	sxth	r3, r3
			y0 += sy;
 8000e6c:	9a02      	ldr	r2, [sp, #8]
 8000e6e:	4694      	mov	ip, r2
 8000e70:	4465      	add	r5, ip
 8000e72:	b2ad      	uxth	r5, r5
 8000e74:	e7e5      	b.n	8000e42 <SSD1306_DrawLine+0x136>
		if (x0 == x1 && y0 == y1) {
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	429d      	cmp	r5, r3
 8000e7a:	d1ea      	bne.n	8000e52 <SSD1306_DrawLine+0x146>
		} 
	}
}
 8000e7c:	b005      	add	sp, #20
 8000e7e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e80:	46bb      	mov	fp, r7
 8000e82:	46b2      	mov	sl, r6
 8000e84:	46a9      	mov	r9, r5
 8000e86:	46a0      	mov	r8, r4
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e8a <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	b500      	push	{lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	0006      	movs	r6, r0
 8000e94:	000f      	movs	r7, r1
 8000e96:	001d      	movs	r5, r3
 8000e98:	ab08      	add	r3, sp, #32
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4698      	mov	r8, r3
	/* Check input parameters */
	if (
 8000e9e:	287f      	cmp	r0, #127	; 0x7f
 8000ea0:	d831      	bhi.n	8000f06 <SSD1306_DrawRectangle+0x7c>
		x >= SSD1306_WIDTH ||
 8000ea2:	293f      	cmp	r1, #63	; 0x3f
 8000ea4:	d82f      	bhi.n	8000f06 <SSD1306_DrawRectangle+0x7c>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000ea6:	1883      	adds	r3, r0, r2
 8000ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eaa:	dd02      	ble.n	8000eb2 <SSD1306_DrawRectangle+0x28>
		w = SSD1306_WIDTH - x;
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	1a12      	subs	r2, r2, r0
 8000eb0:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000eb2:	197b      	adds	r3, r7, r5
 8000eb4:	2b3f      	cmp	r3, #63	; 0x3f
 8000eb6:	dd02      	ble.n	8000ebe <SSD1306_DrawRectangle+0x34>
		h = SSD1306_HEIGHT - y;
 8000eb8:	2540      	movs	r5, #64	; 0x40
 8000eba:	1bed      	subs	r5, r5, r7
 8000ebc:	b2ad      	uxth	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000ebe:	1992      	adds	r2, r2, r6
 8000ec0:	b294      	uxth	r4, r2
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	0022      	movs	r2, r4
 8000eca:	0039      	movs	r1, r7
 8000ecc:	0030      	movs	r0, r6
 8000ece:	f7ff ff1d 	bl	8000d0c <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000ed2:	19ed      	adds	r5, r5, r7
 8000ed4:	b2ad      	uxth	r5, r5
 8000ed6:	4643      	mov	r3, r8
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	002b      	movs	r3, r5
 8000edc:	0022      	movs	r2, r4
 8000ede:	0029      	movs	r1, r5
 8000ee0:	0030      	movs	r0, r6
 8000ee2:	f7ff ff13 	bl	8000d0c <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	002b      	movs	r3, r5
 8000eec:	0032      	movs	r2, r6
 8000eee:	0039      	movs	r1, r7
 8000ef0:	0030      	movs	r0, r6
 8000ef2:	f7ff ff0b 	bl	8000d0c <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000ef6:	4643      	mov	r3, r8
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	002b      	movs	r3, r5
 8000efc:	0022      	movs	r2, r4
 8000efe:	0039      	movs	r1, r7
 8000f00:	0020      	movs	r0, r4
 8000f02:	f7ff ff03 	bl	8000d0c <SSD1306_DrawLine>
}
 8000f06:	b002      	add	sp, #8
 8000f08:	bc80      	pop	{r7}
 8000f0a:	46b8      	mov	r8, r7
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f0e <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f10:	46d6      	mov	lr, sl
 8000f12:	464f      	mov	r7, r9
 8000f14:	4646      	mov	r6, r8
 8000f16:	b5c0      	push	{r6, r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	0006      	movs	r6, r0
 8000f1c:	4688      	mov	r8, r1
 8000f1e:	001f      	movs	r7, r3
 8000f20:	ab0a      	add	r3, sp, #40	; 0x28
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	469a      	mov	sl, r3
	uint8_t i;
	
	/* Check input parameters */
	if (
 8000f26:	287f      	cmp	r0, #127	; 0x7f
 8000f28:	d822      	bhi.n	8000f70 <SSD1306_DrawFilledRectangle+0x62>
		x >= SSD1306_WIDTH ||
 8000f2a:	293f      	cmp	r1, #63	; 0x3f
 8000f2c:	d820      	bhi.n	8000f70 <SSD1306_DrawFilledRectangle+0x62>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f2e:	1883      	adds	r3, r0, r2
 8000f30:	2b7f      	cmp	r3, #127	; 0x7f
 8000f32:	dd02      	ble.n	8000f3a <SSD1306_DrawFilledRectangle+0x2c>
		w = SSD1306_WIDTH - x;
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	1a12      	subs	r2, r2, r0
 8000f38:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f3a:	4643      	mov	r3, r8
 8000f3c:	19db      	adds	r3, r3, r7
 8000f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f40:	dd03      	ble.n	8000f4a <SSD1306_DrawFilledRectangle+0x3c>
		h = SSD1306_HEIGHT - y;
 8000f42:	2740      	movs	r7, #64	; 0x40
 8000f44:	4643      	mov	r3, r8
 8000f46:	1aff      	subs	r7, r7, r3
 8000f48:	b2bf      	uxth	r7, r7
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	2400      	movs	r4, #0
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000f4e:	1992      	adds	r2, r2, r6
 8000f50:	b293      	uxth	r3, r2
 8000f52:	4699      	mov	r9, r3
 8000f54:	4444      	add	r4, r8
 8000f56:	b2a1      	uxth	r1, r4
 8000f58:	4653      	mov	r3, sl
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	000b      	movs	r3, r1
 8000f5e:	464a      	mov	r2, r9
 8000f60:	0030      	movs	r0, r6
 8000f62:	f7ff fed3 	bl	8000d0c <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8000f66:	1c6c      	adds	r4, r5, #1
 8000f68:	b2e5      	uxtb	r5, r4
 8000f6a:	002c      	movs	r4, r5
 8000f6c:	42bd      	cmp	r5, r7
 8000f6e:	d9f1      	bls.n	8000f54 <SSD1306_DrawFilledRectangle+0x46>
	}
}
 8000f70:	b002      	add	sp, #8
 8000f72:	bce0      	pop	{r5, r6, r7}
 8000f74:	46ba      	mov	sl, r7
 8000f76:	46b1      	mov	r9, r6
 8000f78:	46a8      	mov	r8, r5
 8000f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f7c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f7c:	b530      	push	{r4, r5, lr}
 8000f7e:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8000f80:	ac02      	add	r4, sp, #8
 8000f82:	7021      	strb	r1, [r4, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d008      	beq.n	8000f9a <ssd1306_I2C_WriteMulti+0x1e>
 8000f88:	2400      	movs	r4, #0
dt[i+1] = data[i];
 8000f8a:	a902      	add	r1, sp, #8
 8000f8c:	1909      	adds	r1, r1, r4
 8000f8e:	5d15      	ldrb	r5, [r2, r4]
 8000f90:	704d      	strb	r5, [r1, #1]
for(i = 0; i < count; i++)
 8000f92:	1c61      	adds	r1, r4, #1
 8000f94:	b2cc      	uxtb	r4, r1
 8000f96:	429c      	cmp	r4, r3
 8000f98:	d3f7      	bcc.n	8000f8a <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b281      	uxth	r1, r0
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	9200      	str	r2, [sp, #0]
 8000fa4:	aa02      	add	r2, sp, #8
 8000fa6:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <ssd1306_I2C_WriteMulti+0x34>)
 8000fa8:	f001 fdd6 	bl	8002b58 <HAL_I2C_Master_Transmit>
}
 8000fac:	b043      	add	sp, #268	; 0x10c
 8000fae:	bd30      	pop	{r4, r5, pc}
 8000fb0:	200000a0 	.word	0x200000a0

08000fb4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000fb4:	b500      	push	{lr}
 8000fb6:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8000fb8:	466b      	mov	r3, sp
 8000fba:	7319      	strb	r1, [r3, #12]
	dt[1] = data;
 8000fbc:	735a      	strb	r2, [r3, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000fbe:	0001      	movs	r1, r0
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	aa03      	add	r2, sp, #12
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <ssd1306_I2C_Write+0x20>)
 8000fca:	f001 fdc5 	bl	8002b58 <HAL_I2C_Master_Transmit>
}
 8000fce:	b005      	add	sp, #20
 8000fd0:	bd00      	pop	{pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	200000a0 	.word	0x200000a0

08000fd8 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8000fd8:	b570      	push	{r4, r5, r6, lr}
	for (m = 0; m < 8; m++) {
 8000fda:	4d0e      	ldr	r5, [pc, #56]	; (8001014 <SSD1306_UpdateScreen+0x3c>)
void SSD1306_UpdateScreen(void) {
 8000fdc:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000fde:	0022      	movs	r2, r4
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	; 0x78
 8000fe4:	f7ff ffe6 	bl	8000fb4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	; 0x78
 8000fee:	f7ff ffe1 	bl	8000fb4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	; 0x78
 8000ff8:	f7ff ffdc 	bl	8000fb4 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	002a      	movs	r2, r5
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	2078      	movs	r0, #120	; 0x78
 8001004:	f7ff ffba 	bl	8000f7c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001008:	3401      	adds	r4, #1
 800100a:	b2e4      	uxtb	r4, r4
 800100c:	3580      	adds	r5, #128	; 0x80
 800100e:	2cb8      	cmp	r4, #184	; 0xb8
 8001010:	d1e5      	bne.n	8000fde <SSD1306_UpdateScreen+0x6>
}
 8001012:	bd70      	pop	{r4, r5, r6, pc}
 8001014:	20000100 	.word	0x20000100

08001018 <SSD1306_Clear>:
{
 8001018:	b510      	push	{r4, lr}
	SSD1306_Fill (0);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fd5c 	bl	8000ad8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001020:	f7ff ffda 	bl	8000fd8 <SSD1306_UpdateScreen>
}
 8001024:	bd10      	pop	{r4, pc}
	...

08001028 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001028:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800102a:	4b56      	ldr	r3, [pc, #344]	; (8001184 <SSD1306_Init+0x15c>)
 800102c:	2201      	movs	r2, #1
 800102e:	2178      	movs	r1, #120	; 0x78
 8001030:	4855      	ldr	r0, [pc, #340]	; (8001188 <SSD1306_Init+0x160>)
 8001032:	f001 fe59 	bl	8002ce8 <HAL_I2C_IsDeviceReady>
 8001036:	2800      	cmp	r0, #0
 8001038:	d000      	beq.n	800103c <SSD1306_Init+0x14>
 800103a:	e0a1      	b.n	8001180 <SSD1306_Init+0x158>
 800103c:	4b53      	ldr	r3, [pc, #332]	; (800118c <SSD1306_Init+0x164>)
	while(p>0)
 800103e:	3b01      	subs	r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1fc      	bne.n	800103e <SSD1306_Init+0x16>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001044:	22ae      	movs	r2, #174	; 0xae
 8001046:	2100      	movs	r1, #0
 8001048:	2078      	movs	r0, #120	; 0x78
 800104a:	f7ff ffb3 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800104e:	2220      	movs	r2, #32
 8001050:	2100      	movs	r1, #0
 8001052:	2078      	movs	r0, #120	; 0x78
 8001054:	f7ff ffae 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001058:	2210      	movs	r2, #16
 800105a:	2100      	movs	r1, #0
 800105c:	2078      	movs	r0, #120	; 0x78
 800105e:	f7ff ffa9 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001062:	22b0      	movs	r2, #176	; 0xb0
 8001064:	2100      	movs	r1, #0
 8001066:	2078      	movs	r0, #120	; 0x78
 8001068:	f7ff ffa4 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800106c:	22c8      	movs	r2, #200	; 0xc8
 800106e:	2100      	movs	r1, #0
 8001070:	2078      	movs	r0, #120	; 0x78
 8001072:	f7ff ff9f 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	; 0x78
 800107c:	f7ff ff9a 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001080:	2210      	movs	r2, #16
 8001082:	2100      	movs	r1, #0
 8001084:	2078      	movs	r0, #120	; 0x78
 8001086:	f7ff ff95 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	2100      	movs	r1, #0
 800108e:	2078      	movs	r0, #120	; 0x78
 8001090:	f7ff ff90 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001094:	2281      	movs	r2, #129	; 0x81
 8001096:	2100      	movs	r1, #0
 8001098:	2078      	movs	r0, #120	; 0x78
 800109a:	f7ff ff8b 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	; 0x78
 80010a4:	f7ff ff86 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80010a8:	22a1      	movs	r2, #161	; 0xa1
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f7ff ff81 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80010b2:	22a6      	movs	r2, #166	; 0xa6
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	; 0x78
 80010b8:	f7ff ff7c 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80010bc:	22a8      	movs	r2, #168	; 0xa8
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	; 0x78
 80010c2:	f7ff ff77 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80010c6:	223f      	movs	r2, #63	; 0x3f
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	; 0x78
 80010cc:	f7ff ff72 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010d0:	22a4      	movs	r2, #164	; 0xa4
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	; 0x78
 80010d6:	f7ff ff6d 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80010da:	22d3      	movs	r2, #211	; 0xd3
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	; 0x78
 80010e0:	f7ff ff68 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2078      	movs	r0, #120	; 0x78
 80010ea:	f7ff ff63 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80010ee:	22d5      	movs	r2, #213	; 0xd5
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	; 0x78
 80010f4:	f7ff ff5e 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80010f8:	22f0      	movs	r2, #240	; 0xf0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f7ff ff59 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001102:	22d9      	movs	r2, #217	; 0xd9
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	; 0x78
 8001108:	f7ff ff54 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800110c:	2222      	movs	r2, #34	; 0x22
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	; 0x78
 8001112:	f7ff ff4f 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001116:	22da      	movs	r2, #218	; 0xda
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f7ff ff4a 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001120:	2212      	movs	r2, #18
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f7ff ff45 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800112a:	22db      	movs	r2, #219	; 0xdb
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f7ff ff40 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001134:	2220      	movs	r2, #32
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f7ff ff3b 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800113e:	228d      	movs	r2, #141	; 0x8d
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f7ff ff36 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001148:	2214      	movs	r2, #20
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	; 0x78
 800114e:	f7ff ff31 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001152:	22af      	movs	r2, #175	; 0xaf
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	f7ff ff2c 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800115c:	222e      	movs	r2, #46	; 0x2e
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	; 0x78
 8001162:	f7ff ff27 	bl	8000fb4 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fcb6 	bl	8000ad8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800116c:	f7ff ff34 	bl	8000fd8 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <SSD1306_Init+0x168>)
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001176:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001178:	3201      	adds	r2, #1
 800117a:	715a      	strb	r2, [r3, #5]
	return 1;
 800117c:	2001      	movs	r0, #1
}
 800117e:	bd10      	pop	{r4, pc}
		return 0;
 8001180:	2000      	movs	r0, #0
 8001182:	e7fc      	b.n	800117e <SSD1306_Init+0x156>
 8001184:	00004e20 	.word	0x00004e20
 8001188:	200000a0 	.word	0x200000a0
 800118c:	000009c4 	.word	0x000009c4
 8001190:	200000f8 	.word	0x200000f8

08001194 <SSD1306_SetContrast>:
void SSD1306_SetContrast(const uint8_t value) {
 8001194:	b510      	push	{r4, lr}
 8001196:	0004      	movs	r4, r0
    SSD1306_WRITECOMMAND(kSetContrastControlRegister);
 8001198:	2281      	movs	r2, #129	; 0x81
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f7ff ff09 	bl	8000fb4 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(value);
 80011a2:	0022      	movs	r2, r4
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f7ff ff04 	bl	8000fb4 <ssd1306_I2C_Write>
}
 80011ac:	bd10      	pop	{r4, pc}
	...

080011b0 <New_Task_Element>:
		}
	}
}

void New_Task_Element(void)
{
 80011b0:	b530      	push	{r4, r5, lr}
 80011b2:	b083      	sub	sp, #12
	bool color = 0;

	if ((g_projectSelect + 3) % 2)
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <New_Task_Element+0x5c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	07db      	lsls	r3, r3, #31
 80011ba:	d41d      	bmi.n	80011f8 <New_Task_Element+0x48>
	{
		SSD1306_DrawFilledRectangle(5, 25, 56, 47, 1);
 80011bc:	2301      	movs	r3, #1
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	332e      	adds	r3, #46	; 0x2e
 80011c2:	2238      	movs	r2, #56	; 0x38
 80011c4:	2119      	movs	r1, #25
 80011c6:	2005      	movs	r0, #5
 80011c8:	f7ff fea1 	bl	8000f0e <SSD1306_DrawFilledRectangle>
		color = 0;
 80011cc:	2500      	movs	r5, #0
	else
	{
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
		color = 1;
	}
	SSD1306_GotoXY(18, 33);
 80011ce:	2121      	movs	r1, #33	; 0x21
 80011d0:	2012      	movs	r0, #18
 80011d2:	f7ff fd15 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts("Nowe", &Font_7x10, color);
 80011d6:	4c0e      	ldr	r4, [pc, #56]	; (8001210 <New_Task_Element+0x60>)
 80011d8:	002a      	movs	r2, r5
 80011da:	0021      	movs	r1, r4
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <New_Task_Element+0x64>)
 80011de:	f7ff fd81 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(9, 46);
 80011e2:	212e      	movs	r1, #46	; 0x2e
 80011e4:	2009      	movs	r0, #9
 80011e6:	f7ff fd0b 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts("zadanie", &Font_7x10, color);
 80011ea:	002a      	movs	r2, r5
 80011ec:	0021      	movs	r1, r4
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <New_Task_Element+0x68>)
 80011f0:	f7ff fd78 	bl	8000ce4 <SSD1306_Puts>
}
 80011f4:	b003      	add	sp, #12
 80011f6:	bd30      	pop	{r4, r5, pc}
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
 80011f8:	2301      	movs	r3, #1
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	332e      	adds	r3, #46	; 0x2e
 80011fe:	2238      	movs	r2, #56	; 0x38
 8001200:	2119      	movs	r1, #25
 8001202:	2005      	movs	r0, #5
 8001204:	f7ff fe41 	bl	8000e8a <SSD1306_DrawRectangle>
		color = 1;
 8001208:	2501      	movs	r5, #1
 800120a:	e7e0      	b.n	80011ce <New_Task_Element+0x1e>
 800120c:	20000635 	.word	0x20000635
 8001210:	2000000c 	.word	0x2000000c
 8001214:	08005300 	.word	0x08005300
 8001218:	08005308 	.word	0x08005308

0800121c <Show_Project_Tasks>:

// project tasks list - 12
// -------------------------------------------------------------------------------------

void Show_Project_Tasks(ProjectManager * details)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	0004      	movs	r4, r0
	char valueToken[10];

	SSD1306_GotoXY(0, 31);
 8001222:	211f      	movs	r1, #31
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fceb 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_TURNS_LABEL, &Font_7x10, 1);
 800122a:	4d1d      	ldr	r5, [pc, #116]	; (80012a0 <Show_Project_Tasks+0x84>)
 800122c:	2201      	movs	r2, #1
 800122e:	0029      	movs	r1, r5
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <Show_Project_Tasks+0x88>)
 8001232:	f7ff fd57 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(70, 31);
 8001236:	211f      	movs	r1, #31
 8001238:	2046      	movs	r0, #70	; 0x46
 800123a:	f7ff fce1 	bl	8000c00 <SSD1306_GotoXY>
	sprintf(valueToken, "%i", details->turns[g_taskStep]);
 800123e:	4f1a      	ldr	r7, [pc, #104]	; (80012a8 <Show_Project_Tasks+0x8c>)
 8001240:	783b      	ldrb	r3, [r7, #0]
 8001242:	330c      	adds	r3, #12
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	18e3      	adds	r3, r4, r3
 8001248:	885a      	ldrh	r2, [r3, #2]
 800124a:	4e18      	ldr	r6, [pc, #96]	; (80012ac <Show_Project_Tasks+0x90>)
 800124c:	0031      	movs	r1, r6
 800124e:	a801      	add	r0, sp, #4
 8001250:	f003 fbac 	bl	80049ac <siprintf>
	SSD1306_Puts(valueToken, &Font_7x10, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	0029      	movs	r1, r5
 8001258:	a801      	add	r0, sp, #4
 800125a:	f7ff fd43 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 42);
 800125e:	212a      	movs	r1, #42	; 0x2a
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fccd 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_DIAMETER_LABEL, &Font_7x10, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	0029      	movs	r1, r5
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <Show_Project_Tasks+0x94>)
 800126c:	f7ff fd3a 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(70, 42);
 8001270:	212a      	movs	r1, #42	; 0x2a
 8001272:	2046      	movs	r0, #70	; 0x46
 8001274:	f7ff fcc4 	bl	8000c00 <SSD1306_GotoXY>
	sprintf(valueToken, "%i", details->diameter[g_taskStep]);
 8001278:	7838      	ldrb	r0, [r7, #0]
 800127a:	3014      	adds	r0, #20
 800127c:	0040      	lsls	r0, r0, #1
 800127e:	1820      	adds	r0, r4, r0
 8001280:	88c2      	ldrh	r2, [r0, #6]
 8001282:	0031      	movs	r1, r6
 8001284:	a801      	add	r0, sp, #4
 8001286:	f003 fb91 	bl	80049ac <siprintf>
	SSD1306_Puts(valueToken, &Font_7x10, 1);
 800128a:	2201      	movs	r2, #1
 800128c:	0029      	movs	r1, r5
 800128e:	a801      	add	r0, sp, #4
 8001290:	f7ff fd28 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 8001294:	2135      	movs	r1, #53	; 0x35
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fcb2 	bl	8000c00 <SSD1306_GotoXY>
}
 800129c:	b005      	add	sp, #20
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	08005310 	.word	0x08005310
 80012a8:	20000637 	.word	0x20000637
 80012ac:	08005318 	.word	0x08005318
 80012b0:	0800531c 	.word	0x0800531c

080012b4 <Move_Marker>:
	Draw_Changing_Value_Marker(margin, 39);
}

void Move_Marker(uint8_t range)
{
	markerPosition++;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <Move_Marker+0x1c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b25b      	sxtb	r3, r3
	if(markerPosition >= range) {markerPosition = 0;}
 80012bc:	4283      	cmp	r3, r0
 80012be:	da02      	bge.n	80012c6 <Move_Marker+0x12>
	markerPosition++;
 80012c0:	4a03      	ldr	r2, [pc, #12]	; (80012d0 <Move_Marker+0x1c>)
 80012c2:	7013      	strb	r3, [r2, #0]
 80012c4:	e002      	b.n	80012cc <Move_Marker+0x18>
	if(markerPosition >= range) {markerPosition = 0;}
 80012c6:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <Move_Marker+0x1c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
}
 80012cc:	4770      	bx	lr
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	20000639 	.word	0x20000639

080012d4 <Array_To_Int_Change_Value>:
	if (value > max){value = valueToken;}
	Int_To_Array_Change_Value(value);
}

uint16_t Array_To_Int_Change_Value(void)
{
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	2201      	movs	r2, #1
 80012da:	2100      	movs	r1, #0
	volatile uint16_t expo;
	uint16_t value = 0;
 80012dc:	2000      	movs	r0, #0

	for (uint8_t i = 0; i <= 3; i++)
	{
		if (!i){expo = 1;}
		else {expo *= 10;}
 80012de:	466b      	mov	r3, sp
 80012e0:	1d9c      	adds	r4, r3, #6
		value = value + (expo * arrayToken[i]);
 80012e2:	4d10      	ldr	r5, [pc, #64]	; (8001324 <Array_To_Int_Change_Value+0x50>)
		if (!i){expo = 1;}
 80012e4:	2701      	movs	r7, #1
 80012e6:	e00a      	b.n	80012fe <Array_To_Int_Change_Value+0x2a>
 80012e8:	8027      	strh	r7, [r4, #0]
		value = value + (expo * arrayToken[i]);
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <Array_To_Int_Change_Value+0x50>)
 80012ec:	5c5e      	ldrb	r6, [r3, r1]
 80012ee:	b276      	sxtb	r6, r6
 80012f0:	8823      	ldrh	r3, [r4, #0]
 80012f2:	4373      	muls	r3, r6
 80012f4:	18c0      	adds	r0, r0, r3
 80012f6:	b280      	uxth	r0, r0
	for (uint8_t i = 0; i <= 3; i++)
 80012f8:	3101      	adds	r1, #1
 80012fa:	3201      	adds	r2, #1
 80012fc:	b2d2      	uxtb	r2, r2
		if (!i){expo = 1;}
 80012fe:	b2cb      	uxtb	r3, r1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f1      	beq.n	80012e8 <Array_To_Int_Change_Value+0x14>
		else {expo *= 10;}
 8001304:	8823      	ldrh	r3, [r4, #0]
 8001306:	009e      	lsls	r6, r3, #2
 8001308:	199b      	adds	r3, r3, r6
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	8023      	strh	r3, [r4, #0]
		value = value + (expo * arrayToken[i]);
 8001310:	5c6e      	ldrb	r6, [r5, r1]
 8001312:	b276      	sxtb	r6, r6
 8001314:	8823      	ldrh	r3, [r4, #0]
 8001316:	4373      	muls	r3, r6
 8001318:	18c0      	adds	r0, r0, r3
 800131a:	b280      	uxth	r0, r0
	for (uint8_t i = 0; i <= 3; i++)
 800131c:	2a03      	cmp	r2, #3
 800131e:	d9eb      	bls.n	80012f8 <Array_To_Int_Change_Value+0x24>
	}
	return value;
}
 8001320:	b003      	add	sp, #12
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001324:	20000630 	.word	0x20000630

08001328 <Int_To_Array_Change_Value>:

void Int_To_Array_Change_Value(uint16_t value)
{
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	46c6      	mov	lr, r8
 800132c:	b500      	push	{lr}
 800132e:	b082      	sub	sp, #8
 8001330:	4680      	mov	r8, r0
 8001332:	2601      	movs	r6, #1
 8001334:	2700      	movs	r7, #0
	volatile uint16_t expo;

	for (uint8_t i = 0; i <= 3; i++)
	{
		if (!i){expo = 1;}
		else {expo *= 10;}
 8001336:	466b      	mov	r3, sp
 8001338:	1d9c      	adds	r4, r3, #6
		if (!i){expo = 1;}
 800133a:	2501      	movs	r5, #1
 800133c:	e00f      	b.n	800135e <Int_To_Array_Change_Value+0x36>
 800133e:	8025      	strh	r5, [r4, #0]
		arrayToken[i] = (value / expo) % 10;
 8001340:	8821      	ldrh	r1, [r4, #0]
 8001342:	b289      	uxth	r1, r1
 8001344:	4640      	mov	r0, r8
 8001346:	f7fe fee9 	bl	800011c <__udivsi3>
 800134a:	b280      	uxth	r0, r0
 800134c:	210a      	movs	r1, #10
 800134e:	f7fe ff6b 	bl	8000228 <__aeabi_uidivmod>
 8001352:	b249      	sxtb	r1, r1
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <Int_To_Array_Change_Value+0x6c>)
 8001356:	55d9      	strb	r1, [r3, r7]
	for (uint8_t i = 0; i <= 3; i++)
 8001358:	3701      	adds	r7, #1
 800135a:	3601      	adds	r6, #1
 800135c:	b2f6      	uxtb	r6, r6
		if (!i){expo = 1;}
 800135e:	b2fb      	uxtb	r3, r7
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0ec      	beq.n	800133e <Int_To_Array_Change_Value+0x16>
		else {expo *= 10;}
 8001364:	8823      	ldrh	r3, [r4, #0]
 8001366:	009a      	lsls	r2, r3, #2
 8001368:	189b      	adds	r3, r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	8023      	strh	r3, [r4, #0]
		arrayToken[i] = (value / expo) % 10;
 8001370:	8821      	ldrh	r1, [r4, #0]
 8001372:	b289      	uxth	r1, r1
 8001374:	4640      	mov	r0, r8
 8001376:	f7fe fed1 	bl	800011c <__udivsi3>
 800137a:	b280      	uxth	r0, r0
 800137c:	210a      	movs	r1, #10
 800137e:	f7fe ff53 	bl	8000228 <__aeabi_uidivmod>
 8001382:	b249      	sxtb	r1, r1
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <Int_To_Array_Change_Value+0x6c>)
 8001386:	55d9      	strb	r1, [r3, r7]
	for (uint8_t i = 0; i <= 3; i++)
 8001388:	2e03      	cmp	r6, #3
 800138a:	d9e5      	bls.n	8001358 <Int_To_Array_Change_Value+0x30>
	}
}
 800138c:	b002      	add	sp, #8
 800138e:	bc80      	pop	{r7}
 8001390:	46b8      	mov	r8, r7
 8001392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001394:	20000630 	.word	0x20000630

08001398 <Change_Value>:
{
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	46d6      	mov	lr, sl
 800139c:	464f      	mov	r7, r9
 800139e:	4646      	mov	r6, r8
 80013a0:	b5c0      	push	{r6, r7, lr}
 80013a2:	4681      	mov	r9, r0
 80013a4:	000d      	movs	r5, r1
 80013a6:	4690      	mov	r8, r2
 80013a8:	469a      	mov	sl, r3
	uint16_t valueToken = Array_To_Int_Change_Value();
 80013aa:	f7ff ff93 	bl	80012d4 <Array_To_Int_Change_Value>
 80013ae:	0006      	movs	r6, r0
	for (uint8_t i = 0; i < position; i++) {expo *= 10;}
 80013b0:	2d00      	cmp	r5, #0
 80013b2:	d02d      	beq.n	8001410 <Change_Value+0x78>
 80013b4:	2300      	movs	r3, #0
	uint16_t expo 		= 1;
 80013b6:	2701      	movs	r7, #1
	for (uint8_t i = 0; i < position; i++) {expo *= 10;}
 80013b8:	00bc      	lsls	r4, r7, #2
 80013ba:	193c      	adds	r4, r7, r4
 80013bc:	0064      	lsls	r4, r4, #1
 80013be:	b2a7      	uxth	r7, r4
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	429d      	cmp	r5, r3
 80013c6:	d1f7      	bne.n	80013b8 <Change_Value+0x20>
	uint8_t overflowFlag = arrayToken[position] = (valueToken / expo) % 10; // określa wartość cyfry nad markerem wyboru
 80013c8:	0039      	movs	r1, r7
 80013ca:	0030      	movs	r0, r6
 80013cc:	f7fe fea6 	bl	800011c <__udivsi3>
 80013d0:	b280      	uxth	r0, r0
 80013d2:	210a      	movs	r1, #10
 80013d4:	f7fe ff28 	bl	8000228 <__aeabi_uidivmod>
 80013d8:	b24a      	sxtb	r2, r1
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <Change_Value+0x98>)
 80013dc:	555a      	strb	r2, [r3, r5]
 80013de:	b2c9      	uxtb	r1, r1
	if (set)
 80013e0:	464b      	mov	r3, r9
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d019      	beq.n	800141a <Change_Value+0x82>
		if (overflowFlag >= 9) value = valueToken - (expo * 9);
 80013e6:	2908      	cmp	r1, #8
 80013e8:	d914      	bls.n	8001414 <Change_Value+0x7c>
 80013ea:	037c      	lsls	r4, r7, #13
 80013ec:	1be4      	subs	r4, r4, r7
 80013ee:	00e4      	lsls	r4, r4, #3
 80013f0:	1be0      	subs	r0, r4, r7
 80013f2:	1830      	adds	r0, r6, r0
 80013f4:	b280      	uxth	r0, r0
	if (value < min){value = valueToken;}
 80013f6:	4540      	cmp	r0, r8
 80013f8:	d200      	bcs.n	80013fc <Change_Value+0x64>
 80013fa:	0030      	movs	r0, r6
	if (value > max){value = valueToken;}
 80013fc:	4550      	cmp	r0, sl
 80013fe:	d900      	bls.n	8001402 <Change_Value+0x6a>
 8001400:	0030      	movs	r0, r6
	Int_To_Array_Change_Value(value);
 8001402:	f7ff ff91 	bl	8001328 <Int_To_Array_Change_Value>
}
 8001406:	bce0      	pop	{r5, r6, r7}
 8001408:	46ba      	mov	sl, r7
 800140a:	46b1      	mov	r9, r6
 800140c:	46a8      	mov	r8, r5
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint16_t expo 		= 1;
 8001410:	2701      	movs	r7, #1
 8001412:	e7d9      	b.n	80013c8 <Change_Value+0x30>
		else value = valueToken + expo;
 8001414:	19f7      	adds	r7, r6, r7
 8001416:	b2b8      	uxth	r0, r7
 8001418:	e7ed      	b.n	80013f6 <Change_Value+0x5e>
		if (overflowFlag <= 0) value = valueToken + (expo * 9);
 800141a:	2900      	cmp	r1, #0
 800141c:	d104      	bne.n	8001428 <Change_Value+0x90>
 800141e:	00fc      	lsls	r4, r7, #3
 8001420:	193c      	adds	r4, r7, r4
 8001422:	1934      	adds	r4, r6, r4
 8001424:	b2a0      	uxth	r0, r4
 8001426:	e7e6      	b.n	80013f6 <Change_Value+0x5e>
		else value = valueToken - expo;
 8001428:	1bf0      	subs	r0, r6, r7
 800142a:	b280      	uxth	r0, r0
 800142c:	e7e3      	b.n	80013f6 <Change_Value+0x5e>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	20000630 	.word	0x20000630

08001434 <Save_Set_Value>:

void Save_Set_Value(uint16_t value)
{
	Settings[g_workStep - 2].setValue = value;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <Save_Set_Value+0x10>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	3b02      	subs	r3, #2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4a02      	ldr	r2, [pc, #8]	; (8001448 <Save_Set_Value+0x14>)
 800143e:	18d3      	adds	r3, r2, r3
 8001440:	8058      	strh	r0, [r3, #2]
}
 8001442:	4770      	bx	lr
 8001444:	20000638 	.word	0x20000638
 8001448:	20000610 	.word	0x20000610

0800144c <Draw_Changing_Value_Marker>:

void Draw_Changing_Value_Marker(uint8_t width, uint8_t height)
{
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uint8_t h = 0; h < 5; h++)
 800144e:	0007      	movs	r7, r0
 8001450:	000e      	movs	r6, r1
	{
		uint8_t w = 0;
 8001452:	2500      	movs	r5, #0
 8001454:	2400      	movs	r4, #0
		while (w <= (h * 2))
		{
			SSD1306_DrawPixel(((width - h) + w), height + h, 1);
 8001456:	1938      	adds	r0, r7, r4
 8001458:	b280      	uxth	r0, r0
 800145a:	2201      	movs	r2, #1
 800145c:	0031      	movs	r1, r6
 800145e:	f7ff fb4b 	bl	8000af8 <SSD1306_DrawPixel>
			w++;
 8001462:	3401      	adds	r4, #1
 8001464:	b2e4      	uxtb	r4, r4
		while (w <= (h * 2))
 8001466:	42ac      	cmp	r4, r5
 8001468:	ddf5      	ble.n	8001456 <Draw_Changing_Value_Marker+0xa>
	for (uint8_t h = 0; h < 5; h++)
 800146a:	3f01      	subs	r7, #1
 800146c:	b2bf      	uxth	r7, r7
 800146e:	3601      	adds	r6, #1
 8001470:	b2b6      	uxth	r6, r6
 8001472:	3502      	adds	r5, #2
 8001474:	2d0a      	cmp	r5, #10
 8001476:	d1ed      	bne.n	8001454 <Draw_Changing_Value_Marker+0x8>
		}
	}
}
 8001478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800147a <Clear_Changing_Value_Marker>:
void Clear_Changing_Value_Marker(void)
{
 800147a:	b500      	push	{lr}
 800147c:	b083      	sub	sp, #12
	SSD1306_DrawFilledRectangle(20, 39, 80, 5, 0);
 800147e:	2300      	movs	r3, #0
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	3305      	adds	r3, #5
 8001484:	2250      	movs	r2, #80	; 0x50
 8001486:	2127      	movs	r1, #39	; 0x27
 8001488:	2014      	movs	r0, #20
 800148a:	f7ff fd40 	bl	8000f0e <SSD1306_DrawFilledRectangle>
}
 800148e:	b003      	add	sp, #12
 8001490:	bd00      	pop	{pc}
	...

08001494 <Set_Marker_Position>:
{
 8001494:	b510      	push	{r4, lr}
 8001496:	0004      	movs	r4, r0
	Clear_Changing_Value_Marker();
 8001498:	f7ff ffef 	bl	800147a <Clear_Changing_Value_Marker>
	if (markerPosition >= divider)
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <Set_Marker_Position+0x30>)
 800149e:	2000      	movs	r0, #0
 80014a0:	5618      	ldrsb	r0, [r3, r0]
	uint8_t correction = 0;
 80014a2:	2200      	movs	r2, #0
	if (markerPosition >= divider)
 80014a4:	42a0      	cmp	r0, r4
 80014a6:	db00      	blt.n	80014aa <Set_Marker_Position+0x16>
		correction = 11;
 80014a8:	320b      	adds	r2, #11
	char margin = (73 - ((markerPosition * 11) + correction));
 80014aa:	0083      	lsls	r3, r0, #2
 80014ac:	18c3      	adds	r3, r0, r3
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	18c3      	adds	r3, r0, r3
 80014b2:	2049      	movs	r0, #73	; 0x49
 80014b4:	1ac0      	subs	r0, r0, r3
 80014b6:	1a80      	subs	r0, r0, r2
	Draw_Changing_Value_Marker(margin, 39);
 80014b8:	b2c0      	uxtb	r0, r0
 80014ba:	2127      	movs	r1, #39	; 0x27
 80014bc:	f7ff ffc6 	bl	800144c <Draw_Changing_Value_Marker>
}
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	20000639 	.word	0x20000639

080014c8 <Clear_Value>:
void Clear_Value(void)
{
 80014c8:	b500      	push	{lr}
 80014ca:	b083      	sub	sp, #12
	SSD1306_DrawFilledRectangle(20, 20, 100, 18, 0);
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	3312      	adds	r3, #18
 80014d2:	2264      	movs	r2, #100	; 0x64
 80014d4:	2114      	movs	r1, #20
 80014d6:	2014      	movs	r0, #20
 80014d8:	f7ff fd19 	bl	8000f0e <SSD1306_DrawFilledRectangle>
}
 80014dc:	b003      	add	sp, #12
 80014de:	bd00      	pop	{pc}

080014e0 <Show_Value_Screen>:
{
 80014e0:	b530      	push	{r4, r5, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	0004      	movs	r4, r0
 80014e6:	0010      	movs	r0, r2
 80014e8:	1e1d      	subs	r5, r3, #0
	if (runCount)
 80014ea:	d060      	beq.n	80015ae <Show_Value_Screen+0xce>
		markerPosition = 0;
 80014ec:	4b54      	ldr	r3, [pc, #336]	; (8001640 <Show_Value_Screen+0x160>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		switch (type)
 80014f2:	2c02      	cmp	r4, #2
 80014f4:	d043      	beq.n	800157e <Show_Value_Screen+0x9e>
 80014f6:	d80c      	bhi.n	8001512 <Show_Value_Screen+0x32>
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d017      	beq.n	800152c <Show_Value_Screen+0x4c>
			case VAL_TYPE_CARCASS_COIL_TURNS: SSD1306_DrawBitmap(0, 0, IMG_TURNS, 128, 64, 1);
 80014fc:	2301      	movs	r3, #1
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	333f      	adds	r3, #63	; 0x3f
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	3340      	adds	r3, #64	; 0x40
 8001506:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <Show_Value_Screen+0x164>)
 8001508:	2100      	movs	r1, #0
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fb1e 	bl	8000b4c <SSD1306_DrawBitmap>
				break;
 8001510:	e016      	b.n	8001540 <Show_Value_Screen+0x60>
		switch (type)
 8001512:	2c03      	cmp	r4, #3
 8001514:	d114      	bne.n	8001540 <Show_Value_Screen+0x60>
			case VAL_TYPE_WINDING_SPEED: SSD1306_DrawBitmap(0, 0, IMG_SPEED, 128, 64, 1);
 8001516:	2301      	movs	r3, #1
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	333f      	adds	r3, #63	; 0x3f
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	3340      	adds	r3, #64	; 0x40
 8001520:	4a49      	ldr	r2, [pc, #292]	; (8001648 <Show_Value_Screen+0x168>)
 8001522:	2100      	movs	r1, #0
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fb11 	bl	8000b4c <SSD1306_DrawBitmap>
				break;
 800152a:	e009      	b.n	8001540 <Show_Value_Screen+0x60>
			case VAL_TYPE_CARCASS_WIDTH: SSD1306_DrawBitmap(0, 0, IMG_WIDTH, 128, 64, 1);
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	333f      	adds	r3, #63	; 0x3f
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	3340      	adds	r3, #64	; 0x40
 8001536:	4a45      	ldr	r2, [pc, #276]	; (800164c <Show_Value_Screen+0x16c>)
 8001538:	2100      	movs	r1, #0
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fb06 	bl	8000b4c <SSD1306_DrawBitmap>
		if (runCount == RUN_FLAG_FIRST) Int_To_Array_Change_Value(Settings[type].minValue);
 8001540:	2d01      	cmp	r5, #1
 8001542:	d027      	beq.n	8001594 <Show_Value_Screen+0xb4>
		else if (runCount == RUN_FLAG_EDIT) Int_To_Array_Change_Value(Settings[type].setValue);
 8001544:	2d02      	cmp	r5, #2
 8001546:	d02b      	beq.n	80015a0 <Show_Value_Screen+0xc0>
	Set_Marker_Position(Settings[type].dotPosition);
 8001548:	00e2      	lsls	r2, r4, #3
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <Show_Value_Screen+0x170>)
 800154c:	189b      	adds	r3, r3, r2
 800154e:	79d8      	ldrb	r0, [r3, #7]
 8001550:	f7ff ffa0 	bl	8001494 <Set_Marker_Position>
	switch (type)
 8001554:	2c02      	cmp	r4, #2
 8001556:	d065      	beq.n	8001624 <Show_Value_Screen+0x144>
 8001558:	d83c      	bhi.n	80015d4 <Show_Value_Screen+0xf4>
 800155a:	2c00      	cmp	r4, #0
 800155c:	d044      	beq.n	80015e8 <Show_Value_Screen+0x108>
		case VAL_TYPE_CARCASS_COIL_TURNS: sprintf(valueLettering, "%i%i%i%izw.", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 800155e:	493d      	ldr	r1, [pc, #244]	; (8001654 <Show_Value_Screen+0x174>)
 8001560:	78ca      	ldrb	r2, [r1, #3]
 8001562:	b252      	sxtb	r2, r2
 8001564:	788b      	ldrb	r3, [r1, #2]
 8001566:	b25b      	sxtb	r3, r3
 8001568:	7848      	ldrb	r0, [r1, #1]
 800156a:	b240      	sxtb	r0, r0
 800156c:	7809      	ldrb	r1, [r1, #0]
 800156e:	b249      	sxtb	r1, r1
 8001570:	9101      	str	r1, [sp, #4]
 8001572:	9000      	str	r0, [sp, #0]
 8001574:	4938      	ldr	r1, [pc, #224]	; (8001658 <Show_Value_Screen+0x178>)
 8001576:	a803      	add	r0, sp, #12
 8001578:	f003 fa18 	bl	80049ac <siprintf>
			break;
 800157c:	e043      	b.n	8001606 <Show_Value_Screen+0x126>
			case VAL_TYPE_WINDING_DIAMETER: SSD1306_DrawBitmap(0, 0, IMG_DIAMETER, 128, 64, 1);
 800157e:	2301      	movs	r3, #1
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	333f      	adds	r3, #63	; 0x3f
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	3340      	adds	r3, #64	; 0x40
 8001588:	4a34      	ldr	r2, [pc, #208]	; (800165c <Show_Value_Screen+0x17c>)
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fadd 	bl	8000b4c <SSD1306_DrawBitmap>
				break;
 8001592:	e7d5      	b.n	8001540 <Show_Value_Screen+0x60>
		if (runCount == RUN_FLAG_FIRST) Int_To_Array_Change_Value(Settings[type].minValue);
 8001594:	00e3      	lsls	r3, r4, #3
 8001596:	4a2e      	ldr	r2, [pc, #184]	; (8001650 <Show_Value_Screen+0x170>)
 8001598:	5a98      	ldrh	r0, [r3, r2]
 800159a:	f7ff fec5 	bl	8001328 <Int_To_Array_Change_Value>
 800159e:	e7d3      	b.n	8001548 <Show_Value_Screen+0x68>
		else if (runCount == RUN_FLAG_EDIT) Int_To_Array_Change_Value(Settings[type].setValue);
 80015a0:	00e2      	lsls	r2, r4, #3
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <Show_Value_Screen+0x170>)
 80015a4:	189b      	adds	r3, r3, r2
 80015a6:	8858      	ldrh	r0, [r3, #2]
 80015a8:	f7ff febe 	bl	8001328 <Int_To_Array_Change_Value>
 80015ac:	e7cc      	b.n	8001548 <Show_Value_Screen+0x68>
		if (runMode) Change_Value(direction, markerPosition, Settings[type].minValue, Settings[type].maxValue);
 80015ae:	2900      	cmp	r1, #0
 80015b0:	d009      	beq.n	80015c6 <Show_Value_Screen+0xe6>
 80015b2:	4a27      	ldr	r2, [pc, #156]	; (8001650 <Show_Value_Screen+0x170>)
 80015b4:	00e1      	lsls	r1, r4, #3
 80015b6:	1853      	adds	r3, r2, r1
 80015b8:	889b      	ldrh	r3, [r3, #4]
 80015ba:	5a8a      	ldrh	r2, [r1, r2]
 80015bc:	4920      	ldr	r1, [pc, #128]	; (8001640 <Show_Value_Screen+0x160>)
 80015be:	7809      	ldrb	r1, [r1, #0]
 80015c0:	f7ff feea 	bl	8001398 <Change_Value>
 80015c4:	e7c0      	b.n	8001548 <Show_Value_Screen+0x68>
		else Move_Marker(Settings[type].digitsCount);
 80015c6:	00e2      	lsls	r2, r4, #3
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <Show_Value_Screen+0x170>)
 80015ca:	189b      	adds	r3, r3, r2
 80015cc:	7998      	ldrb	r0, [r3, #6]
 80015ce:	f7ff fe71 	bl	80012b4 <Move_Marker>
 80015d2:	e7b9      	b.n	8001548 <Show_Value_Screen+0x68>
	switch (type)
 80015d4:	2c03      	cmp	r4, #3
 80015d6:	d116      	bne.n	8001606 <Show_Value_Screen+0x126>
		case VAL_TYPE_WINDING_SPEED: sprintf(valueLettering, "   %i", arrayToken[0]);
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <Show_Value_Screen+0x174>)
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	b252      	sxtb	r2, r2
 80015de:	4920      	ldr	r1, [pc, #128]	; (8001660 <Show_Value_Screen+0x180>)
 80015e0:	a803      	add	r0, sp, #12
 80015e2:	f003 f9e3 	bl	80049ac <siprintf>
			break;
 80015e6:	e00e      	b.n	8001606 <Show_Value_Screen+0x126>
		case VAL_TYPE_CARCASS_WIDTH: sprintf(valueLettering, "%i%i%i.%imm", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 80015e8:	491a      	ldr	r1, [pc, #104]	; (8001654 <Show_Value_Screen+0x174>)
 80015ea:	78ca      	ldrb	r2, [r1, #3]
 80015ec:	b252      	sxtb	r2, r2
 80015ee:	788b      	ldrb	r3, [r1, #2]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	7848      	ldrb	r0, [r1, #1]
 80015f4:	b240      	sxtb	r0, r0
 80015f6:	7809      	ldrb	r1, [r1, #0]
 80015f8:	b249      	sxtb	r1, r1
 80015fa:	9101      	str	r1, [sp, #4]
 80015fc:	9000      	str	r0, [sp, #0]
 80015fe:	4919      	ldr	r1, [pc, #100]	; (8001664 <Show_Value_Screen+0x184>)
 8001600:	a803      	add	r0, sp, #12
 8001602:	f003 f9d3 	bl	80049ac <siprintf>
	Clear_Value();
 8001606:	f7ff ff5f 	bl	80014c8 <Clear_Value>
	SSD1306_GotoXY(25, 20);
 800160a:	2114      	movs	r1, #20
 800160c:	2019      	movs	r0, #25
 800160e:	f7ff faf7 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(valueLettering, &Font_11x18, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	4914      	ldr	r1, [pc, #80]	; (8001668 <Show_Value_Screen+0x188>)
 8001616:	a803      	add	r0, sp, #12
 8001618:	f7ff fb64 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800161c:	f7ff fcdc 	bl	8000fd8 <SSD1306_UpdateScreen>
}
 8001620:	b009      	add	sp, #36	; 0x24
 8001622:	bd30      	pop	{r4, r5, pc}
		case VAL_TYPE_WINDING_DIAMETER: sprintf(valueLettering, "~%i.%i%imm", arrayToken[2], arrayToken[1], arrayToken[0]);
 8001624:	490b      	ldr	r1, [pc, #44]	; (8001654 <Show_Value_Screen+0x174>)
 8001626:	788a      	ldrb	r2, [r1, #2]
 8001628:	b252      	sxtb	r2, r2
 800162a:	784b      	ldrb	r3, [r1, #1]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	7809      	ldrb	r1, [r1, #0]
 8001630:	b249      	sxtb	r1, r1
 8001632:	9100      	str	r1, [sp, #0]
 8001634:	490d      	ldr	r1, [pc, #52]	; (800166c <Show_Value_Screen+0x18c>)
 8001636:	a803      	add	r0, sp, #12
 8001638:	f003 f9b8 	bl	80049ac <siprintf>
			break;
 800163c:	e7e3      	b.n	8001606 <Show_Value_Screen+0x126>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	20000639 	.word	0x20000639
 8001644:	080061f0 	.word	0x080061f0
 8001648:	08005df0 	.word	0x08005df0
 800164c:	080065f0 	.word	0x080065f0
 8001650:	20000610 	.word	0x20000610
 8001654:	20000630 	.word	0x20000630
 8001658:	08005334 	.word	0x08005334
 800165c:	080055f0 	.word	0x080055f0
 8001660:	0800534c 	.word	0x0800534c
 8001664:	08005328 	.word	0x08005328
 8001668:	20000004 	.word	0x20000004
 800166c:	08005340 	.word	0x08005340

08001670 <Show_Summary>:

// summary - 6
// -------------------------------------------------------------------------------------
void Show_Summary(void)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b091      	sub	sp, #68	; 0x44
	char width[10], turns[12],diameter[15], speed[10];
	uint8_t diameterArr[4];
	uint16_t expo = 0;

	for (uint8_t i = 0; i <= 3; i++)
 8001674:	ad02      	add	r5, sp, #8
{
 8001676:	2401      	movs	r4, #1
	uint16_t expo = 0;
 8001678:	2700      	movs	r7, #0
	{
		if (!i) expo = 1;
 800167a:	2601      	movs	r6, #1
 800167c:	e00a      	b.n	8001694 <Show_Summary+0x24>
		else expo *= 10;
		diameterArr[i] = (g_diameter_MAIN / expo) % 10;
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <Show_Summary+0x134>)
 8001680:	8818      	ldrh	r0, [r3, #0]
 8001682:	b280      	uxth	r0, r0
 8001684:	210a      	movs	r1, #10
 8001686:	f7fe fdcf 	bl	8000228 <__aeabi_uidivmod>
 800168a:	7029      	strb	r1, [r5, #0]
		if (!i) expo = 1;
 800168c:	0037      	movs	r7, r6
 800168e:	3401      	adds	r4, #1
 8001690:	b2e4      	uxtb	r4, r4
 8001692:	3501      	adds	r5, #1
 8001694:	2c01      	cmp	r4, #1
 8001696:	d0f2      	beq.n	800167e <Show_Summary+0xe>
		else expo *= 10;
 8001698:	00b9      	lsls	r1, r7, #2
 800169a:	1879      	adds	r1, r7, r1
 800169c:	0049      	lsls	r1, r1, #1
 800169e:	b28f      	uxth	r7, r1
		diameterArr[i] = (g_diameter_MAIN / expo) % 10;
 80016a0:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <Show_Summary+0x134>)
 80016a2:	8818      	ldrh	r0, [r3, #0]
 80016a4:	b280      	uxth	r0, r0
 80016a6:	0039      	movs	r1, r7
 80016a8:	f7fe fd38 	bl	800011c <__udivsi3>
 80016ac:	b280      	uxth	r0, r0
 80016ae:	210a      	movs	r1, #10
 80016b0:	f7fe fdba 	bl	8000228 <__aeabi_uidivmod>
 80016b4:	7029      	strb	r1, [r5, #0]
	for (uint8_t i = 0; i <= 3; i++)
 80016b6:	2c03      	cmp	r4, #3
 80016b8:	d9e9      	bls.n	800168e <Show_Summary+0x1e>
	}
	sprintf(width, "%i.%i mm", g_width_MAIN / 10, g_width_MAIN % 10);
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <Show_Summary+0x138>)
 80016bc:	881d      	ldrh	r5, [r3, #0]
 80016be:	b2ad      	uxth	r5, r5
 80016c0:	8818      	ldrh	r0, [r3, #0]
 80016c2:	b280      	uxth	r0, r0
 80016c4:	210a      	movs	r1, #10
 80016c6:	f7fe fdaf 	bl	8000228 <__aeabi_uidivmod>
 80016ca:	b28c      	uxth	r4, r1
 80016cc:	210a      	movs	r1, #10
 80016ce:	0028      	movs	r0, r5
 80016d0:	f7fe fd24 	bl	800011c <__udivsi3>
 80016d4:	b282      	uxth	r2, r0
 80016d6:	0023      	movs	r3, r4
 80016d8:	4934      	ldr	r1, [pc, #208]	; (80017ac <Show_Summary+0x13c>)
 80016da:	a80d      	add	r0, sp, #52	; 0x34
 80016dc:	f003 f966 	bl	80049ac <siprintf>
	sprintf(turns, " %i zw.", g_turns_MAIN);
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <Show_Summary+0x140>)
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	b292      	uxth	r2, r2
 80016e6:	4933      	ldr	r1, [pc, #204]	; (80017b4 <Show_Summary+0x144>)
 80016e8:	a80a      	add	r0, sp, #40	; 0x28
 80016ea:	f003 f95f 	bl	80049ac <siprintf>
	sprintf(diameter, " %i.%i%i mm", diameterArr[2], diameterArr[1], diameterArr[0]);
 80016ee:	a902      	add	r1, sp, #8
 80016f0:	784b      	ldrb	r3, [r1, #1]
 80016f2:	788a      	ldrb	r2, [r1, #2]
 80016f4:	7809      	ldrb	r1, [r1, #0]
 80016f6:	9100      	str	r1, [sp, #0]
 80016f8:	492f      	ldr	r1, [pc, #188]	; (80017b8 <Show_Summary+0x148>)
 80016fa:	a806      	add	r0, sp, #24
 80016fc:	f003 f956 	bl	80049ac <siprintf>
	sprintf(speed, " %i", g_speed_MAIN);
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <Show_Summary+0x14c>)
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	b292      	uxth	r2, r2
 8001706:	492e      	ldr	r1, [pc, #184]	; (80017c0 <Show_Summary+0x150>)
 8001708:	a803      	add	r0, sp, #12
 800170a:	f003 f94f 	bl	80049ac <siprintf>
	SSD1306_GotoXY(0, 20);
 800170e:	2114      	movs	r1, #20
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fa75 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_WIDTH_LABEL, &Font_7x10, 1);
 8001716:	4c2b      	ldr	r4, [pc, #172]	; (80017c4 <Show_Summary+0x154>)
 8001718:	2201      	movs	r2, #1
 800171a:	0021      	movs	r1, r4
 800171c:	482a      	ldr	r0, [pc, #168]	; (80017c8 <Show_Summary+0x158>)
 800171e:	f7ff fae1 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8001722:	2114      	movs	r1, #20
 8001724:	2046      	movs	r0, #70	; 0x46
 8001726:	f7ff fa6b 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 800172a:	2201      	movs	r2, #1
 800172c:	0021      	movs	r1, r4
 800172e:	a80d      	add	r0, sp, #52	; 0x34
 8001730:	f7ff fad8 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 8001734:	211f      	movs	r1, #31
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fa62 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_TURNS_LABEL, &Font_7x10, 1);
 800173c:	2201      	movs	r2, #1
 800173e:	0021      	movs	r1, r4
 8001740:	4822      	ldr	r0, [pc, #136]	; (80017cc <Show_Summary+0x15c>)
 8001742:	f7ff facf 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(42, 31);
 8001746:	211f      	movs	r1, #31
 8001748:	202a      	movs	r0, #42	; 0x2a
 800174a:	f7ff fa59 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(turns, &Font_7x10, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	0021      	movs	r1, r4
 8001752:	a80a      	add	r0, sp, #40	; 0x28
 8001754:	f7ff fac6 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 42);
 8001758:	212a      	movs	r1, #42	; 0x2a
 800175a:	2000      	movs	r0, #0
 800175c:	f7ff fa50 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_DIAMETER_LABEL, &Font_7x10, 1);
 8001760:	2201      	movs	r2, #1
 8001762:	0021      	movs	r1, r4
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <Show_Summary+0x160>)
 8001766:	f7ff fabd 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(63, 42);
 800176a:	212a      	movs	r1, #42	; 0x2a
 800176c:	203f      	movs	r0, #63	; 0x3f
 800176e:	f7ff fa47 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(diameter, &Font_7x10, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	0021      	movs	r1, r4
 8001776:	a806      	add	r0, sp, #24
 8001778:	f7ff fab4 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 800177c:	2135      	movs	r1, #53	; 0x35
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fa3e 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_SPEED_LABEL, &Font_7x10, 1);
 8001784:	2201      	movs	r2, #1
 8001786:	0021      	movs	r1, r4
 8001788:	4812      	ldr	r0, [pc, #72]	; (80017d4 <Show_Summary+0x164>)
 800178a:	f7ff faab 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(63, 53);
 800178e:	2135      	movs	r1, #53	; 0x35
 8001790:	203f      	movs	r0, #63	; 0x3f
 8001792:	f7ff fa35 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(speed, &Font_7x10, 1);
 8001796:	2201      	movs	r2, #1
 8001798:	0021      	movs	r1, r4
 800179a:	a803      	add	r0, sp, #12
 800179c:	f7ff faa2 	bl	8000ce4 <SSD1306_Puts>
}
 80017a0:	b011      	add	sp, #68	; 0x44
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a4:	200000ee 	.word	0x200000ee
 80017a8:	200000f4 	.word	0x200000f4
 80017ac:	08005354 	.word	0x08005354
 80017b0:	200000f2 	.word	0x200000f2
 80017b4:	08005360 	.word	0x08005360
 80017b8:	08005368 	.word	0x08005368
 80017bc:	200000f0 	.word	0x200000f0
 80017c0:	08005374 	.word	0x08005374
 80017c4:	2000000c 	.word	0x2000000c
 80017c8:	08005378 	.word	0x08005378
 80017cc:	08005310 	.word	0x08005310
 80017d0:	0800531c 	.word	0x0800531c
 80017d4:	08005384 	.word	0x08005384

080017d8 <Show_Select_Boxes>:
	SSD1306_Puts(TEXT_CORRECT, &Font_7x10, color);
	if (runCount == RUN_FLAG_CONTI) SSD1306_UpdateScreen();
}

bool Show_Select_Boxes(uint8_t margin, uint8_t pointer)
{
 80017d8:	b500      	push	{lr}
 80017da:	b083      	sub	sp, #12
	pointer += 3;
 80017dc:	3103      	adds	r1, #3
 80017de:	b2c9      	uxtb	r1, r1
	if (margin == ALIGN_LEFT)
 80017e0:	2805      	cmp	r0, #5
 80017e2:	d00c      	beq.n	80017fe <Show_Select_Boxes+0x26>
			return 1;
		}
	}
	else
	{
		if (pointer % 2)
 80017e4:	07cb      	lsls	r3, r1, #31
 80017e6:	d51f      	bpl.n	8001828 <Show_Select_Boxes+0x50>
		{

			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 80017e8:	b280      	uxth	r0, r0
 80017ea:	2301      	movs	r3, #1
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	332e      	adds	r3, #46	; 0x2e
 80017f0:	2238      	movs	r2, #56	; 0x38
 80017f2:	2119      	movs	r1, #25
 80017f4:	f7ff fb49 	bl	8000e8a <SSD1306_DrawRectangle>
			return 1;
 80017f8:	2001      	movs	r0, #1
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
			return 0;
		}
	}
}
 80017fa:	b003      	add	sp, #12
 80017fc:	bd00      	pop	{pc}
		if ((pointer) % 2)
 80017fe:	07cb      	lsls	r3, r1, #31
 8001800:	d508      	bpl.n	8001814 <Show_Select_Boxes+0x3c>
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001802:	2301      	movs	r3, #1
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	332e      	adds	r3, #46	; 0x2e
 8001808:	2238      	movs	r2, #56	; 0x38
 800180a:	2119      	movs	r1, #25
 800180c:	f7ff fb7f 	bl	8000f0e <SSD1306_DrawFilledRectangle>
			return 0;
 8001810:	2000      	movs	r0, #0
 8001812:	e7f2      	b.n	80017fa <Show_Select_Boxes+0x22>
			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001814:	2301      	movs	r3, #1
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	332e      	adds	r3, #46	; 0x2e
 800181a:	2238      	movs	r2, #56	; 0x38
 800181c:	2119      	movs	r1, #25
 800181e:	2005      	movs	r0, #5
 8001820:	f7ff fb33 	bl	8000e8a <SSD1306_DrawRectangle>
			return 1;
 8001824:	2001      	movs	r0, #1
 8001826:	e7e8      	b.n	80017fa <Show_Select_Boxes+0x22>
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001828:	b280      	uxth	r0, r0
 800182a:	2301      	movs	r3, #1
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	332e      	adds	r3, #46	; 0x2e
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	2119      	movs	r1, #25
 8001834:	f7ff fb6b 	bl	8000f0e <SSD1306_DrawFilledRectangle>
			return 0;
 8001838:	2000      	movs	r0, #0
 800183a:	e7de      	b.n	80017fa <Show_Select_Boxes+0x22>

0800183c <Show_Project_Elements>:
{
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	0006      	movs	r6, r0
 8001840:	000c      	movs	r4, r1
	color = Show_Select_Boxes(margin, g_projectSelect);
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <Show_Project_Elements+0x54>)
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	b2c9      	uxtb	r1, r1
 8001848:	0020      	movs	r0, r4
 800184a:	f7ff ffc5 	bl	80017d8 <Show_Select_Boxes>
 800184e:	0005      	movs	r5, r0
	margin += 4;
 8001850:	3404      	adds	r4, #4
	SSD1306_GotoXY(margin, 29);
 8001852:	b2e4      	uxtb	r4, r4
 8001854:	211d      	movs	r1, #29
 8001856:	0020      	movs	r0, r4
 8001858:	f7ff f9d2 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(details->shortName, &Font_7x10, color);
 800185c:	4f0d      	ldr	r7, [pc, #52]	; (8001894 <Show_Project_Elements+0x58>)
 800185e:	002a      	movs	r2, r5
 8001860:	0039      	movs	r1, r7
 8001862:	6870      	ldr	r0, [r6, #4]
 8001864:	f7ff fa3e 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 40);
 8001868:	2128      	movs	r1, #40	; 0x28
 800186a:	0020      	movs	r0, r4
 800186c:	f7ff f9c8 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(details->descShort_1, &Font_7x10, color);
 8001870:	002a      	movs	r2, r5
 8001872:	0039      	movs	r1, r7
 8001874:	68b0      	ldr	r0, [r6, #8]
 8001876:	f7ff fa35 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 51);
 800187a:	2133      	movs	r1, #51	; 0x33
 800187c:	0020      	movs	r0, r4
 800187e:	f7ff f9bf 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(details->descShort_2, &Font_7x10, color);
 8001882:	68f0      	ldr	r0, [r6, #12]
 8001884:	002a      	movs	r2, r5
 8001886:	0039      	movs	r1, r7
 8001888:	f7ff fa2c 	bl	8000ce4 <SSD1306_Puts>
}
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	20000635 	.word	0x20000635
 8001894:	2000000c 	.word	0x2000000c

08001898 <Show_Project_Select_Menu>:
{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	b092      	sub	sp, #72	; 0x48
	uint8_t renderingBlock 	= g_projectSelect - 1;
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <Show_Project_Select_Menu+0x9c>)
 800189e:	781c      	ldrb	r4, [r3, #0]
 80018a0:	b2e4      	uxtb	r4, r4
	if (g_projectSelect < 2)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d903      	bls.n	80018b2 <Show_Project_Select_Menu+0x1a>
	uint8_t renderingBlock 	= g_projectSelect - 1;
 80018aa:	3c01      	subs	r4, #1
 80018ac:	b2e4      	uxtb	r4, r4
 80018ae:	2501      	movs	r5, #1
 80018b0:	e021      	b.n	80018f6 <Show_Project_Select_Menu+0x5e>
		New_Task_Element();
 80018b2:	f7ff fc7d 	bl	80011b0 <New_Task_Element>
		ProjectManager ProjectToken = Details[0];
 80018b6:	2244      	movs	r2, #68	; 0x44
 80018b8:	491f      	ldr	r1, [pc, #124]	; (8001938 <Show_Project_Select_Menu+0xa0>)
 80018ba:	a801      	add	r0, sp, #4
 80018bc:	f003 f864 	bl	8004988 <memcpy>
		Show_Project_Elements(&ProjectToken, 68);
 80018c0:	2144      	movs	r1, #68	; 0x44
 80018c2:	a801      	add	r0, sp, #4
 80018c4:	f7ff ffba 	bl	800183c <Show_Project_Elements>
 80018c8:	e02e      	b.n	8001928 <Show_Project_Select_Menu+0x90>
				if (g_projectSelect % 2) leftMargin = ALIGN_RIGHT;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <Show_Project_Select_Menu+0x9c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
				else leftMargin = ALIGN_LEFT;
 80018ce:	07db      	lsls	r3, r3, #31
 80018d0:	17db      	asrs	r3, r3, #31
 80018d2:	263f      	movs	r6, #63	; 0x3f
 80018d4:	401e      	ands	r6, r3
 80018d6:	3605      	adds	r6, #5
				ProjectManager ProjectToken = Details[renderingBlock];
 80018d8:	0121      	lsls	r1, r4, #4
 80018da:	1909      	adds	r1, r1, r4
 80018dc:	0089      	lsls	r1, r1, #2
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <Show_Project_Select_Menu+0xa0>)
 80018e0:	1859      	adds	r1, r3, r1
 80018e2:	2244      	movs	r2, #68	; 0x44
 80018e4:	a801      	add	r0, sp, #4
 80018e6:	f003 f84f 	bl	8004988 <memcpy>
				Show_Project_Elements(&ProjectToken, leftMargin);
 80018ea:	0031      	movs	r1, r6
 80018ec:	a801      	add	r0, sp, #4
 80018ee:	f7ff ffa5 	bl	800183c <Show_Project_Elements>
		while(renderingStep < 2)
 80018f2:	3501      	adds	r5, #1
 80018f4:	b2ed      	uxtb	r5, r5
			if (!renderingStep)
 80018f6:	2d01      	cmp	r5, #1
 80018f8:	d0e7      	beq.n	80018ca <Show_Project_Select_Menu+0x32>
				if (g_projectSelect % 2)
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <Show_Project_Select_Menu+0x9c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	07db      	lsls	r3, r3, #31
 8001900:	d514      	bpl.n	800192c <Show_Project_Select_Menu+0x94>
					renderingBlock--;
 8001902:	3c01      	subs	r4, #1
 8001904:	b2e4      	uxtb	r4, r4
					leftMargin = ALIGN_LEFT;
 8001906:	2605      	movs	r6, #5
				ProjectManager ProjectToken = Details[renderingBlock];
 8001908:	0121      	lsls	r1, r4, #4
 800190a:	1909      	adds	r1, r1, r4
 800190c:	0089      	lsls	r1, r1, #2
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <Show_Project_Select_Menu+0xa0>)
 8001910:	469c      	mov	ip, r3
 8001912:	4461      	add	r1, ip
 8001914:	2244      	movs	r2, #68	; 0x44
 8001916:	a801      	add	r0, sp, #4
 8001918:	f003 f836 	bl	8004988 <memcpy>
				Show_Project_Elements(&ProjectToken, leftMargin);
 800191c:	0031      	movs	r1, r6
 800191e:	a801      	add	r0, sp, #4
 8001920:	f7ff ff8c 	bl	800183c <Show_Project_Elements>
		while(renderingStep < 2)
 8001924:	2d01      	cmp	r5, #1
 8001926:	d9e4      	bls.n	80018f2 <Show_Project_Select_Menu+0x5a>
}
 8001928:	b012      	add	sp, #72	; 0x48
 800192a:	bd70      	pop	{r4, r5, r6, pc}
					renderingBlock++;
 800192c:	3401      	adds	r4, #1
 800192e:	b2e4      	uxtb	r4, r4
					leftMargin = ALIGN_RIGHT;
 8001930:	2644      	movs	r6, #68	; 0x44
 8001932:	e7e9      	b.n	8001908 <Show_Project_Select_Menu+0x70>
 8001934:	20000635 	.word	0x20000635
 8001938:	20000500 	.word	0x20000500

0800193c <Show_Label_Bar>:

// uniwersalne
// -------------------------------------------------------------------------------------
void Show_Label_Bar(char* label)
{
 800193c:	b510      	push	{r4, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	0004      	movs	r4, r0
	SSD1306_DrawFilledRectangle(0, 0, 128, 16, 1);
 8001942:	2301      	movs	r3, #1
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	330f      	adds	r3, #15
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	2100      	movs	r1, #0
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fade 	bl	8000f0e <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY(4, 4);
 8001952:	2104      	movs	r1, #4
 8001954:	2004      	movs	r0, #4
 8001956:	f7ff f953 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	4902      	ldr	r1, [pc, #8]	; (8001968 <Show_Label_Bar+0x2c>)
 800195e:	0020      	movs	r0, r4
 8001960:	f7ff f9c0 	bl	8000ce4 <SSD1306_Puts>
}
 8001964:	b002      	add	sp, #8
 8001966:	bd10      	pop	{r4, pc}
 8001968:	2000000c 	.word	0x2000000c

0800196c <Show_Project_Details>:
{
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b085      	sub	sp, #20
 8001970:	0004      	movs	r4, r0
 8001972:	000d      	movs	r5, r1
	sprintf(width, "%i.%imm", details->width / 10, details->width % 10);
 8001974:	8b07      	ldrh	r7, [r0, #24]
 8001976:	210a      	movs	r1, #10
 8001978:	0038      	movs	r0, r7
 800197a:	f7fe fc55 	bl	8000228 <__aeabi_uidivmod>
 800197e:	b28e      	uxth	r6, r1
 8001980:	210a      	movs	r1, #10
 8001982:	0038      	movs	r0, r7
 8001984:	f7fe fbca 	bl	800011c <__udivsi3>
 8001988:	b282      	uxth	r2, r0
 800198a:	0033      	movs	r3, r6
 800198c:	4926      	ldr	r1, [pc, #152]	; (8001a28 <Show_Project_Details+0xbc>)
 800198e:	a801      	add	r0, sp, #4
 8001990:	f003 f80c 	bl	80049ac <siprintf>
	Show_Label_Bar(details->fullName);
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f7ff ffd1 	bl	800193c <Show_Label_Bar>
	SSD1306_GotoXY(0, 20);
 800199a:	2114      	movs	r1, #20
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff f92f 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(DETAIL_WIDTH_LABEL, &Font_7x10, 1);
 80019a2:	4e22      	ldr	r6, [pc, #136]	; (8001a2c <Show_Project_Details+0xc0>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	0031      	movs	r1, r6
 80019a8:	4821      	ldr	r0, [pc, #132]	; (8001a30 <Show_Project_Details+0xc4>)
 80019aa:	f7ff f99b 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 80019ae:	2114      	movs	r1, #20
 80019b0:	2046      	movs	r0, #70	; 0x46
 80019b2:	f7ff f925 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 80019b6:	2201      	movs	r2, #1
 80019b8:	0031      	movs	r1, r6
 80019ba:	a801      	add	r0, sp, #4
 80019bc:	f7ff f992 	bl	8000ce4 <SSD1306_Puts>
	if (!list)
 80019c0:	2d00      	cmp	r5, #0
 80019c2:	d12c      	bne.n	8001a1e <Show_Project_Details+0xb2>
		SSD1306_GotoXY(0, 31);
 80019c4:	211f      	movs	r1, #31
 80019c6:	2000      	movs	r0, #0
 80019c8:	f7ff f91a 	bl	8000c00 <SSD1306_GotoXY>
		SSD1306_Puts(DETAIL_TASK_COUNT_LABEL, &Font_7x10, 1);
 80019cc:	4d17      	ldr	r5, [pc, #92]	; (8001a2c <Show_Project_Details+0xc0>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	0029      	movs	r1, r5
 80019d2:	4818      	ldr	r0, [pc, #96]	; (8001a34 <Show_Project_Details+0xc8>)
 80019d4:	f7ff f986 	bl	8000ce4 <SSD1306_Puts>
		SSD1306_GotoXY(70, 31);
 80019d8:	211f      	movs	r1, #31
 80019da:	2046      	movs	r0, #70	; 0x46
 80019dc:	f7ff f910 	bl	8000c00 <SSD1306_GotoXY>
		uint8_t count = details->taskCount;
 80019e0:	2342      	movs	r3, #66	; 0x42
		sprintf(width, "%i", count);
 80019e2:	5ce2      	ldrb	r2, [r4, r3]
 80019e4:	4914      	ldr	r1, [pc, #80]	; (8001a38 <Show_Project_Details+0xcc>)
 80019e6:	a801      	add	r0, sp, #4
 80019e8:	f002 ffe0 	bl	80049ac <siprintf>
		SSD1306_Puts(width, &Font_7x10, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	0029      	movs	r1, r5
 80019f0:	a801      	add	r0, sp, #4
 80019f2:	f7ff f977 	bl	8000ce4 <SSD1306_Puts>
		SSD1306_GotoXY(0, 42);
 80019f6:	212a      	movs	r1, #42	; 0x2a
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff f901 	bl	8000c00 <SSD1306_GotoXY>
		SSD1306_Puts(details->descFull_1, &Font_7x10, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	0029      	movs	r1, r5
 8001a02:	6920      	ldr	r0, [r4, #16]
 8001a04:	f7ff f96e 	bl	8000ce4 <SSD1306_Puts>
		SSD1306_GotoXY(0, 53);
 8001a08:	2135      	movs	r1, #53	; 0x35
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff f8f8 	bl	8000c00 <SSD1306_GotoXY>
		SSD1306_Puts(details->descFull_2, &Font_7x10, 1);
 8001a10:	6960      	ldr	r0, [r4, #20]
 8001a12:	2201      	movs	r2, #1
 8001a14:	0029      	movs	r1, r5
 8001a16:	f7ff f965 	bl	8000ce4 <SSD1306_Puts>
}
 8001a1a:	b005      	add	sp, #20
 8001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else Show_Project_Tasks(details);
 8001a1e:	0020      	movs	r0, r4
 8001a20:	f7ff fbfc 	bl	800121c <Show_Project_Tasks>
}
 8001a24:	e7f9      	b.n	8001a1a <Show_Project_Details+0xae>
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	0800532c 	.word	0x0800532c
 8001a2c:	2000000c 	.word	0x2000000c
 8001a30:	08005378 	.word	0x08005378
 8001a34:	08005390 	.word	0x08005390
 8001a38:	08005318 	.word	0x08005318

08001a3c <Clear_Content>:


void Clear_Content(void)
{
 8001a3c:	b500      	push	{lr}
 8001a3e:	b083      	sub	sp, #12
	SSD1306_DrawFilledRectangle(0, 18, 128, 46, 0);
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	332e      	adds	r3, #46	; 0x2e
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	2112      	movs	r1, #18
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fa5f 	bl	8000f0e <SSD1306_DrawFilledRectangle>
}
 8001a50:	b003      	add	sp, #12
 8001a52:	bd00      	pop	{pc}

08001a54 <Show_Summary_Correctness_Query>:
{
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	0005      	movs	r5, r0
 8001a58:	000c      	movs	r4, r1
	Clear_Content();
 8001a5a:	f7ff ffef 	bl	8001a3c <Clear_Content>
	if (runCount == RUN_FLAG_CONTI)
 8001a5e:	2c00      	cmp	r4, #0
 8001a60:	d157      	bne.n	8001b12 <Show_Summary_Correctness_Query+0xbe>
		if (direction) g_selector++;
 8001a62:	2d00      	cmp	r5, #0
 8001a64:	d04f      	beq.n	8001b06 <Show_Summary_Correctness_Query+0xb2>
 8001a66:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a68:	7813      	ldrb	r3, [r2, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	7013      	strb	r3, [r2, #0]
		if (g_selector > 1 && g_selector < 10) g_selector = 1;
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d907      	bls.n	8001a8a <Show_Summary_Correctness_Query+0x36>
 8001a7a:	4b40      	ldr	r3, [pc, #256]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d802      	bhi.n	8001a8a <Show_Summary_Correctness_Query+0x36>
 8001a84:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
		if (g_selector > 10) g_selector = 0;
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b0a      	cmp	r3, #10
 8001a92:	d902      	bls.n	8001a9a <Show_Summary_Correctness_Query+0x46>
 8001a94:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
	color = Show_Select_Boxes(ALIGN_LEFT, g_selector);
 8001a9a:	4f38      	ldr	r7, [pc, #224]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001a9c:	7839      	ldrb	r1, [r7, #0]
 8001a9e:	b2c9      	uxtb	r1, r1
 8001aa0:	2005      	movs	r0, #5
 8001aa2:	f7ff fe99 	bl	80017d8 <Show_Select_Boxes>
 8001aa6:	0004      	movs	r4, r0
	SSD1306_GotoXY(18, 29);
 8001aa8:	211d      	movs	r1, #29
 8001aaa:	2012      	movs	r0, #18
 8001aac:	f7ff f8a8 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_YES, &Font_11x18, color);
 8001ab0:	4e33      	ldr	r6, [pc, #204]	; (8001b80 <Show_Summary_Correctness_Query+0x12c>)
 8001ab2:	0022      	movs	r2, r4
 8001ab4:	0031      	movs	r1, r6
 8001ab6:	4833      	ldr	r0, [pc, #204]	; (8001b84 <Show_Summary_Correctness_Query+0x130>)
 8001ab8:	f7ff f914 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(28, 50);
 8001abc:	2132      	movs	r1, #50	; 0x32
 8001abe:	201c      	movs	r0, #28
 8001ac0:	f7ff f89e 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_OK, &Font_7x10, color);
 8001ac4:	4d30      	ldr	r5, [pc, #192]	; (8001b88 <Show_Summary_Correctness_Query+0x134>)
 8001ac6:	0022      	movs	r2, r4
 8001ac8:	0029      	movs	r1, r5
 8001aca:	4830      	ldr	r0, [pc, #192]	; (8001b8c <Show_Summary_Correctness_Query+0x138>)
 8001acc:	f7ff f90a 	bl	8000ce4 <SSD1306_Puts>
	color = Show_Select_Boxes(ALIGN_RIGHT, g_selector);
 8001ad0:	7839      	ldrb	r1, [r7, #0]
 8001ad2:	b2c9      	uxtb	r1, r1
 8001ad4:	2044      	movs	r0, #68	; 0x44
 8001ad6:	f7ff fe7f 	bl	80017d8 <Show_Select_Boxes>
 8001ada:	0004      	movs	r4, r0
	SSD1306_GotoXY(80, 29);
 8001adc:	211d      	movs	r1, #29
 8001ade:	2050      	movs	r0, #80	; 0x50
 8001ae0:	f7ff f88e 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_NO, &Font_11x18, color);
 8001ae4:	0022      	movs	r2, r4
 8001ae6:	0031      	movs	r1, r6
 8001ae8:	4829      	ldr	r0, [pc, #164]	; (8001b90 <Show_Summary_Correctness_Query+0x13c>)
 8001aea:	f7ff f8fb 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(76, 50);
 8001aee:	2132      	movs	r1, #50	; 0x32
 8001af0:	204c      	movs	r0, #76	; 0x4c
 8001af2:	f7ff f885 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_CORRECT, &Font_7x10, color);
 8001af6:	0022      	movs	r2, r4
 8001af8:	0029      	movs	r1, r5
 8001afa:	4826      	ldr	r0, [pc, #152]	; (8001b94 <Show_Summary_Correctness_Query+0x140>)
 8001afc:	f7ff f8f2 	bl	8000ce4 <SSD1306_Puts>
	if (runCount == RUN_FLAG_CONTI) SSD1306_UpdateScreen();
 8001b00:	f7ff fa6a 	bl	8000fd8 <SSD1306_UpdateScreen>
 8001b04:	e038      	b.n	8001b78 <Show_Summary_Correctness_Query+0x124>
		else g_selector--;
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001b08:	7813      	ldrb	r3, [r2, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	7013      	strb	r3, [r2, #0]
 8001b10:	e7ae      	b.n	8001a70 <Show_Summary_Correctness_Query+0x1c>
	color = Show_Select_Boxes(ALIGN_LEFT, g_selector);
 8001b12:	4f1a      	ldr	r7, [pc, #104]	; (8001b7c <Show_Summary_Correctness_Query+0x128>)
 8001b14:	7839      	ldrb	r1, [r7, #0]
 8001b16:	b2c9      	uxtb	r1, r1
 8001b18:	2005      	movs	r0, #5
 8001b1a:	f7ff fe5d 	bl	80017d8 <Show_Select_Boxes>
 8001b1e:	0004      	movs	r4, r0
	SSD1306_GotoXY(18, 29);
 8001b20:	211d      	movs	r1, #29
 8001b22:	2012      	movs	r0, #18
 8001b24:	f7ff f86c 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_YES, &Font_11x18, color);
 8001b28:	4e15      	ldr	r6, [pc, #84]	; (8001b80 <Show_Summary_Correctness_Query+0x12c>)
 8001b2a:	0022      	movs	r2, r4
 8001b2c:	0031      	movs	r1, r6
 8001b2e:	4815      	ldr	r0, [pc, #84]	; (8001b84 <Show_Summary_Correctness_Query+0x130>)
 8001b30:	f7ff f8d8 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(28, 50);
 8001b34:	2132      	movs	r1, #50	; 0x32
 8001b36:	201c      	movs	r0, #28
 8001b38:	f7ff f862 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_OK, &Font_7x10, color);
 8001b3c:	4d12      	ldr	r5, [pc, #72]	; (8001b88 <Show_Summary_Correctness_Query+0x134>)
 8001b3e:	0022      	movs	r2, r4
 8001b40:	0029      	movs	r1, r5
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <Show_Summary_Correctness_Query+0x138>)
 8001b44:	f7ff f8ce 	bl	8000ce4 <SSD1306_Puts>
	color = Show_Select_Boxes(ALIGN_RIGHT, g_selector);
 8001b48:	7839      	ldrb	r1, [r7, #0]
 8001b4a:	b2c9      	uxtb	r1, r1
 8001b4c:	2044      	movs	r0, #68	; 0x44
 8001b4e:	f7ff fe43 	bl	80017d8 <Show_Select_Boxes>
 8001b52:	0004      	movs	r4, r0
	SSD1306_GotoXY(80, 29);
 8001b54:	211d      	movs	r1, #29
 8001b56:	2050      	movs	r0, #80	; 0x50
 8001b58:	f7ff f852 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_NO, &Font_11x18, color);
 8001b5c:	0022      	movs	r2, r4
 8001b5e:	0031      	movs	r1, r6
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <Show_Summary_Correctness_Query+0x13c>)
 8001b62:	f7ff f8bf 	bl	8000ce4 <SSD1306_Puts>
	SSD1306_GotoXY(76, 50);
 8001b66:	2132      	movs	r1, #50	; 0x32
 8001b68:	204c      	movs	r0, #76	; 0x4c
 8001b6a:	f7ff f849 	bl	8000c00 <SSD1306_GotoXY>
	SSD1306_Puts(TEXT_CORRECT, &Font_7x10, color);
 8001b6e:	0022      	movs	r2, r4
 8001b70:	0029      	movs	r1, r5
 8001b72:	4808      	ldr	r0, [pc, #32]	; (8001b94 <Show_Summary_Correctness_Query+0x140>)
 8001b74:	f7ff f8b6 	bl	8000ce4 <SSD1306_Puts>
}
 8001b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20000636 	.word	0x20000636
 8001b80:	20000004 	.word	0x20000004
 8001b84:	0800539c 	.word	0x0800539c
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	080053a0 	.word	0x080053a0
 8001b90:	080053a4 	.word	0x080053a4
 8001b94:	080053a8 	.word	0x080053a8

08001b98 <Pagination_Bar>:

void Pagination_Bar(uint8_t pageBarWidth, uint8_t pageNo)
{
 8001b98:	b500      	push	{lr}
 8001b9a:	b083      	sub	sp, #12
	uint8_t pageBarMargin = pageBarWidth * pageNo;

	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 8001b9c:	b282      	uxth	r2, r0
	uint8_t pageBarMargin = pageBarWidth * pageNo;
 8001b9e:	4348      	muls	r0, r1
	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 8001ba0:	b2c0      	uxtb	r0, r0
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	2112      	movs	r1, #18
 8001baa:	f7ff f9b0 	bl	8000f0e <SSD1306_DrawFilledRectangle>
}
 8001bae:	b003      	add	sp, #12
 8001bb0:	bd00      	pop	{pc}
	...

08001bb4 <Set_Theme>:
{
 8001bb4:	b500      	push	{lr}
 8001bb6:	b083      	sub	sp, #12
	Clear_Content();
 8001bb8:	f7ff ff40 	bl	8001a3c <Clear_Content>
	switch (g_workStep)
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <Set_Theme+0x170>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b3d      	cmp	r3, #61	; 0x3d
 8001bc4:	d81c      	bhi.n	8001c00 <Set_Theme+0x4c>
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <Set_Theme+0x174>)
 8001bca:	58d3      	ldr	r3, [r2, r3]
 8001bcc:	469f      	mov	pc, r3
			SSD1306_DrawBitmap(0, 0, IMG_LOGO, 128, 64, 1);
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	333f      	adds	r3, #63	; 0x3f
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	3340      	adds	r3, #64	; 0x40
 8001bd8:	4a54      	ldr	r2, [pc, #336]	; (8001d2c <Set_Theme+0x178>)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7fe ffb5 	bl	8000b4c <SSD1306_DrawBitmap>
			SSD1306_UpdateScreen();
 8001be2:	f7ff f9f9 	bl	8000fd8 <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 8001be6:	20fa      	movs	r0, #250	; 0xfa
 8001be8:	0080      	lsls	r0, r0, #2
 8001bea:	f000 fcd7 	bl	800259c <HAL_Delay>
			SSD1306_Clear();
 8001bee:	f7ff fa13 	bl	8001018 <SSD1306_Clear>
			g_workStep++;
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <Set_Theme+0x170>)
 8001bf4:	7813      	ldrb	r3, [r2, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	7013      	strb	r3, [r2, #0]
			Set_Theme();
 8001bfc:	f7ff ffda 	bl	8001bb4 <Set_Theme>
	SSD1306_UpdateScreen();
 8001c00:	f7ff f9ea 	bl	8000fd8 <SSD1306_UpdateScreen>
}
 8001c04:	b003      	add	sp, #12
 8001c06:	bd00      	pop	{pc}
			Show_Label_Bar(DISP_PROJECT_LABEL);
 8001c08:	4849      	ldr	r0, [pc, #292]	; (8001d30 <Set_Theme+0x17c>)
 8001c0a:	f7ff fe97 	bl	800193c <Show_Label_Bar>
			progressBarWidth = (128 / ((G_PROJECT_COUNT + 1) / 2) + ((G_PROJECT_COUNT + 1) % 2));
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <Set_Theme+0x180>)
 8001c10:	2240      	movs	r2, #64	; 0x40
 8001c12:	701a      	strb	r2, [r3, #0]
			progressBarStep = g_projectSelect / 2;
 8001c14:	4b48      	ldr	r3, [pc, #288]	; (8001d38 <Set_Theme+0x184>)
 8001c16:	7819      	ldrb	r1, [r3, #0]
 8001c18:	0849      	lsrs	r1, r1, #1
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <Set_Theme+0x188>)
 8001c1c:	7019      	strb	r1, [r3, #0]
			Pagination_Bar(progressBarWidth, progressBarStep);
 8001c1e:	2040      	movs	r0, #64	; 0x40
 8001c20:	f7ff ffba 	bl	8001b98 <Pagination_Bar>
			Show_Project_Select_Menu();
 8001c24:	f7ff fe38 	bl	8001898 <Show_Project_Select_Menu>
			break;
 8001c28:	e7ea      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Project_Details(&Details[g_projectSelect - 1], 0);
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <Set_Theme+0x184>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	0118      	lsls	r0, r3, #4
 8001c32:	18c0      	adds	r0, r0, r3
 8001c34:	0080      	lsls	r0, r0, #2
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <Set_Theme+0x18c>)
 8001c38:	18c0      	adds	r0, r0, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f7ff fe96 	bl	800196c <Show_Project_Details>
			break;
 8001c40:	e7de      	b.n	8001c00 <Set_Theme+0x4c>
			Clear_Content();
 8001c42:	f7ff fefb 	bl	8001a3c <Clear_Content>
			Show_Project_Details(&Details[g_projectSelect - 1], 1);
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <Set_Theme+0x184>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	0118      	lsls	r0, r3, #4
 8001c4e:	18c0      	adds	r0, r0, r3
 8001c50:	0080      	lsls	r0, r0, #2
 8001c52:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <Set_Theme+0x18c>)
 8001c54:	18c0      	adds	r0, r0, r3
 8001c56:	2101      	movs	r1, #1
 8001c58:	f7ff fe88 	bl	800196c <Show_Project_Details>
			break;
 8001c5c:	e7d0      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Label_Bar(DISP_SET_WIDTH_LABEL);
 8001c5e:	4839      	ldr	r0, [pc, #228]	; (8001d44 <Set_Theme+0x190>)
 8001c60:	f7ff fe6c 	bl	800193c <Show_Label_Bar>
			if (!g_correctionFlag) Show_Value_Screen(VAL_TYPE_CARCASS_WIDTH, 0, 0, RUN_FLAG_FIRST);
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <Set_Theme+0x194>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d106      	bne.n	8001c7a <Set_Theme+0xc6>
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fc34 	bl	80014e0 <Show_Value_Screen>
 8001c78:	e7c2      	b.n	8001c00 <Set_Theme+0x4c>
			else Show_Value_Screen(VAL_TYPE_CARCASS_WIDTH, 0, 0, RUN_FLAG_EDIT);
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fc2d 	bl	80014e0 <Show_Value_Screen>
 8001c86:	e7bb      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Label_Bar(DISP_SET_TURNS_LABEL);
 8001c88:	4830      	ldr	r0, [pc, #192]	; (8001d4c <Set_Theme+0x198>)
 8001c8a:	f7ff fe57 	bl	800193c <Show_Label_Bar>
			if (!g_correctionFlag) Show_Value_Screen(VAL_TYPE_CARCASS_COIL_TURNS, 0, 0, RUN_FLAG_FIRST);
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <Set_Theme+0x194>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <Set_Theme+0xf0>
 8001c96:	3301      	adds	r3, #1
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7ff fc1f 	bl	80014e0 <Show_Value_Screen>
 8001ca2:	e7ad      	b.n	8001c00 <Set_Theme+0x4c>
			else Show_Value_Screen(VAL_TYPE_CARCASS_COIL_TURNS, 0, 0, RUN_FLAG_EDIT);
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fc18 	bl	80014e0 <Show_Value_Screen>
 8001cb0:	e7a6      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Label_Bar(DISP_SET_DIAMETER_LABEL);
 8001cb2:	4827      	ldr	r0, [pc, #156]	; (8001d50 <Set_Theme+0x19c>)
 8001cb4:	f7ff fe42 	bl	800193c <Show_Label_Bar>
			if (!g_correctionFlag) Show_Value_Screen(VAL_TYPE_WINDING_DIAMETER, 0, 0, RUN_FLAG_FIRST);
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <Set_Theme+0x194>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <Set_Theme+0x11a>
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7ff fc0a 	bl	80014e0 <Show_Value_Screen>
 8001ccc:	e798      	b.n	8001c00 <Set_Theme+0x4c>
			else Show_Value_Screen(VAL_TYPE_WINDING_DIAMETER, 0, 0, RUN_FLAG_EDIT);
 8001cce:	2302      	movs	r3, #2
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f7ff fc03 	bl	80014e0 <Show_Value_Screen>
 8001cda:	e791      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Label_Bar(DISP_SET_SPEED_LABEL);
 8001cdc:	481d      	ldr	r0, [pc, #116]	; (8001d54 <Set_Theme+0x1a0>)
 8001cde:	f7ff fe2d 	bl	800193c <Show_Label_Bar>
			if (!g_correctionFlag) Show_Value_Screen(VAL_TYPE_WINDING_SPEED, 0, 0, RUN_FLAG_FIRST);
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <Set_Theme+0x194>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <Set_Theme+0x144>
 8001cea:	3301      	adds	r3, #1
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f7ff fbf5 	bl	80014e0 <Show_Value_Screen>
 8001cf6:	e783      	b.n	8001c00 <Set_Theme+0x4c>
			else Show_Value_Screen(VAL_TYPE_WINDING_SPEED, 0, 0, RUN_FLAG_EDIT);
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f7ff fbee 	bl	80014e0 <Show_Value_Screen>
 8001d04:	e77c      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Label_Bar(DISP_SET_SUMMARY_LABEL);
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <Set_Theme+0x1a4>)
 8001d08:	f7ff fe18 	bl	800193c <Show_Label_Bar>
			Show_Summary();
 8001d0c:	f7ff fcb0 	bl	8001670 <Show_Summary>
			break;
 8001d10:	e776      	b.n	8001c00 <Set_Theme+0x4c>
			Show_Label_Bar(DISP_CORRECTNESS_QUERY);
 8001d12:	4812      	ldr	r0, [pc, #72]	; (8001d5c <Set_Theme+0x1a8>)
 8001d14:	f7ff fe12 	bl	800193c <Show_Label_Bar>
			Show_Summary_Correctness_Query(0, RUN_FLAG_FIRST);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fe9a 	bl	8001a54 <Show_Summary_Correctness_Query>
			break;
 8001d20:	e76e      	b.n	8001c00 <Set_Theme+0x4c>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	20000638 	.word	0x20000638
 8001d28:	08005424 	.word	0x08005424
 8001d2c:	080059f0 	.word	0x080059f0
 8001d30:	080053b0 	.word	0x080053b0
 8001d34:	2000063b 	.word	0x2000063b
 8001d38:	20000635 	.word	0x20000635
 8001d3c:	2000063a 	.word	0x2000063a
 8001d40:	20000500 	.word	0x20000500
 8001d44:	080053c4 	.word	0x080053c4
 8001d48:	20000634 	.word	0x20000634
 8001d4c:	080053d4 	.word	0x080053d4
 8001d50:	080053e4 	.word	0x080053e4
 8001d54:	080053f4 	.word	0x080053f4
 8001d58:	08005408 	.word	0x08005408
 8001d5c:	08005418 	.word	0x08005418

08001d60 <Count_Array>:

uint8_t Count_Array(ProjectManager * details)
{
 8001d60:	0001      	movs	r1, r0
	uint8_t count = 0;

	for (uint8_t i = 0; i<10; i++)
 8001d62:	0003      	movs	r3, r0
 8001d64:	331a      	adds	r3, #26
 8001d66:	312e      	adds	r1, #46	; 0x2e
	uint8_t count = 0;
 8001d68:	2000      	movs	r0, #0
 8001d6a:	e002      	b.n	8001d72 <Count_Array+0x12>
	for (uint8_t i = 0; i<10; i++)
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	428b      	cmp	r3, r1
 8001d70:	d005      	beq.n	8001d7e <Count_Array+0x1e>
	{
		if (details->turns[i] > 0) count++;
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	d0f9      	beq.n	8001d6c <Count_Array+0xc>
 8001d78:	3001      	adds	r0, #1
 8001d7a:	b2c0      	uxtb	r0, r0
 8001d7c:	e7f6      	b.n	8001d6c <Count_Array+0xc>
	}
	return count;
}
 8001d7e:	4770      	bx	lr

08001d80 <Structures_Init>:
{
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	46ce      	mov	lr, r9
 8001d84:	4647      	mov	r7, r8
 8001d86:	b580      	push	{r7, lr}
	Settings[i].minValue 	= VAL_RNG_CARCASS_MIN_WIDTH;
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <Structures_Init+0x138>)
 8001d8a:	2232      	movs	r2, #50	; 0x32
 8001d8c:	801a      	strh	r2, [r3, #0]
	Settings[i].setValue	= 0;
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	805a      	strh	r2, [r3, #2]
	Settings[i].maxValue 	= VAL_RNG_CARCASS_MAX_WIDTH;
 8001d94:	4849      	ldr	r0, [pc, #292]	; (8001ebc <Structures_Init+0x13c>)
 8001d96:	8098      	strh	r0, [r3, #4]
	Settings[i].digitsCount = 4;
 8001d98:	2004      	movs	r0, #4
 8001d9a:	7198      	strb	r0, [r3, #6]
	Settings[i].dotPosition = 1;
 8001d9c:	2501      	movs	r5, #1
 8001d9e:	71dd      	strb	r5, [r3, #7]
	Settings[i].minValue 	= VAL_RNG_CARCASS_MIN_TURNS;
 8001da0:	260a      	movs	r6, #10
 8001da2:	811e      	strh	r6, [r3, #8]
	Settings[i].setValue 	= 0;
 8001da4:	815a      	strh	r2, [r3, #10]
	Settings[i].maxValue	= VAL_RNG_CARCASS_MAX_TURNS;
 8001da6:	4c46      	ldr	r4, [pc, #280]	; (8001ec0 <Structures_Init+0x140>)
 8001da8:	46a0      	mov	r8, r4
 8001daa:	819c      	strh	r4, [r3, #12]
	Settings[i].digitsCount = 4;
 8001dac:	7398      	strb	r0, [r3, #14]
	Settings[i].dotPosition = 0;
 8001dae:	73d9      	strb	r1, [r3, #15]
	Settings[i].minValue 	= VAL_RNG_WINDING_MIN_DIAMETER;
 8001db0:	821d      	strh	r5, [r3, #16]
	Settings[i].setValue 	= 0;
 8001db2:	825a      	strh	r2, [r3, #18]
	Settings[i].maxValue 	= VAL_RNG_WINDING_MAX_DIAMETER;
 8001db4:	27fa      	movs	r7, #250	; 0xfa
 8001db6:	829f      	strh	r7, [r3, #20]
	Settings[i].digitsCount = 3;
 8001db8:	3801      	subs	r0, #1
 8001dba:	7598      	strb	r0, [r3, #22]
	Settings[i].dotPosition = 2;
 8001dbc:	3801      	subs	r0, #1
 8001dbe:	75d8      	strb	r0, [r3, #23]
	Settings[i].minValue 	= VAL_RNG_WINDING_MIN_SPEED;
 8001dc0:	831d      	strh	r5, [r3, #24]
	Settings[i].setValue 	= 0;
 8001dc2:	835a      	strh	r2, [r3, #26]
	Settings[i].maxValue 	= VAL_RNG_WINDING_MAX_SPEED;
 8001dc4:	3205      	adds	r2, #5
 8001dc6:	839a      	strh	r2, [r3, #28]
	Settings[i].digitsCount = 1;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	779a      	strb	r2, [r3, #30]
	Settings[i].dotPosition = 0;
 8001dcc:	77d9      	strb	r1, [r3, #31]
	Details[i].fullName		= "Peavey-C30-Main";
 8001dce:	4c3d      	ldr	r4, [pc, #244]	; (8001ec4 <Structures_Init+0x144>)
 8001dd0:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <Structures_Init+0x148>)
 8001dd2:	6023      	str	r3, [r4, #0]
	Details[i].shortName	= "P-C30-M";
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <Structures_Init+0x14c>)
 8001dd6:	6063      	str	r3, [r4, #4]
	Details[i].descShort_1	= "230V";
 8001dd8:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <Structures_Init+0x150>)
 8001dda:	60a3      	str	r3, [r4, #8]
	Details[i].descShort_2	= "270,30V";
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <Structures_Init+0x154>)
 8001dde:	60e3      	str	r3, [r4, #12]
	Details[i].descFull_1	= "PRI: 230V";
 8001de0:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <Structures_Init+0x158>)
 8001de2:	6123      	str	r3, [r4, #16]
	Details[i].descFull_2 	= "SEC: 230V, 30V";
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <Structures_Init+0x15c>)
 8001de6:	6163      	str	r3, [r4, #20]
	Details[i].width		= 1150;
 8001de8:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <Structures_Init+0x160>)
 8001dea:	8323      	strh	r3, [r4, #24]
	Details[i].turns[0]		= 1100;
 8001dec:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <Structures_Init+0x164>)
 8001dee:	8363      	strh	r3, [r4, #26]
	Details[i].diameter[0]	= 10;
 8001df0:	85e6      	strh	r6, [r4, #46]	; 0x2e
	Details[i].turns[1]		= 900;
 8001df2:	3bc8      	subs	r3, #200	; 0xc8
 8001df4:	4699      	mov	r9, r3
 8001df6:	83a3      	strh	r3, [r4, #28]
	Details[i].diameter[1]	= 15;
 8001df8:	230f      	movs	r3, #15
 8001dfa:	8623      	strh	r3, [r4, #48]	; 0x30
	Details[i].turns[2]		= 200;
 8001dfc:	33b9      	adds	r3, #185	; 0xb9
 8001dfe:	83e3      	strh	r3, [r4, #30]
	Details[i].diameter[2]	= 100;
 8001e00:	3b64      	subs	r3, #100	; 0x64
 8001e02:	8663      	strh	r3, [r4, #50]	; 0x32
	Details[i].taskCount	= Count_Array(&Details[i]);
 8001e04:	0020      	movs	r0, r4
 8001e06:	f7ff ffab 	bl	8001d60 <Count_Array>
 8001e0a:	2342      	movs	r3, #66	; 0x42
 8001e0c:	54e0      	strb	r0, [r4, r3]
	Details[i].fullName		= "Peavey-C30-SPK";
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <Structures_Init+0x168>)
 8001e10:	6463      	str	r3, [r4, #68]	; 0x44
	Details[i].shortName	= "P-C30-S";
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <Structures_Init+0x16c>)
 8001e14:	64a3      	str	r3, [r4, #72]	; 0x48
	Details[i].descShort_1	= "4xEL84";
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <Structures_Init+0x170>)
 8001e18:	64e3      	str	r3, [r4, #76]	; 0x4c
	Details[i].descShort_2	= "16 Ohms";
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <Structures_Init+0x174>)
 8001e1c:	6523      	str	r3, [r4, #80]	; 0x50
	Details[i].descFull_1	= "4xEL84 | 3.4k";
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <Structures_Init+0x178>)
 8001e20:	6563      	str	r3, [r4, #84]	; 0x54
	Details[i].descFull_2 	= "OUT: 16 Ohms";
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <Structures_Init+0x17c>)
 8001e24:	65a3      	str	r3, [r4, #88]	; 0x58
	Details[i].width		= 650;
 8001e26:	235c      	movs	r3, #92	; 0x5c
 8001e28:	4a35      	ldr	r2, [pc, #212]	; (8001f00 <Structures_Init+0x180>)
 8001e2a:	52e2      	strh	r2, [r4, r3]
	Details[i].turns[0]		= 900;
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	464a      	mov	r2, r9
 8001e30:	52e2      	strh	r2, [r4, r3]
	Details[i].diameter[0]	= 20;
 8001e32:	3314      	adds	r3, #20
 8001e34:	2214      	movs	r2, #20
 8001e36:	52e2      	strh	r2, [r4, r3]
	Details[i].turns[1]		= 600;
 8001e38:	3b12      	subs	r3, #18
 8001e3a:	2296      	movs	r2, #150	; 0x96
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	52e2      	strh	r2, [r4, r3]
	Details[i].diameter[1]	= 120;
 8001e40:	3314      	adds	r3, #20
 8001e42:	3ae1      	subs	r2, #225	; 0xe1
 8001e44:	3aff      	subs	r2, #255	; 0xff
 8001e46:	52e2      	strh	r2, [r4, r3]
	Details[i].taskCount	= Count_Array(&Details[i]);
 8001e48:	0020      	movs	r0, r4
 8001e4a:	3044      	adds	r0, #68	; 0x44
 8001e4c:	f7ff ff88 	bl	8001d60 <Count_Array>
 8001e50:	2386      	movs	r3, #134	; 0x86
 8001e52:	54e0      	strb	r0, [r4, r3]
	Details[i].fullName		= "TEST-FULL";
 8001e54:	3302      	adds	r3, #2
 8001e56:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <Structures_Init+0x184>)
 8001e58:	50e2      	str	r2, [r4, r3]
	Details[i].shortName	= "TEST-SH";
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <Structures_Init+0x188>)
 8001e5e:	50e2      	str	r2, [r4, r3]
	Details[i].descShort_1	= "2XEL84";
 8001e60:	3304      	adds	r3, #4
 8001e62:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <Structures_Init+0x18c>)
 8001e64:	50e2      	str	r2, [r4, r3]
	Details[i].descShort_2	= "4-8-16";
 8001e66:	3304      	adds	r3, #4
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <Structures_Init+0x190>)
 8001e6a:	50e2      	str	r2, [r4, r3]
	Details[i].descFull_1	= "2XEL84 | 8.2k";
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <Structures_Init+0x194>)
 8001e70:	50e2      	str	r2, [r4, r3]
	Details[i].descFull_2 	= "OUT: 4-8-16 Ohms";
 8001e72:	3304      	adds	r3, #4
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <Structures_Init+0x198>)
 8001e76:	50e2      	str	r2, [r4, r3]
	Details[i].width		= 800;
 8001e78:	3304      	adds	r3, #4
 8001e7a:	22c8      	movs	r2, #200	; 0xc8
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	52e2      	strh	r2, [r4, r3]
	Details[i].turns[0]		= 2500;
 8001e80:	3302      	adds	r3, #2
 8001e82:	4642      	mov	r2, r8
 8001e84:	52e2      	strh	r2, [r4, r3]
	Details[i].diameter[0]	= 250;
 8001e86:	3314      	adds	r3, #20
 8001e88:	52e7      	strh	r7, [r4, r3]
	Details[i].turns[1]		= 10;
 8001e8a:	3b12      	subs	r3, #18
 8001e8c:	52e6      	strh	r6, [r4, r3]
	Details[i].diameter[1]	= 1;
 8001e8e:	3314      	adds	r3, #20
 8001e90:	52e5      	strh	r5, [r4, r3]
	Details[i].turns[2]		= 2500;
 8001e92:	3b12      	subs	r3, #18
 8001e94:	52e2      	strh	r2, [r4, r3]
	Details[i].diameter[2]	= 1;
 8001e96:	3314      	adds	r3, #20
 8001e98:	52e5      	strh	r5, [r4, r3]
	Details[i].turns[3]		= 10;
 8001e9a:	3b12      	subs	r3, #18
 8001e9c:	52e6      	strh	r6, [r4, r3]
	Details[i].diameter[3]	= 250;
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	52e7      	strh	r7, [r4, r3]
	Details[i].taskCount	= Count_Array(&Details[i]);
 8001ea2:	0020      	movs	r0, r4
 8001ea4:	3088      	adds	r0, #136	; 0x88
 8001ea6:	f7ff ff5b 	bl	8001d60 <Count_Array>
 8001eaa:	23ca      	movs	r3, #202	; 0xca
 8001eac:	54e0      	strb	r0, [r4, r3]
}
 8001eae:	bcc0      	pop	{r6, r7}
 8001eb0:	46b9      	mov	r9, r7
 8001eb2:	46b0      	mov	r8, r6
 8001eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	20000610 	.word	0x20000610
 8001ebc:	000004e2 	.word	0x000004e2
 8001ec0:	000009c4 	.word	0x000009c4
 8001ec4:	20000500 	.word	0x20000500
 8001ec8:	0800551c 	.word	0x0800551c
 8001ecc:	0800552c 	.word	0x0800552c
 8001ed0:	08005534 	.word	0x08005534
 8001ed4:	0800553c 	.word	0x0800553c
 8001ed8:	08005544 	.word	0x08005544
 8001edc:	08005550 	.word	0x08005550
 8001ee0:	0000047e 	.word	0x0000047e
 8001ee4:	0000044c 	.word	0x0000044c
 8001ee8:	08005560 	.word	0x08005560
 8001eec:	08005570 	.word	0x08005570
 8001ef0:	08005578 	.word	0x08005578
 8001ef4:	08005580 	.word	0x08005580
 8001ef8:	08005588 	.word	0x08005588
 8001efc:	08005598 	.word	0x08005598
 8001f00:	0000028a 	.word	0x0000028a
 8001f04:	080055a8 	.word	0x080055a8
 8001f08:	080055b4 	.word	0x080055b4
 8001f0c:	080055bc 	.word	0x080055bc
 8001f10:	080055c4 	.word	0x080055c4
 8001f14:	080055cc 	.word	0x080055cc
 8001f18:	080055dc 	.word	0x080055dc

08001f1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_MspInit+0x18>)
 8001f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f20:	2101      	movs	r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	0552      	lsls	r2, r2, #21
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f30:	4770      	bx	lr
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40021000 	.word	0x40021000

08001f38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler>

08001f3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler>

08001f3c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f3c:	4770      	bx	lr

08001f3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f42:	f000 fb19 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f46:	bd10      	pop	{r4, pc}

08001f48 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001f48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAIN_BTN_Pin);
 8001f4a:	2010      	movs	r0, #16
 8001f4c:	f000 fca0 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001f50:	bd10      	pop	{r4, pc}
	...

08001f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f56:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM2_IRQHandler+0xc>)
 8001f58:	f002 f965 	bl	8004226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	20000640 	.word	0x20000640

08001f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f66:	4802      	ldr	r0, [pc, #8]	; (8001f70 <TIM6_DAC_IRQHandler+0xc>)
 8001f68:	f002 f95d 	bl	8004226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f6c:	bd10      	pop	{r4, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	20000700 	.word	0x20000700

08001f74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f76:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM7_IRQHandler+0xc>)
 8001f78:	f002 f955 	bl	8004226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f7c:	bd10      	pop	{r4, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	20000740 	.word	0x20000740

08001f84 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001f84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001f86:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM21_IRQHandler+0xc>)
 8001f88:	f002 f94d 	bl	8004226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001f8c:	bd10      	pop	{r4, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	20000680 	.word	0x20000680

08001f94 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8001f94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8001f96:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM22_IRQHandler+0xc>)
 8001f98:	f002 f945 	bl	8004226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8001f9c:	bd10      	pop	{r4, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	200006c0 	.word	0x200006c0

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <_sbrk+0x38>)
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <_sbrk+0x3c>)
 8001fac:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fae:	490d      	ldr	r1, [pc, #52]	; (8001fe4 <_sbrk+0x40>)
 8001fb0:	6809      	ldr	r1, [r1, #0]
 8001fb2:	2900      	cmp	r1, #0
 8001fb4:	d007      	beq.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb6:	490b      	ldr	r1, [pc, #44]	; (8001fe4 <_sbrk+0x40>)
 8001fb8:	6808      	ldr	r0, [r1, #0]
 8001fba:	18c3      	adds	r3, r0, r3
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d806      	bhi.n	8001fce <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001fc0:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <_sbrk+0x40>)
 8001fc2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001fc4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001fc6:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <_sbrk+0x40>)
 8001fc8:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <_sbrk+0x44>)
 8001fca:	6008      	str	r0, [r1, #0]
 8001fcc:	e7f3      	b.n	8001fb6 <_sbrk+0x12>
    errno = ENOMEM;
 8001fce:	f002 fcb1 	bl	8004934 <__errno>
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	4240      	negs	r0, r0
 8001fda:	e7f3      	b.n	8001fc4 <_sbrk+0x20>
 8001fdc:	20005000 	.word	0x20005000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	2000063c 	.word	0x2000063c
 8001fe8:	20000818 	.word	0x20000818

08001fec <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fec:	4770      	bx	lr
	...

08001ff0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff0:	b500      	push	{lr}
 8001ff2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ff4:	221c      	movs	r2, #28
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	a804      	add	r0, sp, #16
 8001ffa:	f002 fcce 	bl	800499a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffe:	2208      	movs	r2, #8
 8002000:	2100      	movs	r1, #0
 8002002:	a801      	add	r0, sp, #4
 8002004:	f002 fcc9 	bl	800499a <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002008:	4813      	ldr	r0, [pc, #76]	; (8002058 <MX_TIM2_Init+0x68>)
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	05db      	lsls	r3, r3, #23
 800200e:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <MX_TIM2_Init+0x6c>)
 8002018:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201c:	6143      	str	r3, [r0, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800201e:	3301      	adds	r3, #1
 8002020:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002022:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 15;
 8002024:	220f      	movs	r2, #15
 8002026:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002028:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 15;
 800202a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800202c:	a903      	add	r1, sp, #12
 800202e:	f001 fea9 	bl	8003d84 <HAL_TIM_Encoder_Init>
 8002032:	2800      	cmp	r0, #0
 8002034:	d10a      	bne.n	800204c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203c:	a901      	add	r1, sp, #4
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <MX_TIM2_Init+0x68>)
 8002040:	f002 f98a 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	2800      	cmp	r0, #0
 8002046:	d104      	bne.n	8002052 <MX_TIM2_Init+0x62>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002048:	b00d      	add	sp, #52	; 0x34
 800204a:	bd00      	pop	{pc}
    Error_Handler();
 800204c:	f7fe fd42 	bl	8000ad4 <Error_Handler>
 8002050:	e7f1      	b.n	8002036 <MX_TIM2_Init+0x46>
    Error_Handler();
 8002052:	f7fe fd3f 	bl	8000ad4 <Error_Handler>
}
 8002056:	e7f7      	b.n	8002048 <MX_TIM2_Init+0x58>
 8002058:	20000640 	.word	0x20000640
 800205c:	0000ffff 	.word	0x0000ffff

08002060 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002060:	b500      	push	{lr}
 8002062:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	2208      	movs	r2, #8
 8002066:	2100      	movs	r1, #0
 8002068:	4668      	mov	r0, sp
 800206a:	f002 fc96 	bl	800499a <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800206e:	480f      	ldr	r0, [pc, #60]	; (80020ac <MX_TIM6_Init+0x4c>)
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_TIM6_Init+0x50>)
 8002072:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 7999;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_TIM6_Init+0x54>)
 8002076:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	2300      	movs	r3, #0
 800207a:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 199;
 800207c:	22c7      	movs	r2, #199	; 0xc7
 800207e:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002082:	f001 fdea 	bl	8003c5a <HAL_TIM_Base_Init>
 8002086:	2800      	cmp	r0, #0
 8002088:	d10a      	bne.n	80020a0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002090:	4669      	mov	r1, sp
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_TIM6_Init+0x4c>)
 8002094:	f002 f960 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 8002098:	2800      	cmp	r0, #0
 800209a:	d104      	bne.n	80020a6 <MX_TIM6_Init+0x46>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800209c:	b003      	add	sp, #12
 800209e:	bd00      	pop	{pc}
    Error_Handler();
 80020a0:	f7fe fd18 	bl	8000ad4 <Error_Handler>
 80020a4:	e7f1      	b.n	800208a <MX_TIM6_Init+0x2a>
    Error_Handler();
 80020a6:	f7fe fd15 	bl	8000ad4 <Error_Handler>
}
 80020aa:	e7f7      	b.n	800209c <MX_TIM6_Init+0x3c>
 80020ac:	20000700 	.word	0x20000700
 80020b0:	40001000 	.word	0x40001000
 80020b4:	00001f3f 	.word	0x00001f3f

080020b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80020b8:	b500      	push	{lr}
 80020ba:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	2208      	movs	r2, #8
 80020be:	2100      	movs	r1, #0
 80020c0:	4668      	mov	r0, sp
 80020c2:	f002 fc6a 	bl	800499a <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020c6:	480f      	ldr	r0, [pc, #60]	; (8002104 <MX_TIM7_Init+0x4c>)
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_TIM7_Init+0x50>)
 80020ca:	6003      	str	r3, [r0, #0]
  htim7.Init.Prescaler = 7999;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <MX_TIM7_Init+0x54>)
 80020ce:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d0:	2300      	movs	r3, #0
 80020d2:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 199;
 80020d4:	22c7      	movs	r2, #199	; 0xc7
 80020d6:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020da:	f001 fdbe 	bl	8003c5a <HAL_TIM_Base_Init>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d10a      	bne.n	80020f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020e8:	4669      	mov	r1, sp
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <MX_TIM7_Init+0x4c>)
 80020ec:	f002 f934 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d104      	bne.n	80020fe <MX_TIM7_Init+0x46>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020f4:	b003      	add	sp, #12
 80020f6:	bd00      	pop	{pc}
    Error_Handler();
 80020f8:	f7fe fcec 	bl	8000ad4 <Error_Handler>
 80020fc:	e7f1      	b.n	80020e2 <MX_TIM7_Init+0x2a>
    Error_Handler();
 80020fe:	f7fe fce9 	bl	8000ad4 <Error_Handler>
}
 8002102:	e7f7      	b.n	80020f4 <MX_TIM7_Init+0x3c>
 8002104:	20000740 	.word	0x20000740
 8002108:	40001400 	.word	0x40001400
 800210c:	00001f3f 	.word	0x00001f3f

08002110 <HAL_TIM_Encoder_MspInit>:
  HAL_TIM_MspPostInit(&htim22);

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002110:	b510      	push	{r4, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002116:	2214      	movs	r2, #20
 8002118:	2100      	movs	r1, #0
 800211a:	a801      	add	r0, sp, #4
 800211c:	f002 fc3d 	bl	800499a <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	05db      	lsls	r3, r3, #23
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_TIM_Encoder_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800212a:	b006      	add	sp, #24
 800212c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_TIM_Encoder_MspInit+0x5c>)
 8002130:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002132:	2301      	movs	r3, #1
 8002134:	4319      	orrs	r1, r3
 8002136:	6391      	str	r1, [r2, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800213a:	4319      	orrs	r1, r3
 800213c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800213e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002140:	4013      	ands	r3, r2
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002146:	2303      	movs	r3, #3
 8002148:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	3b01      	subs	r3, #1
 800214c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800214e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	20a0      	movs	r0, #160	; 0xa0
 8002152:	a901      	add	r1, sp, #4
 8002154:	05c0      	lsls	r0, r0, #23
 8002156:	f000 fa8d 	bl	8002674 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2102      	movs	r1, #2
 800215e:	200f      	movs	r0, #15
 8002160:	f000 fa2e 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002164:	200f      	movs	r0, #15
 8002166:	f000 fa5d 	bl	8002624 <HAL_NVIC_EnableIRQ>
}
 800216a:	e7de      	b.n	800212a <HAL_TIM_Encoder_MspInit+0x1a>
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002170:	b510      	push	{r4, lr}

  if(tim_baseHandle->Instance==TIM6)
 8002172:	6803      	ldr	r3, [r0, #0]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_TIM_Base_MspInit+0x90>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d009      	beq.n	800218e <HAL_TIM_Base_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 800217a:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_TIM_Base_MspInit+0x94>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d014      	beq.n	80021aa <HAL_TIM_Base_MspInit+0x3a>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM21)
 8002180:	4a21      	ldr	r2, [pc, #132]	; (8002208 <HAL_TIM_Base_MspInit+0x98>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01f      	beq.n	80021c6 <HAL_TIM_Base_MspInit+0x56>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM22)
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <HAL_TIM_Base_MspInit+0x9c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02a      	beq.n	80021e2 <HAL_TIM_Base_MspInit+0x72>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 800218c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_TIM_Base_MspInit+0xa0>)
 8002190:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002192:	2110      	movs	r1, #16
 8002194:	430b      	orrs	r3, r1
 8002196:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 2);
 8002198:	2202      	movs	r2, #2
 800219a:	390e      	subs	r1, #14
 800219c:	2011      	movs	r0, #17
 800219e:	f000 fa0f 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021a2:	2011      	movs	r0, #17
 80021a4:	f000 fa3e 	bl	8002624 <HAL_NVIC_EnableIRQ>
 80021a8:	e7f0      	b.n	800218c <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021aa:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_TIM_Base_MspInit+0xa0>)
 80021ac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80021ae:	2120      	movs	r1, #32
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 1);
 80021b4:	2201      	movs	r2, #1
 80021b6:	391e      	subs	r1, #30
 80021b8:	2012      	movs	r0, #18
 80021ba:	f000 fa01 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021be:	2012      	movs	r0, #18
 80021c0:	f000 fa30 	bl	8002624 <HAL_NVIC_EnableIRQ>
 80021c4:	e7e2      	b.n	800218c <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_TIM_Base_MspInit+0xa0>)
 80021c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80021ca:	2104      	movs	r1, #4
 80021cc:	430b      	orrs	r3, r1
 80021ce:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 1);
 80021d0:	2201      	movs	r2, #1
 80021d2:	2100      	movs	r1, #0
 80021d4:	2014      	movs	r0, #20
 80021d6:	f000 f9f3 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80021da:	2014      	movs	r0, #20
 80021dc:	f000 fa22 	bl	8002624 <HAL_NVIC_EnableIRQ>
 80021e0:	e7d4      	b.n	800218c <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_TIM_Base_MspInit+0xa0>)
 80021e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80021e6:	2120      	movs	r1, #32
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	2016      	movs	r0, #22
 80021f2:	f000 f9e5 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80021f6:	2016      	movs	r0, #22
 80021f8:	f000 fa14 	bl	8002624 <HAL_NVIC_EnableIRQ>
}
 80021fc:	e7c6      	b.n	800218c <HAL_TIM_Base_MspInit+0x1c>
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40001000 	.word	0x40001000
 8002204:	40001400 	.word	0x40001400
 8002208:	40010800 	.word	0x40010800
 800220c:	40011400 	.word	0x40011400
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002214:	b510      	push	{r4, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221a:	2214      	movs	r2, #20
 800221c:	2100      	movs	r1, #0
 800221e:	a803      	add	r0, sp, #12
 8002220:	f002 fbbb 	bl	800499a <memset>
  if(timHandle->Instance==TIM21)
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_TIM_MspPostInit+0x74>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM22)
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_TIM_MspPostInit+0x78>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d015      	beq.n	800225e <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8002232:	b008      	add	sp, #32
 8002234:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <HAL_TIM_MspPostInit+0x7c>)
 8002238:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800223a:	2302      	movs	r3, #2
 800223c:	4319      	orrs	r1, r3
 800223e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002240:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002242:	401a      	ands	r2, r3
 8002244:	9201      	str	r2, [sp, #4]
 8002246:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	0192      	lsls	r2, r2, #6
 800224c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8002250:	3304      	adds	r3, #4
 8002252:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	a903      	add	r1, sp, #12
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <HAL_TIM_MspPostInit+0x80>)
 8002258:	f000 fa0c 	bl	8002674 <HAL_GPIO_Init>
 800225c:	e7e9      	b.n	8002232 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <HAL_TIM_MspPostInit+0x7c>)
 8002260:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002262:	2301      	movs	r3, #1
 8002264:	4319      	orrs	r1, r3
 8002266:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002268:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800226a:	4013      	ands	r3, r2
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002270:	2340      	movs	r3, #64	; 0x40
 8002272:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	3b3e      	subs	r3, #62	; 0x3e
 8002276:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8002278:	3303      	adds	r3, #3
 800227a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	20a0      	movs	r0, #160	; 0xa0
 800227e:	a903      	add	r1, sp, #12
 8002280:	05c0      	lsls	r0, r0, #23
 8002282:	f000 f9f7 	bl	8002674 <HAL_GPIO_Init>
}
 8002286:	e7d4      	b.n	8002232 <HAL_TIM_MspPostInit+0x1e>
 8002288:	40010800 	.word	0x40010800
 800228c:	40011400 	.word	0x40011400
 8002290:	40021000 	.word	0x40021000
 8002294:	50000400 	.word	0x50000400

08002298 <MX_TIM21_Init>:
{
 8002298:	b500      	push	{lr}
 800229a:	b08b      	sub	sp, #44	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229c:	2210      	movs	r2, #16
 800229e:	2100      	movs	r1, #0
 80022a0:	a806      	add	r0, sp, #24
 80022a2:	f002 fb7a 	bl	800499a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a6:	2208      	movs	r2, #8
 80022a8:	2100      	movs	r1, #0
 80022aa:	a804      	add	r0, sp, #16
 80022ac:	f002 fb75 	bl	800499a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022b0:	2210      	movs	r2, #16
 80022b2:	2100      	movs	r1, #0
 80022b4:	4668      	mov	r0, sp
 80022b6:	f002 fb70 	bl	800499a <memset>
  htim21.Instance = TIM21;
 80022ba:	4825      	ldr	r0, [pc, #148]	; (8002350 <MX_TIM21_Init+0xb8>)
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <MX_TIM21_Init+0xbc>)
 80022be:	6003      	str	r3, [r0, #0]
  htim21.Init.Prescaler = 99;
 80022c0:	2363      	movs	r3, #99	; 0x63
 80022c2:	6043      	str	r3, [r0, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	2300      	movs	r3, #0
 80022c6:	6083      	str	r3, [r0, #8]
  htim21.Init.Period = 999;
 80022c8:	4a23      	ldr	r2, [pc, #140]	; (8002358 <MX_TIM21_Init+0xc0>)
 80022ca:	60c2      	str	r2, [r0, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022cc:	6103      	str	r3, [r0, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ce:	3380      	adds	r3, #128	; 0x80
 80022d0:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80022d2:	f001 fcc2 	bl	8003c5a <HAL_TIM_Base_Init>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d12a      	bne.n	8002330 <MX_TIM21_Init+0x98>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80022e0:	a906      	add	r1, sp, #24
 80022e2:	481b      	ldr	r0, [pc, #108]	; (8002350 <MX_TIM21_Init+0xb8>)
 80022e4:	f001 fe9e 	bl	8004024 <HAL_TIM_ConfigClockSource>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d124      	bne.n	8002336 <MX_TIM21_Init+0x9e>
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 80022ec:	4818      	ldr	r0, [pc, #96]	; (8002350 <MX_TIM21_Init+0xb8>)
 80022ee:	f001 fd24 	bl	8003d3a <HAL_TIM_PWM_Init>
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d122      	bne.n	800233c <MX_TIM21_Init+0xa4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022f6:	2320      	movs	r3, #32
 80022f8:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80022fa:	3360      	adds	r3, #96	; 0x60
 80022fc:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80022fe:	a904      	add	r1, sp, #16
 8002300:	4813      	ldr	r0, [pc, #76]	; (8002350 <MX_TIM21_Init+0xb8>)
 8002302:	f002 f829 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	2800      	cmp	r0, #0
 8002308:	d11b      	bne.n	8002342 <MX_TIM21_Init+0xaa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230a:	2360      	movs	r3, #96	; 0x60
 800230c:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 100;
 800230e:	3304      	adds	r3, #4
 8002310:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002312:	2300      	movs	r3, #0
 8002314:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002316:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002318:	2200      	movs	r2, #0
 800231a:	4669      	mov	r1, sp
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <MX_TIM21_Init+0xb8>)
 800231e:	f001 fddd 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 8002322:	2800      	cmp	r0, #0
 8002324:	d110      	bne.n	8002348 <MX_TIM21_Init+0xb0>
  HAL_TIM_MspPostInit(&htim21);
 8002326:	480a      	ldr	r0, [pc, #40]	; (8002350 <MX_TIM21_Init+0xb8>)
 8002328:	f7ff ff74 	bl	8002214 <HAL_TIM_MspPostInit>
}
 800232c:	b00b      	add	sp, #44	; 0x2c
 800232e:	bd00      	pop	{pc}
    Error_Handler();
 8002330:	f7fe fbd0 	bl	8000ad4 <Error_Handler>
 8002334:	e7d1      	b.n	80022da <MX_TIM21_Init+0x42>
    Error_Handler();
 8002336:	f7fe fbcd 	bl	8000ad4 <Error_Handler>
 800233a:	e7d7      	b.n	80022ec <MX_TIM21_Init+0x54>
    Error_Handler();
 800233c:	f7fe fbca 	bl	8000ad4 <Error_Handler>
 8002340:	e7d9      	b.n	80022f6 <MX_TIM21_Init+0x5e>
    Error_Handler();
 8002342:	f7fe fbc7 	bl	8000ad4 <Error_Handler>
 8002346:	e7e0      	b.n	800230a <MX_TIM21_Init+0x72>
    Error_Handler();
 8002348:	f7fe fbc4 	bl	8000ad4 <Error_Handler>
 800234c:	e7eb      	b.n	8002326 <MX_TIM21_Init+0x8e>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	20000680 	.word	0x20000680
 8002354:	40010800 	.word	0x40010800
 8002358:	000003e7 	.word	0x000003e7

0800235c <MX_TIM22_Init>:
{
 800235c:	b500      	push	{lr}
 800235e:	b08d      	sub	sp, #52	; 0x34
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002360:	2214      	movs	r2, #20
 8002362:	2100      	movs	r1, #0
 8002364:	a807      	add	r0, sp, #28
 8002366:	f002 fb18 	bl	800499a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236a:	2208      	movs	r2, #8
 800236c:	2100      	movs	r1, #0
 800236e:	a805      	add	r0, sp, #20
 8002370:	f002 fb13 	bl	800499a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002374:	2210      	movs	r2, #16
 8002376:	2100      	movs	r1, #0
 8002378:	a801      	add	r0, sp, #4
 800237a:	f002 fb0e 	bl	800499a <memset>
  htim22.Instance = TIM22;
 800237e:	4824      	ldr	r0, [pc, #144]	; (8002410 <MX_TIM22_Init+0xb4>)
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <MX_TIM22_Init+0xb8>)
 8002382:	6003      	str	r3, [r0, #0]
  htim22.Init.Prescaler = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	6043      	str	r3, [r0, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	6083      	str	r3, [r0, #8]
  htim22.Init.Period = 199;
 800238a:	22c7      	movs	r2, #199	; 0xc7
 800238c:	60c2      	str	r2, [r0, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238e:	6103      	str	r3, [r0, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002390:	3380      	adds	r3, #128	; 0x80
 8002392:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8002394:	f001 fc61 	bl	8003c5a <HAL_TIM_Base_Init>
 8002398:	2800      	cmp	r0, #0
 800239a:	d129      	bne.n	80023f0 <MX_TIM22_Init+0x94>
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 800239c:	481c      	ldr	r0, [pc, #112]	; (8002410 <MX_TIM22_Init+0xb4>)
 800239e:	f001 fccc 	bl	8003d3a <HAL_TIM_PWM_Init>
 80023a2:	2800      	cmp	r0, #0
 80023a4:	d127      	bne.n	80023f6 <MX_TIM22_Init+0x9a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80023a6:	2307      	movs	r3, #7
 80023a8:	9307      	str	r3, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim22, &sSlaveConfig) != HAL_OK)
 80023ae:	a907      	add	r1, sp, #28
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <MX_TIM22_Init+0xb4>)
 80023b2:	f001 ff07 	bl	80041c4 <HAL_TIM_SlaveConfigSynchro>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d120      	bne.n	80023fc <MX_TIM22_Init+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80023c0:	a905      	add	r1, sp, #20
 80023c2:	4813      	ldr	r0, [pc, #76]	; (8002410 <MX_TIM22_Init+0xb4>)
 80023c4:	f001 ffc8 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d11a      	bne.n	8002402 <MX_TIM22_Init+0xa6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023cc:	2360      	movs	r3, #96	; 0x60
 80023ce:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d4:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d8:	2200      	movs	r2, #0
 80023da:	a901      	add	r1, sp, #4
 80023dc:	480c      	ldr	r0, [pc, #48]	; (8002410 <MX_TIM22_Init+0xb4>)
 80023de:	f001 fd7d 	bl	8003edc <HAL_TIM_PWM_ConfigChannel>
 80023e2:	2800      	cmp	r0, #0
 80023e4:	d110      	bne.n	8002408 <MX_TIM22_Init+0xac>
  HAL_TIM_MspPostInit(&htim22);
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <MX_TIM22_Init+0xb4>)
 80023e8:	f7ff ff14 	bl	8002214 <HAL_TIM_MspPostInit>
}
 80023ec:	b00d      	add	sp, #52	; 0x34
 80023ee:	bd00      	pop	{pc}
    Error_Handler();
 80023f0:	f7fe fb70 	bl	8000ad4 <Error_Handler>
 80023f4:	e7d2      	b.n	800239c <MX_TIM22_Init+0x40>
    Error_Handler();
 80023f6:	f7fe fb6d 	bl	8000ad4 <Error_Handler>
 80023fa:	e7d4      	b.n	80023a6 <MX_TIM22_Init+0x4a>
    Error_Handler();
 80023fc:	f7fe fb6a 	bl	8000ad4 <Error_Handler>
 8002400:	e7db      	b.n	80023ba <MX_TIM22_Init+0x5e>
    Error_Handler();
 8002402:	f7fe fb67 	bl	8000ad4 <Error_Handler>
 8002406:	e7e1      	b.n	80023cc <MX_TIM22_Init+0x70>
    Error_Handler();
 8002408:	f7fe fb64 	bl	8000ad4 <Error_Handler>
 800240c:	e7eb      	b.n	80023e6 <MX_TIM22_Init+0x8a>
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	200006c0 	.word	0x200006c0
 8002414:	40011400 	.word	0x40011400

08002418 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002418:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <MX_USART2_UART_Init+0x34>)
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART2_UART_Init+0x38>)
 800241e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002420:	23e1      	movs	r3, #225	; 0xe1
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	2300      	movs	r3, #0
 8002428:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800242a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800242c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800242e:	220c      	movs	r2, #12
 8002430:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002436:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002438:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800243a:	f002 fa45 	bl	80048c8 <HAL_UART_Init>
 800243e:	2800      	cmp	r0, #0
 8002440:	d100      	bne.n	8002444 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002442:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002444:	f7fe fb46 	bl	8000ad4 <Error_Handler>
}
 8002448:	e7fb      	b.n	8002442 <MX_USART2_UART_Init+0x2a>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	20000780 	.word	0x20000780
 8002450:	40004400 	.word	0x40004400

08002454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b510      	push	{r4, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	2214      	movs	r2, #20
 800245c:	2100      	movs	r1, #0
 800245e:	a801      	add	r0, sp, #4
 8002460:	f002 fa9b 	bl	800499a <memset>
  if(uartHandle->Instance==USART2)
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_UART_MspInit+0x54>)
 8002466:	6822      	ldr	r2, [r4, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800246c:	b006      	add	sp, #24
 800246e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_UART_MspInit+0x58>)
 8002472:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002474:	2280      	movs	r2, #128	; 0x80
 8002476:	0292      	lsls	r2, r2, #10
 8002478:	430a      	orrs	r2, r1
 800247a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247e:	2201      	movs	r2, #1
 8002480:	4311      	orrs	r1, r2
 8002482:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	401a      	ands	r2, r3
 8002488:	9200      	str	r2, [sp, #0]
 800248a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800248c:	230c      	movs	r3, #12
 800248e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	3b0a      	subs	r3, #10
 8002492:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	3301      	adds	r3, #1
 8002496:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002498:	3301      	adds	r3, #1
 800249a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249c:	20a0      	movs	r0, #160	; 0xa0
 800249e:	a901      	add	r1, sp, #4
 80024a0:	05c0      	lsls	r0, r0, #23
 80024a2:	f000 f8e7 	bl	8002674 <HAL_GPIO_Init>
}
 80024a6:	e7e1      	b.n	800246c <HAL_UART_MspInit+0x18>
 80024a8:	40004400 	.word	0x40004400
 80024ac:	40021000 	.word	0x40021000

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80024b0:	480d      	ldr	r0, [pc, #52]	; (80024e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80024b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <LoopForever+0x6>)
  ldr r1, =_edata
 80024b6:	490e      	ldr	r1, [pc, #56]	; (80024f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <LoopForever+0xe>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024cc:	4c0b      	ldr	r4, [pc, #44]	; (80024fc <LoopForever+0x16>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024da:	f7ff fd87 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f002 fa2f 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7fe f935 	bl	8000750 <main>

080024e6 <LoopForever>:

LoopForever:
    b LoopForever
 80024e6:	e7fe      	b.n	80024e6 <LoopForever>
   ldr   r0, =_estack
 80024e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80024f4:	08007f68 	.word	0x08007f68
  ldr r2, =_sbss
 80024f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80024fc:	20000818 	.word	0x20000818

08002500 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC1_COMP_IRQHandler>
	...

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b510      	push	{r4, lr}
 8002506:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_InitTick+0x40>)
 800250a:	7819      	ldrb	r1, [r3, #0]
 800250c:	20fa      	movs	r0, #250	; 0xfa
 800250e:	0080      	lsls	r0, r0, #2
 8002510:	f7fd fe04 	bl	800011c <__udivsi3>
 8002514:	0001      	movs	r1, r0
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_InitTick+0x44>)
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	f7fd fdff 	bl	800011c <__udivsi3>
 800251e:	f000 f88d 	bl	800263c <HAL_SYSTICK_Config>
 8002522:	2800      	cmp	r0, #0
 8002524:	d10b      	bne.n	800253e <HAL_InitTick+0x3a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002526:	3001      	adds	r0, #1
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002528:	2c03      	cmp	r4, #3
 800252a:	d809      	bhi.n	8002540 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800252c:	2200      	movs	r2, #0
 800252e:	0021      	movs	r1, r4
 8002530:	4240      	negs	r0, r0
 8002532:	f000 f845 	bl	80025c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_InitTick+0x48>)
 8002538:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2000      	movs	r0, #0
 800253c:	e000      	b.n	8002540 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800253e:	2001      	movs	r0, #1
}
 8002540:	bd10      	pop	{r4, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	20000018 	.word	0x20000018
 8002548:	20000014 	.word	0x20000014
 800254c:	2000001c 	.word	0x2000001c

08002550 <HAL_Init>:
{
 8002550:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_Init+0x24>)
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	430b      	orrs	r3, r1
 800255a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff ffd1 	bl	8002504 <HAL_InitTick>
 8002562:	1e04      	subs	r4, r0, #0
 8002564:	d002      	beq.n	800256c <HAL_Init+0x1c>
    status = HAL_ERROR;
 8002566:	2401      	movs	r4, #1
}
 8002568:	0020      	movs	r0, r4
 800256a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800256c:	f7ff fcd6 	bl	8001f1c <HAL_MspInit>
 8002570:	e7fa      	b.n	8002568 <HAL_Init+0x18>
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	40022000 	.word	0x40022000

08002578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002578:	4a03      	ldr	r2, [pc, #12]	; (8002588 <HAL_IncTick+0x10>)
 800257a:	6811      	ldr	r1, [r2, #0]
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_IncTick+0x14>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	185b      	adds	r3, r3, r1
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	4770      	bx	lr
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	20000804 	.word	0x20000804
 800258c:	20000018 	.word	0x20000018

08002590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002590:	4b01      	ldr	r3, [pc, #4]	; (8002598 <HAL_GetTick+0x8>)
 8002592:	6818      	ldr	r0, [r3, #0]
}
 8002594:	4770      	bx	lr
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	20000804 	.word	0x20000804

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025a0:	f7ff fff6 	bl	8002590 <HAL_GetTick>
 80025a4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	1c63      	adds	r3, r4, #1
 80025a8:	d002      	beq.n	80025b0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_Delay+0x20>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025b0:	f7ff ffee 	bl	8002590 <HAL_GetTick>
 80025b4:	1b40      	subs	r0, r0, r5
 80025b6:	42a0      	cmp	r0, r4
 80025b8:	d3fa      	bcc.n	80025b0 <HAL_Delay+0x14>
  {
  }
}
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	20000018 	.word	0x20000018

080025c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80025c2:	2800      	cmp	r0, #0
 80025c4:	db14      	blt.n	80025f0 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c6:	0884      	lsrs	r4, r0, #2
 80025c8:	00a4      	lsls	r4, r4, #2
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_NVIC_SetPriority+0x5c>)
 80025cc:	469c      	mov	ip, r3
 80025ce:	4464      	add	r4, ip
 80025d0:	26c0      	movs	r6, #192	; 0xc0
 80025d2:	00b6      	lsls	r6, r6, #2
 80025d4:	59a5      	ldr	r5, [r4, r6]
 80025d6:	2203      	movs	r2, #3
 80025d8:	4010      	ands	r0, r2
 80025da:	00c0      	lsls	r0, r0, #3
 80025dc:	23ff      	movs	r3, #255	; 0xff
 80025de:	001a      	movs	r2, r3
 80025e0:	4082      	lsls	r2, r0
 80025e2:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025e4:	0189      	lsls	r1, r1, #6
 80025e6:	400b      	ands	r3, r1
 80025e8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ea:	432b      	orrs	r3, r5
 80025ec:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f0:	230f      	movs	r3, #15
 80025f2:	4003      	ands	r3, r0
 80025f4:	3b08      	subs	r3, #8
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_NVIC_SetPriority+0x60>)
 80025fc:	4694      	mov	ip, r2
 80025fe:	4463      	add	r3, ip
 8002600:	69dc      	ldr	r4, [r3, #28]
 8002602:	2203      	movs	r2, #3
 8002604:	4010      	ands	r0, r2
 8002606:	00c0      	lsls	r0, r0, #3
 8002608:	32fc      	adds	r2, #252	; 0xfc
 800260a:	0015      	movs	r5, r2
 800260c:	4085      	lsls	r5, r0
 800260e:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002610:	0189      	lsls	r1, r1, #6
 8002612:	400a      	ands	r2, r1
 8002614:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002616:	4322      	orrs	r2, r4
 8002618:	61da      	str	r2, [r3, #28]
 800261a:	e7e8      	b.n	80025ee <HAL_NVIC_SetPriority+0x2e>
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002624:	2800      	cmp	r0, #0
 8002626:	db05      	blt.n	8002634 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002628:	231f      	movs	r3, #31
 800262a:	4018      	ands	r0, r3
 800262c:	3b1e      	subs	r3, #30
 800262e:	4083      	lsls	r3, r0
 8002630:	4a01      	ldr	r2, [pc, #4]	; (8002638 <HAL_NVIC_EnableIRQ+0x14>)
 8002632:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002634:	4770      	bx	lr
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	e000e100 	.word	0xe000e100

0800263c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	3801      	subs	r0, #1
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	045b      	lsls	r3, r3, #17
 8002642:	4298      	cmp	r0, r3
 8002644:	d20f      	bcs.n	8002666 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_SYSTICK_Config+0x30>)
 8002648:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800264a:	4809      	ldr	r0, [pc, #36]	; (8002670 <HAL_SYSTICK_Config+0x34>)
 800264c:	6a03      	ldr	r3, [r0, #32]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	21c0      	movs	r1, #192	; 0xc0
 8002654:	0609      	lsls	r1, r1, #24
 8002656:	430b      	orrs	r3, r1
 8002658:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265a:	2300      	movs	r3, #0
 800265c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	3307      	adds	r3, #7
 8002660:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002662:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8002668:	e7fc      	b.n	8002664 <HAL_SYSTICK_Config+0x28>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	e000e010 	.word	0xe000e010
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002676:	46de      	mov	lr, fp
 8002678:	4657      	mov	r7, sl
 800267a:	464e      	mov	r6, r9
 800267c:	4645      	mov	r5, r8
 800267e:	b5e0      	push	{r5, r6, r7, lr}
 8002680:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002682:	680e      	ldr	r6, [r1, #0]
 8002684:	2e00      	cmp	r6, #0
 8002686:	d100      	bne.n	800268a <HAL_GPIO_Init+0x16>
 8002688:	e0d6      	b.n	8002838 <HAL_GPIO_Init+0x1c4>
 800268a:	2200      	movs	r2, #0
  uint32_t position = 0x00U;
 800268c:	2300      	movs	r3, #0

    if (iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800268e:	2403      	movs	r4, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	25c0      	movs	r5, #192	; 0xc0
 8002692:	02ad      	lsls	r5, r5, #10
 8002694:	46ab      	mov	fp, r5
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	4d6c      	ldr	r5, [pc, #432]	; (8002848 <HAL_GPIO_Init+0x1d4>)
 8002698:	46aa      	mov	sl, r5

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800269a:	4d6c      	ldr	r5, [pc, #432]	; (800284c <HAL_GPIO_Init+0x1d8>)
 800269c:	1945      	adds	r5, r0, r5
 800269e:	1e6f      	subs	r7, r5, #1
 80026a0:	41bd      	sbcs	r5, r7
 80026a2:	3505      	adds	r5, #5
 80026a4:	9501      	str	r5, [sp, #4]
 80026a6:	e044      	b.n	8002732 <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 80026a8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026aa:	0027      	movs	r7, r4
 80026ac:	4097      	lsls	r7, r2
 80026ae:	43be      	bics	r6, r7
 80026b0:	46b4      	mov	ip, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b2:	68ce      	ldr	r6, [r1, #12]
 80026b4:	4096      	lsls	r6, r2
 80026b6:	4667      	mov	r7, ip
 80026b8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80026ba:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80026bc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026be:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c0:	684d      	ldr	r5, [r1, #4]
 80026c2:	092d      	lsrs	r5, r5, #4
 80026c4:	2701      	movs	r7, #1
 80026c6:	403d      	ands	r5, r7
 80026c8:	409d      	lsls	r5, r3
 80026ca:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80026cc:	6045      	str	r5, [r0, #4]
 80026ce:	e03c      	b.n	800274a <HAL_GPIO_Init+0xd6>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80026d0:	2600      	movs	r6, #0
 80026d2:	4667      	mov	r7, ip
 80026d4:	40be      	lsls	r6, r7
 80026d6:	4647      	mov	r7, r8
 80026d8:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026da:	60ae      	str	r6, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4d5c      	ldr	r5, [pc, #368]	; (8002850 <HAL_GPIO_Init+0x1dc>)
 80026de:	682d      	ldr	r5, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	9e00      	ldr	r6, [sp, #0]
 80026e2:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e4:	684f      	ldr	r7, [r1, #4]
 80026e6:	03ff      	lsls	r7, r7, #15
 80026e8:	d500      	bpl.n	80026ec <HAL_GPIO_Init+0x78>
 80026ea:	e099      	b.n	8002820 <HAL_GPIO_Init+0x1ac>
        temp &= ~((uint32_t)iocurrent);
 80026ec:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80026ee:	4f58      	ldr	r7, [pc, #352]	; (8002850 <HAL_GPIO_Init+0x1dc>)
 80026f0:	603d      	str	r5, [r7, #0]

        temp = EXTI->EMR;
 80026f2:	687d      	ldr	r5, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f4:	684f      	ldr	r7, [r1, #4]
 80026f6:	03bf      	lsls	r7, r7, #14
 80026f8:	d500      	bpl.n	80026fc <HAL_GPIO_Init+0x88>
 80026fa:	e094      	b.n	8002826 <HAL_GPIO_Init+0x1b2>
        temp &= ~((uint32_t)iocurrent);
 80026fc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80026fe:	4f54      	ldr	r7, [pc, #336]	; (8002850 <HAL_GPIO_Init+0x1dc>)
 8002700:	607d      	str	r5, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002702:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002704:	684f      	ldr	r7, [r1, #4]
 8002706:	02ff      	lsls	r7, r7, #11
 8002708:	d500      	bpl.n	800270c <HAL_GPIO_Init+0x98>
 800270a:	e08f      	b.n	800282c <HAL_GPIO_Init+0x1b8>
        temp &= ~((uint32_t)iocurrent);
 800270c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800270e:	4f50      	ldr	r7, [pc, #320]	; (8002850 <HAL_GPIO_Init+0x1dc>)
 8002710:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8002712:	68fd      	ldr	r5, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	684f      	ldr	r7, [r1, #4]
 8002716:	02bf      	lsls	r7, r7, #10
 8002718:	d500      	bpl.n	800271c <HAL_GPIO_Init+0xa8>
 800271a:	e08a      	b.n	8002832 <HAL_GPIO_Init+0x1be>
        temp &= ~((uint32_t)iocurrent);
 800271c:	4035      	ands	r5, r6
 800271e:	002f      	movs	r7, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002720:	4d4b      	ldr	r5, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x1dc>)
 8002722:	60ef      	str	r7, [r5, #12]
      }
    }
    position++;
 8002724:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8002726:	680e      	ldr	r6, [r1, #0]
 8002728:	3202      	adds	r2, #2
 800272a:	0035      	movs	r5, r6
 800272c:	40dd      	lsrs	r5, r3
 800272e:	d100      	bne.n	8002732 <HAL_GPIO_Init+0xbe>
 8002730:	e082      	b.n	8002838 <HAL_GPIO_Init+0x1c4>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002732:	2501      	movs	r5, #1
 8002734:	409d      	lsls	r5, r3
 8002736:	0037      	movs	r7, r6
 8002738:	402f      	ands	r7, r5
 800273a:	9700      	str	r7, [sp, #0]
    if (iocurrent)
 800273c:	422e      	tst	r6, r5
 800273e:	d0f1      	beq.n	8002724 <HAL_GPIO_Init+0xb0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002740:	684e      	ldr	r6, [r1, #4]
 8002742:	4026      	ands	r6, r4
 8002744:	3e01      	subs	r6, #1
 8002746:	2e01      	cmp	r6, #1
 8002748:	d9ae      	bls.n	80026a8 <HAL_GPIO_Init+0x34>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274a:	684d      	ldr	r5, [r1, #4]
 800274c:	4025      	ands	r5, r4
 800274e:	2d03      	cmp	r5, #3
 8002750:	d024      	beq.n	800279c <HAL_GPIO_Init+0x128>
        temp = GPIOx->PUPDR;
 8002752:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002754:	0026      	movs	r6, r4
 8002756:	4096      	lsls	r6, r2
 8002758:	43b5      	bics	r5, r6
 800275a:	002e      	movs	r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275c:	688d      	ldr	r5, [r1, #8]
 800275e:	4095      	lsls	r5, r2
 8002760:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8002762:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	684d      	ldr	r5, [r1, #4]
 8002766:	4025      	ands	r5, r4
 8002768:	2d02      	cmp	r5, #2
 800276a:	d117      	bne.n	800279c <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3U];
 800276c:	08dd      	lsrs	r5, r3, #3
 800276e:	00ad      	lsls	r5, r5, #2
 8002770:	46a9      	mov	r9, r5
 8002772:	4481      	add	r9, r0
 8002774:	464d      	mov	r5, r9
 8002776:	6a2e      	ldr	r6, [r5, #32]
 8002778:	46b4      	mov	ip, r6
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800277a:	2607      	movs	r6, #7
 800277c:	401e      	ands	r6, r3
 800277e:	00b6      	lsls	r6, r6, #2
 8002780:	270f      	movs	r7, #15
 8002782:	40b7      	lsls	r7, r6
 8002784:	46b8      	mov	r8, r7
 8002786:	4667      	mov	r7, ip
 8002788:	4645      	mov	r5, r8
 800278a:	43af      	bics	r7, r5
 800278c:	46bc      	mov	ip, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800278e:	690f      	ldr	r7, [r1, #16]
 8002790:	40b7      	lsls	r7, r6
 8002792:	003e      	movs	r6, r7
 8002794:	4665      	mov	r5, ip
 8002796:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3U] = temp;
 8002798:	464d      	mov	r5, r9
 800279a:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 800279c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800279e:	0026      	movs	r6, r4
 80027a0:	4096      	lsls	r6, r2
 80027a2:	43b5      	bics	r5, r6
 80027a4:	002e      	movs	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a6:	684d      	ldr	r5, [r1, #4]
 80027a8:	4025      	ands	r5, r4
 80027aa:	4095      	lsls	r5, r2
 80027ac:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80027ae:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b0:	684d      	ldr	r5, [r1, #4]
 80027b2:	465e      	mov	r6, fp
 80027b4:	4235      	tst	r5, r6
 80027b6:	d0b5      	beq.n	8002724 <HAL_GPIO_Init+0xb0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b8:	4655      	mov	r5, sl
 80027ba:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80027bc:	2601      	movs	r6, #1
 80027be:	4335      	orrs	r5, r6
 80027c0:	4656      	mov	r6, sl
 80027c2:	6375      	str	r5, [r6, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80027c4:	089d      	lsrs	r5, r3, #2
 80027c6:	00ad      	lsls	r5, r5, #2
 80027c8:	4e22      	ldr	r6, [pc, #136]	; (8002854 <HAL_GPIO_Init+0x1e0>)
 80027ca:	46b4      	mov	ip, r6
 80027cc:	4465      	add	r5, ip
 80027ce:	68ae      	ldr	r6, [r5, #8]
 80027d0:	46b0      	mov	r8, r6
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027d2:	0026      	movs	r6, r4
 80027d4:	401e      	ands	r6, r3
 80027d6:	00b6      	lsls	r6, r6, #2
 80027d8:	46b4      	mov	ip, r6
 80027da:	260f      	movs	r6, #15
 80027dc:	4667      	mov	r7, ip
 80027de:	40be      	lsls	r6, r7
 80027e0:	4647      	mov	r7, r8
 80027e2:	43b7      	bics	r7, r6
 80027e4:	46b8      	mov	r8, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80027e6:	26a0      	movs	r6, #160	; 0xa0
 80027e8:	05f6      	lsls	r6, r6, #23
 80027ea:	42b0      	cmp	r0, r6
 80027ec:	d100      	bne.n	80027f0 <HAL_GPIO_Init+0x17c>
 80027ee:	e76f      	b.n	80026d0 <HAL_GPIO_Init+0x5c>
 80027f0:	4e19      	ldr	r6, [pc, #100]	; (8002858 <HAL_GPIO_Init+0x1e4>)
 80027f2:	46b1      	mov	r9, r6
 80027f4:	2601      	movs	r6, #1
 80027f6:	4548      	cmp	r0, r9
 80027f8:	d100      	bne.n	80027fc <HAL_GPIO_Init+0x188>
 80027fa:	e76a      	b.n	80026d2 <HAL_GPIO_Init+0x5e>
 80027fc:	4e17      	ldr	r6, [pc, #92]	; (800285c <HAL_GPIO_Init+0x1e8>)
 80027fe:	42b0      	cmp	r0, r6
 8002800:	d00a      	beq.n	8002818 <HAL_GPIO_Init+0x1a4>
 8002802:	4e17      	ldr	r6, [pc, #92]	; (8002860 <HAL_GPIO_Init+0x1ec>)
 8002804:	46b1      	mov	r9, r6
 8002806:	0026      	movs	r6, r4
 8002808:	4548      	cmp	r0, r9
 800280a:	d100      	bne.n	800280e <HAL_GPIO_Init+0x19a>
 800280c:	e761      	b.n	80026d2 <HAL_GPIO_Init+0x5e>
 800280e:	4e15      	ldr	r6, [pc, #84]	; (8002864 <HAL_GPIO_Init+0x1f0>)
 8002810:	42b0      	cmp	r0, r6
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x1a8>
 8002814:	9e01      	ldr	r6, [sp, #4]
 8002816:	e75c      	b.n	80026d2 <HAL_GPIO_Init+0x5e>
 8002818:	2602      	movs	r6, #2
 800281a:	e75a      	b.n	80026d2 <HAL_GPIO_Init+0x5e>
 800281c:	2604      	movs	r6, #4
 800281e:	e758      	b.n	80026d2 <HAL_GPIO_Init+0x5e>
          temp |= iocurrent;
 8002820:	9f00      	ldr	r7, [sp, #0]
 8002822:	433d      	orrs	r5, r7
 8002824:	e763      	b.n	80026ee <HAL_GPIO_Init+0x7a>
          temp |= iocurrent;
 8002826:	9f00      	ldr	r7, [sp, #0]
 8002828:	433d      	orrs	r5, r7
 800282a:	e768      	b.n	80026fe <HAL_GPIO_Init+0x8a>
          temp |= iocurrent;
 800282c:	9f00      	ldr	r7, [sp, #0]
 800282e:	433d      	orrs	r5, r7
 8002830:	e76d      	b.n	800270e <HAL_GPIO_Init+0x9a>
          temp |= iocurrent;
 8002832:	9f00      	ldr	r7, [sp, #0]
 8002834:	432f      	orrs	r7, r5
 8002836:	e773      	b.n	8002720 <HAL_GPIO_Init+0xac>
  }
}
 8002838:	b003      	add	sp, #12
 800283a:	bcf0      	pop	{r4, r5, r6, r7}
 800283c:	46bb      	mov	fp, r7
 800283e:	46b2      	mov	sl, r6
 8002840:	46a9      	mov	r9, r5
 8002842:	46a0      	mov	r8, r4
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	afffe400 	.word	0xafffe400
 8002850:	40010400 	.word	0x40010400
 8002854:	40010000 	.word	0x40010000
 8002858:	50000400 	.word	0x50000400
 800285c:	50000800 	.word	0x50000800
 8002860:	50000c00 	.word	0x50000c00
 8002864:	50001000 	.word	0x50001000

08002868 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002868:	6900      	ldr	r0, [r0, #16]
 800286a:	4008      	ands	r0, r1
 800286c:	1e43      	subs	r3, r0, #1
 800286e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002870:	b2c0      	uxtb	r0, r0
}
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002874:	2a00      	cmp	r2, #0
 8002876:	d001      	beq.n	800287c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002878:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800287a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800287c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800287e:	e7fc      	b.n	800287a <HAL_GPIO_WritePin+0x6>

08002880 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002880:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002882:	0013      	movs	r3, r2
 8002884:	400b      	ands	r3, r1
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	4391      	bics	r1, r2
 800288a:	4319      	orrs	r1, r3
 800288c:	6181      	str	r1, [r0, #24]
}
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002890:	b510      	push	{r4, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4218      	tst	r0, r3
 8002898:	d100      	bne.n	800289c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800289a:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800289e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a0:	f7fe f900 	bl	8000aa4 <HAL_GPIO_EXTI_Callback>
}
 80028a4:	e7f9      	b.n	800289a <HAL_GPIO_EXTI_IRQHandler+0xa>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40010400 	.word	0x40010400

080028ac <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028ac:	6803      	ldr	r3, [r0, #0]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	0792      	lsls	r2, r2, #30
 80028b2:	d501      	bpl.n	80028b8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028b4:	2200      	movs	r2, #0
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	07d2      	lsls	r2, r2, #31
 80028be:	d403      	bmi.n	80028c8 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	2101      	movs	r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	619a      	str	r2, [r3, #24]
  }
}
 80028c8:	4770      	bx	lr
	...

080028cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028cc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028ce:	6805      	ldr	r5, [r0, #0]
 80028d0:	6868      	ldr	r0, [r5, #4]
 80028d2:	9c04      	ldr	r4, [sp, #16]
 80028d4:	0d64      	lsrs	r4, r4, #21
 80028d6:	2680      	movs	r6, #128	; 0x80
 80028d8:	00f6      	lsls	r6, r6, #3
 80028da:	4026      	ands	r6, r4
 80028dc:	4c06      	ldr	r4, [pc, #24]	; (80028f8 <I2C_TransferConfig+0x2c>)
 80028de:	4334      	orrs	r4, r6
 80028e0:	43a0      	bics	r0, r4
 80028e2:	0412      	lsls	r2, r2, #16
 80028e4:	9c04      	ldr	r4, [sp, #16]
 80028e6:	4322      	orrs	r2, r4
 80028e8:	431a      	orrs	r2, r3
 80028ea:	0589      	lsls	r1, r1, #22
 80028ec:	0d89      	lsrs	r1, r1, #22
 80028ee:	430a      	orrs	r2, r1
 80028f0:	4302      	orrs	r2, r0
 80028f2:	606a      	str	r2, [r5, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80028f4:	bd70      	pop	{r4, r5, r6, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	03ff63ff 	.word	0x03ff63ff

080028fc <I2C_IsAcknowledgeFailed>:
{
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	0007      	movs	r7, r0
 8002900:	000c      	movs	r4, r1
 8002902:	0015      	movs	r5, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002904:	6803      	ldr	r3, [r0, #0]
 8002906:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;
 8002908:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800290a:	06d2      	lsls	r2, r2, #27
 800290c:	d53b      	bpl.n	8002986 <I2C_IsAcknowledgeFailed+0x8a>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	0192      	lsls	r2, r2, #6
 8002912:	d404      	bmi.n	800291e <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	2280      	movs	r2, #128	; 0x80
 8002918:	01d2      	lsls	r2, r2, #7
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291e:	2620      	movs	r6, #32
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	698b      	ldr	r3, [r1, #24]
 8002924:	421e      	tst	r6, r3
 8002926:	d115      	bne.n	8002954 <I2C_IsAcknowledgeFailed+0x58>
      if (Timeout != HAL_MAX_DELAY)
 8002928:	1c63      	adds	r3, r4, #1
 800292a:	d0fa      	beq.n	8002922 <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292c:	f7ff fe30 	bl	8002590 <HAL_GetTick>
 8002930:	1b40      	subs	r0, r0, r5
 8002932:	42a0      	cmp	r0, r4
 8002934:	d801      	bhi.n	800293a <I2C_IsAcknowledgeFailed+0x3e>
 8002936:	2c00      	cmp	r4, #0
 8002938:	d1f2      	bne.n	8002920 <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293c:	2220      	movs	r2, #32
 800293e:	4313      	orrs	r3, r2
 8002940:	647b      	str	r3, [r7, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002942:	2341      	movs	r3, #65	; 0x41
 8002944:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	3222      	adds	r2, #34	; 0x22
 800294a:	54bb      	strb	r3, [r7, r2]
          __HAL_UNLOCK(hi2c);
 800294c:	3a02      	subs	r2, #2
 800294e:	54bb      	strb	r3, [r7, r2]
          return HAL_ERROR;
 8002950:	2001      	movs	r0, #1
 8002952:	e018      	b.n	8002986 <I2C_IsAcknowledgeFailed+0x8a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	2310      	movs	r3, #16
 8002956:	61cb      	str	r3, [r1, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2420      	movs	r4, #32
 800295c:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800295e:	0038      	movs	r0, r7
 8002960:	f7ff ffa4 	bl	80028ac <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	6853      	ldr	r3, [r2, #4]
 8002968:	4907      	ldr	r1, [pc, #28]	; (8002988 <I2C_IsAcknowledgeFailed+0x8c>)
 800296a:	400b      	ands	r3, r1
 800296c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800296e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002970:	2204      	movs	r2, #4
 8002972:	4313      	orrs	r3, r2
 8002974:	647b      	str	r3, [r7, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	2341      	movs	r3, #65	; 0x41
 8002978:	54fc      	strb	r4, [r7, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297a:	2300      	movs	r3, #0
 800297c:	323e      	adds	r2, #62	; 0x3e
 800297e:	54bb      	strb	r3, [r7, r2]
    __HAL_UNLOCK(hi2c);
 8002980:	3a02      	subs	r2, #2
 8002982:	54bb      	strb	r3, [r7, r2]
    return HAL_ERROR;
 8002984:	2001      	movs	r0, #1
}
 8002986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002988:	fe00e800 	.word	0xfe00e800

0800298c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	0004      	movs	r4, r0
 8002990:	000d      	movs	r5, r1
 8002992:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002994:	2702      	movs	r7, #2
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	421f      	tst	r7, r3
 800299c:	d11c      	bne.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800299e:	0032      	movs	r2, r6
 80029a0:	0029      	movs	r1, r5
 80029a2:	0020      	movs	r0, r4
 80029a4:	f7ff ffaa 	bl	80028fc <I2C_IsAcknowledgeFailed>
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d117      	bne.n	80029dc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80029ac:	1c6b      	adds	r3, r5, #1
 80029ae:	d0f2      	beq.n	8002996 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b0:	f7ff fdee 	bl	8002590 <HAL_GetTick>
 80029b4:	1b80      	subs	r0, r0, r6
 80029b6:	42a8      	cmp	r0, r5
 80029b8:	d801      	bhi.n	80029be <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	d1eb      	bne.n	8002996 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80029c0:	2220      	movs	r2, #32
 80029c2:	4313      	orrs	r3, r2
 80029c4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	2341      	movs	r3, #65	; 0x41
 80029c8:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	3222      	adds	r2, #34	; 0x22
 80029ce:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80029d0:	3a02      	subs	r2, #2
 80029d2:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80029d4:	2001      	movs	r0, #1
 80029d6:	e000      	b.n	80029da <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 80029d8:	2000      	movs	r0, #0
}
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	e7fc      	b.n	80029da <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

080029e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80029e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e2:	46c6      	mov	lr, r8
 80029e4:	b500      	push	{lr}
 80029e6:	4680      	mov	r8, r0
 80029e8:	000d      	movs	r5, r1
 80029ea:	0017      	movs	r7, r2
 80029ec:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ee:	4643      	mov	r3, r8
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699c      	ldr	r4, [r3, #24]
 80029f4:	402c      	ands	r4, r5
 80029f6:	1b64      	subs	r4, r4, r5
 80029f8:	4262      	negs	r2, r4
 80029fa:	4154      	adcs	r4, r2
 80029fc:	42bc      	cmp	r4, r7
 80029fe:	d118      	bne.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	1c72      	adds	r2, r6, #1
 8002a02:	d0f6      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a04:	f7ff fdc4 	bl	8002590 <HAL_GetTick>
 8002a08:	9b06      	ldr	r3, [sp, #24]
 8002a0a:	1ac0      	subs	r0, r0, r3
 8002a0c:	42b0      	cmp	r0, r6
 8002a0e:	d801      	bhi.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x34>
 8002a10:	2e00      	cmp	r6, #0
 8002a12:	d1ec      	bne.n	80029ee <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	4643      	mov	r3, r8
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	2220      	movs	r2, #32
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	644b      	str	r3, [r1, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	2341      	movs	r3, #65	; 0x41
 8002a22:	54ca      	strb	r2, [r1, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	3222      	adds	r2, #34	; 0x22
 8002a28:	548b      	strb	r3, [r1, r2]
        __HAL_UNLOCK(hi2c);
 8002a2a:	3a02      	subs	r2, #2
 8002a2c:	548b      	strb	r3, [r1, r2]
        return HAL_ERROR;
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e000      	b.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0x54>
  return HAL_OK;
 8002a32:	2000      	movs	r0, #0
}
 8002a34:	bc80      	pop	{r7}
 8002a36:	46b8      	mov	r8, r7
 8002a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a3a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3c:	0005      	movs	r5, r0
 8002a3e:	000c      	movs	r4, r1
 8002a40:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a42:	2720      	movs	r7, #32
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	421f      	tst	r7, r3
 8002a4a:	d11a      	bne.n	8002a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a4c:	0032      	movs	r2, r6
 8002a4e:	0021      	movs	r1, r4
 8002a50:	0028      	movs	r0, r5
 8002a52:	f7ff ff53 	bl	80028fc <I2C_IsAcknowledgeFailed>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d115      	bne.n	8002a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5a:	f7ff fd99 	bl	8002590 <HAL_GetTick>
 8002a5e:	1b80      	subs	r0, r0, r6
 8002a60:	42a0      	cmp	r0, r4
 8002a62:	d801      	bhi.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002a64:	2c00      	cmp	r4, #0
 8002a66:	d1ed      	bne.n	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	2341      	movs	r3, #65	; 0x41
 8002a72:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	3222      	adds	r2, #34	; 0x22
 8002a78:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8002a7a:	3a02      	subs	r2, #2
 8002a7c:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
}
 8002a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002a82:	2000      	movs	r0, #0
 8002a84:	e7fc      	b.n	8002a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e7fa      	b.n	8002a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08002a8c <HAL_I2C_Init>:
{
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8002a90:	d059      	beq.n	8002b46 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	2341      	movs	r3, #65	; 0x41
 8002a94:	5cc3      	ldrb	r3, [r0, r3]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d043      	beq.n	8002b22 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9a:	2341      	movs	r3, #65	; 0x41
 8002a9c:	2224      	movs	r2, #36	; 0x24
 8002a9e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	438b      	bics	r3, r1
 8002aa8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aaa:	6822      	ldr	r2, [r4, #0]
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_I2C_Init+0xc0>)
 8002aae:	6861      	ldr	r1, [r4, #4]
 8002ab0:	400b      	ands	r3, r1
 8002ab2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ab4:	6822      	ldr	r2, [r4, #0]
 8002ab6:	6893      	ldr	r3, [r2, #8]
 8002ab8:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_I2C_Init+0xc4>)
 8002aba:	400b      	ands	r3, r1
 8002abc:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002abe:	68e3      	ldr	r3, [r4, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d034      	beq.n	8002b2e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	2384      	movs	r3, #132	; 0x84
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	68a1      	ldr	r1, [r4, #8]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ad0:	68e3      	ldr	r3, [r4, #12]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d032      	beq.n	8002b3c <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	6851      	ldr	r1, [r2, #4]
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_I2C_Init+0xc8>)
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ae0:	6822      	ldr	r2, [r4, #0]
 8002ae2:	68d3      	ldr	r3, [r2, #12]
 8002ae4:	491a      	ldr	r1, [pc, #104]	; (8002b50 <HAL_I2C_Init+0xc4>)
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aea:	6821      	ldr	r1, [r4, #0]
 8002aec:	6923      	ldr	r3, [r4, #16]
 8002aee:	6962      	ldr	r2, [r4, #20]
 8002af0:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002af2:	69a2      	ldr	r2, [r4, #24]
 8002af4:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002afa:	6822      	ldr	r2, [r4, #0]
 8002afc:	69e3      	ldr	r3, [r4, #28]
 8002afe:	6a21      	ldr	r1, [r4, #32]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	6822      	ldr	r2, [r4, #0]
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	2101      	movs	r1, #1
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	2241      	movs	r2, #65	; 0x41
 8002b14:	311f      	adds	r1, #31
 8002b16:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b18:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	3201      	adds	r2, #1
 8002b1c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002b1e:	2000      	movs	r0, #0
}
 8002b20:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002b22:	3340      	adds	r3, #64	; 0x40
 8002b24:	2200      	movs	r2, #0
 8002b26:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8002b28:	f7fd fd8e 	bl	8000648 <HAL_I2C_MspInit>
 8002b2c:	e7b5      	b.n	8002a9a <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	68a1      	ldr	r1, [r4, #8]
 8002b36:	430b      	orrs	r3, r1
 8002b38:	6093      	str	r3, [r2, #8]
 8002b3a:	e7c9      	b.n	8002ad0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	e7c7      	b.n	8002ad6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002b46:	2001      	movs	r0, #1
 8002b48:	e7ea      	b.n	8002b20 <HAL_I2C_Init+0x94>
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	f0ffffff 	.word	0xf0ffffff
 8002b50:	ffff7fff 	.word	0xffff7fff
 8002b54:	02008000 	.word	0x02008000

08002b58 <HAL_I2C_Master_Transmit>:
{
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5a:	46d6      	mov	lr, sl
 8002b5c:	464f      	mov	r7, r9
 8002b5e:	4646      	mov	r6, r8
 8002b60:	b5c0      	push	{r6, r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	0004      	movs	r4, r0
 8002b66:	4689      	mov	r9, r1
 8002b68:	9203      	str	r2, [sp, #12]
 8002b6a:	001e      	movs	r6, r3
 8002b6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6e:	2341      	movs	r3, #65	; 0x41
 8002b70:	5cc3      	ldrb	r3, [r0, r3]
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d000      	beq.n	8002b78 <HAL_I2C_Master_Transmit+0x20>
 8002b76:	e0a2      	b.n	8002cbe <HAL_I2C_Master_Transmit+0x166>
    __HAL_LOCK(hi2c);
 8002b78:	3320      	adds	r3, #32
 8002b7a:	5cc3      	ldrb	r3, [r0, r3]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d100      	bne.n	8002b82 <HAL_I2C_Master_Transmit+0x2a>
 8002b80:	e0a4      	b.n	8002ccc <HAL_I2C_Master_Transmit+0x174>
 8002b82:	2340      	movs	r3, #64	; 0x40
 8002b84:	2201      	movs	r2, #1
 8002b86:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8002b88:	f7ff fd02 	bl	8002590 <HAL_GetTick>
 8002b8c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	9000      	str	r0, [sp, #0]
 8002b92:	2319      	movs	r3, #25
 8002b94:	2201      	movs	r2, #1
 8002b96:	0209      	lsls	r1, r1, #8
 8002b98:	0020      	movs	r0, r4
 8002b9a:	f7ff ff21 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d000      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0x4c>
 8002ba2:	e095      	b.n	8002cd0 <HAL_I2C_Master_Transmit+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ba4:	2341      	movs	r3, #65	; 0x41
 8002ba6:	2221      	movs	r2, #33	; 0x21
 8002ba8:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002baa:	3301      	adds	r3, #1
 8002bac:	3a11      	subs	r2, #17
 8002bae:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002bb4:	9a03      	ldr	r2, [sp, #12]
 8002bb6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bb8:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bba:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2bff      	cmp	r3, #255	; 0xff
 8002bc2:	d916      	bls.n	8002bf2 <HAL_I2C_Master_Transmit+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc4:	23ff      	movs	r3, #255	; 0xff
 8002bc6:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc8:	3b7f      	subs	r3, #127	; 0x7f
 8002bca:	4a45      	ldr	r2, [pc, #276]	; (8002ce0 <HAL_I2C_Master_Transmit+0x188>)
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	045b      	lsls	r3, r3, #17
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f7ff fe79 	bl	80028cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d056      	beq.n	8002c90 <HAL_I2C_Master_Transmit+0x138>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	049b      	lsls	r3, r3, #18
 8002be6:	469a      	mov	sl, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be8:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	045b      	lsls	r3, r3, #17
 8002bee:	4698      	mov	r8, r3
 8002bf0:	e01b      	b.n	8002c2a <HAL_I2C_Master_Transmit+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8002bf2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4938      	ldr	r1, [pc, #224]	; (8002ce0 <HAL_I2C_Master_Transmit+0x188>)
 8002bfe:	9100      	str	r1, [sp, #0]
 8002c00:	049b      	lsls	r3, r3, #18
 8002c02:	4649      	mov	r1, r9
 8002c04:	0020      	movs	r0, r4
 8002c06:	f7ff fe61 	bl	80028cc <I2C_TransferConfig>
 8002c0a:	e7e6      	b.n	8002bda <HAL_I2C_Master_Transmit+0x82>
          hi2c->XferSize = hi2c->XferCount;
 8002c0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	2300      	movs	r3, #0
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	4653      	mov	r3, sl
 8002c1a:	4649      	mov	r1, r9
 8002c1c:	0020      	movs	r0, r4
 8002c1e:	f7ff fe55 	bl	80028cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d032      	beq.n	8002c90 <HAL_I2C_Master_Transmit+0x138>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	003a      	movs	r2, r7
 8002c2c:	0029      	movs	r1, r5
 8002c2e:	0020      	movs	r0, r4
 8002c30:	f7ff feac 	bl	800298c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d14d      	bne.n	8002cd4 <HAL_I2C_Master_Transmit+0x17c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c42:	3301      	adds	r3, #1
 8002c44:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002c46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002c4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c58:	b292      	uxth	r2, r2
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	d0e1      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0xca>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1df      	bne.n	8002c22 <HAL_I2C_Master_Transmit+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	9700      	str	r7, [sp, #0]
 8002c64:	002b      	movs	r3, r5
 8002c66:	2200      	movs	r2, #0
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	0020      	movs	r0, r4
 8002c6c:	f7ff feb8 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d131      	bne.n	8002cd8 <HAL_I2C_Master_Transmit+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2bff      	cmp	r3, #255	; 0xff
 8002c7a:	d9c7      	bls.n	8002c0c <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c7c:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	4643      	mov	r3, r8
 8002c84:	0032      	movs	r2, r6
 8002c86:	4649      	mov	r1, r9
 8002c88:	0020      	movs	r0, r4
 8002c8a:	f7ff fe1f 	bl	80028cc <I2C_TransferConfig>
 8002c8e:	e7c8      	b.n	8002c22 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c90:	003a      	movs	r2, r7
 8002c92:	0029      	movs	r1, r5
 8002c94:	0020      	movs	r0, r4
 8002c96:	f7ff fed0 	bl	8002a3a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d11e      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002ca4:	6821      	ldr	r1, [r4, #0]
 8002ca6:	684b      	ldr	r3, [r1, #4]
 8002ca8:	4d0e      	ldr	r5, [pc, #56]	; (8002ce4 <HAL_I2C_Master_Transmit+0x18c>)
 8002caa:	402b      	ands	r3, r5
 8002cac:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	2341      	movs	r3, #65	; 0x41
 8002cb0:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	3222      	adds	r2, #34	; 0x22
 8002cb6:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002cb8:	3a02      	subs	r2, #2
 8002cba:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8002cbc:	e000      	b.n	8002cc0 <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 8002cbe:	2002      	movs	r0, #2
}
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bce0      	pop	{r5, r6, r7}
 8002cc4:	46ba      	mov	sl, r7
 8002cc6:	46b1      	mov	r9, r6
 8002cc8:	46a8      	mov	r8, r5
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002ccc:	2002      	movs	r0, #2
 8002cce:	e7f7      	b.n	8002cc0 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e7f5      	b.n	8002cc0 <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	e7f3      	b.n	8002cc0 <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 8002cd8:	2001      	movs	r0, #1
 8002cda:	e7f1      	b.n	8002cc0 <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e7ef      	b.n	8002cc0 <HAL_I2C_Master_Transmit+0x168>
 8002ce0:	80002000 	.word	0x80002000
 8002ce4:	fe00e800 	.word	0xfe00e800

08002ce8 <HAL_I2C_IsDeviceReady>:
{
 8002ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cea:	46de      	mov	lr, fp
 8002cec:	4657      	mov	r7, sl
 8002cee:	464e      	mov	r6, r9
 8002cf0:	4645      	mov	r5, r8
 8002cf2:	b5e0      	push	{r5, r6, r7, lr}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	0005      	movs	r5, r0
 8002cf8:	4692      	mov	sl, r2
 8002cfa:	001c      	movs	r4, r3
  __IO uint32_t I2C_Trials = 0UL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d00:	3341      	adds	r3, #65	; 0x41
 8002d02:	5cc3      	ldrb	r3, [r0, r3]
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d000      	beq.n	8002d0a <HAL_I2C_IsDeviceReady+0x22>
 8002d08:	e0a2      	b.n	8002e50 <HAL_I2C_IsDeviceReady+0x168>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d0a:	6803      	ldr	r3, [r0, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	d500      	bpl.n	8002d14 <HAL_I2C_IsDeviceReady+0x2c>
 8002d12:	e09f      	b.n	8002e54 <HAL_I2C_IsDeviceReady+0x16c>
    __HAL_LOCK(hi2c);
 8002d14:	2340      	movs	r3, #64	; 0x40
 8002d16:	5cc3      	ldrb	r3, [r0, r3]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d100      	bne.n	8002d1e <HAL_I2C_IsDeviceReady+0x36>
 8002d1c:	e09c      	b.n	8002e58 <HAL_I2C_IsDeviceReady+0x170>
 8002d1e:	2340      	movs	r3, #64	; 0x40
 8002d20:	2201      	movs	r2, #1
 8002d22:	54c2      	strb	r2, [r0, r3]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d24:	3301      	adds	r3, #1
 8002d26:	3223      	adds	r2, #35	; 0x23
 8002d28:	54c2      	strb	r2, [r0, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d2e:	0589      	lsls	r1, r1, #22
 8002d30:	0d8b      	lsrs	r3, r1, #22
 8002d32:	469b      	mov	fp, r3
 8002d34:	4699      	mov	r9, r3
 8002d36:	68eb      	ldr	r3, [r5, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d014      	beq.n	8002d66 <HAL_I2C_IsDeviceReady+0x7e>
 8002d3c:	23a0      	movs	r3, #160	; 0xa0
 8002d3e:	019b      	lsls	r3, r3, #6
 8002d40:	465a      	mov	r2, fp
 8002d42:	4313      	orrs	r3, r2
 8002d44:	682a      	ldr	r2, [r5, #0]
 8002d46:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8002d48:	f7ff fc22 	bl	8002590 <HAL_GetTick>
 8002d4c:	4680      	mov	r8, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4e:	682a      	ldr	r2, [r5, #0]
 8002d50:	6990      	ldr	r0, [r2, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d52:	6991      	ldr	r1, [r2, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d54:	2320      	movs	r3, #32
 8002d56:	4003      	ands	r3, r0
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	2210      	movs	r2, #16
 8002d5a:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	d128      	bne.n	8002db2 <HAL_I2C_IsDeviceReady+0xca>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d60:	2720      	movs	r7, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d62:	2610      	movs	r6, #16
 8002d64:	e00a      	b.n	8002d7c <HAL_I2C_IsDeviceReady+0x94>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d66:	4b40      	ldr	r3, [pc, #256]	; (8002e68 <HAL_I2C_IsDeviceReady+0x180>)
 8002d68:	464a      	mov	r2, r9
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	e7ea      	b.n	8002d44 <HAL_I2C_IsDeviceReady+0x5c>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6e:	682a      	ldr	r2, [r5, #0]
 8002d70:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d72:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	403b      	ands	r3, r7
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d76:	4032      	ands	r2, r6
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	d11a      	bne.n	8002db2 <HAL_I2C_IsDeviceReady+0xca>
        if (Timeout != HAL_MAX_DELAY)
 8002d7c:	1c63      	adds	r3, r4, #1
 8002d7e:	d0f6      	beq.n	8002d6e <HAL_I2C_IsDeviceReady+0x86>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d80:	f7ff fc06 	bl	8002590 <HAL_GetTick>
 8002d84:	4643      	mov	r3, r8
 8002d86:	1ac0      	subs	r0, r0, r3
 8002d88:	42a0      	cmp	r0, r4
 8002d8a:	d801      	bhi.n	8002d90 <HAL_I2C_IsDeviceReady+0xa8>
 8002d8c:	2c00      	cmp	r4, #0
 8002d8e:	d1ee      	bne.n	8002d6e <HAL_I2C_IsDeviceReady+0x86>
            hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	2220      	movs	r2, #32
 8002d92:	2341      	movs	r3, #65	; 0x41
 8002d94:	54ea      	strb	r2, [r5, r3]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	646b      	str	r3, [r5, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8002d9c:	2340      	movs	r3, #64	; 0x40
 8002d9e:	2200      	movs	r2, #0
 8002da0:	54ea      	strb	r2, [r5, r3]
            return HAL_ERROR;
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	b005      	add	sp, #20
 8002da6:	bcf0      	pop	{r4, r5, r6, r7}
 8002da8:	46bb      	mov	fp, r7
 8002daa:	46b2      	mov	sl, r6
 8002dac:	46a9      	mov	r9, r5
 8002dae:	46a0      	mov	r8, r4
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	06db      	lsls	r3, r3, #27
 8002db8:	d523      	bpl.n	8002e02 <HAL_I2C_IsDeviceReady+0x11a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002dba:	4643      	mov	r3, r8
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	0023      	movs	r3, r4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	0028      	movs	r0, r5
 8002dc6:	f7ff fe0b 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d148      	bne.n	8002e60 <HAL_I2C_IsDeviceReady+0x178>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dce:	682b      	ldr	r3, [r5, #0]
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	3210      	adds	r2, #16
 8002dd8:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8002dda:	9b03      	ldr	r3, [sp, #12]
 8002ddc:	4553      	cmp	r3, sl
 8002dde:	d023      	beq.n	8002e28 <HAL_I2C_IsDeviceReady+0x140>
      I2C_Trials++;
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	3301      	adds	r3, #1
 8002de4:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4553      	cmp	r3, sl
 8002dea:	d3a4      	bcc.n	8002d36 <HAL_I2C_IsDeviceReady+0x4e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	2220      	movs	r2, #32
 8002dee:	2341      	movs	r3, #65	; 0x41
 8002df0:	54ea      	strb	r2, [r5, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002df4:	4313      	orrs	r3, r2
 8002df6:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002df8:	2340      	movs	r3, #64	; 0x40
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	54ea      	strb	r2, [r5, r3]
    return HAL_ERROR;
 8002dfe:	2001      	movs	r0, #1
 8002e00:	e7d0      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e02:	4643      	mov	r3, r8
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	0023      	movs	r3, r4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	0028      	movs	r0, r5
 8002e0e:	f7ff fde7 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d122      	bne.n	8002e5c <HAL_I2C_IsDeviceReady+0x174>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e16:	682a      	ldr	r2, [r5, #0]
 8002e18:	2320      	movs	r3, #32
 8002e1a:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	2241      	movs	r2, #65	; 0x41
 8002e1e:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8002e20:	3320      	adds	r3, #32
 8002e22:	2200      	movs	r2, #0
 8002e24:	54ea      	strb	r2, [r5, r3]
        return HAL_OK;
 8002e26:	e7bd      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e28:	682a      	ldr	r2, [r5, #0]
 8002e2a:	6851      	ldr	r1, [r2, #4]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	01db      	lsls	r3, r3, #7
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e34:	4643      	mov	r3, r8
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	0023      	movs	r3, r4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	0028      	movs	r0, r5
 8002e40:	f7ff fdce 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_I2C_IsDeviceReady+0x17c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	61da      	str	r2, [r3, #28]
 8002e4e:	e7c7      	b.n	8002de0 <HAL_I2C_IsDeviceReady+0xf8>
    return HAL_BUSY;
 8002e50:	2002      	movs	r0, #2
 8002e52:	e7a7      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
      return HAL_BUSY;
 8002e54:	2002      	movs	r0, #2
 8002e56:	e7a5      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
    __HAL_LOCK(hi2c);
 8002e58:	2002      	movs	r0, #2
 8002e5a:	e7a3      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e7a1      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8002e60:	2001      	movs	r0, #1
 8002e62:	e79f      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
          return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
 8002e66:	e79d      	b.n	8002da4 <HAL_I2C_IsDeviceReady+0xbc>
 8002e68:	02002000 	.word	0x02002000

08002e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6e:	2341      	movs	r3, #65	; 0x41
 8002e70:	5cc3      	ldrb	r3, [r0, r3]
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d120      	bne.n	8002eb8 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e76:	3320      	adds	r3, #32
 8002e78:	5cc3      	ldrb	r3, [r0, r3]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d01e      	beq.n	8002ebc <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002e7e:	2440      	movs	r4, #64	; 0x40
 8002e80:	2201      	movs	r2, #1
 8002e82:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	2541      	movs	r5, #65	; 0x41
 8002e86:	2324      	movs	r3, #36	; 0x24
 8002e88:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e8a:	6806      	ldr	r6, [r0, #0]
 8002e8c:	6833      	ldr	r3, [r6, #0]
 8002e8e:	4393      	bics	r3, r2
 8002e90:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e92:	6806      	ldr	r6, [r0, #0]
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	4f0a      	ldr	r7, [pc, #40]	; (8002ec0 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8002e98:	403b      	ands	r3, r7
 8002e9a:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e9c:	6806      	ldr	r6, [r0, #0]
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	4319      	orrs	r1, r3
 8002ea2:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea4:	6801      	ldr	r1, [r0, #0]
 8002ea6:	680b      	ldr	r3, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	2320      	movs	r3, #32
 8002eae:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8002eb4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002eb8:	2002      	movs	r0, #2
 8002eba:	e7fc      	b.n	8002eb6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	e7fa      	b.n	8002eb6 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8002ec0:	ffffefff 	.word	0xffffefff

08002ec4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec6:	2341      	movs	r3, #65	; 0x41
 8002ec8:	5cc3      	ldrb	r3, [r0, r3]
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d11e      	bne.n	8002f0c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	3320      	adds	r3, #32
 8002ed0:	5cc3      	ldrb	r3, [r0, r3]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d01c      	beq.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8002ed6:	2440      	movs	r4, #64	; 0x40
 8002ed8:	2201      	movs	r2, #1
 8002eda:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	2541      	movs	r5, #65	; 0x41
 8002ede:	2324      	movs	r3, #36	; 0x24
 8002ee0:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee2:	6806      	ldr	r6, [r0, #0]
 8002ee4:	6833      	ldr	r3, [r6, #0]
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eea:	6806      	ldr	r6, [r0, #0]
 8002eec:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eee:	4f09      	ldr	r7, [pc, #36]	; (8002f14 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8002ef0:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef2:	0209      	lsls	r1, r1, #8
 8002ef4:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef6:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	6801      	ldr	r1, [r0, #0]
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	2320      	movs	r3, #32
 8002f02:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	2300      	movs	r3, #0
 8002f06:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8002f08:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	e7fc      	b.n	8002f0a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8002f10:	2002      	movs	r0, #2
 8002f12:	e7fa      	b.n	8002f0a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8002f14:	fffff0ff 	.word	0xfffff0ff

08002f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f1c:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f1e:	230c      	movs	r3, #12
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d043      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x96>
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d014      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x3c>
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d008      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x28>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002f36:	3301      	adds	r3, #1
 8002f38:	2080      	movs	r0, #128	; 0x80
 8002f3a:	0200      	lsls	r0, r0, #8
 8002f3c:	4098      	lsls	r0, r3
      break;
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002f46:	17c0      	asrs	r0, r0, #31
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f4a:	4018      	ands	r0, r3
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f4e:	469c      	mov	ip, r3
 8002f50:	4460      	add	r0, ip
    }
  }
  return sysclockfreq;
}
 8002f52:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f54:	0293      	lsls	r3, r2, #10
 8002f56:	0f1b      	lsrs	r3, r3, #28
 8002f58:	4919      	ldr	r1, [pc, #100]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f5a:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f5c:	0212      	lsls	r2, r2, #8
 8002f5e:	0f94      	lsrs	r4, r2, #30
 8002f60:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	03db      	lsls	r3, r3, #15
 8002f68:	d509      	bpl.n	8002f7e <HAL_RCC_GetSysClockFreq+0x66>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	f7fd f980 	bl	8000274 <__aeabi_lmul>
 8002f74:	0022      	movs	r2, r4
 8002f76:	2300      	movs	r3, #0
 8002f78:	f7fd f95c 	bl	8000234 <__aeabi_uldivmod>
 8002f7c:	e7e9      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	06db      	lsls	r3, r3, #27
 8002f84:	d509      	bpl.n	8002f9a <HAL_RCC_GetSysClockFreq+0x82>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	f7fd f972 	bl	8000274 <__aeabi_lmul>
 8002f90:	0022      	movs	r2, r4
 8002f92:	2300      	movs	r3, #0
 8002f94:	f7fd f94e 	bl	8000234 <__aeabi_uldivmod>
 8002f98:	e7db      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f9a:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	f7fd f968 	bl	8000274 <__aeabi_lmul>
 8002fa4:	0022      	movs	r2, r4
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f7fd f944 	bl	8000234 <__aeabi_uldivmod>
 8002fac:	e7d1      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
  switch (tmpreg & RCC_CFGR_SWS)
 8002fae:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002fb0:	e7cf      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	ff48e500 	.word	0xff48e500
 8002fbc:	00f42400 	.word	0x00f42400
 8002fc0:	08007ed0 	.word	0x08007ed0
 8002fc4:	007a1200 	.word	0x007a1200
 8002fc8:	003d0900 	.word	0x003d0900

08002fcc <HAL_RCC_OscConfig>:
{
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	46d6      	mov	lr, sl
 8002fd0:	464f      	mov	r7, r9
 8002fd2:	4646      	mov	r6, r8
 8002fd4:	b5c0      	push	{r6, r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8002fda:	d100      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
 8002fdc:	e2d9      	b.n	8003592 <HAL_RCC_OscConfig+0x5c6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fde:	4bc2      	ldr	r3, [pc, #776]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	250c      	movs	r5, #12
 8002fe4:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe6:	68de      	ldr	r6, [r3, #12]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	025b      	lsls	r3, r3, #9
 8002fec:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	6803      	ldr	r3, [r0, #0]
 8002ff0:	07db      	lsls	r3, r3, #31
 8002ff2:	d53c      	bpl.n	800306e <HAL_RCC_OscConfig+0xa2>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ff4:	2d08      	cmp	r5, #8
 8002ff6:	d032      	beq.n	800305e <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ff8:	2d0c      	cmp	r5, #12
 8002ffa:	d02e      	beq.n	800305a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffc:	6863      	ldr	r3, [r4, #4]
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0252      	lsls	r2, r2, #9
 8003002:	4293      	cmp	r3, r2
 8003004:	d05e      	beq.n	80030c4 <HAL_RCC_OscConfig+0xf8>
 8003006:	22a0      	movs	r2, #160	; 0xa0
 8003008:	02d2      	lsls	r2, r2, #11
 800300a:	4293      	cmp	r3, r2
 800300c:	d061      	beq.n	80030d2 <HAL_RCC_OscConfig+0x106>
 800300e:	4bb6      	ldr	r3, [pc, #728]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	49b6      	ldr	r1, [pc, #728]	; (80032ec <HAL_RCC_OscConfig+0x320>)
 8003014:	400a      	ands	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0249      	lsls	r1, r1, #9
 800301e:	400a      	ands	r2, r1
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	9a01      	ldr	r2, [sp, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	49b2      	ldr	r1, [pc, #712]	; (80032f0 <HAL_RCC_OscConfig+0x324>)
 8003028:	400a      	ands	r2, r1
 800302a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302c:	6863      	ldr	r3, [r4, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d05b      	beq.n	80030ea <HAL_RCC_OscConfig+0x11e>
        tickstart = HAL_GetTick();
 8003032:	f7ff faad 	bl	8002590 <HAL_GetTick>
 8003036:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003038:	4bab      	ldr	r3, [pc, #684]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 800303a:	4699      	mov	r9, r3
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4698      	mov	r8, r3
 8003042:	464b      	mov	r3, r9
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4642      	mov	r2, r8
 8003048:	4213      	tst	r3, r2
 800304a:	d110      	bne.n	800306e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7ff faa0 	bl	8002590 <HAL_GetTick>
 8003050:	1bc0      	subs	r0, r0, r7
 8003052:	2864      	cmp	r0, #100	; 0x64
 8003054:	d9f5      	bls.n	8003042 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3
 8003058:	e29c      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800305a:	2e00      	cmp	r6, #0
 800305c:	d0ce      	beq.n	8002ffc <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	4ba2      	ldr	r3, [pc, #648]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	039b      	lsls	r3, r3, #14
 8003064:	d503      	bpl.n	800306e <HAL_RCC_OscConfig+0xa2>
 8003066:	6863      	ldr	r3, [r4, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d100      	bne.n	800306e <HAL_RCC_OscConfig+0xa2>
 800306c:	e298      	b.n	80035a0 <HAL_RCC_OscConfig+0x5d4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	079b      	lsls	r3, r3, #30
 8003072:	d575      	bpl.n	8003160 <HAL_RCC_OscConfig+0x194>
    hsi_state = RCC_OscInitStruct->HSIState;
 8003074:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003076:	069a      	lsls	r2, r3, #26
 8003078:	d505      	bpl.n	8003086 <HAL_RCC_OscConfig+0xba>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800307a:	489b      	ldr	r0, [pc, #620]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 800307c:	6802      	ldr	r2, [r0, #0]
 800307e:	2120      	movs	r1, #32
 8003080:	430a      	orrs	r2, r1
 8003082:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003084:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003086:	2d04      	cmp	r5, #4
 8003088:	d045      	beq.n	8003116 <HAL_RCC_OscConfig+0x14a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800308a:	2d0c      	cmp	r5, #12
 800308c:	d041      	beq.n	8003112 <HAL_RCC_OscConfig+0x146>
      if(hsi_state != RCC_HSI_OFF)
 800308e:	2b00      	cmp	r3, #0
 8003090:	d100      	bne.n	8003094 <HAL_RCC_OscConfig+0xc8>
 8003092:	e0bc      	b.n	800320e <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003094:	4994      	ldr	r1, [pc, #592]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003096:	680a      	ldr	r2, [r1, #0]
 8003098:	2009      	movs	r0, #9
 800309a:	4382      	bics	r2, r0
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80030a0:	f7ff fa76 	bl	8002590 <HAL_GetTick>
 80030a4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a6:	4b90      	ldr	r3, [pc, #576]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80030a8:	4698      	mov	r8, r3
 80030aa:	2704      	movs	r7, #4
 80030ac:	4643      	mov	r3, r8
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	421f      	tst	r7, r3
 80030b2:	d000      	beq.n	80030b6 <HAL_RCC_OscConfig+0xea>
 80030b4:	e0a2      	b.n	80031fc <HAL_RCC_OscConfig+0x230>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b6:	f7ff fa6b 	bl	8002590 <HAL_GetTick>
 80030ba:	1b80      	subs	r0, r0, r6
 80030bc:	2802      	cmp	r0, #2
 80030be:	d9f5      	bls.n	80030ac <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 80030c0:	2003      	movs	r0, #3
 80030c2:	e267      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	4a88      	ldr	r2, [pc, #544]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80030c6:	6811      	ldr	r1, [r2, #0]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	025b      	lsls	r3, r3, #9
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e7ac      	b.n	800302c <HAL_RCC_OscConfig+0x60>
 80030d2:	4b85      	ldr	r3, [pc, #532]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80030d4:	6819      	ldr	r1, [r3, #0]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	02d2      	lsls	r2, r2, #11
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	0252      	lsls	r2, r2, #9
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e7a0      	b.n	800302c <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 80030ea:	f7ff fa51 	bl	8002590 <HAL_GetTick>
 80030ee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030f0:	4b7d      	ldr	r3, [pc, #500]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80030f2:	4699      	mov	r9, r3
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	4698      	mov	r8, r3
 80030fa:	464b      	mov	r3, r9
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4642      	mov	r2, r8
 8003100:	4213      	tst	r3, r2
 8003102:	d0b4      	beq.n	800306e <HAL_RCC_OscConfig+0xa2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7ff fa44 	bl	8002590 <HAL_GetTick>
 8003108:	1bc0      	subs	r0, r0, r7
 800310a:	2864      	cmp	r0, #100	; 0x64
 800310c:	d9f5      	bls.n	80030fa <HAL_RCC_OscConfig+0x12e>
            return HAL_TIMEOUT;
 800310e:	2003      	movs	r0, #3
 8003110:	e240      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003112:	2e00      	cmp	r6, #0
 8003114:	d1bb      	bne.n	800308e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003116:	4a74      	ldr	r2, [pc, #464]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	0752      	lsls	r2, r2, #29
 800311c:	d502      	bpl.n	8003124 <HAL_RCC_OscConfig+0x158>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d100      	bne.n	8003124 <HAL_RCC_OscConfig+0x158>
 8003122:	e23f      	b.n	80035a4 <HAL_RCC_OscConfig+0x5d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4e70      	ldr	r6, [pc, #448]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003126:	6871      	ldr	r1, [r6, #4]
 8003128:	6922      	ldr	r2, [r4, #16]
 800312a:	0212      	lsls	r2, r2, #8
 800312c:	4871      	ldr	r0, [pc, #452]	; (80032f4 <HAL_RCC_OscConfig+0x328>)
 800312e:	4001      	ands	r1, r0
 8003130:	430a      	orrs	r2, r1
 8003132:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003134:	6832      	ldr	r2, [r6, #0]
 8003136:	2109      	movs	r1, #9
 8003138:	438a      	bics	r2, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313e:	f7ff feeb 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003142:	68f3      	ldr	r3, [r6, #12]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	0f1b      	lsrs	r3, r3, #28
 8003148:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <HAL_RCC_OscConfig+0x32c>)
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	40d8      	lsrs	r0, r3
 800314e:	4b6b      	ldr	r3, [pc, #428]	; (80032fc <HAL_RCC_OscConfig+0x330>)
 8003150:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8003152:	4b6b      	ldr	r3, [pc, #428]	; (8003300 <HAL_RCC_OscConfig+0x334>)
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f7ff f9d5 	bl	8002504 <HAL_InitTick>
      if(status != HAL_OK)
 800315a:	2800      	cmp	r0, #0
 800315c:	d000      	beq.n	8003160 <HAL_RCC_OscConfig+0x194>
 800315e:	e219      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	06db      	lsls	r3, r3, #27
 8003164:	d52c      	bpl.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003166:	2d00      	cmp	r5, #0
 8003168:	d167      	bne.n	800323a <HAL_RCC_OscConfig+0x26e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800316a:	4b5f      	ldr	r3, [pc, #380]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	059b      	lsls	r3, r3, #22
 8003170:	d503      	bpl.n	800317a <HAL_RCC_OscConfig+0x1ae>
 8003172:	69e3      	ldr	r3, [r4, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d100      	bne.n	800317a <HAL_RCC_OscConfig+0x1ae>
 8003178:	e216      	b.n	80035a8 <HAL_RCC_OscConfig+0x5dc>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317a:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4961      	ldr	r1, [pc, #388]	; (8003304 <HAL_RCC_OscConfig+0x338>)
 8003180:	400a      	ands	r2, r1
 8003182:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	6a22      	ldr	r2, [r4, #32]
 800318c:	0612      	lsls	r2, r2, #24
 800318e:	0209      	lsls	r1, r1, #8
 8003190:	0a09      	lsrs	r1, r1, #8
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003196:	68da      	ldr	r2, [r3, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800319a:	0b59      	lsrs	r1, r3, #13
 800319c:	3101      	adds	r1, #1
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80031a4:	0612      	lsls	r2, r2, #24
 80031a6:	0f12      	lsrs	r2, r2, #28
 80031a8:	4953      	ldr	r1, [pc, #332]	; (80032f8 <HAL_RCC_OscConfig+0x32c>)
 80031aa:	5c8a      	ldrb	r2, [r1, r2]
 80031ac:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031ae:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_RCC_OscConfig+0x330>)
 80031b0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80031b2:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x334>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f7ff f9a5 	bl	8002504 <HAL_InitTick>
        if(status != HAL_OK)
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d000      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
 80031be:	e1e9      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	071b      	lsls	r3, r3, #28
 80031c4:	d400      	bmi.n	80031c8 <HAL_RCC_OscConfig+0x1fc>
 80031c6:	e0a1      	b.n	800330c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c8:	6963      	ldr	r3, [r4, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d076      	beq.n	80032bc <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4a46      	ldr	r2, [pc, #280]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80031d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80031d2:	2101      	movs	r1, #1
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80031d8:	f7ff f9da 	bl	8002590 <HAL_GetTick>
 80031dc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031de:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80031e0:	4698      	mov	r8, r3
 80031e2:	2702      	movs	r7, #2
 80031e4:	4643      	mov	r3, r8
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	421f      	tst	r7, r3
 80031ea:	d000      	beq.n	80031ee <HAL_RCC_OscConfig+0x222>
 80031ec:	e08e      	b.n	800330c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ee:	f7ff f9cf 	bl	8002590 <HAL_GetTick>
 80031f2:	1b80      	subs	r0, r0, r6
 80031f4:	2802      	cmp	r0, #2
 80031f6:	d9f5      	bls.n	80031e4 <HAL_RCC_OscConfig+0x218>
          return HAL_TIMEOUT;
 80031f8:	2003      	movs	r0, #3
 80031fa:	e1cb      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	493a      	ldr	r1, [pc, #232]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80031fe:	684a      	ldr	r2, [r1, #4]
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	483b      	ldr	r0, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x328>)
 8003206:	4002      	ands	r2, r0
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e7a8      	b.n	8003160 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_DISABLE();
 800320e:	4a36      	ldr	r2, [pc, #216]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	438b      	bics	r3, r1
 8003216:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003218:	f7ff f9ba 	bl	8002590 <HAL_GetTick>
 800321c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800321e:	4b32      	ldr	r3, [pc, #200]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003220:	4698      	mov	r8, r3
 8003222:	2704      	movs	r7, #4
 8003224:	4643      	mov	r3, r8
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	421f      	tst	r7, r3
 800322a:	d099      	beq.n	8003160 <HAL_RCC_OscConfig+0x194>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322c:	f7ff f9b0 	bl	8002590 <HAL_GetTick>
 8003230:	1b80      	subs	r0, r0, r6
 8003232:	2802      	cmp	r0, #2
 8003234:	d9f6      	bls.n	8003224 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8003236:	2003      	movs	r0, #3
 8003238:	e1ac      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800323a:	69e3      	ldr	r3, [r4, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d026      	beq.n	800328e <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_MSI_ENABLE();
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003242:	6811      	ldr	r1, [r2, #0]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	430b      	orrs	r3, r1
 800324a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800324c:	f7ff f9a0 	bl	8002590 <HAL_GetTick>
 8003250:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003252:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003254:	4698      	mov	r8, r3
 8003256:	2780      	movs	r7, #128	; 0x80
 8003258:	00bf      	lsls	r7, r7, #2
 800325a:	4643      	mov	r3, r8
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	423b      	tst	r3, r7
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x2a4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003262:	f7ff f995 	bl	8002590 <HAL_GetTick>
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	2802      	cmp	r0, #2
 800326a:	d9f6      	bls.n	800325a <HAL_RCC_OscConfig+0x28e>
            return HAL_TIMEOUT;
 800326c:	2003      	movs	r0, #3
 800326e:	e191      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003270:	491d      	ldr	r1, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003272:	684b      	ldr	r3, [r1, #4]
 8003274:	4a23      	ldr	r2, [pc, #140]	; (8003304 <HAL_RCC_OscConfig+0x338>)
 8003276:	4013      	ands	r3, r2
 8003278:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327e:	684a      	ldr	r2, [r1, #4]
 8003280:	6a23      	ldr	r3, [r4, #32]
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	0212      	lsls	r2, r2, #8
 8003286:	0a12      	lsrs	r2, r2, #8
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	e798      	b.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_MSI_DISABLE();
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	491d      	ldr	r1, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x33c>)
 8003294:	400b      	ands	r3, r1
 8003296:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003298:	f7ff f97a 	bl	8002590 <HAL_GetTick>
 800329c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80032a0:	4698      	mov	r8, r3
 80032a2:	2780      	movs	r7, #128	; 0x80
 80032a4:	00bf      	lsls	r7, r7, #2
 80032a6:	4643      	mov	r3, r8
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	423b      	tst	r3, r7
 80032ac:	d088      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ae:	f7ff f96f 	bl	8002590 <HAL_GetTick>
 80032b2:	1b80      	subs	r0, r0, r6
 80032b4:	2802      	cmp	r0, #2
 80032b6:	d9f6      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2da>
            return HAL_TIMEOUT;
 80032b8:	2003      	movs	r0, #3
 80032ba:	e16b      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80032be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80032c0:	2101      	movs	r1, #1
 80032c2:	438b      	bics	r3, r1
 80032c4:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80032c6:	f7ff f963 	bl	8002590 <HAL_GetTick>
 80032ca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCC_OscConfig+0x31c>)
 80032ce:	4698      	mov	r8, r3
 80032d0:	2702      	movs	r7, #2
 80032d2:	4643      	mov	r3, r8
 80032d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d6:	421f      	tst	r7, r3
 80032d8:	d018      	beq.n	800330c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032da:	f7ff f959 	bl	8002590 <HAL_GetTick>
 80032de:	1b80      	subs	r0, r0, r6
 80032e0:	2802      	cmp	r0, #2
 80032e2:	d9f6      	bls.n	80032d2 <HAL_RCC_OscConfig+0x306>
          return HAL_TIMEOUT;
 80032e4:	2003      	movs	r0, #3
 80032e6:	e155      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
 80032e8:	40021000 	.word	0x40021000
 80032ec:	fffeffff 	.word	0xfffeffff
 80032f0:	fffbffff 	.word	0xfffbffff
 80032f4:	ffffe0ff 	.word	0xffffe0ff
 80032f8:	08007eb8 	.word	0x08007eb8
 80032fc:	20000014 	.word	0x20000014
 8003300:	2000001c 	.word	0x2000001c
 8003304:	ffff1fff 	.word	0xffff1fff
 8003308:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	075b      	lsls	r3, r3, #29
 8003310:	d400      	bmi.n	8003314 <HAL_RCC_OscConfig+0x348>
 8003312:	e088      	b.n	8003426 <HAL_RCC_OscConfig+0x45a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003314:	4ba6      	ldr	r3, [pc, #664]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8003318:	2200      	movs	r2, #0
 800331a:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	d407      	bmi.n	8003330 <HAL_RCC_OscConfig+0x364>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003320:	4aa3      	ldr	r2, [pc, #652]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003322:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	430b      	orrs	r3, r1
 800332a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4ba0      	ldr	r3, [pc, #640]	; (80035b4 <HAL_RCC_OscConfig+0x5e8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	d510      	bpl.n	800335a <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003338:	68a3      	ldr	r3, [r4, #8]
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	0052      	lsls	r2, r2, #1
 800333e:	4293      	cmp	r3, r2
 8003340:	d023      	beq.n	800338a <HAL_RCC_OscConfig+0x3be>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d13e      	bne.n	80033c4 <HAL_RCC_OscConfig+0x3f8>
 8003346:	4b9a      	ldr	r3, [pc, #616]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800334a:	499b      	ldr	r1, [pc, #620]	; (80035b8 <HAL_RCC_OscConfig+0x5ec>)
 800334c:	400a      	ands	r2, r1
 800334e:	651a      	str	r2, [r3, #80]	; 0x50
 8003350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003352:	499a      	ldr	r1, [pc, #616]	; (80035bc <HAL_RCC_OscConfig+0x5f0>)
 8003354:	400a      	ands	r2, r1
 8003356:	651a      	str	r2, [r3, #80]	; 0x50
 8003358:	e01d      	b.n	8003396 <HAL_RCC_OscConfig+0x3ca>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	4a96      	ldr	r2, [pc, #600]	; (80035b4 <HAL_RCC_OscConfig+0x5e8>)
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	430b      	orrs	r3, r1
 8003364:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003366:	f7ff f913 	bl	8002590 <HAL_GetTick>
 800336a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <HAL_RCC_OscConfig+0x5e8>)
 800336e:	4698      	mov	r8, r3
 8003370:	2780      	movs	r7, #128	; 0x80
 8003372:	007f      	lsls	r7, r7, #1
 8003374:	4643      	mov	r3, r8
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	423b      	tst	r3, r7
 800337a:	d1dd      	bne.n	8003338 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337c:	f7ff f908 	bl	8002590 <HAL_GetTick>
 8003380:	1b80      	subs	r0, r0, r6
 8003382:	2864      	cmp	r0, #100	; 0x64
 8003384:	d9f6      	bls.n	8003374 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8003386:	2003      	movs	r0, #3
 8003388:	e104      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800338a:	4a89      	ldr	r2, [pc, #548]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 800338c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	430b      	orrs	r3, r1
 8003394:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003396:	68a3      	ldr	r3, [r4, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02d      	beq.n	80033f8 <HAL_RCC_OscConfig+0x42c>
      tickstart = HAL_GetTick();
 800339c:	f7ff f8f8 	bl	8002590 <HAL_GetTick>
 80033a0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a2:	4b83      	ldr	r3, [pc, #524]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80033a4:	4698      	mov	r8, r3
 80033a6:	2780      	movs	r7, #128	; 0x80
 80033a8:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <HAL_RCC_OscConfig+0x5f4>)
 80033ac:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ae:	4643      	mov	r3, r8
 80033b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b2:	423b      	tst	r3, r7
 80033b4:	d134      	bne.n	8003420 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7ff f8eb 	bl	8002590 <HAL_GetTick>
 80033ba:	1b80      	subs	r0, r0, r6
 80033bc:	4548      	cmp	r0, r9
 80033be:	d9f6      	bls.n	80033ae <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 80033c0:	2003      	movs	r0, #3
 80033c2:	e0e7      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c4:	22a0      	movs	r2, #160	; 0xa0
 80033c6:	00d2      	lsls	r2, r2, #3
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_RCC_OscConfig+0x414>
 80033cc:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80033ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d0:	4979      	ldr	r1, [pc, #484]	; (80035b8 <HAL_RCC_OscConfig+0x5ec>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	651a      	str	r2, [r3, #80]	; 0x50
 80033d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d8:	4978      	ldr	r1, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x5f0>)
 80033da:	400a      	ands	r2, r1
 80033dc:	651a      	str	r2, [r3, #80]	; 0x50
 80033de:	e7da      	b.n	8003396 <HAL_RCC_OscConfig+0x3ca>
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80033e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033e4:	3a01      	subs	r2, #1
 80033e6:	3aff      	subs	r2, #255	; 0xff
 80033e8:	430a      	orrs	r2, r1
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50
 80033ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	0052      	lsls	r2, r2, #1
 80033f2:	430a      	orrs	r2, r1
 80033f4:	651a      	str	r2, [r3, #80]	; 0x50
 80033f6:	e7ce      	b.n	8003396 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80033f8:	f7ff f8ca 	bl	8002590 <HAL_GetTick>
 80033fc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033fe:	4b6c      	ldr	r3, [pc, #432]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003400:	4698      	mov	r8, r3
 8003402:	2780      	movs	r7, #128	; 0x80
 8003404:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <HAL_RCC_OscConfig+0x5f4>)
 8003408:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800340a:	4643      	mov	r3, r8
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	423b      	tst	r3, r7
 8003410:	d006      	beq.n	8003420 <HAL_RCC_OscConfig+0x454>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7ff f8bd 	bl	8002590 <HAL_GetTick>
 8003416:	1b80      	subs	r0, r0, r6
 8003418:	4548      	cmp	r0, r9
 800341a:	d9f6      	bls.n	800340a <HAL_RCC_OscConfig+0x43e>
          return HAL_TIMEOUT;
 800341c:	2003      	movs	r0, #3
 800341e:	e0b9      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
    if(pwrclkchanged == SET)
 8003420:	4653      	mov	r3, sl
 8003422:	2b01      	cmp	r3, #1
 8003424:	d024      	beq.n	8003470 <HAL_RCC_OscConfig+0x4a4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	069b      	lsls	r3, r3, #26
 800342a:	d542      	bpl.n	80034b2 <HAL_RCC_OscConfig+0x4e6>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800342c:	69a3      	ldr	r3, [r4, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <HAL_RCC_OscConfig+0x4b0>
        __HAL_RCC_HSI48_ENABLE();
 8003432:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	2001      	movs	r0, #1
 8003438:	4301      	orrs	r1, r0
 800343a:	6099      	str	r1, [r3, #8]
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	4302      	orrs	r2, r0
 8003440:	635a      	str	r2, [r3, #52]	; 0x34
 8003442:	4a60      	ldr	r2, [pc, #384]	; (80035c4 <HAL_RCC_OscConfig+0x5f8>)
 8003444:	6a11      	ldr	r1, [r2, #32]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	430b      	orrs	r3, r1
 800344c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800344e:	f7ff f89f 	bl	8002590 <HAL_GetTick>
 8003452:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003454:	4b56      	ldr	r3, [pc, #344]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003456:	4698      	mov	r8, r3
 8003458:	2702      	movs	r7, #2
 800345a:	4643      	mov	r3, r8
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	421f      	tst	r7, r3
 8003460:	d127      	bne.n	80034b2 <HAL_RCC_OscConfig+0x4e6>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003462:	f7ff f895 	bl	8002590 <HAL_GetTick>
 8003466:	1b80      	subs	r0, r0, r6
 8003468:	2802      	cmp	r0, #2
 800346a:	d9f6      	bls.n	800345a <HAL_RCC_OscConfig+0x48e>
            return HAL_TIMEOUT;
 800346c:	2003      	movs	r0, #3
 800346e:	e091      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003470:	4a4f      	ldr	r2, [pc, #316]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003472:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003474:	4954      	ldr	r1, [pc, #336]	; (80035c8 <HAL_RCC_OscConfig+0x5fc>)
 8003476:	400b      	ands	r3, r1
 8003478:	6393      	str	r3, [r2, #56]	; 0x38
 800347a:	e7d4      	b.n	8003426 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_HSI48_DISABLE();
 800347c:	4a4c      	ldr	r2, [pc, #304]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 800347e:	6893      	ldr	r3, [r2, #8]
 8003480:	2101      	movs	r1, #1
 8003482:	438b      	bics	r3, r1
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	4a4f      	ldr	r2, [pc, #316]	; (80035c4 <HAL_RCC_OscConfig+0x5f8>)
 8003488:	6a13      	ldr	r3, [r2, #32]
 800348a:	4950      	ldr	r1, [pc, #320]	; (80035cc <HAL_RCC_OscConfig+0x600>)
 800348c:	400b      	ands	r3, r1
 800348e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8003490:	f7ff f87e 	bl	8002590 <HAL_GetTick>
 8003494:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003496:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003498:	4698      	mov	r8, r3
 800349a:	2702      	movs	r7, #2
 800349c:	4643      	mov	r3, r8
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	421f      	tst	r7, r3
 80034a2:	d006      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4e6>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a4:	f7ff f874 	bl	8002590 <HAL_GetTick>
 80034a8:	1b80      	subs	r0, r0, r6
 80034aa:	2802      	cmp	r0, #2
 80034ac:	d9f6      	bls.n	800349c <HAL_RCC_OscConfig+0x4d0>
            return HAL_TIMEOUT;
 80034ae:	2003      	movs	r0, #3
 80034b0:	e070      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  return HAL_OK;
 80034b4:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06c      	beq.n	8003594 <HAL_RCC_OscConfig+0x5c8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ba:	2d0c      	cmp	r5, #12
 80034bc:	d04f      	beq.n	800355e <HAL_RCC_OscConfig+0x592>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d014      	beq.n	80034ec <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80034c4:	6813      	ldr	r3, [r2, #0]
 80034c6:	4942      	ldr	r1, [pc, #264]	; (80035d0 <HAL_RCC_OscConfig+0x604>)
 80034c8:	400b      	ands	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034cc:	f7ff f860 	bl	8002590 <HAL_GetTick>
 80034d0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034d2:	4e37      	ldr	r6, [pc, #220]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80034d4:	2580      	movs	r5, #128	; 0x80
 80034d6:	04ad      	lsls	r5, r5, #18
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	422b      	tst	r3, r5
 80034dc:	d03d      	beq.n	800355a <HAL_RCC_OscConfig+0x58e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034de:	f7ff f857 	bl	8002590 <HAL_GetTick>
 80034e2:	1b00      	subs	r0, r0, r4
 80034e4:	2802      	cmp	r0, #2
 80034e6:	d9f7      	bls.n	80034d8 <HAL_RCC_OscConfig+0x50c>
            return HAL_TIMEOUT;
 80034e8:	2003      	movs	r0, #3
 80034ea:	e053      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	4937      	ldr	r1, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0x604>)
 80034f2:	400b      	ands	r3, r1
 80034f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034f6:	f7ff f84b 	bl	8002590 <HAL_GetTick>
 80034fa:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034fc:	4f2c      	ldr	r7, [pc, #176]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 80034fe:	2680      	movs	r6, #128	; 0x80
 8003500:	04b6      	lsls	r6, r6, #18
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	4233      	tst	r3, r6
 8003506:	d006      	beq.n	8003516 <HAL_RCC_OscConfig+0x54a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7ff f842 	bl	8002590 <HAL_GetTick>
 800350c:	1b40      	subs	r0, r0, r5
 800350e:	2802      	cmp	r0, #2
 8003510:	d9f7      	bls.n	8003502 <HAL_RCC_OscConfig+0x536>
            return HAL_TIMEOUT;
 8003512:	2003      	movs	r0, #3
 8003514:	e03e      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003516:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003518:	68d1      	ldr	r1, [r2, #12]
 800351a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800351c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800351e:	4303      	orrs	r3, r0
 8003520:	482c      	ldr	r0, [pc, #176]	; (80035d4 <HAL_RCC_OscConfig+0x608>)
 8003522:	4001      	ands	r1, r0
 8003524:	430b      	orrs	r3, r1
 8003526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003528:	430b      	orrs	r3, r1
 800352a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800352c:	6811      	ldr	r1, [r2, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	045b      	lsls	r3, r3, #17
 8003532:	430b      	orrs	r3, r1
 8003534:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003536:	f7ff f82b 	bl	8002590 <HAL_GetTick>
 800353a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800353c:	4e1c      	ldr	r6, [pc, #112]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 800353e:	2580      	movs	r5, #128	; 0x80
 8003540:	04ad      	lsls	r5, r5, #18
 8003542:	6833      	ldr	r3, [r6, #0]
 8003544:	422b      	tst	r3, r5
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x58a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7ff f822 	bl	8002590 <HAL_GetTick>
 800354c:	1b00      	subs	r0, r0, r4
 800354e:	2802      	cmp	r0, #2
 8003550:	d9f7      	bls.n	8003542 <HAL_RCC_OscConfig+0x576>
            return HAL_TIMEOUT;
 8003552:	2003      	movs	r0, #3
 8003554:	e01e      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
  return HAL_OK;
 8003556:	2000      	movs	r0, #0
 8003558:	e01c      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
 800355a:	2000      	movs	r0, #0
 800355c:	e01a      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355e:	2b01      	cmp	r3, #1
 8003560:	d024      	beq.n	80035ac <HAL_RCC_OscConfig+0x5e0>
        pll_config = RCC->CFGR;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_RCC_OscConfig+0x5e4>)
 8003564:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	0252      	lsls	r2, r2, #9
 800356a:	401a      	ands	r2, r3
          return HAL_ERROR;
 800356c:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003570:	428a      	cmp	r2, r1
 8003572:	d10f      	bne.n	8003594 <HAL_RCC_OscConfig+0x5c8>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003574:	22f0      	movs	r2, #240	; 0xf0
 8003576:	0392      	lsls	r2, r2, #14
 8003578:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800357c:	428a      	cmp	r2, r1
 800357e:	d109      	bne.n	8003594 <HAL_RCC_OscConfig+0x5c8>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003580:	20c0      	movs	r0, #192	; 0xc0
 8003582:	0400      	lsls	r0, r0, #16
 8003584:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003586:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003588:	1a18      	subs	r0, r3, r0
 800358a:	1e43      	subs	r3, r0, #1
 800358c:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 800358e:	b2c0      	uxtb	r0, r0
 8003590:	e000      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
    return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
}
 8003594:	b002      	add	sp, #8
 8003596:	bce0      	pop	{r5, r6, r7}
 8003598:	46ba      	mov	sl, r7
 800359a:	46b1      	mov	r9, r6
 800359c:	46a8      	mov	r8, r5
 800359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
 80035a2:	e7f7      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        return HAL_ERROR;
 80035a4:	2001      	movs	r0, #1
 80035a6:	e7f5      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        return HAL_ERROR;
 80035a8:	2001      	movs	r0, #1
 80035aa:	e7f3      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
        return HAL_ERROR;
 80035ac:	2001      	movs	r0, #1
 80035ae:	e7f1      	b.n	8003594 <HAL_RCC_OscConfig+0x5c8>
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40007000 	.word	0x40007000
 80035b8:	fffffeff 	.word	0xfffffeff
 80035bc:	fffffbff 	.word	0xfffffbff
 80035c0:	00001388 	.word	0x00001388
 80035c4:	40010000 	.word	0x40010000
 80035c8:	efffffff 	.word	0xefffffff
 80035cc:	ffffdfff 	.word	0xffffdfff
 80035d0:	feffffff 	.word	0xfeffffff
 80035d4:	ff02ffff 	.word	0xff02ffff

080035d8 <HAL_RCC_ClockConfig>:
{
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	46ce      	mov	lr, r9
 80035dc:	4647      	mov	r7, r8
 80035de:	b580      	push	{r7, lr}
 80035e0:	0004      	movs	r4, r0
 80035e2:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d100      	bne.n	80035ea <HAL_RCC_ClockConfig+0x12>
 80035e8:	e0e2      	b.n	80037b0 <HAL_RCC_ClockConfig+0x1d8>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ea:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <HAL_RCC_ClockConfig+0x1e0>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2301      	movs	r3, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	428b      	cmp	r3, r1
 80035f4:	d31a      	bcc.n	800362c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	079b      	lsls	r3, r3, #30
 80035fa:	d506      	bpl.n	800360a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 80035fe:	68d3      	ldr	r3, [r2, #12]
 8003600:	21f0      	movs	r1, #240	; 0xf0
 8003602:	438b      	bics	r3, r1
 8003604:	68a1      	ldr	r1, [r4, #8]
 8003606:	430b      	orrs	r3, r1
 8003608:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	07db      	lsls	r3, r3, #31
 800360e:	d400      	bmi.n	8003612 <HAL_RCC_ClockConfig+0x3a>
 8003610:	e08a      	b.n	8003728 <HAL_RCC_ClockConfig+0x150>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	2a02      	cmp	r2, #2
 8003616:	d023      	beq.n	8003660 <HAL_RCC_ClockConfig+0x88>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003618:	2a03      	cmp	r2, #3
 800361a:	d046      	beq.n	80036aa <HAL_RCC_ClockConfig+0xd2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800361c:	2a01      	cmp	r2, #1
 800361e:	d04a      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003620:	4b66      	ldr	r3, [pc, #408]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	059b      	lsls	r3, r3, #22
 8003626:	d420      	bmi.n	800366a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8003628:	2001      	movs	r0, #1
 800362a:	e0a7      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362c:	4a62      	ldr	r2, [pc, #392]	; (80037b8 <HAL_RCC_ClockConfig+0x1e0>)
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	438b      	bics	r3, r1
 8003634:	432b      	orrs	r3, r5
 8003636:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003638:	f7fe ffaa 	bl	8002590 <HAL_GetTick>
 800363c:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b5e      	ldr	r3, [pc, #376]	; (80037b8 <HAL_RCC_ClockConfig+0x1e0>)
 8003640:	4698      	mov	r8, r3
 8003642:	2701      	movs	r7, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	4b5e      	ldr	r3, [pc, #376]	; (80037c0 <HAL_RCC_ClockConfig+0x1e8>)
 8003646:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	4643      	mov	r3, r8
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	403b      	ands	r3, r7
 800364e:	42ab      	cmp	r3, r5
 8003650:	d0d1      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003652:	f7fe ff9d 	bl	8002590 <HAL_GetTick>
 8003656:	1b80      	subs	r0, r0, r6
 8003658:	4548      	cmp	r0, r9
 800365a:	d9f5      	bls.n	8003648 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 800365c:	2003      	movs	r0, #3
 800365e:	e08d      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003660:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	039b      	lsls	r3, r3, #14
 8003666:	d400      	bmi.n	800366a <HAL_RCC_ClockConfig+0x92>
 8003668:	e0a4      	b.n	80037b4 <HAL_RCC_ClockConfig+0x1dc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4954      	ldr	r1, [pc, #336]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 800366c:	68cb      	ldr	r3, [r1, #12]
 800366e:	2003      	movs	r0, #3
 8003670:	4383      	bics	r3, r0
 8003672:	4313      	orrs	r3, r2
 8003674:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8003676:	f7fe ff8b 	bl	8002590 <HAL_GetTick>
 800367a:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d01f      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xea>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003682:	2b03      	cmp	r3, #3
 8003684:	d02e      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x10c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003686:	2b01      	cmp	r3, #1
 8003688:	d03d      	beq.n	8003706 <HAL_RCC_ClockConfig+0x12e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800368a:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 800368c:	4698      	mov	r8, r3
 800368e:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_RCC_ClockConfig+0x1e8>)
 8003692:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003694:	4643      	mov	r3, r8
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	421f      	tst	r7, r3
 800369a:	d045      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fe ff78 	bl	8002590 <HAL_GetTick>
 80036a0:	1b80      	subs	r0, r0, r6
 80036a2:	4548      	cmp	r0, r9
 80036a4:	d9f6      	bls.n	8003694 <HAL_RCC_ClockConfig+0xbc>
          return HAL_TIMEOUT;
 80036a6:	2003      	movs	r0, #3
 80036a8:	e068      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	019b      	lsls	r3, r3, #6
 80036b0:	d4db      	bmi.n	800366a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80036b2:	2001      	movs	r0, #1
 80036b4:	e062      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	075b      	lsls	r3, r3, #29
 80036bc:	d4d5      	bmi.n	800366a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80036be:	2001      	movs	r0, #1
 80036c0:	e05c      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 80036c4:	4698      	mov	r8, r3
 80036c6:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCC_ClockConfig+0x1e8>)
 80036ca:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036cc:	4643      	mov	r3, r8
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	403b      	ands	r3, r7
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d028      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d6:	f7fe ff5b 	bl	8002590 <HAL_GetTick>
 80036da:	1b80      	subs	r0, r0, r6
 80036dc:	4548      	cmp	r0, r9
 80036de:	d9f5      	bls.n	80036cc <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 80036e0:	2003      	movs	r0, #3
 80036e2:	e04b      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e4:	4b35      	ldr	r3, [pc, #212]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 80036e6:	4698      	mov	r8, r3
 80036e8:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <HAL_RCC_ClockConfig+0x1e8>)
 80036ec:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ee:	4643      	mov	r3, r8
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	403b      	ands	r3, r7
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d017      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f8:	f7fe ff4a 	bl	8002590 <HAL_GetTick>
 80036fc:	1b80      	subs	r0, r0, r6
 80036fe:	4548      	cmp	r0, r9
 8003700:	d9f5      	bls.n	80036ee <HAL_RCC_ClockConfig+0x116>
          return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
 8003704:	e03a      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 8003708:	4698      	mov	r8, r3
 800370a:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_RCC_ClockConfig+0x1e8>)
 800370e:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003710:	4643      	mov	r3, r8
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	403b      	ands	r3, r7
 8003716:	2b04      	cmp	r3, #4
 8003718:	d006      	beq.n	8003728 <HAL_RCC_ClockConfig+0x150>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371a:	f7fe ff39 	bl	8002590 <HAL_GetTick>
 800371e:	1b80      	subs	r0, r0, r6
 8003720:	4548      	cmp	r0, r9
 8003722:	d9f5      	bls.n	8003710 <HAL_RCC_ClockConfig+0x138>
          return HAL_TIMEOUT;
 8003724:	2003      	movs	r0, #3
 8003726:	e029      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_RCC_ClockConfig+0x1e0>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2301      	movs	r3, #1
 800372e:	4013      	ands	r3, r2
 8003730:	42ab      	cmp	r3, r5
 8003732:	d827      	bhi.n	8003784 <HAL_RCC_ClockConfig+0x1ac>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	075b      	lsls	r3, r3, #29
 8003738:	d506      	bpl.n	8003748 <HAL_RCC_ClockConfig+0x170>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373a:	4a20      	ldr	r2, [pc, #128]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 800373c:	68d3      	ldr	r3, [r2, #12]
 800373e:	4921      	ldr	r1, [pc, #132]	; (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003740:	400b      	ands	r3, r1
 8003742:	68e1      	ldr	r1, [r4, #12]
 8003744:	430b      	orrs	r3, r1
 8003746:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	071b      	lsls	r3, r3, #28
 800374c:	d507      	bpl.n	800375e <HAL_RCC_ClockConfig+0x186>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800374e:	481b      	ldr	r0, [pc, #108]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 8003750:	68c1      	ldr	r1, [r0, #12]
 8003752:	6923      	ldr	r3, [r4, #16]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4a1c      	ldr	r2, [pc, #112]	; (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003758:	400a      	ands	r2, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	60c3      	str	r3, [r0, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800375e:	f7ff fbdb 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCC_ClockConfig+0x1e4>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	061b      	lsls	r3, r3, #24
 8003768:	0f1b      	lsrs	r3, r3, #28
 800376a:	4a18      	ldr	r2, [pc, #96]	; (80037cc <HAL_RCC_ClockConfig+0x1f4>)
 800376c:	5cd3      	ldrb	r3, [r2, r3]
 800376e:	40d8      	lsrs	r0, r3
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCC_ClockConfig+0x1fc>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	f7fe fec4 	bl	8002504 <HAL_InitTick>
}
 800377c:	bcc0      	pop	{r6, r7}
 800377e:	46b9      	mov	r9, r7
 8003780:	46b0      	mov	r8, r6
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <HAL_RCC_ClockConfig+0x1e0>)
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	438b      	bics	r3, r1
 800378c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800378e:	f7fe feff 	bl	8002590 <HAL_GetTick>
 8003792:	0005      	movs	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003794:	4f08      	ldr	r7, [pc, #32]	; (80037b8 <HAL_RCC_ClockConfig+0x1e0>)
 8003796:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1e8>)
 800379a:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	421e      	tst	r6, r3
 80037a0:	d0c8      	beq.n	8003734 <HAL_RCC_ClockConfig+0x15c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a2:	f7fe fef5 	bl	8002590 <HAL_GetTick>
 80037a6:	1b40      	subs	r0, r0, r5
 80037a8:	4540      	cmp	r0, r8
 80037aa:	d9f7      	bls.n	800379c <HAL_RCC_ClockConfig+0x1c4>
        return HAL_TIMEOUT;
 80037ac:	2003      	movs	r0, #3
 80037ae:	e7e5      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
    return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
 80037b2:	e7e3      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
        return HAL_ERROR;
 80037b4:	2001      	movs	r0, #1
 80037b6:	e7e1      	b.n	800377c <HAL_RCC_ClockConfig+0x1a4>
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40021000 	.word	0x40021000
 80037c0:	00001388 	.word	0x00001388
 80037c4:	fffff8ff 	.word	0xfffff8ff
 80037c8:	ffffc7ff 	.word	0xffffc7ff
 80037cc:	08007eb8 	.word	0x08007eb8
 80037d0:	20000014 	.word	0x20000014
 80037d4:	2000001c 	.word	0x2000001c

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x14>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	055b      	lsls	r3, r3, #21
 80037de:	0f5b      	lsrs	r3, r3, #29
 80037e0:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037e6:	6810      	ldr	r0, [r2, #0]
 80037e8:	40d8      	lsrs	r0, r3
}
 80037ea:	4770      	bx	lr
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08007ec8 	.word	0x08007ec8
 80037f4:	20000014 	.word	0x20000014

080037f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCC_GetPCLK2Freq+0x14>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	049b      	lsls	r3, r3, #18
 80037fe:	0f5b      	lsrs	r3, r3, #29
 8003800:	4a03      	ldr	r2, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003802:	5cd3      	ldrb	r3, [r2, r3]
 8003804:	4a03      	ldr	r2, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003806:	6810      	ldr	r0, [r2, #0]
 8003808:	40d8      	lsrs	r0, r3
}
 800380a:	4770      	bx	lr
 800380c:	40021000 	.word	0x40021000
 8003810:	08007ec8 	.word	0x08007ec8
 8003814:	20000014 	.word	0x20000014

08003818 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	46d6      	mov	lr, sl
 800381c:	464f      	mov	r7, r9
 800381e:	4646      	mov	r6, r8
 8003820:	b5c0      	push	{r6, r7, lr}
 8003822:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003824:	2382      	movs	r3, #130	; 0x82
 8003826:	011b      	lsls	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003828:	6802      	ldr	r2, [r0, #0]
 800382a:	421a      	tst	r2, r3
 800382c:	d038      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b83      	ldr	r3, [pc, #524]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8003832:	2200      	movs	r2, #0
 8003834:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	d407      	bmi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	4a80      	ldr	r2, [pc, #512]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800383c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	055b      	lsls	r3, r3, #21
 8003842:	430b      	orrs	r3, r1
 8003844:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8003846:	2301      	movs	r3, #1
 8003848:	469a      	mov	sl, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	4b7d      	ldr	r3, [pc, #500]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	05db      	lsls	r3, r3, #23
 8003850:	d400      	bmi.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003852:	e071      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x120>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003854:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003856:	6819      	ldr	r1, [r3, #0]
 8003858:	23c0      	movs	r3, #192	; 0xc0
 800385a:	039b      	lsls	r3, r3, #14
 800385c:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800385e:	6862      	ldr	r2, [r4, #4]
 8003860:	4013      	ands	r3, r2
 8003862:	428b      	cmp	r3, r1
 8003864:	d100      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003866:	e07e      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003868:	23c0      	movs	r3, #192	; 0xc0
 800386a:	029b      	lsls	r3, r3, #10
 800386c:	0011      	movs	r1, r2
 800386e:	4019      	ands	r1, r3
 8003870:	4299      	cmp	r1, r3
 8003872:	d100      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8003874:	e087      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003876:	4b71      	ldr	r3, [pc, #452]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003878:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800387a:	23c0      	movs	r3, #192	; 0xc0
 800387c:	029b      	lsls	r3, r3, #10
 800387e:	0008      	movs	r0, r1
 8003880:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003882:	4219      	tst	r1, r3
 8003884:	d000      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003886:	e08a      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x186>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003888:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800388a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800388c:	23c0      	movs	r3, #192	; 0xc0
 800388e:	029b      	lsls	r3, r3, #10
 8003890:	6860      	ldr	r0, [r4, #4]
 8003892:	4003      	ands	r3, r0
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003898:	4653      	mov	r3, sl
 800389a:	2b01      	cmp	r3, #1
 800389c:	d100      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800389e:	e0c5      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x214>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	07db      	lsls	r3, r3, #31
 80038a4:	d506      	bpl.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a6:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80038a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038aa:	2103      	movs	r1, #3
 80038ac:	438b      	bics	r3, r1
 80038ae:	68e1      	ldr	r1, [r4, #12]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	079b      	lsls	r3, r3, #30
 80038b8:	d506      	bpl.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ba:	4a60      	ldr	r2, [pc, #384]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80038bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038be:	210c      	movs	r1, #12
 80038c0:	438b      	bics	r3, r1
 80038c2:	6921      	ldr	r1, [r4, #16]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	075b      	lsls	r3, r3, #29
 80038cc:	d506      	bpl.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038ce:	4a5b      	ldr	r2, [pc, #364]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80038d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038d2:	495c      	ldr	r1, [pc, #368]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	6961      	ldr	r1, [r4, #20]
 80038d8:	430b      	orrs	r3, r1
 80038da:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	071b      	lsls	r3, r3, #28
 80038e0:	d506      	bpl.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038e2:	4a56      	ldr	r2, [pc, #344]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80038e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038e6:	4958      	ldr	r1, [pc, #352]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038e8:	400b      	ands	r3, r1
 80038ea:	69a1      	ldr	r1, [r4, #24]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	05db      	lsls	r3, r3, #23
 80038f4:	d506      	bpl.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f6:	4a51      	ldr	r2, [pc, #324]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80038f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80038fa:	4954      	ldr	r1, [pc, #336]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80038fc:	400b      	ands	r3, r1
 80038fe:	69e1      	ldr	r1, [r4, #28]
 8003900:	430b      	orrs	r3, r1
 8003902:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	065b      	lsls	r3, r3, #25
 8003908:	d506      	bpl.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390a:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800390c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800390e:	4950      	ldr	r1, [pc, #320]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003910:	400b      	ands	r3, r1
 8003912:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003914:	430b      	orrs	r3, r1
 8003916:	64d3      	str	r3, [r2, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003918:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	d506      	bpl.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x116>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003920:	4a46      	ldr	r2, [pc, #280]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003922:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003924:	494b      	ldr	r1, [pc, #300]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003926:	400b      	ands	r3, r1
 8003928:	6a21      	ldr	r1, [r4, #32]
 800392a:	430b      	orrs	r3, r1
 800392c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800392e:	bce0      	pop	{r5, r6, r7}
 8003930:	46ba      	mov	sl, r7
 8003932:	46b1      	mov	r9, r6
 8003934:	46a8      	mov	r8, r5
 8003936:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003938:	4a41      	ldr	r2, [pc, #260]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800393a:	6811      	ldr	r1, [r2, #0]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	430b      	orrs	r3, r1
 8003942:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003944:	f7fe fe24 	bl	8002590 <HAL_GetTick>
 8003948:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394a:	4d3d      	ldr	r5, [pc, #244]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800394c:	2780      	movs	r7, #128	; 0x80
 800394e:	007f      	lsls	r7, r7, #1
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	423b      	tst	r3, r7
 8003954:	d000      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003956:	e77d      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003958:	f7fe fe1a 	bl	8002590 <HAL_GetTick>
 800395c:	1b80      	subs	r0, r0, r6
 800395e:	2864      	cmp	r0, #100	; 0x64
 8003960:	d9f6      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x138>
          return HAL_TIMEOUT;
 8003962:	2003      	movs	r0, #3
 8003964:	e7e3      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x116>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	039b      	lsls	r3, r3, #14
 800396a:	68a0      	ldr	r0, [r4, #8]
 800396c:	4003      	ands	r3, r0
 800396e:	428b      	cmp	r3, r1
 8003970:	d000      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003972:	e779      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x50>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003976:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003978:	23c0      	movs	r3, #192	; 0xc0
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	0008      	movs	r0, r1
 800397e:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003980:	4219      	tst	r1, r3
 8003982:	d02d      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003984:	e00b      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x186>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	039b      	lsls	r3, r3, #14
 800398c:	d453      	bmi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800398e:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003990:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003992:	23c0      	movs	r3, #192	; 0xc0
 8003994:	029b      	lsls	r3, r3, #10
 8003996:	0008      	movs	r0, r1
 8003998:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800399a:	4219      	tst	r1, r3
 800399c:	d028      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800399e:	23c0      	movs	r3, #192	; 0xc0
 80039a0:	029b      	lsls	r3, r3, #10
 80039a2:	401a      	ands	r2, r3
 80039a4:	4282      	cmp	r2, r0
 80039a6:	d002      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x196>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	069b      	lsls	r3, r3, #26
 80039ac:	d408      	bmi.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80039ae:	23c0      	movs	r3, #192	; 0xc0
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	68a2      	ldr	r2, [r4, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	4283      	cmp	r3, r0
 80039b8:	d012      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	051b      	lsls	r3, r3, #20
 80039be:	d50f      	bpl.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039c0:	4b1e      	ldr	r3, [pc, #120]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80039c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80039c4:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80039c6:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80039c8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80039ca:	2180      	movs	r1, #128	; 0x80
 80039cc:	0309      	lsls	r1, r1, #12
 80039ce:	4331      	orrs	r1, r6
 80039d0:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80039d4:	4e20      	ldr	r6, [pc, #128]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039d6:	4031      	ands	r1, r6
 80039d8:	6519      	str	r1, [r3, #80]	; 0x50
      RCC->CSR = temp_reg;
 80039da:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039dc:	05c3      	lsls	r3, r0, #23
 80039de:	d411      	bmi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e0:	6862      	ldr	r2, [r4, #4]
 80039e2:	23c0      	movs	r3, #192	; 0xc0
 80039e4:	029b      	lsls	r3, r3, #10
 80039e6:	0011      	movs	r1, r2
 80039e8:	4019      	ands	r1, r3
 80039ea:	4299      	cmp	r1, r3
 80039ec:	d000      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80039ee:	e74b      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80039f0:	4812      	ldr	r0, [pc, #72]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80039f2:	6803      	ldr	r3, [r0, #0]
 80039f4:	4919      	ldr	r1, [pc, #100]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80039f6:	400b      	ands	r3, r1
 80039f8:	21c0      	movs	r1, #192	; 0xc0
 80039fa:	0389      	lsls	r1, r1, #14
 80039fc:	400a      	ands	r2, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	6002      	str	r2, [r0, #0]
 8003a02:	e741      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tickstart = HAL_GetTick();
 8003a04:	f7fe fdc4 	bl	8002590 <HAL_GetTick>
 8003a08:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003a0c:	4698      	mov	r8, r3
 8003a0e:	2780      	movs	r7, #128	; 0x80
 8003a10:	00bf      	lsls	r7, r7, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a14:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a16:	4643      	mov	r3, r8
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	423b      	tst	r3, r7
 8003a1c:	d1e0      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fe fdb7 	bl	8002590 <HAL_GetTick>
 8003a22:	1b80      	subs	r0, r0, r6
 8003a24:	4548      	cmp	r0, r9
 8003a26:	d9f6      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
            return HAL_TIMEOUT;
 8003a28:	2003      	movs	r0, #3
 8003a2a:	e780      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003a2e:	490d      	ldr	r1, [pc, #52]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003a30:	400b      	ands	r3, r1
 8003a32:	6393      	str	r3, [r2, #56]	; 0x38
 8003a34:	e734      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
          return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
 8003a38:	e779      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	fffff3ff 	.word	0xfffff3ff
 8003a48:	ffffcfff 	.word	0xffffcfff
 8003a4c:	fffcffff 	.word	0xfffcffff
 8003a50:	fbffffff 	.word	0xfbffffff
 8003a54:	fff3ffff 	.word	0xfff3ffff
 8003a58:	fff7ffff 	.word	0xfff7ffff
 8003a5c:	ffcfffff 	.word	0xffcfffff
 8003a60:	00001388 	.word	0x00001388
 8003a64:	efffffff 	.word	0xefffffff

08003a68 <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a68:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6a:	2280      	movs	r2, #128	; 0x80
 8003a6c:	05d2      	lsls	r2, r2, #23
 8003a6e:	4290      	cmp	r0, r2
 8003a70:	d012      	beq.n	8003a98 <TIM_Base_SetConfig+0x30>
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <TIM_Base_SetConfig+0x64>)
 8003a74:	4290      	cmp	r0, r2
 8003a76:	d023      	beq.n	8003ac0 <TIM_Base_SetConfig+0x58>
 8003a78:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <TIM_Base_SetConfig+0x68>)
 8003a7a:	4290      	cmp	r0, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_Base_SetConfig+0x26>
 8003a7e:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <TIM_Base_SetConfig+0x6c>)
 8003a80:	4290      	cmp	r0, r2
 8003a82:	d111      	bne.n	8003aa8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a84:	2270      	movs	r2, #112	; 0x70
 8003a86:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a88:	684a      	ldr	r2, [r1, #4]
 8003a8a:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8c:	e008      	b.n	8003aa0 <TIM_Base_SetConfig+0x38>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8e:	2270      	movs	r2, #112	; 0x70
 8003a90:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a92:	684a      	ldr	r2, [r1, #4]
 8003a94:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a96:	e003      	b.n	8003aa0 <TIM_Base_SetConfig+0x38>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a98:	2270      	movs	r2, #112	; 0x70
 8003a9a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	684a      	ldr	r2, [r1, #4]
 8003a9e:	4313      	orrs	r3, r2
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	; (8003ad8 <TIM_Base_SetConfig+0x70>)
 8003aa2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa4:	68ca      	ldr	r2, [r1, #12]
 8003aa6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	4393      	bics	r3, r2
 8003aac:	690a      	ldr	r2, [r1, #16]
 8003aae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003ab0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab2:	688b      	ldr	r3, [r1, #8]
 8003ab4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab6:	680b      	ldr	r3, [r1, #0]
 8003ab8:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aba:	2301      	movs	r3, #1
 8003abc:	6143      	str	r3, [r0, #20]
}
 8003abe:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac0:	2270      	movs	r2, #112	; 0x70
 8003ac2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	684a      	ldr	r2, [r1, #4]
 8003ac6:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac8:	e7ea      	b.n	8003aa0 <TIM_Base_SetConfig+0x38>
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	40011400 	.word	0x40011400
 8003ad8:	fffffcff 	.word	0xfffffcff

08003adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	6a03      	ldr	r3, [r0, #32]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aec:	2573      	movs	r5, #115	; 0x73
 8003aee:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af0:	680d      	ldr	r5, [r1, #0]
 8003af2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af4:	2502      	movs	r5, #2
 8003af6:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af8:	688d      	ldr	r5, [r1, #8]
 8003afa:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003afe:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b00:	684a      	ldr	r2, [r1, #4]
 8003b02:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	6203      	str	r3, [r0, #32]
}
 8003b06:	bd30      	pop	{r4, r5, pc}

08003b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b08:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0a:	6a03      	ldr	r3, [r0, #32]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	4393      	bics	r3, r2
 8003b10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b18:	4c08      	ldr	r4, [pc, #32]	; (8003b3c <TIM_OC2_SetConfig+0x34>)
 8003b1a:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1c:	680a      	ldr	r2, [r1, #0]
 8003b1e:	0212      	lsls	r2, r2, #8
 8003b20:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b22:	2420      	movs	r4, #32
 8003b24:	43a3      	bics	r3, r4
 8003b26:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b28:	688b      	ldr	r3, [r1, #8]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b30:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b32:	684a      	ldr	r2, [r1, #4]
 8003b34:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b36:	6203      	str	r3, [r0, #32]
}
 8003b38:	bd30      	pop	{r4, r5, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	ffff8cff 	.word	0xffff8cff

08003b40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b40:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b42:	6802      	ldr	r2, [r0, #0]
 8003b44:	6893      	ldr	r3, [r2, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b46:	2470      	movs	r4, #112	; 0x70
 8003b48:	43a3      	bics	r3, r4
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003b4a:	684c      	ldr	r4, [r1, #4]
 8003b4c:	4323      	orrs	r3, r4

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003b4e:	2407      	movs	r4, #7
 8003b50:	43a3      	bics	r3, r4
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003b52:	680c      	ldr	r4, [r1, #0]
 8003b54:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b56:	6093      	str	r3, [r2, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003b58:	684b      	ldr	r3, [r1, #4]
 8003b5a:	2b50      	cmp	r3, #80	; 0x50
 8003b5c:	d03a      	beq.n	8003bd4 <TIM_SlaveTimer_SetConfig+0x94>
 8003b5e:	d911      	bls.n	8003b84 <TIM_SlaveTimer_SetConfig+0x44>
 8003b60:	2b60      	cmp	r3, #96	; 0x60
 8003b62:	d04d      	beq.n	8003c00 <TIM_SlaveTimer_SetConfig+0xc0>
 8003b64:	2b70      	cmp	r3, #112	; 0x70
 8003b66:	d163      	bne.n	8003c30 <TIM_SlaveTimer_SetConfig+0xf0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	6800      	ldr	r0, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6a:	6883      	ldr	r3, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <TIM_SlaveTimer_SetConfig+0xf8>)
 8003b6e:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b70:	68cb      	ldr	r3, [r1, #12]
 8003b72:	688c      	ldr	r4, [r1, #8]
 8003b74:	4323      	orrs	r3, r4
 8003b76:	6909      	ldr	r1, [r1, #16]
 8003b78:	0209      	lsls	r1, r1, #8
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2000      	movs	r0, #0
}
 8003b82:	e011      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
  switch (sSlaveConfig->InputTrigger)
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d010      	beq.n	8003baa <TIM_SlaveTimer_SetConfig+0x6a>
 8003b88:	2001      	movs	r0, #1
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d80c      	bhi.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d04c      	beq.n	8003c2c <TIM_SlaveTimer_SetConfig+0xec>
 8003b92:	d904      	bls.n	8003b9e <TIM_SlaveTimer_SetConfig+0x5e>
 8003b94:	3b30      	subs	r3, #48	; 0x30
 8003b96:	1e5a      	subs	r2, r3, #1
 8003b98:	4193      	sbcs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	b2d8      	uxtb	r0, r3
 8003b9c:	e004      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
  switch (sSlaveConfig->InputTrigger)
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	1e5a      	subs	r2, r3, #1
 8003ba4:	4193      	sbcs	r3, r2
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	b2d8      	uxtb	r0, r3
}
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003baa:	680b      	ldr	r3, [r1, #0]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d041      	beq.n	8003c34 <TIM_SlaveTimer_SetConfig+0xf4>
      tmpccer = htim->Instance->CCER;
 8003bb0:	6803      	ldr	r3, [r0, #0]
 8003bb2:	6a1e      	ldr	r6, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003bb4:	6a1a      	ldr	r2, [r3, #32]
 8003bb6:	2401      	movs	r4, #1
 8003bb8:	43a2      	bics	r2, r4
 8003bba:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003bbc:	6805      	ldr	r5, [r0, #0]
 8003bbe:	69ac      	ldr	r4, [r5, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc0:	22f0      	movs	r2, #240	; 0xf0
 8003bc2:	4394      	bics	r4, r2
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003bc4:	690b      	ldr	r3, [r1, #16]
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4323      	orrs	r3, r4
      htim->Instance->CCMR1 = tmpccmr1;
 8003bca:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCER = tmpccer;
 8003bcc:	6803      	ldr	r3, [r0, #0]
 8003bce:	621e      	str	r6, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2000      	movs	r0, #0
      break;
 8003bd2:	e7e9      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd4:	6803      	ldr	r3, [r0, #0]
 8003bd6:	6888      	ldr	r0, [r1, #8]
 8003bd8:	6909      	ldr	r1, [r1, #16]
  tmpccer = TIMx->CCER;
 8003bda:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bdc:	6a1a      	ldr	r2, [r3, #32]
 8003bde:	2501      	movs	r5, #1
 8003be0:	43aa      	bics	r2, r5
 8003be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003be4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be6:	35ef      	adds	r5, #239	; 0xef
 8003be8:	43aa      	bics	r2, r5
 8003bea:	0015      	movs	r5, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bec:	010a      	lsls	r2, r1, #4
 8003bee:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bf0:	210a      	movs	r1, #10
 8003bf2:	438c      	bics	r4, r1
 8003bf4:	0021      	movs	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003bf6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003bf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bfa:	6219      	str	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2000      	movs	r0, #0
}
 8003bfe:	e7d3      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c00:	6803      	ldr	r3, [r0, #0]
 8003c02:	6888      	ldr	r0, [r1, #8]
 8003c04:	690c      	ldr	r4, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	2110      	movs	r1, #16
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003c10:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c12:	4d0a      	ldr	r5, [pc, #40]	; (8003c3c <TIM_SlaveTimer_SetConfig+0xfc>)
 8003c14:	400d      	ands	r5, r1
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c16:	0321      	lsls	r1, r4, #12
 8003c18:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c1a:	24a0      	movs	r4, #160	; 0xa0
 8003c1c:	43a2      	bics	r2, r4
 8003c1e:	0014      	movs	r4, r2
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c20:	0102      	lsls	r2, r0, #4
 8003c22:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8003c24:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c26:	621a      	str	r2, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2000      	movs	r0, #0
}
 8003c2a:	e7bd      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	e7bb      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
  switch (sSlaveConfig->InputTrigger)
 8003c30:	2001      	movs	r0, #1
 8003c32:	e7b9      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
        return HAL_ERROR;
 8003c34:	2001      	movs	r0, #1
 8003c36:	e7b7      	b.n	8003ba8 <TIM_SlaveTimer_SetConfig+0x68>
 8003c38:	ffff00ff 	.word	0xffff00ff
 8003c3c:	ffff0fff 	.word	0xffff0fff

08003c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c40:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c42:	231f      	movs	r3, #31
 8003c44:	4019      	ands	r1, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c46:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c48:	2401      	movs	r4, #1
 8003c4a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003c4c:	43a3      	bics	r3, r4
 8003c4e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c50:	6a03      	ldr	r3, [r0, #32]
 8003c52:	408a      	lsls	r2, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	6202      	str	r2, [r0, #32]
}
 8003c58:	bd10      	pop	{r4, pc}

08003c5a <HAL_TIM_Base_Init>:
{
 8003c5a:	b570      	push	{r4, r5, r6, lr}
 8003c5c:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003c5e:	d01e      	beq.n	8003c9e <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003c60:	2339      	movs	r3, #57	; 0x39
 8003c62:	5cc3      	ldrb	r3, [r0, r3]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d014      	beq.n	8003c92 <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	2539      	movs	r5, #57	; 0x39
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6e:	0021      	movs	r1, r4
 8003c70:	c901      	ldmia	r1!, {r0}
 8003c72:	f7ff fef9 	bl	8003a68 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c76:	2301      	movs	r3, #1
 8003c78:	223e      	movs	r2, #62	; 0x3e
 8003c7a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	3a04      	subs	r2, #4
 8003c7e:	54a3      	strb	r3, [r4, r2]
 8003c80:	3201      	adds	r2, #1
 8003c82:	54a3      	strb	r3, [r4, r2]
 8003c84:	3201      	adds	r2, #1
 8003c86:	54a3      	strb	r3, [r4, r2]
 8003c88:	3201      	adds	r2, #1
 8003c8a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003c8e:	2000      	movs	r0, #0
}
 8003c90:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c92:	3338      	adds	r3, #56	; 0x38
 8003c94:	2200      	movs	r2, #0
 8003c96:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003c98:	f7fe fa6a 	bl	8002170 <HAL_TIM_Base_MspInit>
 8003c9c:	e7e4      	b.n	8003c68 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	e7f6      	b.n	8003c90 <HAL_TIM_Base_Init+0x36>
	...

08003ca4 <HAL_TIM_Base_Start_IT>:
{
 8003ca4:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca6:	2239      	movs	r2, #57	; 0x39
 8003ca8:	5c82      	ldrb	r2, [r0, r2]
    return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003cac:	2a01      	cmp	r2, #1
 8003cae:	d124      	bne.n	8003cfa <HAL_TIM_Base_Start_IT+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	3238      	adds	r2, #56	; 0x38
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	68ca      	ldr	r2, [r1, #12]
 8003cba:	4302      	orrs	r2, r0
 8003cbc:	60ca      	str	r2, [r1, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	05d2      	lsls	r2, r2, #23
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x42>
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <HAL_TIM_Base_Start_IT+0x5c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x42>
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_TIM_Base_Start_IT+0x60>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d008      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x42>
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <HAL_TIM_Base_Start_IT+0x64>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d005      	beq.n	8003ce6 <HAL_TIM_Base_Start_IT+0x42>
    __HAL_TIM_ENABLE(htim);
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e009      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	2207      	movs	r2, #7
 8003cea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cec:	2a06      	cmp	r2, #6
 8003cee:	d005      	beq.n	8003cfc <HAL_TIM_Base_Start_IT+0x58>
      __HAL_TIM_ENABLE(htim);
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003cf8:	2000      	movs	r0, #0
}
 8003cfa:	4770      	bx	lr
  return HAL_OK;
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	e7fc      	b.n	8003cfa <HAL_TIM_Base_Start_IT+0x56>
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40010800 	.word	0x40010800
 8003d08:	40011400 	.word	0x40011400

08003d0c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d0c:	6802      	ldr	r2, [r0, #0]
 8003d0e:	68d3      	ldr	r3, [r2, #12]
 8003d10:	2101      	movs	r1, #1
 8003d12:	438b      	bics	r3, r1
 8003d14:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	6a19      	ldr	r1, [r3, #32]
 8003d1a:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <HAL_TIM_Base_Stop_IT+0x28>)
 8003d1c:	4211      	tst	r1, r2
 8003d1e:	d103      	bne.n	8003d28 <HAL_TIM_Base_Stop_IT+0x1c>
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	2101      	movs	r1, #1
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	2339      	movs	r3, #57	; 0x39
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	54c2      	strb	r2, [r0, r3]
}
 8003d2e:	2000      	movs	r0, #0
 8003d30:	4770      	bx	lr
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	00001111 	.word	0x00001111

08003d38 <HAL_TIM_PWM_MspInit>:
}
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_PWM_Init>:
{
 8003d3a:	b570      	push	{r4, r5, r6, lr}
 8003d3c:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003d3e:	d01e      	beq.n	8003d7e <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d40:	2339      	movs	r3, #57	; 0x39
 8003d42:	5cc3      	ldrb	r3, [r0, r3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d014      	beq.n	8003d72 <HAL_TIM_PWM_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	2539      	movs	r5, #57	; 0x39
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4e:	0021      	movs	r1, r4
 8003d50:	c901      	ldmia	r1!, {r0}
 8003d52:	f7ff fe89 	bl	8003a68 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d56:	2301      	movs	r3, #1
 8003d58:	223e      	movs	r2, #62	; 0x3e
 8003d5a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5c:	3a04      	subs	r2, #4
 8003d5e:	54a3      	strb	r3, [r4, r2]
 8003d60:	3201      	adds	r2, #1
 8003d62:	54a3      	strb	r3, [r4, r2]
 8003d64:	3201      	adds	r2, #1
 8003d66:	54a3      	strb	r3, [r4, r2]
 8003d68:	3201      	adds	r2, #1
 8003d6a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d72:	3338      	adds	r3, #56	; 0x38
 8003d74:	2200      	movs	r2, #0
 8003d76:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8003d78:	f7ff ffde 	bl	8003d38 <HAL_TIM_PWM_MspInit>
 8003d7c:	e7e4      	b.n	8003d48 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8003d7e:	2001      	movs	r0, #1
 8003d80:	e7f6      	b.n	8003d70 <HAL_TIM_PWM_Init+0x36>
	...

08003d84 <HAL_TIM_Encoder_Init>:
{
 8003d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d86:	46c6      	mov	lr, r8
 8003d88:	b500      	push	{lr}
 8003d8a:	0004      	movs	r4, r0
 8003d8c:	000d      	movs	r5, r1
  if (htim == NULL)
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d04a      	beq.n	8003e28 <HAL_TIM_Encoder_Init+0xa4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	2339      	movs	r3, #57	; 0x39
 8003d94:	5cc3      	ldrb	r3, [r0, r3]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d040      	beq.n	8003e1c <HAL_TIM_Encoder_Init+0x98>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9a:	2639      	movs	r6, #57	; 0x39
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	55a3      	strb	r3, [r4, r6]
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003da0:	6822      	ldr	r2, [r4, #0]
 8003da2:	6893      	ldr	r3, [r2, #8]
 8003da4:	4921      	ldr	r1, [pc, #132]	; (8003e2c <HAL_TIM_Encoder_Init+0xa8>)
 8003da6:	400b      	ands	r3, r1
 8003da8:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003daa:	0021      	movs	r1, r4
 8003dac:	c901      	ldmia	r1!, {r0}
 8003dae:	f7ff fe5b 	bl	8003a68 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003db2:	6821      	ldr	r1, [r4, #0]
 8003db4:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8003db6:	698a      	ldr	r2, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8003db8:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	4318      	orrs	r0, r3
 8003dbe:	4680      	mov	r8, r0
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_TIM_Encoder_Init+0xac>)
 8003dc2:	401a      	ands	r2, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003dc4:	69ab      	ldr	r3, [r5, #24]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	68a8      	ldr	r0, [r5, #8]
 8003dca:	4303      	orrs	r3, r0
 8003dcc:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_TIM_Encoder_Init+0xb0>)
 8003dd0:	401a      	ands	r2, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dd2:	69eb      	ldr	r3, [r5, #28]
 8003dd4:	021b      	lsls	r3, r3, #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dd6:	6928      	ldr	r0, [r5, #16]
 8003dd8:	0100      	lsls	r0, r0, #4
 8003dda:	4303      	orrs	r3, r0
 8003ddc:	68e8      	ldr	r0, [r5, #12]
 8003dde:	4303      	orrs	r3, r0
 8003de0:	6a28      	ldr	r0, [r5, #32]
 8003de2:	0300      	lsls	r0, r0, #12
 8003de4:	4303      	orrs	r3, r0
 8003de6:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003de8:	22aa      	movs	r2, #170	; 0xaa
 8003dea:	4397      	bics	r7, r2
 8003dec:	003a      	movs	r2, r7
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003dee:	6968      	ldr	r0, [r5, #20]
 8003df0:	0107      	lsls	r7, r0, #4
 8003df2:	686d      	ldr	r5, [r5, #4]
 8003df4:	432f      	orrs	r7, r5
 8003df6:	4317      	orrs	r7, r2
  htim->Instance->SMCR = tmpsmcr;
 8003df8:	4642      	mov	r2, r8
 8003dfa:	608a      	str	r2, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	6193      	str	r3, [r2, #24]
  htim->Instance->CCER = tmpccer;
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	621f      	str	r7, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e04:	2301      	movs	r3, #1
 8003e06:	223e      	movs	r2, #62	; 0x3e
 8003e08:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	3a04      	subs	r2, #4
 8003e0c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e0e:	3201      	adds	r2, #1
 8003e10:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003e12:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 8003e14:	2000      	movs	r0, #0
}
 8003e16:	bc80      	pop	{r7}
 8003e18:	46b8      	mov	r8, r7
 8003e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e1c:	3338      	adds	r3, #56	; 0x38
 8003e1e:	2200      	movs	r2, #0
 8003e20:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Encoder_MspInit(htim);
 8003e22:	f7fe f975 	bl	8002110 <HAL_TIM_Encoder_MspInit>
 8003e26:	e7b8      	b.n	8003d9a <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 8003e28:	2001      	movs	r0, #1
 8003e2a:	e7f4      	b.n	8003e16 <HAL_TIM_Encoder_Init+0x92>
 8003e2c:	ffffbff8 	.word	0xffffbff8
 8003e30:	fffffcfc 	.word	0xfffffcfc
 8003e34:	ffff0303 	.word	0xffff0303

08003e38 <HAL_TIM_Encoder_Start_IT>:
{
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	0004      	movs	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e3c:	233a      	movs	r3, #58	; 0x3a
 8003e3e:	5cc0      	ldrb	r0, [r0, r3]
 8003e40:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e42:	3301      	adds	r3, #1
 8003e44:	5ce3      	ldrb	r3, [r4, r3]
 8003e46:	b2db      	uxtb	r3, r3
  if (Channel == TIM_CHANNEL_1)
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	d113      	bne.n	8003e74 <HAL_TIM_Encoder_Start_IT+0x3c>
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4c:	2801      	cmp	r0, #1
 8003e4e:	d140      	bne.n	8003ed2 <HAL_TIM_Encoder_Start_IT+0x9a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e50:	2502      	movs	r5, #2
 8003e52:	233a      	movs	r3, #58	; 0x3a
 8003e54:	54e5      	strb	r5, [r4, r3]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e56:	2201      	movs	r2, #1
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	f7ff fef1 	bl	8003c40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	68d3      	ldr	r3, [r2, #12]
 8003e62:	432b      	orrs	r3, r5
 8003e64:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003e74:	2904      	cmp	r1, #4
 8003e76:	d01c      	beq.n	8003eb2 <HAL_TIM_Encoder_Start_IT+0x7a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e78:	2801      	cmp	r0, #1
 8003e7a:	d12c      	bne.n	8003ed6 <HAL_TIM_Encoder_Start_IT+0x9e>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d1f8      	bne.n	8003e72 <HAL_TIM_Encoder_Start_IT+0x3a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e80:	2502      	movs	r5, #2
 8003e82:	3339      	adds	r3, #57	; 0x39
 8003e84:	54e5      	strb	r5, [r4, r3]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e86:	3301      	adds	r3, #1
 8003e88:	54e5      	strb	r5, [r4, r3]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6820      	ldr	r0, [r4, #0]
 8003e90:	f7ff fed6 	bl	8003c40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e94:	2201      	movs	r2, #1
 8003e96:	2104      	movs	r1, #4
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	f7ff fed1 	bl	8003c40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	68d3      	ldr	r3, [r2, #12]
 8003ea2:	432b      	orrs	r3, r5
 8003ea4:	60d3      	str	r3, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	68d3      	ldr	r3, [r2, #12]
 8003eaa:	2104      	movs	r1, #4
 8003eac:	430b      	orrs	r3, r1
 8003eae:	60d3      	str	r3, [r2, #12]
      break;
 8003eb0:	e7d9      	b.n	8003e66 <HAL_TIM_Encoder_Start_IT+0x2e>
      return HAL_ERROR;
 8003eb2:	2001      	movs	r0, #1
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d1dc      	bne.n	8003e72 <HAL_TIM_Encoder_Start_IT+0x3a>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb8:	333a      	adds	r3, #58	; 0x3a
 8003eba:	2202      	movs	r2, #2
 8003ebc:	54e2      	strb	r2, [r4, r3]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	f7ff febd 	bl	8003c40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	68d3      	ldr	r3, [r2, #12]
 8003eca:	2104      	movs	r1, #4
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	60d3      	str	r3, [r2, #12]
      break;
 8003ed0:	e7c9      	b.n	8003e66 <HAL_TIM_Encoder_Start_IT+0x2e>
      return HAL_ERROR;
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	e7cd      	b.n	8003e72 <HAL_TIM_Encoder_Start_IT+0x3a>
      return HAL_ERROR;
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	e7cb      	b.n	8003e72 <HAL_TIM_Encoder_Start_IT+0x3a>
	...

08003edc <HAL_TIM_PWM_ConfigChannel>:
{
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	0004      	movs	r4, r0
 8003ee0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003ee2:	2338      	movs	r3, #56	; 0x38
 8003ee4:	5cc3      	ldrb	r3, [r0, r3]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d100      	bne.n	8003eec <HAL_TIM_PWM_ConfigChannel+0x10>
 8003eea:	e08d      	b.n	8004008 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8003eec:	2338      	movs	r3, #56	; 0x38
 8003eee:	2101      	movs	r1, #1
 8003ef0:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8003ef2:	2a08      	cmp	r2, #8
 8003ef4:	d061      	beq.n	8003fba <HAL_TIM_PWM_ConfigChannel+0xde>
 8003ef6:	d81b      	bhi.n	8003f30 <HAL_TIM_PWM_ConfigChannel+0x54>
 8003ef8:	2a00      	cmp	r2, #0
 8003efa:	d046      	beq.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0xae>
 8003efc:	0008      	movs	r0, r1
 8003efe:	2a04      	cmp	r2, #4
 8003f00:	d157      	bne.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0xd6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f02:	0029      	movs	r1, r5
 8003f04:	6820      	ldr	r0, [r4, #0]
 8003f06:	f7ff fdff 	bl	8003b08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	6991      	ldr	r1, [r2, #24]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	6993      	ldr	r3, [r2, #24]
 8003f1a:	493c      	ldr	r1, [pc, #240]	; (800400c <HAL_TIM_PWM_ConfigChannel+0x130>)
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	6991      	ldr	r1, [r2, #24]
 8003f24:	68eb      	ldr	r3, [r5, #12]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2000      	movs	r0, #0
      break;
 8003f2e:	e040      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0xd6>
  switch (Channel)
 8003f30:	2001      	movs	r0, #1
 8003f32:	2a0c      	cmp	r2, #12
 8003f34:	d13d      	bne.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0xd6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f36:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f38:	6a1a      	ldr	r2, [r3, #32]
 8003f3a:	4935      	ldr	r1, [pc, #212]	; (8004010 <HAL_TIM_PWM_ConfigChannel+0x134>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003f40:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003f42:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f44:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f46:	4833      	ldr	r0, [pc, #204]	; (8004014 <HAL_TIM_PWM_ConfigChannel+0x138>)
 8003f48:	4008      	ands	r0, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4a:	6829      	ldr	r1, [r5, #0]
 8003f4c:	0209      	lsls	r1, r1, #8
 8003f4e:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8003f50:	4831      	ldr	r0, [pc, #196]	; (8004018 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8003f52:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f54:	68aa      	ldr	r2, [r5, #8]
 8003f56:	0312      	lsls	r2, r2, #12
 8003f58:	4302      	orrs	r2, r0
  TIMx->CR2 = tmpcr2;
 8003f5a:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f5c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003f5e:	6869      	ldr	r1, [r5, #4]
 8003f60:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003f62:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	69d1      	ldr	r1, [r2, #28]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f70:	6822      	ldr	r2, [r4, #0]
 8003f72:	69d3      	ldr	r3, [r2, #28]
 8003f74:	4925      	ldr	r1, [pc, #148]	; (800400c <HAL_TIM_PWM_ConfigChannel+0x130>)
 8003f76:	400b      	ands	r3, r1
 8003f78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	69d1      	ldr	r1, [r2, #28]
 8003f7e:	68eb      	ldr	r3, [r5, #12]
 8003f80:	021b      	lsls	r3, r3, #8
 8003f82:	430b      	orrs	r3, r1
 8003f84:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2000      	movs	r0, #0
      break;
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0xd6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f7ff fda5 	bl	8003adc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	6993      	ldr	r3, [r2, #24]
 8003f96:	2108      	movs	r1, #8
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	6993      	ldr	r3, [r2, #24]
 8003fa0:	3904      	subs	r1, #4
 8003fa2:	438b      	bics	r3, r1
 8003fa4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	6993      	ldr	r3, [r2, #24]
 8003faa:	68e9      	ldr	r1, [r5, #12]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8003fb2:	2338      	movs	r3, #56	; 0x38
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	54e2      	strb	r2, [r4, r3]
}
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fba:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	4917      	ldr	r1, [pc, #92]	; (800401c <HAL_TIM_PWM_ConfigChannel+0x140>)
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003fc6:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003fc8:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fca:	2073      	movs	r0, #115	; 0x73
 8003fcc:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8003fce:	6828      	ldr	r0, [r5, #0]
 8003fd0:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8003fd2:	4813      	ldr	r0, [pc, #76]	; (8004020 <HAL_TIM_PWM_ConfigChannel+0x144>)
 8003fd4:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fd6:	68aa      	ldr	r2, [r5, #8]
 8003fd8:	0212      	lsls	r2, r2, #8
 8003fda:	4302      	orrs	r2, r0
  TIMx->CR2 = tmpcr2;
 8003fdc:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fde:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe0:	6869      	ldr	r1, [r5, #4]
 8003fe2:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003fe4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe6:	6822      	ldr	r2, [r4, #0]
 8003fe8:	69d3      	ldr	r3, [r2, #28]
 8003fea:	2108      	movs	r1, #8
 8003fec:	430b      	orrs	r3, r1
 8003fee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff0:	6822      	ldr	r2, [r4, #0]
 8003ff2:	69d3      	ldr	r3, [r2, #28]
 8003ff4:	3904      	subs	r1, #4
 8003ff6:	438b      	bics	r3, r1
 8003ff8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ffa:	6822      	ldr	r2, [r4, #0]
 8003ffc:	69d3      	ldr	r3, [r2, #28]
 8003ffe:	68e9      	ldr	r1, [r5, #12]
 8004000:	430b      	orrs	r3, r1
 8004002:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2000      	movs	r0, #0
      break;
 8004006:	e7d4      	b.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0xd6>
  __HAL_LOCK(htim);
 8004008:	2002      	movs	r0, #2
 800400a:	e7d5      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0xdc>
 800400c:	fffffbff 	.word	0xfffffbff
 8004010:	ffffefff 	.word	0xffffefff
 8004014:	ffff8cff 	.word	0xffff8cff
 8004018:	ffffdfff 	.word	0xffffdfff
 800401c:	fffffeff 	.word	0xfffffeff
 8004020:	fffffdff 	.word	0xfffffdff

08004024 <HAL_TIM_ConfigClockSource>:
{
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004028:	2338      	movs	r3, #56	; 0x38
 800402a:	5cc3      	ldrb	r3, [r0, r3]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d100      	bne.n	8004032 <HAL_TIM_ConfigClockSource+0xe>
 8004030:	e0c0      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x190>
 8004032:	2338      	movs	r3, #56	; 0x38
 8004034:	2001      	movs	r0, #1
 8004036:	54d0      	strb	r0, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	3301      	adds	r3, #1
 800403a:	3001      	adds	r0, #1
 800403c:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 800403e:	6810      	ldr	r0, [r2, #0]
 8004040:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004042:	4c5d      	ldr	r4, [pc, #372]	; (80041b8 <HAL_TIM_ConfigClockSource+0x194>)
 8004044:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8004046:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004048:	680b      	ldr	r3, [r1, #0]
 800404a:	2b60      	cmp	r3, #96	; 0x60
 800404c:	d100      	bne.n	8004050 <HAL_TIM_ConfigClockSource+0x2c>
 800404e:	e073      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x114>
 8004050:	d841      	bhi.n	80040d6 <HAL_TIM_ConfigClockSource+0xb2>
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d100      	bne.n	8004058 <HAL_TIM_ConfigClockSource+0x34>
 8004056:	e08c      	b.n	8004172 <HAL_TIM_ConfigClockSource+0x14e>
 8004058:	d91f      	bls.n	800409a <HAL_TIM_ConfigClockSource+0x76>
 800405a:	2001      	movs	r0, #1
 800405c:	2b50      	cmp	r3, #80	; 0x50
 800405e:	d133      	bne.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	684c      	ldr	r4, [r1, #4]
 8004064:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8004066:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004068:	6a19      	ldr	r1, [r3, #32]
 800406a:	2601      	movs	r6, #1
 800406c:	43b1      	bics	r1, r6
 800406e:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004070:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004072:	36ef      	adds	r6, #239	; 0xef
 8004074:	43b1      	bics	r1, r6
 8004076:	000e      	movs	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	0101      	lsls	r1, r0, #4
 800407a:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407c:	200a      	movs	r0, #10
 800407e:	4385      	bics	r5, r0
 8004080:	0028      	movs	r0, r5
  tmpccer |= TIM_ICPolarity;
 8004082:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 8004084:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004086:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004088:	6811      	ldr	r1, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 800408a:	688b      	ldr	r3, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800408c:	2070      	movs	r0, #112	; 0x70
 800408e:	4383      	bics	r3, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004090:	3819      	subs	r0, #25
 8004092:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004094:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2000      	movs	r0, #0
}
 8004098:	e016      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800409a:	2b20      	cmp	r3, #32
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x82>
 800409e:	d90c      	bls.n	80040ba <HAL_TIM_ConfigClockSource+0x96>
 80040a0:	2001      	movs	r0, #1
 80040a2:	2b30      	cmp	r3, #48	; 0x30
 80040a4:	d110      	bne.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a6:	6810      	ldr	r0, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 80040a8:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040aa:	2470      	movs	r4, #112	; 0x70
 80040ac:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ae:	430b      	orrs	r3, r1
 80040b0:	2107      	movs	r1, #7
 80040b2:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80040b4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040b6:	2000      	movs	r0, #0
}
 80040b8:	e006      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80040ba:	2110      	movs	r1, #16
 80040bc:	0018      	movs	r0, r3
 80040be:	4388      	bics	r0, r1
 80040c0:	0001      	movs	r1, r0
 80040c2:	2001      	movs	r0, #1
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d0ee      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x82>
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	2339      	movs	r3, #57	; 0x39
 80040ca:	2101      	movs	r1, #1
 80040cc:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 80040ce:	3b01      	subs	r3, #1
 80040d0:	2100      	movs	r1, #0
 80040d2:	54d1      	strb	r1, [r2, r3]
}
 80040d4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80040d6:	2080      	movs	r0, #128	; 0x80
 80040d8:	0140      	lsls	r0, r0, #5
 80040da:	4283      	cmp	r3, r0
 80040dc:	d066      	beq.n	80041ac <HAL_TIM_ConfigClockSource+0x188>
 80040de:	2080      	movs	r0, #128	; 0x80
 80040e0:	0180      	lsls	r0, r0, #6
 80040e2:	4283      	cmp	r3, r0
 80040e4:	d113      	bne.n	800410e <HAL_TIM_ConfigClockSource+0xea>
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	6814      	ldr	r4, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 80040e8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ea:	4834      	ldr	r0, [pc, #208]	; (80041bc <HAL_TIM_ConfigClockSource+0x198>)
 80040ec:	4018      	ands	r0, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040ee:	688b      	ldr	r3, [r1, #8]
 80040f0:	684d      	ldr	r5, [r1, #4]
 80040f2:	432b      	orrs	r3, r5
 80040f4:	68c9      	ldr	r1, [r1, #12]
 80040f6:	0209      	lsls	r1, r1, #8
 80040f8:	430b      	orrs	r3, r1
 80040fa:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 80040fc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040fe:	6811      	ldr	r1, [r2, #0]
 8004100:	6888      	ldr	r0, [r1, #8]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	4303      	orrs	r3, r0
 8004108:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2000      	movs	r0, #0
      break;
 800410c:	e7dc      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 800410e:	2b70      	cmp	r3, #112	; 0x70
 8004110:	d14e      	bne.n	80041b0 <HAL_TIM_ConfigClockSource+0x18c>
      TIM_ETR_SetConfig(htim->Instance,
 8004112:	6814      	ldr	r4, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004114:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004116:	4829      	ldr	r0, [pc, #164]	; (80041bc <HAL_TIM_ConfigClockSource+0x198>)
 8004118:	4018      	ands	r0, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800411a:	688b      	ldr	r3, [r1, #8]
 800411c:	684d      	ldr	r5, [r1, #4]
 800411e:	432b      	orrs	r3, r5
 8004120:	68c9      	ldr	r1, [r1, #12]
 8004122:	0209      	lsls	r1, r1, #8
 8004124:	430b      	orrs	r3, r1
 8004126:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 8004128:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800412a:	6811      	ldr	r1, [r2, #0]
 800412c:	688b      	ldr	r3, [r1, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800412e:	2077      	movs	r0, #119	; 0x77
 8004130:	4303      	orrs	r3, r0
      htim->Instance->SMCR = tmpsmcr;
 8004132:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2000      	movs	r0, #0
      break;
 8004136:	e7c7      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004138:	6813      	ldr	r3, [r2, #0]
 800413a:	6848      	ldr	r0, [r1, #4]
 800413c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800413e:	6a19      	ldr	r1, [r3, #32]
 8004140:	2410      	movs	r4, #16
 8004142:	43a1      	bics	r1, r4
 8004144:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004146:	699c      	ldr	r4, [r3, #24]
  tmpccer = TIMx->CCER;
 8004148:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414a:	4e1d      	ldr	r6, [pc, #116]	; (80041c0 <HAL_TIM_ConfigClockSource+0x19c>)
 800414c:	4026      	ands	r6, r4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800414e:	032c      	lsls	r4, r5, #12
 8004150:	4334      	orrs	r4, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004152:	25a0      	movs	r5, #160	; 0xa0
 8004154:	43a9      	bics	r1, r5
 8004156:	000d      	movs	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8004158:	0101      	lsls	r1, r0, #4
 800415a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 800415c:	619c      	str	r4, [r3, #24]
  TIMx->CCER = tmpccer;
 800415e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004160:	6811      	ldr	r1, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 8004162:	688b      	ldr	r3, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004164:	2070      	movs	r0, #112	; 0x70
 8004166:	4383      	bics	r3, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004168:	3809      	subs	r0, #9
 800416a:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 800416c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2000      	movs	r0, #0
}
 8004170:	e7aa      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	684c      	ldr	r4, [r1, #4]
 8004176:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8004178:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	6a19      	ldr	r1, [r3, #32]
 800417c:	2601      	movs	r6, #1
 800417e:	43b1      	bics	r1, r6
 8004180:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004184:	36ef      	adds	r6, #239	; 0xef
 8004186:	43b1      	bics	r1, r6
 8004188:	000e      	movs	r6, r1
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418a:	0101      	lsls	r1, r0, #4
 800418c:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	200a      	movs	r0, #10
 8004190:	4385      	bics	r5, r0
 8004192:	0028      	movs	r0, r5
  tmpccer |= TIM_ICPolarity;
 8004194:	4320      	orrs	r0, r4
  TIMx->CCMR1 = tmpccmr1;
 8004196:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	6218      	str	r0, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419a:	6811      	ldr	r1, [r2, #0]
  tmpsmcr = TIMx->SMCR;
 800419c:	688b      	ldr	r3, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800419e:	2070      	movs	r0, #112	; 0x70
 80041a0:	4383      	bics	r3, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a2:	3829      	subs	r0, #41	; 0x29
 80041a4:	4303      	orrs	r3, r0
  TIMx->SMCR = tmpsmcr;
 80041a6:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2000      	movs	r0, #0
}
 80041aa:	e78d      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2000      	movs	r0, #0
 80041ae:	e78b      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
  switch (sClockSourceConfig->ClockSource)
 80041b0:	2001      	movs	r0, #1
 80041b2:	e789      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0xa4>
  __HAL_LOCK(htim);
 80041b4:	2002      	movs	r0, #2
 80041b6:	e78d      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0xb0>
 80041b8:	ffff0088 	.word	0xffff0088
 80041bc:	ffff00ff 	.word	0xffff00ff
 80041c0:	ffff0fff 	.word	0xffff0fff

080041c4 <HAL_TIM_SlaveConfigSynchro>:
{
 80041c4:	b510      	push	{r4, lr}
 80041c6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80041c8:	2338      	movs	r3, #56	; 0x38
 80041ca:	5cc3      	ldrb	r3, [r0, r3]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d022      	beq.n	8004216 <HAL_TIM_SlaveConfigSynchro+0x52>
 80041d0:	2338      	movs	r3, #56	; 0x38
 80041d2:	2201      	movs	r2, #1
 80041d4:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	3301      	adds	r3, #1
 80041d8:	3201      	adds	r2, #1
 80041da:	54c2      	strb	r2, [r0, r3]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80041dc:	f7ff fcb0 	bl	8003b40 <TIM_SlaveTimer_SetConfig>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d110      	bne.n	8004206 <HAL_TIM_SlaveConfigSynchro+0x42>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	68d3      	ldr	r3, [r2, #12]
 80041e8:	2140      	movs	r1, #64	; 0x40
 80041ea:	438b      	bics	r3, r1
 80041ec:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	68d3      	ldr	r3, [r2, #12]
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <HAL_TIM_SlaveConfigSynchro+0x58>)
 80041f4:	400b      	ands	r3, r1
 80041f6:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	2339      	movs	r3, #57	; 0x39
 80041fa:	2201      	movs	r2, #1
 80041fc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80041fe:	3b01      	subs	r3, #1
 8004200:	2200      	movs	r2, #0
 8004202:	54e2      	strb	r2, [r4, r3]
}
 8004204:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8004206:	2339      	movs	r3, #57	; 0x39
 8004208:	2201      	movs	r2, #1
 800420a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(htim);
 800420c:	3b01      	subs	r3, #1
 800420e:	2200      	movs	r2, #0
 8004210:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8004212:	2001      	movs	r0, #1
 8004214:	e7f6      	b.n	8004204 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 8004216:	2002      	movs	r0, #2
 8004218:	e7f4      	b.n	8004204 <HAL_TIM_SlaveConfigSynchro+0x40>
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	ffffbfff 	.word	0xffffbfff

08004220 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_TriggerCallback>:
}
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_IRQHandler>:
{
 8004226:	b510      	push	{r4, lr}
 8004228:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	0792      	lsls	r2, r2, #30
 8004230:	d50f      	bpl.n	8004252 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	0792      	lsls	r2, r2, #30
 8004236:	d50c      	bpl.n	8004252 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004238:	2203      	movs	r2, #3
 800423a:	4252      	negs	r2, r2
 800423c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800423e:	2301      	movs	r3, #1
 8004240:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004242:	6803      	ldr	r3, [r0, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	079b      	lsls	r3, r3, #30
 8004248:	d055      	beq.n	80042f6 <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 800424a:	f7fc faab 	bl	80007a4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	2300      	movs	r3, #0
 8004250:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	0752      	lsls	r2, r2, #29
 8004258:	d512      	bpl.n	8004280 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	0752      	lsls	r2, r2, #29
 800425e:	d50f      	bpl.n	8004280 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004260:	2205      	movs	r2, #5
 8004262:	4252      	negs	r2, r2
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004266:	2302      	movs	r3, #2
 8004268:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	23c0      	movs	r3, #192	; 0xc0
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	421a      	tst	r2, r3
 8004274:	d045      	beq.n	8004302 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004276:	0020      	movs	r0, r4
 8004278:	f7fc fa94 	bl	80007a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427c:	2300      	movs	r3, #0
 800427e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	0712      	lsls	r2, r2, #28
 8004286:	d510      	bpl.n	80042aa <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	0712      	lsls	r2, r2, #28
 800428c:	d50d      	bpl.n	80042aa <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800428e:	2209      	movs	r2, #9
 8004290:	4252      	negs	r2, r2
 8004292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004294:	2304      	movs	r3, #4
 8004296:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	079b      	lsls	r3, r3, #30
 800429e:	d037      	beq.n	8004310 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 80042a0:	0020      	movs	r0, r4
 80042a2:	f7fc fa7f 	bl	80007a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a6:	2300      	movs	r3, #0
 80042a8:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	06d2      	lsls	r2, r2, #27
 80042b0:	d512      	bpl.n	80042d8 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	06d2      	lsls	r2, r2, #27
 80042b6:	d50f      	bpl.n	80042d8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042b8:	2211      	movs	r2, #17
 80042ba:	4252      	negs	r2, r2
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042be:	2308      	movs	r3, #8
 80042c0:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	23c0      	movs	r3, #192	; 0xc0
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	421a      	tst	r2, r3
 80042cc:	d027      	beq.n	800431e <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80042ce:	0020      	movs	r0, r4
 80042d0:	f7fc fa68 	bl	80007a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d4:	2300      	movs	r3, #0
 80042d6:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	07d2      	lsls	r2, r2, #31
 80042de:	d502      	bpl.n	80042e6 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	07d2      	lsls	r2, r2, #31
 80042e4:	d422      	bmi.n	800432c <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	0652      	lsls	r2, r2, #25
 80042ec:	d502      	bpl.n	80042f4 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	0652      	lsls	r2, r2, #25
 80042f2:	d422      	bmi.n	800433a <HAL_TIM_IRQHandler+0x114>
}
 80042f4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	f7ff ff93 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fa:	0020      	movs	r0, r4
 80042fc:	f7ff ff91 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
 8004300:	e7a5      	b.n	800424e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	0020      	movs	r0, r4
 8004304:	f7ff ff8c 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	0020      	movs	r0, r4
 800430a:	f7ff ff8a 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
 800430e:	e7b5      	b.n	800427c <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004310:	0020      	movs	r0, r4
 8004312:	f7ff ff85 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004316:	0020      	movs	r0, r4
 8004318:	f7ff ff83 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
 800431c:	e7c3      	b.n	80042a6 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	0020      	movs	r0, r4
 8004320:	f7ff ff7e 	bl	8004220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	0020      	movs	r0, r4
 8004326:	f7ff ff7c 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
 800432a:	e7d3      	b.n	80042d4 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800432c:	2202      	movs	r2, #2
 800432e:	4252      	negs	r2, r2
 8004330:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004332:	0020      	movs	r0, r4
 8004334:	f7fc fa50 	bl	80007d8 <HAL_TIM_PeriodElapsedCallback>
 8004338:	e7d5      	b.n	80042e6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800433a:	2241      	movs	r2, #65	; 0x41
 800433c:	4252      	negs	r2, r2
 800433e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004340:	0020      	movs	r0, r4
 8004342:	f7ff ff6f 	bl	8004224 <HAL_TIM_TriggerCallback>
}
 8004346:	e7d5      	b.n	80042f4 <HAL_TIM_IRQHandler+0xce>

08004348 <HAL_TIM_Base_GetState>:
  return htim->State;
 8004348:	2339      	movs	r3, #57	; 0x39
 800434a:	5cc0      	ldrb	r0, [r0, r3]
 800434c:	b2c0      	uxtb	r0, r0
}
 800434e:	4770      	bx	lr

08004350 <HAL_TIM_Encoder_GetState>:
  return htim->State;
 8004350:	2339      	movs	r3, #57	; 0x39
 8004352:	5cc0      	ldrb	r0, [r0, r3]
 8004354:	b2c0      	uxtb	r0, r0
}
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004358:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435a:	2338      	movs	r3, #56	; 0x38
 800435c:	5cc3      	ldrb	r3, [r0, r3]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d028      	beq.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004362:	2338      	movs	r3, #56	; 0x38
 8004364:	2201      	movs	r2, #1
 8004366:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	3301      	adds	r3, #1
 800436a:	3201      	adds	r2, #1
 800436c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436e:	6804      	ldr	r4, [r0, #0]
 8004370:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004372:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004374:	2570      	movs	r5, #112	; 0x70
 8004376:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004378:	680d      	ldr	r5, [r1, #0]
 800437a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437c:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	6803      	ldr	r3, [r0, #0]
 8004380:	2480      	movs	r4, #128	; 0x80
 8004382:	05e4      	lsls	r4, r4, #23
 8004384:	42a3      	cmp	r3, r4
 8004386:	d008      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004388:	4c0b      	ldr	r4, [pc, #44]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800438a:	42a3      	cmp	r3, r4
 800438c:	d005      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800438e:	4c0b      	ldr	r4, [pc, #44]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004390:	42a3      	cmp	r3, r4
 8004392:	d002      	beq.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004396:	42a3      	cmp	r3, r4
 8004398:	d104      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439a:	2480      	movs	r4, #128	; 0x80
 800439c:	43a2      	bics	r2, r4
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	6849      	ldr	r1, [r1, #4]
 80043a0:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	2339      	movs	r3, #57	; 0x39
 80043a6:	2201      	movs	r2, #1
 80043a8:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80043aa:	3b01      	subs	r3, #1
 80043ac:	2200      	movs	r2, #0
 80043ae:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80043b0:	2000      	movs	r0, #0
}
 80043b2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80043b4:	2002      	movs	r0, #2
 80043b6:	e7fc      	b.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40010800 	.word	0x40010800
 80043c0:	40011400 	.word	0x40011400

080043c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	b5d0      	push	{r4, r6, r7, lr}
 80043c6:	0004      	movs	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c8:	6801      	ldr	r1, [r0, #0]
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ca:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043cc:	6883      	ldr	r3, [r0, #8]
 80043ce:	6900      	ldr	r0, [r0, #16]
 80043d0:	4303      	orrs	r3, r0
 80043d2:	6960      	ldr	r0, [r4, #20]
 80043d4:	4303      	orrs	r3, r0
 80043d6:	69e0      	ldr	r0, [r4, #28]
 80043d8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043da:	4896      	ldr	r0, [pc, #600]	; (8004634 <UART_SetConfig+0x270>)
 80043dc:	4002      	ands	r2, r0
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e2:	6822      	ldr	r2, [r4, #0]
 80043e4:	6853      	ldr	r3, [r2, #4]
 80043e6:	4994      	ldr	r1, [pc, #592]	; (8004638 <UART_SetConfig+0x274>)
 80043e8:	400b      	ands	r3, r1
 80043ea:	68e1      	ldr	r1, [r4, #12]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043f0:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	4b91      	ldr	r3, [pc, #580]	; (800463c <UART_SetConfig+0x278>)
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043fa:	6a23      	ldr	r3, [r4, #32]
 80043fc:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fe:	6893      	ldr	r3, [r2, #8]
 8004400:	488f      	ldr	r0, [pc, #572]	; (8004640 <UART_SetConfig+0x27c>)
 8004402:	4003      	ands	r3, r0
 8004404:	430b      	orrs	r3, r1
 8004406:	6093      	str	r3, [r2, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	4b8e      	ldr	r3, [pc, #568]	; (8004644 <UART_SetConfig+0x280>)
 800440c:	429a      	cmp	r2, r3
 800440e:	d024      	beq.n	800445a <UART_SetConfig+0x96>
 8004410:	4b8d      	ldr	r3, [pc, #564]	; (8004648 <UART_SetConfig+0x284>)
 8004412:	429a      	cmp	r2, r3
 8004414:	d040      	beq.n	8004498 <UART_SetConfig+0xd4>
 8004416:	4b8d      	ldr	r3, [pc, #564]	; (800464c <UART_SetConfig+0x288>)
 8004418:	429a      	cmp	r2, r3
 800441a:	d100      	bne.n	800441e <UART_SetConfig+0x5a>
 800441c:	e105      	b.n	800462a <UART_SetConfig+0x266>
 800441e:	4b8c      	ldr	r3, [pc, #560]	; (8004650 <UART_SetConfig+0x28c>)
 8004420:	429a      	cmp	r2, r3
 8004422:	d100      	bne.n	8004426 <UART_SetConfig+0x62>
 8004424:	e103      	b.n	800462e <UART_SetConfig+0x26a>
 8004426:	4985      	ldr	r1, [pc, #532]	; (800463c <UART_SetConfig+0x278>)
 8004428:	2310      	movs	r3, #16
 800442a:	428a      	cmp	r2, r1
 800442c:	d128      	bne.n	8004480 <UART_SetConfig+0xbc>
 800442e:	4b89      	ldr	r3, [pc, #548]	; (8004654 <UART_SetConfig+0x290>)
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	22c0      	movs	r2, #192	; 0xc0
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	4013      	ands	r3, r2
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	4293      	cmp	r3, r2
 800443e:	d054      	beq.n	80044ea <UART_SetConfig+0x126>
 8004440:	d843      	bhi.n	80044ca <UART_SetConfig+0x106>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d04a      	beq.n	80044dc <UART_SetConfig+0x118>
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	00d2      	lsls	r2, r2, #3
 800444a:	2001      	movs	r0, #1
 800444c:	4293      	cmp	r3, r2
 800444e:	d000      	beq.n	8004452 <UART_SetConfig+0x8e>
 8004450:	e0c5      	b.n	80045de <UART_SetConfig+0x21a>
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe fd61 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8004456:	0003      	movs	r3, r0
        break;
 8004458:	e043      	b.n	80044e2 <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445a:	4b7e      	ldr	r3, [pc, #504]	; (8004654 <UART_SetConfig+0x290>)
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	2203      	movs	r2, #3
 8004460:	401a      	ands	r2, r3
 8004462:	2a02      	cmp	r2, #2
 8004464:	d100      	bne.n	8004468 <UART_SetConfig+0xa4>
 8004466:	e0da      	b.n	800461e <UART_SetConfig+0x25a>
 8004468:	d900      	bls.n	800446c <UART_SetConfig+0xa8>
 800446a:	e0da      	b.n	8004622 <UART_SetConfig+0x25e>
 800446c:	2301      	movs	r3, #1
 800446e:	2a00      	cmp	r2, #0
 8004470:	d006      	beq.n	8004480 <UART_SetConfig+0xbc>
 8004472:	3a01      	subs	r2, #1
 8004474:	1e53      	subs	r3, r2, #1
 8004476:	419a      	sbcs	r2, r3
 8004478:	4252      	negs	r2, r2
 800447a:	230c      	movs	r3, #12
 800447c:	4013      	ands	r3, r2
 800447e:	3304      	adds	r3, #4
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004480:	69e2      	ldr	r2, [r4, #28]
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	0209      	lsls	r1, r1, #8
 8004486:	428a      	cmp	r2, r1
 8004488:	d058      	beq.n	800453c <UART_SetConfig+0x178>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448a:	2b08      	cmp	r3, #8
 800448c:	d900      	bls.n	8004490 <UART_SetConfig+0xcc>
 800448e:	e0c4      	b.n	800461a <UART_SetConfig+0x256>
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a71      	ldr	r2, [pc, #452]	; (8004658 <UART_SetConfig+0x294>)
 8004494:	58d3      	ldr	r3, [r2, r3]
 8004496:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004498:	4b6e      	ldr	r3, [pc, #440]	; (8004654 <UART_SetConfig+0x290>)
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	220c      	movs	r2, #12
 800449e:	401a      	ands	r2, r3
 80044a0:	2a08      	cmp	r2, #8
 80044a2:	d100      	bne.n	80044a6 <UART_SetConfig+0xe2>
 80044a4:	e0bf      	b.n	8004626 <UART_SetConfig+0x262>
 80044a6:	d80a      	bhi.n	80044be <UART_SetConfig+0xfa>
 80044a8:	2300      	movs	r3, #0
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d0e8      	beq.n	8004480 <UART_SetConfig+0xbc>
 80044ae:	3a04      	subs	r2, #4
 80044b0:	1e53      	subs	r3, r2, #1
 80044b2:	419a      	sbcs	r2, r3
 80044b4:	4252      	negs	r2, r2
 80044b6:	230c      	movs	r3, #12
 80044b8:	4013      	ands	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	e7e0      	b.n	8004480 <UART_SetConfig+0xbc>
 80044be:	3a0c      	subs	r2, #12
 80044c0:	1e53      	subs	r3, r2, #1
 80044c2:	419a      	sbcs	r2, r3
 80044c4:	00d3      	lsls	r3, r2, #3
 80044c6:	3308      	adds	r3, #8
 80044c8:	e7da      	b.n	8004480 <UART_SetConfig+0xbc>
 80044ca:	22c0      	movs	r2, #192	; 0xc0
 80044cc:	0112      	lsls	r2, r2, #4
 80044ce:	2001      	movs	r0, #1
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d000      	beq.n	80044d6 <UART_SetConfig+0x112>
 80044d4:	e083      	b.n	80045de <UART_SetConfig+0x21a>
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	e012      	b.n	8004502 <UART_SetConfig+0x13e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7ff f97c 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80044e0:	0003      	movs	r3, r0
    if (pclk != 0U)
 80044e2:	2000      	movs	r0, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d07a      	beq.n	80045de <UART_SetConfig+0x21a>
 80044e8:	e00b      	b.n	8004502 <UART_SetConfig+0x13e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ea:	4b5a      	ldr	r3, [pc, #360]	; (8004654 <UART_SetConfig+0x290>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2310      	movs	r3, #16
 80044f0:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80044f2:	425a      	negs	r2, r3
 80044f4:	4153      	adcs	r3, r2
 80044f6:	425b      	negs	r3, r3
 80044f8:	4858      	ldr	r0, [pc, #352]	; (800465c <UART_SetConfig+0x298>)
 80044fa:	4003      	ands	r3, r0
 80044fc:	4a58      	ldr	r2, [pc, #352]	; (8004660 <UART_SetConfig+0x29c>)
 80044fe:	4694      	mov	ip, r2
 8004500:	4463      	add	r3, ip
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	0051      	lsls	r1, r2, #1
 8004506:	1889      	adds	r1, r1, r2
        ret = HAL_ERROR;
 8004508:	2001      	movs	r0, #1
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800450a:	428b      	cmp	r3, r1
 800450c:	d367      	bcc.n	80045de <UART_SetConfig+0x21a>
          (pclk > (4096U * huart->Init.BaudRate)))
 800450e:	0311      	lsls	r1, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004510:	428b      	cmp	r3, r1
 8004512:	d864      	bhi.n	80045de <UART_SetConfig+0x21a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004514:	0e19      	lsrs	r1, r3, #24
 8004516:	0218      	lsls	r0, r3, #8
 8004518:	0856      	lsrs	r6, r2, #1
 800451a:	2700      	movs	r7, #0
 800451c:	1980      	adds	r0, r0, r6
 800451e:	4179      	adcs	r1, r7
 8004520:	2300      	movs	r3, #0
 8004522:	f7fb fe87 	bl	8000234 <__aeabi_uldivmod>
 8004526:	0003      	movs	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004528:	4a4e      	ldr	r2, [pc, #312]	; (8004664 <UART_SetConfig+0x2a0>)
 800452a:	1881      	adds	r1, r0, r2
 800452c:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <UART_SetConfig+0x2a4>)
          ret = HAL_ERROR;
 800452e:	2001      	movs	r0, #1
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004530:	4291      	cmp	r1, r2
 8004532:	d854      	bhi.n	80045de <UART_SetConfig+0x21a>
          huart->Instance->BRR = usartdiv;
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	60d3      	str	r3, [r2, #12]
 8004538:	2000      	movs	r0, #0
 800453a:	e050      	b.n	80045de <UART_SetConfig+0x21a>
    switch (clocksource)
 800453c:	2b08      	cmp	r3, #8
 800453e:	d86a      	bhi.n	8004616 <UART_SetConfig+0x252>
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	494a      	ldr	r1, [pc, #296]	; (800466c <UART_SetConfig+0x2a8>)
 8004544:	58cb      	ldr	r3, [r1, r3]
 8004546:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8004548:	f7ff f946 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 800454c:	0002      	movs	r2, r0
    if (pclk != 0U)
 800454e:	2000      	movs	r0, #0
 8004550:	2a00      	cmp	r2, #0
 8004552:	d044      	beq.n	80045de <UART_SetConfig+0x21a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004554:	0050      	lsls	r0, r2, #1
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	085a      	lsrs	r2, r3, #1
 800455a:	1880      	adds	r0, r0, r2
 800455c:	0019      	movs	r1, r3
 800455e:	f7fb fddd 	bl	800011c <__udivsi3>
 8004562:	0003      	movs	r3, r0
 8004564:	0402      	lsls	r2, r0, #16
 8004566:	0c12      	lsrs	r2, r2, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004568:	0016      	movs	r6, r2
 800456a:	3e10      	subs	r6, #16
 800456c:	4940      	ldr	r1, [pc, #256]	; (8004670 <UART_SetConfig+0x2ac>)
        ret = HAL_ERROR;
 800456e:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	428e      	cmp	r6, r1
 8004572:	d834      	bhi.n	80045de <UART_SetConfig+0x21a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004574:	483f      	ldr	r0, [pc, #252]	; (8004674 <UART_SetConfig+0x2b0>)
 8004576:	4003      	ands	r3, r0
        huart->Instance->BRR = brrtemp;
 8004578:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800457a:	0712      	lsls	r2, r2, #28
 800457c:	0f52      	lsrs	r2, r2, #29
        huart->Instance->BRR = brrtemp;
 800457e:	4313      	orrs	r3, r2
 8004580:	60cb      	str	r3, [r1, #12]
 8004582:	2000      	movs	r0, #0
 8004584:	e02b      	b.n	80045de <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004586:	f7ff f937 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 800458a:	0002      	movs	r2, r0
        break;
 800458c:	e7df      	b.n	800454e <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800458e:	4b31      	ldr	r3, [pc, #196]	; (8004654 <UART_SetConfig+0x290>)
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	2210      	movs	r2, #16
 8004594:	4002      	ands	r2, r0
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004596:	4253      	negs	r3, r2
 8004598:	415a      	adcs	r2, r3
 800459a:	4250      	negs	r0, r2
 800459c:	4a2f      	ldr	r2, [pc, #188]	; (800465c <UART_SetConfig+0x298>)
 800459e:	4002      	ands	r2, r0
 80045a0:	4b2f      	ldr	r3, [pc, #188]	; (8004660 <UART_SetConfig+0x29c>)
 80045a2:	469c      	mov	ip, r3
 80045a4:	4462      	add	r2, ip
 80045a6:	e7d5      	b.n	8004554 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 80045a8:	f7fe fcb6 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 80045ac:	0002      	movs	r2, r0
        break;
 80045ae:	e7ce      	b.n	800454e <UART_SetConfig+0x18a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7ff f912 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80045b4:	0003      	movs	r3, r0
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80045b6:	2000      	movs	r0, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <UART_SetConfig+0x21a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045bc:	6862      	ldr	r2, [r4, #4]
 80045be:	0850      	lsrs	r0, r2, #1
 80045c0:	18c0      	adds	r0, r0, r3
 80045c2:	0011      	movs	r1, r2
 80045c4:	f7fb fdaa 	bl	800011c <__udivsi3>
 80045c8:	0403      	lsls	r3, r0, #16
 80045ca:	0c1b      	lsrs	r3, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045cc:	0019      	movs	r1, r3
 80045ce:	3910      	subs	r1, #16
 80045d0:	4a27      	ldr	r2, [pc, #156]	; (8004670 <UART_SetConfig+0x2ac>)
      {
        huart->Instance->BRR = usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d4:	4291      	cmp	r1, r2
 80045d6:	d802      	bhi.n	80045de <UART_SetConfig+0x21a>
        huart->Instance->BRR = usartdiv;
 80045d8:	6822      	ldr	r2, [r4, #0]
 80045da:	60d3      	str	r3, [r2, #12]
 80045dc:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80045e2:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80045e4:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e6:	f7ff f907 	bl	80037f8 <HAL_RCC_GetPCLK2Freq>
 80045ea:	0003      	movs	r3, r0
        break;
 80045ec:	e7e3      	b.n	80045b6 <UART_SetConfig+0x1f2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ee:	4b19      	ldr	r3, [pc, #100]	; (8004654 <UART_SetConfig+0x290>)
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	2310      	movs	r3, #16
 80045f4:	4003      	ands	r3, r0
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80045f6:	425a      	negs	r2, r3
 80045f8:	4153      	adcs	r3, r2
 80045fa:	4258      	negs	r0, r3
 80045fc:	4b17      	ldr	r3, [pc, #92]	; (800465c <UART_SetConfig+0x298>)
 80045fe:	4003      	ands	r3, r0
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <UART_SetConfig+0x29c>)
 8004602:	4694      	mov	ip, r2
 8004604:	4463      	add	r3, ip
 8004606:	e7d9      	b.n	80045bc <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetSysClockFreq();
 8004608:	f7fe fc86 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 800460c:	0003      	movs	r3, r0
        break;
 800460e:	e7d2      	b.n	80045b6 <UART_SetConfig+0x1f2>
    switch (clocksource)
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	e7d2      	b.n	80045bc <UART_SetConfig+0x1f8>
    switch (clocksource)
 8004616:	2001      	movs	r0, #1
 8004618:	e7e1      	b.n	80045de <UART_SetConfig+0x21a>
    switch (clocksource)
 800461a:	2001      	movs	r0, #1
 800461c:	e7df      	b.n	80045de <UART_SetConfig+0x21a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800461e:	2302      	movs	r3, #2
 8004620:	e72e      	b.n	8004480 <UART_SetConfig+0xbc>
 8004622:	2308      	movs	r3, #8
 8004624:	e72c      	b.n	8004480 <UART_SetConfig+0xbc>
 8004626:	2302      	movs	r3, #2
 8004628:	e72a      	b.n	8004480 <UART_SetConfig+0xbc>
 800462a:	2300      	movs	r3, #0
 800462c:	e728      	b.n	8004480 <UART_SetConfig+0xbc>
 800462e:	2300      	movs	r3, #0
 8004630:	e726      	b.n	8004480 <UART_SetConfig+0xbc>
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	efff69f3 	.word	0xefff69f3
 8004638:	ffffcfff 	.word	0xffffcfff
 800463c:	40004800 	.word	0x40004800
 8004640:	fffff4ff 	.word	0xfffff4ff
 8004644:	40013800 	.word	0x40013800
 8004648:	40004400 	.word	0x40004400
 800464c:	40004c00 	.word	0x40004c00
 8004650:	40005000 	.word	0x40005000
 8004654:	40021000 	.word	0x40021000
 8004658:	08007edc 	.word	0x08007edc
 800465c:	00b71b00 	.word	0x00b71b00
 8004660:	003d0900 	.word	0x003d0900
 8004664:	fffffd00 	.word	0xfffffd00
 8004668:	000ffcff 	.word	0x000ffcff
 800466c:	08007f00 	.word	0x08007f00
 8004670:	0000ffef 	.word	0x0000ffef
 8004674:	0000fff0 	.word	0x0000fff0

08004678 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004678:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800467a:	07db      	lsls	r3, r3, #31
 800467c:	d506      	bpl.n	800468c <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800467e:	6802      	ldr	r2, [r0, #0]
 8004680:	6853      	ldr	r3, [r2, #4]
 8004682:	492c      	ldr	r1, [pc, #176]	; (8004734 <UART_AdvFeatureConfig+0xbc>)
 8004684:	400b      	ands	r3, r1
 8004686:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004688:	430b      	orrs	r3, r1
 800468a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800468e:	079b      	lsls	r3, r3, #30
 8004690:	d506      	bpl.n	80046a0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004692:	6802      	ldr	r2, [r0, #0]
 8004694:	6853      	ldr	r3, [r2, #4]
 8004696:	4928      	ldr	r1, [pc, #160]	; (8004738 <UART_AdvFeatureConfig+0xc0>)
 8004698:	400b      	ands	r3, r1
 800469a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800469c:	430b      	orrs	r3, r1
 800469e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046a2:	075b      	lsls	r3, r3, #29
 80046a4:	d506      	bpl.n	80046b4 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046a6:	6802      	ldr	r2, [r0, #0]
 80046a8:	6853      	ldr	r3, [r2, #4]
 80046aa:	4924      	ldr	r1, [pc, #144]	; (800473c <UART_AdvFeatureConfig+0xc4>)
 80046ac:	400b      	ands	r3, r1
 80046ae:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	d506      	bpl.n	80046c8 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ba:	6802      	ldr	r2, [r0, #0]
 80046bc:	6853      	ldr	r3, [r2, #4]
 80046be:	4920      	ldr	r1, [pc, #128]	; (8004740 <UART_AdvFeatureConfig+0xc8>)
 80046c0:	400b      	ands	r3, r1
 80046c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046ca:	06db      	lsls	r3, r3, #27
 80046cc:	d506      	bpl.n	80046dc <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046ce:	6802      	ldr	r2, [r0, #0]
 80046d0:	6893      	ldr	r3, [r2, #8]
 80046d2:	491c      	ldr	r1, [pc, #112]	; (8004744 <UART_AdvFeatureConfig+0xcc>)
 80046d4:	400b      	ands	r3, r1
 80046d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80046d8:	430b      	orrs	r3, r1
 80046da:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046de:	069b      	lsls	r3, r3, #26
 80046e0:	d506      	bpl.n	80046f0 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046e2:	6802      	ldr	r2, [r0, #0]
 80046e4:	6893      	ldr	r3, [r2, #8]
 80046e6:	4918      	ldr	r1, [pc, #96]	; (8004748 <UART_AdvFeatureConfig+0xd0>)
 80046e8:	400b      	ands	r3, r1
 80046ea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046f2:	065b      	lsls	r3, r3, #25
 80046f4:	d50b      	bpl.n	800470e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f6:	6802      	ldr	r2, [r0, #0]
 80046f8:	6853      	ldr	r3, [r2, #4]
 80046fa:	4914      	ldr	r1, [pc, #80]	; (800474c <UART_AdvFeatureConfig+0xd4>)
 80046fc:	400b      	ands	r3, r1
 80046fe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004700:	430b      	orrs	r3, r1
 8004702:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	035b      	lsls	r3, r3, #13
 8004708:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	d506      	bpl.n	8004722 <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004714:	6802      	ldr	r2, [r0, #0]
 8004716:	6853      	ldr	r3, [r2, #4]
 8004718:	490d      	ldr	r1, [pc, #52]	; (8004750 <UART_AdvFeatureConfig+0xd8>)
 800471a:	400b      	ands	r3, r1
 800471c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800471e:	430b      	orrs	r3, r1
 8004720:	6053      	str	r3, [r2, #4]
  }
}
 8004722:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004724:	6802      	ldr	r2, [r0, #0]
 8004726:	6853      	ldr	r3, [r2, #4]
 8004728:	490a      	ldr	r1, [pc, #40]	; (8004754 <UART_AdvFeatureConfig+0xdc>)
 800472a:	400b      	ands	r3, r1
 800472c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800472e:	430b      	orrs	r3, r1
 8004730:	6053      	str	r3, [r2, #4]
 8004732:	e7ec      	b.n	800470e <UART_AdvFeatureConfig+0x96>
 8004734:	fffdffff 	.word	0xfffdffff
 8004738:	fffeffff 	.word	0xfffeffff
 800473c:	fffbffff 	.word	0xfffbffff
 8004740:	ffff7fff 	.word	0xffff7fff
 8004744:	ffffefff 	.word	0xffffefff
 8004748:	ffffdfff 	.word	0xffffdfff
 800474c:	ffefffff 	.word	0xffefffff
 8004750:	fff7ffff 	.word	0xfff7ffff
 8004754:	ff9fffff 	.word	0xff9fffff

08004758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	46de      	mov	lr, fp
 800475c:	4657      	mov	r7, sl
 800475e:	464e      	mov	r6, r9
 8004760:	4645      	mov	r5, r8
 8004762:	b5e0      	push	{r5, r6, r7, lr}
 8004764:	4680      	mov	r8, r0
 8004766:	000d      	movs	r5, r1
 8004768:	0016      	movs	r6, r2
 800476a:	4699      	mov	r9, r3
 800476c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800476e:	2304      	movs	r3, #4
 8004770:	469a      	mov	sl, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004778:	4643      	mov	r3, r8
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69dc      	ldr	r4, [r3, #28]
 800477e:	402c      	ands	r4, r5
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	4262      	negs	r2, r4
 8004784:	4154      	adcs	r4, r2
 8004786:	42b4      	cmp	r4, r6
 8004788:	d15c      	bne.n	8004844 <UART_WaitOnFlagUntilTimeout+0xec>
    if (Timeout != HAL_MAX_DELAY)
 800478a:	1c7a      	adds	r2, r7, #1
 800478c:	d0f6      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478e:	f7fd feff 	bl	8002590 <HAL_GetTick>
 8004792:	464b      	mov	r3, r9
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	42b8      	cmp	r0, r7
 8004798:	d832      	bhi.n	8004800 <UART_WaitOnFlagUntilTimeout+0xa8>
 800479a:	2f00      	cmp	r7, #0
 800479c:	d030      	beq.n	8004800 <UART_WaitOnFlagUntilTimeout+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800479e:	4643      	mov	r3, r8
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4651      	mov	r1, sl
 80047a6:	4211      	tst	r1, r2
 80047a8:	d0e6      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	4659      	mov	r1, fp
 80047ae:	420a      	tst	r2, r1
 80047b0:	d0e2      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0x20>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	0112      	lsls	r2, r2, #4
 80047b6:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	2201      	movs	r2, #1
 80047be:	f382 8810 	msr	PRIMASK, r2

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c2:	4643      	mov	r3, r8
 80047c4:	6819      	ldr	r1, [r3, #0]
 80047c6:	680b      	ldr	r3, [r1, #0]
 80047c8:	4c22      	ldr	r4, [pc, #136]	; (8004854 <UART_WaitOnFlagUntilTimeout+0xfc>)
 80047ca:	4023      	ands	r3, r4
 80047cc:	600b      	str	r3, [r1, #0]
 80047ce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	4643      	mov	r3, r8
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	688b      	ldr	r3, [r1, #8]
 80047e0:	4393      	bics	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
 80047e4:	f380 8810 	msr	PRIMASK, r0

          huart->gState = HAL_UART_STATE_READY;
 80047e8:	2320      	movs	r3, #32
 80047ea:	4642      	mov	r2, r8
 80047ec:	6793      	str	r3, [r2, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047ee:	67d3      	str	r3, [r2, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	4641      	mov	r1, r8
 80047f4:	508b      	str	r3, [r1, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f6:	3354      	adds	r3, #84	; 0x54
 80047f8:	2200      	movs	r2, #0
 80047fa:	54ca      	strb	r2, [r1, r3]

          return HAL_TIMEOUT;
 80047fc:	2003      	movs	r0, #3
 80047fe:	e022      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xee>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004800:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	2201      	movs	r2, #1
 8004806:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480a:	4643      	mov	r3, r8
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	680b      	ldr	r3, [r1, #0]
 8004810:	4c10      	ldr	r4, [pc, #64]	; (8004854 <UART_WaitOnFlagUntilTimeout+0xfc>)
 8004812:	4023      	ands	r3, r4
 8004814:	600b      	str	r3, [r1, #0]
 8004816:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004822:	4643      	mov	r3, r8
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	688b      	ldr	r3, [r1, #8]
 8004828:	4393      	bics	r3, r2
 800482a:	608b      	str	r3, [r1, #8]
 800482c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8004830:	2320      	movs	r3, #32
 8004832:	4642      	mov	r2, r8
 8004834:	6793      	str	r3, [r2, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004836:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8004838:	3354      	adds	r3, #84	; 0x54
 800483a:	2200      	movs	r2, #0
 800483c:	4641      	mov	r1, r8
 800483e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8004840:	2003      	movs	r0, #3
 8004842:	e000      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xee>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2000      	movs	r0, #0
}
 8004846:	bcf0      	pop	{r4, r5, r6, r7}
 8004848:	46bb      	mov	fp, r7
 800484a:	46b2      	mov	sl, r6
 800484c:	46a9      	mov	r9, r5
 800484e:	46a0      	mov	r8, r4
 8004850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	fffffe5f 	.word	0xfffffe5f

08004858 <UART_CheckIdleState>:
{
 8004858:	b530      	push	{r4, r5, lr}
 800485a:	b083      	sub	sp, #12
 800485c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	2200      	movs	r2, #0
 8004862:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8004864:	f7fd fe94 	bl	8002590 <HAL_GetTick>
 8004868:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	0713      	lsls	r3, r2, #28
 8004870:	d40d      	bmi.n	800488e <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	075b      	lsls	r3, r3, #29
 8004878:	d416      	bmi.n	80048a8 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800487a:	2320      	movs	r3, #32
 800487c:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800487e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	2300      	movs	r3, #0
 8004882:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8004884:	2274      	movs	r2, #116	; 0x74
 8004886:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004888:	2000      	movs	r0, #0
}
 800488a:	b003      	add	sp, #12
 800488c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <UART_CheckIdleState+0x6c>)
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	0003      	movs	r3, r0
 8004896:	2200      	movs	r2, #0
 8004898:	0389      	lsls	r1, r1, #14
 800489a:	0020      	movs	r0, r4
 800489c:	f7ff ff5c 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d0e6      	beq.n	8004872 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80048a4:	2003      	movs	r0, #3
 80048a6:	e7f0      	b.n	800488a <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <UART_CheckIdleState+0x6c>)
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	002b      	movs	r3, r5
 80048b0:	2200      	movs	r2, #0
 80048b2:	03c9      	lsls	r1, r1, #15
 80048b4:	0020      	movs	r0, r4
 80048b6:	f7ff ff4f 	bl	8004758 <UART_WaitOnFlagUntilTimeout>
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d0dd      	beq.n	800487a <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 80048be:	2003      	movs	r0, #3
 80048c0:	e7e3      	b.n	800488a <UART_CheckIdleState+0x32>
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	01ffffff 	.word	0x01ffffff

080048c8 <HAL_UART_Init>:
{
 80048c8:	b510      	push	{r4, lr}
 80048ca:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80048cc:	d02e      	beq.n	800492c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d021      	beq.n	8004918 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	2324      	movs	r3, #36	; 0x24
 80048d6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	6813      	ldr	r3, [r2, #0]
 80048dc:	2101      	movs	r1, #1
 80048de:	438b      	bics	r3, r1
 80048e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e2:	0020      	movs	r0, r4
 80048e4:	f7ff fd6e 	bl	80043c4 <UART_SetConfig>
 80048e8:	2801      	cmp	r0, #1
 80048ea:	d014      	beq.n	8004916 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d118      	bne.n	8004924 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	6853      	ldr	r3, [r2, #4]
 80048f6:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_UART_Init+0x68>)
 80048f8:	400b      	ands	r3, r1
 80048fa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fc:	6822      	ldr	r2, [r4, #0]
 80048fe:	6893      	ldr	r3, [r2, #8]
 8004900:	212a      	movs	r1, #42	; 0x2a
 8004902:	438b      	bics	r3, r1
 8004904:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004906:	6822      	ldr	r2, [r4, #0]
 8004908:	6813      	ldr	r3, [r2, #0]
 800490a:	3929      	subs	r1, #41	; 0x29
 800490c:	430b      	orrs	r3, r1
 800490e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004910:	0020      	movs	r0, r4
 8004912:	f7ff ffa1 	bl	8004858 <UART_CheckIdleState>
}
 8004916:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004918:	3374      	adds	r3, #116	; 0x74
 800491a:	2200      	movs	r2, #0
 800491c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800491e:	f7fd fd99 	bl	8002454 <HAL_UART_MspInit>
 8004922:	e7d7      	b.n	80048d4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004924:	0020      	movs	r0, r4
 8004926:	f7ff fea7 	bl	8004678 <UART_AdvFeatureConfig>
 800492a:	e7e2      	b.n	80048f2 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
 800492e:	e7f2      	b.n	8004916 <HAL_UART_Init+0x4e>
 8004930:	ffffb7ff 	.word	0xffffb7ff

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	; (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	20000020 	.word	0x20000020

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	2600      	movs	r6, #0
 8004944:	4d0c      	ldr	r5, [pc, #48]	; (8004978 <__libc_init_array+0x38>)
 8004946:	4c0d      	ldr	r4, [pc, #52]	; (800497c <__libc_init_array+0x3c>)
 8004948:	1b64      	subs	r4, r4, r5
 800494a:	10a4      	asrs	r4, r4, #2
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	2600      	movs	r6, #0
 8004952:	f000 fc8b 	bl	800526c <_init>
 8004956:	4d0a      	ldr	r5, [pc, #40]	; (8004980 <__libc_init_array+0x40>)
 8004958:	4c0a      	ldr	r4, [pc, #40]	; (8004984 <__libc_init_array+0x44>)
 800495a:	1b64      	subs	r4, r4, r5
 800495c:	10a4      	asrs	r4, r4, #2
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	00b3      	lsls	r3, r6, #2
 8004966:	58eb      	ldr	r3, [r5, r3]
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	00b3      	lsls	r3, r6, #2
 8004970:	58eb      	ldr	r3, [r5, r3]
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08007f60 	.word	0x08007f60
 800497c:	08007f60 	.word	0x08007f60
 8004980:	08007f60 	.word	0x08007f60
 8004984:	08007f64 	.word	0x08007f64

08004988 <memcpy>:
 8004988:	2300      	movs	r3, #0
 800498a:	b510      	push	{r4, lr}
 800498c:	429a      	cmp	r2, r3
 800498e:	d100      	bne.n	8004992 <memcpy+0xa>
 8004990:	bd10      	pop	{r4, pc}
 8004992:	5ccc      	ldrb	r4, [r1, r3]
 8004994:	54c4      	strb	r4, [r0, r3]
 8004996:	3301      	adds	r3, #1
 8004998:	e7f8      	b.n	800498c <memcpy+0x4>

0800499a <memset>:
 800499a:	0003      	movs	r3, r0
 800499c:	1882      	adds	r2, r0, r2
 800499e:	4293      	cmp	r3, r2
 80049a0:	d100      	bne.n	80049a4 <memset+0xa>
 80049a2:	4770      	bx	lr
 80049a4:	7019      	strb	r1, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	e7f9      	b.n	800499e <memset+0x4>
	...

080049ac <siprintf>:
 80049ac:	b40e      	push	{r1, r2, r3}
 80049ae:	b500      	push	{lr}
 80049b0:	490b      	ldr	r1, [pc, #44]	; (80049e0 <siprintf+0x34>)
 80049b2:	b09c      	sub	sp, #112	; 0x70
 80049b4:	ab1d      	add	r3, sp, #116	; 0x74
 80049b6:	9002      	str	r0, [sp, #8]
 80049b8:	9006      	str	r0, [sp, #24]
 80049ba:	9107      	str	r1, [sp, #28]
 80049bc:	9104      	str	r1, [sp, #16]
 80049be:	4809      	ldr	r0, [pc, #36]	; (80049e4 <siprintf+0x38>)
 80049c0:	4909      	ldr	r1, [pc, #36]	; (80049e8 <siprintf+0x3c>)
 80049c2:	cb04      	ldmia	r3!, {r2}
 80049c4:	9105      	str	r1, [sp, #20]
 80049c6:	6800      	ldr	r0, [r0, #0]
 80049c8:	a902      	add	r1, sp, #8
 80049ca:	9301      	str	r3, [sp, #4]
 80049cc:	f000 f870 	bl	8004ab0 <_svfiprintf_r>
 80049d0:	2300      	movs	r3, #0
 80049d2:	9a02      	ldr	r2, [sp, #8]
 80049d4:	7013      	strb	r3, [r2, #0]
 80049d6:	b01c      	add	sp, #112	; 0x70
 80049d8:	bc08      	pop	{r3}
 80049da:	b003      	add	sp, #12
 80049dc:	4718      	bx	r3
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	7fffffff 	.word	0x7fffffff
 80049e4:	20000020 	.word	0x20000020
 80049e8:	ffff0208 	.word	0xffff0208

080049ec <__ssputs_r>:
 80049ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ee:	688e      	ldr	r6, [r1, #8]
 80049f0:	b085      	sub	sp, #20
 80049f2:	0007      	movs	r7, r0
 80049f4:	000c      	movs	r4, r1
 80049f6:	9203      	str	r2, [sp, #12]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	429e      	cmp	r6, r3
 80049fc:	d83c      	bhi.n	8004a78 <__ssputs_r+0x8c>
 80049fe:	2390      	movs	r3, #144	; 0x90
 8004a00:	898a      	ldrh	r2, [r1, #12]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	421a      	tst	r2, r3
 8004a06:	d034      	beq.n	8004a72 <__ssputs_r+0x86>
 8004a08:	6909      	ldr	r1, [r1, #16]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	6960      	ldr	r0, [r4, #20]
 8004a0e:	1a5b      	subs	r3, r3, r1
 8004a10:	9302      	str	r3, [sp, #8]
 8004a12:	2303      	movs	r3, #3
 8004a14:	4343      	muls	r3, r0
 8004a16:	0fdd      	lsrs	r5, r3, #31
 8004a18:	18ed      	adds	r5, r5, r3
 8004a1a:	9b01      	ldr	r3, [sp, #4]
 8004a1c:	9802      	ldr	r0, [sp, #8]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	181b      	adds	r3, r3, r0
 8004a22:	106d      	asrs	r5, r5, #1
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	d900      	bls.n	8004a2a <__ssputs_r+0x3e>
 8004a28:	001d      	movs	r5, r3
 8004a2a:	0553      	lsls	r3, r2, #21
 8004a2c:	d532      	bpl.n	8004a94 <__ssputs_r+0xa8>
 8004a2e:	0029      	movs	r1, r5
 8004a30:	0038      	movs	r0, r7
 8004a32:	f000 fb49 	bl	80050c8 <_malloc_r>
 8004a36:	1e06      	subs	r6, r0, #0
 8004a38:	d109      	bne.n	8004a4e <__ssputs_r+0x62>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	2340      	movs	r3, #64	; 0x40
 8004a40:	2001      	movs	r0, #1
 8004a42:	89a2      	ldrh	r2, [r4, #12]
 8004a44:	4240      	negs	r0, r0
 8004a46:	4313      	orrs	r3, r2
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	b005      	add	sp, #20
 8004a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a4e:	9a02      	ldr	r2, [sp, #8]
 8004a50:	6921      	ldr	r1, [r4, #16]
 8004a52:	f7ff ff99 	bl	8004988 <memcpy>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <__ssputs_r+0xc0>)
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	9b02      	ldr	r3, [sp, #8]
 8004a64:	6126      	str	r6, [r4, #16]
 8004a66:	18f6      	adds	r6, r6, r3
 8004a68:	6026      	str	r6, [r4, #0]
 8004a6a:	6165      	str	r5, [r4, #20]
 8004a6c:	9e01      	ldr	r6, [sp, #4]
 8004a6e:	1aed      	subs	r5, r5, r3
 8004a70:	60a5      	str	r5, [r4, #8]
 8004a72:	9b01      	ldr	r3, [sp, #4]
 8004a74:	429e      	cmp	r6, r3
 8004a76:	d900      	bls.n	8004a7a <__ssputs_r+0x8e>
 8004a78:	9e01      	ldr	r6, [sp, #4]
 8004a7a:	0032      	movs	r2, r6
 8004a7c:	9903      	ldr	r1, [sp, #12]
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	f000 faa3 	bl	8004fca <memmove>
 8004a84:	68a3      	ldr	r3, [r4, #8]
 8004a86:	2000      	movs	r0, #0
 8004a88:	1b9b      	subs	r3, r3, r6
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	199e      	adds	r6, r3, r6
 8004a90:	6026      	str	r6, [r4, #0]
 8004a92:	e7da      	b.n	8004a4a <__ssputs_r+0x5e>
 8004a94:	002a      	movs	r2, r5
 8004a96:	0038      	movs	r0, r7
 8004a98:	f000 fb8c 	bl	80051b4 <_realloc_r>
 8004a9c:	1e06      	subs	r6, r0, #0
 8004a9e:	d1e0      	bne.n	8004a62 <__ssputs_r+0x76>
 8004aa0:	0038      	movs	r0, r7
 8004aa2:	6921      	ldr	r1, [r4, #16]
 8004aa4:	f000 faa4 	bl	8004ff0 <_free_r>
 8004aa8:	e7c7      	b.n	8004a3a <__ssputs_r+0x4e>
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	fffffb7f 	.word	0xfffffb7f

08004ab0 <_svfiprintf_r>:
 8004ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab2:	b0a1      	sub	sp, #132	; 0x84
 8004ab4:	9003      	str	r0, [sp, #12]
 8004ab6:	001d      	movs	r5, r3
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	000f      	movs	r7, r1
 8004abc:	0016      	movs	r6, r2
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	d511      	bpl.n	8004ae6 <_svfiprintf_r+0x36>
 8004ac2:	690b      	ldr	r3, [r1, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10e      	bne.n	8004ae6 <_svfiprintf_r+0x36>
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	f000 fafd 	bl	80050c8 <_malloc_r>
 8004ace:	6038      	str	r0, [r7, #0]
 8004ad0:	6138      	str	r0, [r7, #16]
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d105      	bne.n	8004ae2 <_svfiprintf_r+0x32>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	9a03      	ldr	r2, [sp, #12]
 8004ada:	3801      	subs	r0, #1
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	b021      	add	sp, #132	; 0x84
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	ac08      	add	r4, sp, #32
 8004aea:	6163      	str	r3, [r4, #20]
 8004aec:	3320      	adds	r3, #32
 8004aee:	7663      	strb	r3, [r4, #25]
 8004af0:	3310      	adds	r3, #16
 8004af2:	76a3      	strb	r3, [r4, #26]
 8004af4:	9507      	str	r5, [sp, #28]
 8004af6:	0035      	movs	r5, r6
 8004af8:	782b      	ldrb	r3, [r5, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <_svfiprintf_r+0x52>
 8004afe:	2b25      	cmp	r3, #37	; 0x25
 8004b00:	d147      	bne.n	8004b92 <_svfiprintf_r+0xe2>
 8004b02:	1bab      	subs	r3, r5, r6
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	42b5      	cmp	r5, r6
 8004b08:	d00c      	beq.n	8004b24 <_svfiprintf_r+0x74>
 8004b0a:	0032      	movs	r2, r6
 8004b0c:	0039      	movs	r1, r7
 8004b0e:	9803      	ldr	r0, [sp, #12]
 8004b10:	f7ff ff6c 	bl	80049ec <__ssputs_r>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d100      	bne.n	8004b1a <_svfiprintf_r+0x6a>
 8004b18:	e0ae      	b.n	8004c78 <_svfiprintf_r+0x1c8>
 8004b1a:	6962      	ldr	r2, [r4, #20]
 8004b1c:	9b05      	ldr	r3, [sp, #20]
 8004b1e:	4694      	mov	ip, r2
 8004b20:	4463      	add	r3, ip
 8004b22:	6163      	str	r3, [r4, #20]
 8004b24:	782b      	ldrb	r3, [r5, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d100      	bne.n	8004b2c <_svfiprintf_r+0x7c>
 8004b2a:	e0a5      	b.n	8004c78 <_svfiprintf_r+0x1c8>
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	2300      	movs	r3, #0
 8004b30:	4252      	negs	r2, r2
 8004b32:	6062      	str	r2, [r4, #4]
 8004b34:	a904      	add	r1, sp, #16
 8004b36:	3254      	adds	r2, #84	; 0x54
 8004b38:	1852      	adds	r2, r2, r1
 8004b3a:	1c6e      	adds	r6, r5, #1
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	60e3      	str	r3, [r4, #12]
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	7013      	strb	r3, [r2, #0]
 8004b44:	65a3      	str	r3, [r4, #88]	; 0x58
 8004b46:	2205      	movs	r2, #5
 8004b48:	7831      	ldrb	r1, [r6, #0]
 8004b4a:	4854      	ldr	r0, [pc, #336]	; (8004c9c <_svfiprintf_r+0x1ec>)
 8004b4c:	f000 fa32 	bl	8004fb4 <memchr>
 8004b50:	1c75      	adds	r5, r6, #1
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d11f      	bne.n	8004b96 <_svfiprintf_r+0xe6>
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	06d3      	lsls	r3, r2, #27
 8004b5a:	d504      	bpl.n	8004b66 <_svfiprintf_r+0xb6>
 8004b5c:	2353      	movs	r3, #83	; 0x53
 8004b5e:	a904      	add	r1, sp, #16
 8004b60:	185b      	adds	r3, r3, r1
 8004b62:	2120      	movs	r1, #32
 8004b64:	7019      	strb	r1, [r3, #0]
 8004b66:	0713      	lsls	r3, r2, #28
 8004b68:	d504      	bpl.n	8004b74 <_svfiprintf_r+0xc4>
 8004b6a:	2353      	movs	r3, #83	; 0x53
 8004b6c:	a904      	add	r1, sp, #16
 8004b6e:	185b      	adds	r3, r3, r1
 8004b70:	212b      	movs	r1, #43	; 0x2b
 8004b72:	7019      	strb	r1, [r3, #0]
 8004b74:	7833      	ldrb	r3, [r6, #0]
 8004b76:	2b2a      	cmp	r3, #42	; 0x2a
 8004b78:	d016      	beq.n	8004ba8 <_svfiprintf_r+0xf8>
 8004b7a:	0035      	movs	r5, r6
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	200a      	movs	r0, #10
 8004b80:	68e3      	ldr	r3, [r4, #12]
 8004b82:	782a      	ldrb	r2, [r5, #0]
 8004b84:	1c6e      	adds	r6, r5, #1
 8004b86:	3a30      	subs	r2, #48	; 0x30
 8004b88:	2a09      	cmp	r2, #9
 8004b8a:	d94e      	bls.n	8004c2a <_svfiprintf_r+0x17a>
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	d111      	bne.n	8004bb4 <_svfiprintf_r+0x104>
 8004b90:	e017      	b.n	8004bc2 <_svfiprintf_r+0x112>
 8004b92:	3501      	adds	r5, #1
 8004b94:	e7b0      	b.n	8004af8 <_svfiprintf_r+0x48>
 8004b96:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <_svfiprintf_r+0x1ec>)
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	1ac0      	subs	r0, r0, r3
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	4083      	lsls	r3, r0
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	002e      	movs	r6, r5
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	e7ce      	b.n	8004b46 <_svfiprintf_r+0x96>
 8004ba8:	9b07      	ldr	r3, [sp, #28]
 8004baa:	1d19      	adds	r1, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	9107      	str	r1, [sp, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	db01      	blt.n	8004bb8 <_svfiprintf_r+0x108>
 8004bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bb6:	e004      	b.n	8004bc2 <_svfiprintf_r+0x112>
 8004bb8:	425b      	negs	r3, r3
 8004bba:	60e3      	str	r3, [r4, #12]
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	782b      	ldrb	r3, [r5, #0]
 8004bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc6:	d10a      	bne.n	8004bde <_svfiprintf_r+0x12e>
 8004bc8:	786b      	ldrb	r3, [r5, #1]
 8004bca:	2b2a      	cmp	r3, #42	; 0x2a
 8004bcc:	d135      	bne.n	8004c3a <_svfiprintf_r+0x18a>
 8004bce:	9b07      	ldr	r3, [sp, #28]
 8004bd0:	3502      	adds	r5, #2
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	9207      	str	r2, [sp, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db2b      	blt.n	8004c34 <_svfiprintf_r+0x184>
 8004bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8004bde:	4e30      	ldr	r6, [pc, #192]	; (8004ca0 <_svfiprintf_r+0x1f0>)
 8004be0:	2203      	movs	r2, #3
 8004be2:	0030      	movs	r0, r6
 8004be4:	7829      	ldrb	r1, [r5, #0]
 8004be6:	f000 f9e5 	bl	8004fb4 <memchr>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d006      	beq.n	8004bfc <_svfiprintf_r+0x14c>
 8004bee:	2340      	movs	r3, #64	; 0x40
 8004bf0:	1b80      	subs	r0, r0, r6
 8004bf2:	4083      	lsls	r3, r0
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	3501      	adds	r5, #1
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	6023      	str	r3, [r4, #0]
 8004bfc:	7829      	ldrb	r1, [r5, #0]
 8004bfe:	2206      	movs	r2, #6
 8004c00:	4828      	ldr	r0, [pc, #160]	; (8004ca4 <_svfiprintf_r+0x1f4>)
 8004c02:	1c6e      	adds	r6, r5, #1
 8004c04:	7621      	strb	r1, [r4, #24]
 8004c06:	f000 f9d5 	bl	8004fb4 <memchr>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d03c      	beq.n	8004c88 <_svfiprintf_r+0x1d8>
 8004c0e:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <_svfiprintf_r+0x1f8>)
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d125      	bne.n	8004c60 <_svfiprintf_r+0x1b0>
 8004c14:	2207      	movs	r2, #7
 8004c16:	9b07      	ldr	r3, [sp, #28]
 8004c18:	3307      	adds	r3, #7
 8004c1a:	4393      	bics	r3, r2
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	9307      	str	r3, [sp, #28]
 8004c20:	6963      	ldr	r3, [r4, #20]
 8004c22:	9a04      	ldr	r2, [sp, #16]
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	6163      	str	r3, [r4, #20]
 8004c28:	e765      	b.n	8004af6 <_svfiprintf_r+0x46>
 8004c2a:	4343      	muls	r3, r0
 8004c2c:	0035      	movs	r5, r6
 8004c2e:	2101      	movs	r1, #1
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	e7a6      	b.n	8004b82 <_svfiprintf_r+0xd2>
 8004c34:	2301      	movs	r3, #1
 8004c36:	425b      	negs	r3, r3
 8004c38:	e7d0      	b.n	8004bdc <_svfiprintf_r+0x12c>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	001a      	movs	r2, r3
 8004c40:	3501      	adds	r5, #1
 8004c42:	6063      	str	r3, [r4, #4]
 8004c44:	7829      	ldrb	r1, [r5, #0]
 8004c46:	1c6e      	adds	r6, r5, #1
 8004c48:	3930      	subs	r1, #48	; 0x30
 8004c4a:	2909      	cmp	r1, #9
 8004c4c:	d903      	bls.n	8004c56 <_svfiprintf_r+0x1a6>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0c5      	beq.n	8004bde <_svfiprintf_r+0x12e>
 8004c52:	9209      	str	r2, [sp, #36]	; 0x24
 8004c54:	e7c3      	b.n	8004bde <_svfiprintf_r+0x12e>
 8004c56:	4342      	muls	r2, r0
 8004c58:	0035      	movs	r5, r6
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	1852      	adds	r2, r2, r1
 8004c5e:	e7f1      	b.n	8004c44 <_svfiprintf_r+0x194>
 8004c60:	ab07      	add	r3, sp, #28
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	003a      	movs	r2, r7
 8004c66:	0021      	movs	r1, r4
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <_svfiprintf_r+0x1fc>)
 8004c6a:	9803      	ldr	r0, [sp, #12]
 8004c6c:	e000      	b.n	8004c70 <_svfiprintf_r+0x1c0>
 8004c6e:	bf00      	nop
 8004c70:	9004      	str	r0, [sp, #16]
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	3301      	adds	r3, #1
 8004c76:	d1d3      	bne.n	8004c20 <_svfiprintf_r+0x170>
 8004c78:	89bb      	ldrh	r3, [r7, #12]
 8004c7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c7c:	065b      	lsls	r3, r3, #25
 8004c7e:	d400      	bmi.n	8004c82 <_svfiprintf_r+0x1d2>
 8004c80:	e72d      	b.n	8004ade <_svfiprintf_r+0x2e>
 8004c82:	2001      	movs	r0, #1
 8004c84:	4240      	negs	r0, r0
 8004c86:	e72a      	b.n	8004ade <_svfiprintf_r+0x2e>
 8004c88:	ab07      	add	r3, sp, #28
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	003a      	movs	r2, r7
 8004c8e:	0021      	movs	r1, r4
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <_svfiprintf_r+0x1fc>)
 8004c92:	9803      	ldr	r0, [sp, #12]
 8004c94:	f000 f87c 	bl	8004d90 <_printf_i>
 8004c98:	e7ea      	b.n	8004c70 <_svfiprintf_r+0x1c0>
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	08007f24 	.word	0x08007f24
 8004ca0:	08007f2a 	.word	0x08007f2a
 8004ca4:	08007f2e 	.word	0x08007f2e
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	080049ed 	.word	0x080049ed

08004cb0 <_printf_common>:
 8004cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cb2:	0015      	movs	r5, r2
 8004cb4:	9301      	str	r3, [sp, #4]
 8004cb6:	688a      	ldr	r2, [r1, #8]
 8004cb8:	690b      	ldr	r3, [r1, #16]
 8004cba:	000c      	movs	r4, r1
 8004cbc:	9000      	str	r0, [sp, #0]
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	da00      	bge.n	8004cc4 <_printf_common+0x14>
 8004cc2:	0013      	movs	r3, r2
 8004cc4:	0022      	movs	r2, r4
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	3243      	adds	r2, #67	; 0x43
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	2a00      	cmp	r2, #0
 8004cce:	d001      	beq.n	8004cd4 <_printf_common+0x24>
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	d502      	bpl.n	8004ce0 <_printf_common+0x30>
 8004cda:	682b      	ldr	r3, [r5, #0]
 8004cdc:	3302      	adds	r3, #2
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	2306      	movs	r3, #6
 8004ce4:	0017      	movs	r7, r2
 8004ce6:	401f      	ands	r7, r3
 8004ce8:	421a      	tst	r2, r3
 8004cea:	d027      	beq.n	8004d3c <_printf_common+0x8c>
 8004cec:	0023      	movs	r3, r4
 8004cee:	3343      	adds	r3, #67	; 0x43
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	1e5a      	subs	r2, r3, #1
 8004cf4:	4193      	sbcs	r3, r2
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	0692      	lsls	r2, r2, #26
 8004cfa:	d430      	bmi.n	8004d5e <_printf_common+0xae>
 8004cfc:	0022      	movs	r2, r4
 8004cfe:	9901      	ldr	r1, [sp, #4]
 8004d00:	9800      	ldr	r0, [sp, #0]
 8004d02:	9e08      	ldr	r6, [sp, #32]
 8004d04:	3243      	adds	r2, #67	; 0x43
 8004d06:	47b0      	blx	r6
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d025      	beq.n	8004d58 <_printf_common+0xa8>
 8004d0c:	2306      	movs	r3, #6
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	682a      	ldr	r2, [r5, #0]
 8004d12:	68e1      	ldr	r1, [r4, #12]
 8004d14:	2500      	movs	r5, #0
 8004d16:	4003      	ands	r3, r0
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d103      	bne.n	8004d24 <_printf_common+0x74>
 8004d1c:	1a8d      	subs	r5, r1, r2
 8004d1e:	43eb      	mvns	r3, r5
 8004d20:	17db      	asrs	r3, r3, #31
 8004d22:	401d      	ands	r5, r3
 8004d24:	68a3      	ldr	r3, [r4, #8]
 8004d26:	6922      	ldr	r2, [r4, #16]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	dd01      	ble.n	8004d30 <_printf_common+0x80>
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	18ed      	adds	r5, r5, r3
 8004d30:	2700      	movs	r7, #0
 8004d32:	42bd      	cmp	r5, r7
 8004d34:	d120      	bne.n	8004d78 <_printf_common+0xc8>
 8004d36:	2000      	movs	r0, #0
 8004d38:	e010      	b.n	8004d5c <_printf_common+0xac>
 8004d3a:	3701      	adds	r7, #1
 8004d3c:	68e3      	ldr	r3, [r4, #12]
 8004d3e:	682a      	ldr	r2, [r5, #0]
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	42bb      	cmp	r3, r7
 8004d44:	ddd2      	ble.n	8004cec <_printf_common+0x3c>
 8004d46:	0022      	movs	r2, r4
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9901      	ldr	r1, [sp, #4]
 8004d4c:	9800      	ldr	r0, [sp, #0]
 8004d4e:	9e08      	ldr	r6, [sp, #32]
 8004d50:	3219      	adds	r2, #25
 8004d52:	47b0      	blx	r6
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d1f0      	bne.n	8004d3a <_printf_common+0x8a>
 8004d58:	2001      	movs	r0, #1
 8004d5a:	4240      	negs	r0, r0
 8004d5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d5e:	2030      	movs	r0, #48	; 0x30
 8004d60:	18e1      	adds	r1, r4, r3
 8004d62:	3143      	adds	r1, #67	; 0x43
 8004d64:	7008      	strb	r0, [r1, #0]
 8004d66:	0021      	movs	r1, r4
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	3145      	adds	r1, #69	; 0x45
 8004d6c:	7809      	ldrb	r1, [r1, #0]
 8004d6e:	18a2      	adds	r2, r4, r2
 8004d70:	3243      	adds	r2, #67	; 0x43
 8004d72:	3302      	adds	r3, #2
 8004d74:	7011      	strb	r1, [r2, #0]
 8004d76:	e7c1      	b.n	8004cfc <_printf_common+0x4c>
 8004d78:	0022      	movs	r2, r4
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	9901      	ldr	r1, [sp, #4]
 8004d7e:	9800      	ldr	r0, [sp, #0]
 8004d80:	9e08      	ldr	r6, [sp, #32]
 8004d82:	321a      	adds	r2, #26
 8004d84:	47b0      	blx	r6
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	d0e6      	beq.n	8004d58 <_printf_common+0xa8>
 8004d8a:	3701      	adds	r7, #1
 8004d8c:	e7d1      	b.n	8004d32 <_printf_common+0x82>
	...

08004d90 <_printf_i>:
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d92:	b08b      	sub	sp, #44	; 0x2c
 8004d94:	9206      	str	r2, [sp, #24]
 8004d96:	000a      	movs	r2, r1
 8004d98:	3243      	adds	r2, #67	; 0x43
 8004d9a:	9307      	str	r3, [sp, #28]
 8004d9c:	9005      	str	r0, [sp, #20]
 8004d9e:	9204      	str	r2, [sp, #16]
 8004da0:	7e0a      	ldrb	r2, [r1, #24]
 8004da2:	000c      	movs	r4, r1
 8004da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004da6:	2a78      	cmp	r2, #120	; 0x78
 8004da8:	d807      	bhi.n	8004dba <_printf_i+0x2a>
 8004daa:	2a62      	cmp	r2, #98	; 0x62
 8004dac:	d809      	bhi.n	8004dc2 <_printf_i+0x32>
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d100      	bne.n	8004db4 <_printf_i+0x24>
 8004db2:	e0c1      	b.n	8004f38 <_printf_i+0x1a8>
 8004db4:	2a58      	cmp	r2, #88	; 0x58
 8004db6:	d100      	bne.n	8004dba <_printf_i+0x2a>
 8004db8:	e08c      	b.n	8004ed4 <_printf_i+0x144>
 8004dba:	0026      	movs	r6, r4
 8004dbc:	3642      	adds	r6, #66	; 0x42
 8004dbe:	7032      	strb	r2, [r6, #0]
 8004dc0:	e022      	b.n	8004e08 <_printf_i+0x78>
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	3863      	subs	r0, #99	; 0x63
 8004dc6:	2815      	cmp	r0, #21
 8004dc8:	d8f7      	bhi.n	8004dba <_printf_i+0x2a>
 8004dca:	f7fb f99d 	bl	8000108 <__gnu_thumb1_case_shi>
 8004dce:	0016      	.short	0x0016
 8004dd0:	fff6001f 	.word	0xfff6001f
 8004dd4:	fff6fff6 	.word	0xfff6fff6
 8004dd8:	001ffff6 	.word	0x001ffff6
 8004ddc:	fff6fff6 	.word	0xfff6fff6
 8004de0:	fff6fff6 	.word	0xfff6fff6
 8004de4:	003600a8 	.word	0x003600a8
 8004de8:	fff6009a 	.word	0xfff6009a
 8004dec:	00b9fff6 	.word	0x00b9fff6
 8004df0:	0036fff6 	.word	0x0036fff6
 8004df4:	fff6fff6 	.word	0xfff6fff6
 8004df8:	009e      	.short	0x009e
 8004dfa:	0026      	movs	r6, r4
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	3642      	adds	r6, #66	; 0x42
 8004e00:	1d11      	adds	r1, r2, #4
 8004e02:	6019      	str	r1, [r3, #0]
 8004e04:	6813      	ldr	r3, [r2, #0]
 8004e06:	7033      	strb	r3, [r6, #0]
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0a7      	b.n	8004f5c <_printf_i+0x1cc>
 8004e0c:	6808      	ldr	r0, [r1, #0]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	1d0a      	adds	r2, r1, #4
 8004e12:	0605      	lsls	r5, r0, #24
 8004e14:	d50b      	bpl.n	8004e2e <_printf_i+0x9e>
 8004e16:	680d      	ldr	r5, [r1, #0]
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	da03      	bge.n	8004e26 <_printf_i+0x96>
 8004e1e:	232d      	movs	r3, #45	; 0x2d
 8004e20:	9a04      	ldr	r2, [sp, #16]
 8004e22:	426d      	negs	r5, r5
 8004e24:	7013      	strb	r3, [r2, #0]
 8004e26:	4b61      	ldr	r3, [pc, #388]	; (8004fac <_printf_i+0x21c>)
 8004e28:	270a      	movs	r7, #10
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	e01b      	b.n	8004e66 <_printf_i+0xd6>
 8004e2e:	680d      	ldr	r5, [r1, #0]
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	0641      	lsls	r1, r0, #25
 8004e34:	d5f1      	bpl.n	8004e1a <_printf_i+0x8a>
 8004e36:	b22d      	sxth	r5, r5
 8004e38:	e7ef      	b.n	8004e1a <_printf_i+0x8a>
 8004e3a:	680d      	ldr	r5, [r1, #0]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	1d08      	adds	r0, r1, #4
 8004e40:	6018      	str	r0, [r3, #0]
 8004e42:	062e      	lsls	r6, r5, #24
 8004e44:	d501      	bpl.n	8004e4a <_printf_i+0xba>
 8004e46:	680d      	ldr	r5, [r1, #0]
 8004e48:	e003      	b.n	8004e52 <_printf_i+0xc2>
 8004e4a:	066d      	lsls	r5, r5, #25
 8004e4c:	d5fb      	bpl.n	8004e46 <_printf_i+0xb6>
 8004e4e:	680d      	ldr	r5, [r1, #0]
 8004e50:	b2ad      	uxth	r5, r5
 8004e52:	4b56      	ldr	r3, [pc, #344]	; (8004fac <_printf_i+0x21c>)
 8004e54:	2708      	movs	r7, #8
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	2a6f      	cmp	r2, #111	; 0x6f
 8004e5a:	d000      	beq.n	8004e5e <_printf_i+0xce>
 8004e5c:	3702      	adds	r7, #2
 8004e5e:	0023      	movs	r3, r4
 8004e60:	2200      	movs	r2, #0
 8004e62:	3343      	adds	r3, #67	; 0x43
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	60a3      	str	r3, [r4, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db03      	blt.n	8004e76 <_printf_i+0xe6>
 8004e6e:	2204      	movs	r2, #4
 8004e70:	6821      	ldr	r1, [r4, #0]
 8004e72:	4391      	bics	r1, r2
 8004e74:	6021      	str	r1, [r4, #0]
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	d102      	bne.n	8004e80 <_printf_i+0xf0>
 8004e7a:	9e04      	ldr	r6, [sp, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00c      	beq.n	8004e9a <_printf_i+0x10a>
 8004e80:	9e04      	ldr	r6, [sp, #16]
 8004e82:	0028      	movs	r0, r5
 8004e84:	0039      	movs	r1, r7
 8004e86:	f7fb f9cf 	bl	8000228 <__aeabi_uidivmod>
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	3e01      	subs	r6, #1
 8004e8e:	5c5b      	ldrb	r3, [r3, r1]
 8004e90:	7033      	strb	r3, [r6, #0]
 8004e92:	002b      	movs	r3, r5
 8004e94:	0005      	movs	r5, r0
 8004e96:	429f      	cmp	r7, r3
 8004e98:	d9f3      	bls.n	8004e82 <_printf_i+0xf2>
 8004e9a:	2f08      	cmp	r7, #8
 8004e9c:	d109      	bne.n	8004eb2 <_printf_i+0x122>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	07db      	lsls	r3, r3, #31
 8004ea2:	d506      	bpl.n	8004eb2 <_printf_i+0x122>
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6922      	ldr	r2, [r4, #16]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	dc02      	bgt.n	8004eb2 <_printf_i+0x122>
 8004eac:	2330      	movs	r3, #48	; 0x30
 8004eae:	3e01      	subs	r6, #1
 8004eb0:	7033      	strb	r3, [r6, #0]
 8004eb2:	9b04      	ldr	r3, [sp, #16]
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	9b07      	ldr	r3, [sp, #28]
 8004eba:	0021      	movs	r1, r4
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	9805      	ldr	r0, [sp, #20]
 8004ec0:	9b06      	ldr	r3, [sp, #24]
 8004ec2:	aa09      	add	r2, sp, #36	; 0x24
 8004ec4:	f7ff fef4 	bl	8004cb0 <_printf_common>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d14c      	bne.n	8004f66 <_printf_i+0x1d6>
 8004ecc:	2001      	movs	r0, #1
 8004ece:	4240      	negs	r0, r0
 8004ed0:	b00b      	add	sp, #44	; 0x2c
 8004ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ed4:	3145      	adds	r1, #69	; 0x45
 8004ed6:	700a      	strb	r2, [r1, #0]
 8004ed8:	4a34      	ldr	r2, [pc, #208]	; (8004fac <_printf_i+0x21c>)
 8004eda:	9203      	str	r2, [sp, #12]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	6821      	ldr	r1, [r4, #0]
 8004ee0:	ca20      	ldmia	r2!, {r5}
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	0608      	lsls	r0, r1, #24
 8004ee6:	d516      	bpl.n	8004f16 <_printf_i+0x186>
 8004ee8:	07cb      	lsls	r3, r1, #31
 8004eea:	d502      	bpl.n	8004ef2 <_printf_i+0x162>
 8004eec:	2320      	movs	r3, #32
 8004eee:	4319      	orrs	r1, r3
 8004ef0:	6021      	str	r1, [r4, #0]
 8004ef2:	2710      	movs	r7, #16
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	d1b2      	bne.n	8004e5e <_printf_i+0xce>
 8004ef8:	2320      	movs	r3, #32
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	439a      	bics	r2, r3
 8004efe:	6022      	str	r2, [r4, #0]
 8004f00:	e7ad      	b.n	8004e5e <_printf_i+0xce>
 8004f02:	2220      	movs	r2, #32
 8004f04:	6809      	ldr	r1, [r1, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	0022      	movs	r2, r4
 8004f0c:	2178      	movs	r1, #120	; 0x78
 8004f0e:	3245      	adds	r2, #69	; 0x45
 8004f10:	7011      	strb	r1, [r2, #0]
 8004f12:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <_printf_i+0x220>)
 8004f14:	e7e1      	b.n	8004eda <_printf_i+0x14a>
 8004f16:	0648      	lsls	r0, r1, #25
 8004f18:	d5e6      	bpl.n	8004ee8 <_printf_i+0x158>
 8004f1a:	b2ad      	uxth	r5, r5
 8004f1c:	e7e4      	b.n	8004ee8 <_printf_i+0x158>
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	680d      	ldr	r5, [r1, #0]
 8004f22:	1d10      	adds	r0, r2, #4
 8004f24:	6949      	ldr	r1, [r1, #20]
 8004f26:	6018      	str	r0, [r3, #0]
 8004f28:	6813      	ldr	r3, [r2, #0]
 8004f2a:	062e      	lsls	r6, r5, #24
 8004f2c:	d501      	bpl.n	8004f32 <_printf_i+0x1a2>
 8004f2e:	6019      	str	r1, [r3, #0]
 8004f30:	e002      	b.n	8004f38 <_printf_i+0x1a8>
 8004f32:	066d      	lsls	r5, r5, #25
 8004f34:	d5fb      	bpl.n	8004f2e <_printf_i+0x19e>
 8004f36:	8019      	strh	r1, [r3, #0]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9e04      	ldr	r6, [sp, #16]
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	e7bb      	b.n	8004eb8 <_printf_i+0x128>
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	1d11      	adds	r1, r2, #4
 8004f44:	6019      	str	r1, [r3, #0]
 8004f46:	6816      	ldr	r6, [r2, #0]
 8004f48:	2100      	movs	r1, #0
 8004f4a:	0030      	movs	r0, r6
 8004f4c:	6862      	ldr	r2, [r4, #4]
 8004f4e:	f000 f831 	bl	8004fb4 <memchr>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d001      	beq.n	8004f5a <_printf_i+0x1ca>
 8004f56:	1b80      	subs	r0, r0, r6
 8004f58:	6060      	str	r0, [r4, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9a04      	ldr	r2, [sp, #16]
 8004f62:	7013      	strb	r3, [r2, #0]
 8004f64:	e7a8      	b.n	8004eb8 <_printf_i+0x128>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	0032      	movs	r2, r6
 8004f6a:	9906      	ldr	r1, [sp, #24]
 8004f6c:	9805      	ldr	r0, [sp, #20]
 8004f6e:	9d07      	ldr	r5, [sp, #28]
 8004f70:	47a8      	blx	r5
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	d0aa      	beq.n	8004ecc <_printf_i+0x13c>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	079b      	lsls	r3, r3, #30
 8004f7a:	d415      	bmi.n	8004fa8 <_printf_i+0x218>
 8004f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7e:	68e0      	ldr	r0, [r4, #12]
 8004f80:	4298      	cmp	r0, r3
 8004f82:	daa5      	bge.n	8004ed0 <_printf_i+0x140>
 8004f84:	0018      	movs	r0, r3
 8004f86:	e7a3      	b.n	8004ed0 <_printf_i+0x140>
 8004f88:	0022      	movs	r2, r4
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	9906      	ldr	r1, [sp, #24]
 8004f8e:	9805      	ldr	r0, [sp, #20]
 8004f90:	9e07      	ldr	r6, [sp, #28]
 8004f92:	3219      	adds	r2, #25
 8004f94:	47b0      	blx	r6
 8004f96:	1c43      	adds	r3, r0, #1
 8004f98:	d098      	beq.n	8004ecc <_printf_i+0x13c>
 8004f9a:	3501      	adds	r5, #1
 8004f9c:	68e3      	ldr	r3, [r4, #12]
 8004f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	42ab      	cmp	r3, r5
 8004fa4:	dcf0      	bgt.n	8004f88 <_printf_i+0x1f8>
 8004fa6:	e7e9      	b.n	8004f7c <_printf_i+0x1ec>
 8004fa8:	2500      	movs	r5, #0
 8004faa:	e7f7      	b.n	8004f9c <_printf_i+0x20c>
 8004fac:	08007f35 	.word	0x08007f35
 8004fb0:	08007f46 	.word	0x08007f46

08004fb4 <memchr>:
 8004fb4:	b2c9      	uxtb	r1, r1
 8004fb6:	1882      	adds	r2, r0, r2
 8004fb8:	4290      	cmp	r0, r2
 8004fba:	d101      	bne.n	8004fc0 <memchr+0xc>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4770      	bx	lr
 8004fc0:	7803      	ldrb	r3, [r0, #0]
 8004fc2:	428b      	cmp	r3, r1
 8004fc4:	d0fb      	beq.n	8004fbe <memchr+0xa>
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	e7f6      	b.n	8004fb8 <memchr+0x4>

08004fca <memmove>:
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	4288      	cmp	r0, r1
 8004fce:	d902      	bls.n	8004fd6 <memmove+0xc>
 8004fd0:	188b      	adds	r3, r1, r2
 8004fd2:	4298      	cmp	r0, r3
 8004fd4:	d303      	bcc.n	8004fde <memmove+0x14>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e007      	b.n	8004fea <memmove+0x20>
 8004fda:	5c8b      	ldrb	r3, [r1, r2]
 8004fdc:	5483      	strb	r3, [r0, r2]
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	d2fb      	bcs.n	8004fda <memmove+0x10>
 8004fe2:	bd10      	pop	{r4, pc}
 8004fe4:	5ccc      	ldrb	r4, [r1, r3]
 8004fe6:	54c4      	strb	r4, [r0, r3]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d1fa      	bne.n	8004fe4 <memmove+0x1a>
 8004fee:	e7f8      	b.n	8004fe2 <memmove+0x18>

08004ff0 <_free_r>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	0005      	movs	r5, r0
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	d010      	beq.n	800501a <_free_r+0x2a>
 8004ff8:	1f0c      	subs	r4, r1, #4
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da00      	bge.n	8005002 <_free_r+0x12>
 8005000:	18e4      	adds	r4, r4, r3
 8005002:	0028      	movs	r0, r5
 8005004:	f000 f918 	bl	8005238 <__malloc_lock>
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <_free_r+0x90>)
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <_free_r+0x2c>
 8005010:	6063      	str	r3, [r4, #4]
 8005012:	6014      	str	r4, [r2, #0]
 8005014:	0028      	movs	r0, r5
 8005016:	f000 f917 	bl	8005248 <__malloc_unlock>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	42a3      	cmp	r3, r4
 800501e:	d908      	bls.n	8005032 <_free_r+0x42>
 8005020:	6821      	ldr	r1, [r4, #0]
 8005022:	1860      	adds	r0, r4, r1
 8005024:	4283      	cmp	r3, r0
 8005026:	d1f3      	bne.n	8005010 <_free_r+0x20>
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	1841      	adds	r1, r0, r1
 800502e:	6021      	str	r1, [r4, #0]
 8005030:	e7ee      	b.n	8005010 <_free_r+0x20>
 8005032:	001a      	movs	r2, r3
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <_free_r+0x4e>
 800503a:	42a3      	cmp	r3, r4
 800503c:	d9f9      	bls.n	8005032 <_free_r+0x42>
 800503e:	6811      	ldr	r1, [r2, #0]
 8005040:	1850      	adds	r0, r2, r1
 8005042:	42a0      	cmp	r0, r4
 8005044:	d10b      	bne.n	800505e <_free_r+0x6e>
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1809      	adds	r1, r1, r0
 800504a:	1850      	adds	r0, r2, r1
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	4283      	cmp	r3, r0
 8005050:	d1e0      	bne.n	8005014 <_free_r+0x24>
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	1841      	adds	r1, r0, r1
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	6053      	str	r3, [r2, #4]
 800505c:	e7da      	b.n	8005014 <_free_r+0x24>
 800505e:	42a0      	cmp	r0, r4
 8005060:	d902      	bls.n	8005068 <_free_r+0x78>
 8005062:	230c      	movs	r3, #12
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	e7d5      	b.n	8005014 <_free_r+0x24>
 8005068:	6821      	ldr	r1, [r4, #0]
 800506a:	1860      	adds	r0, r4, r1
 800506c:	4283      	cmp	r3, r0
 800506e:	d103      	bne.n	8005078 <_free_r+0x88>
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	1841      	adds	r1, r0, r1
 8005076:	6021      	str	r1, [r4, #0]
 8005078:	6063      	str	r3, [r4, #4]
 800507a:	6054      	str	r4, [r2, #4]
 800507c:	e7ca      	b.n	8005014 <_free_r+0x24>
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	20000808 	.word	0x20000808

08005084 <sbrk_aligned>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4e0f      	ldr	r6, [pc, #60]	; (80050c4 <sbrk_aligned+0x40>)
 8005088:	000d      	movs	r5, r1
 800508a:	6831      	ldr	r1, [r6, #0]
 800508c:	0004      	movs	r4, r0
 800508e:	2900      	cmp	r1, #0
 8005090:	d102      	bne.n	8005098 <sbrk_aligned+0x14>
 8005092:	f000 f8bf 	bl	8005214 <_sbrk_r>
 8005096:	6030      	str	r0, [r6, #0]
 8005098:	0029      	movs	r1, r5
 800509a:	0020      	movs	r0, r4
 800509c:	f000 f8ba 	bl	8005214 <_sbrk_r>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d00a      	beq.n	80050ba <sbrk_aligned+0x36>
 80050a4:	2303      	movs	r3, #3
 80050a6:	1cc5      	adds	r5, r0, #3
 80050a8:	439d      	bics	r5, r3
 80050aa:	42a8      	cmp	r0, r5
 80050ac:	d007      	beq.n	80050be <sbrk_aligned+0x3a>
 80050ae:	1a29      	subs	r1, r5, r0
 80050b0:	0020      	movs	r0, r4
 80050b2:	f000 f8af 	bl	8005214 <_sbrk_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d101      	bne.n	80050be <sbrk_aligned+0x3a>
 80050ba:	2501      	movs	r5, #1
 80050bc:	426d      	negs	r5, r5
 80050be:	0028      	movs	r0, r5
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	2000080c 	.word	0x2000080c

080050c8 <_malloc_r>:
 80050c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ca:	2203      	movs	r2, #3
 80050cc:	1ccb      	adds	r3, r1, #3
 80050ce:	4393      	bics	r3, r2
 80050d0:	3308      	adds	r3, #8
 80050d2:	0006      	movs	r6, r0
 80050d4:	001f      	movs	r7, r3
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d232      	bcs.n	8005140 <_malloc_r+0x78>
 80050da:	270c      	movs	r7, #12
 80050dc:	42b9      	cmp	r1, r7
 80050de:	d831      	bhi.n	8005144 <_malloc_r+0x7c>
 80050e0:	0030      	movs	r0, r6
 80050e2:	f000 f8a9 	bl	8005238 <__malloc_lock>
 80050e6:	4d32      	ldr	r5, [pc, #200]	; (80051b0 <_malloc_r+0xe8>)
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	001c      	movs	r4, r3
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d12e      	bne.n	800514e <_malloc_r+0x86>
 80050f0:	0039      	movs	r1, r7
 80050f2:	0030      	movs	r0, r6
 80050f4:	f7ff ffc6 	bl	8005084 <sbrk_aligned>
 80050f8:	0004      	movs	r4, r0
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d11e      	bne.n	800513c <_malloc_r+0x74>
 80050fe:	682c      	ldr	r4, [r5, #0]
 8005100:	0025      	movs	r5, r4
 8005102:	2d00      	cmp	r5, #0
 8005104:	d14a      	bne.n	800519c <_malloc_r+0xd4>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	0029      	movs	r1, r5
 800510a:	18e3      	adds	r3, r4, r3
 800510c:	0030      	movs	r0, r6
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f000 f880 	bl	8005214 <_sbrk_r>
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	4283      	cmp	r3, r0
 8005118:	d143      	bne.n	80051a2 <_malloc_r+0xda>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	3703      	adds	r7, #3
 800511e:	1aff      	subs	r7, r7, r3
 8005120:	2303      	movs	r3, #3
 8005122:	439f      	bics	r7, r3
 8005124:	3708      	adds	r7, #8
 8005126:	2f0c      	cmp	r7, #12
 8005128:	d200      	bcs.n	800512c <_malloc_r+0x64>
 800512a:	270c      	movs	r7, #12
 800512c:	0039      	movs	r1, r7
 800512e:	0030      	movs	r0, r6
 8005130:	f7ff ffa8 	bl	8005084 <sbrk_aligned>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d034      	beq.n	80051a2 <_malloc_r+0xda>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	19df      	adds	r7, r3, r7
 800513c:	6027      	str	r7, [r4, #0]
 800513e:	e013      	b.n	8005168 <_malloc_r+0xa0>
 8005140:	2b00      	cmp	r3, #0
 8005142:	dacb      	bge.n	80050dc <_malloc_r+0x14>
 8005144:	230c      	movs	r3, #12
 8005146:	2500      	movs	r5, #0
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	0028      	movs	r0, r5
 800514c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	1bd1      	subs	r1, r2, r7
 8005152:	d420      	bmi.n	8005196 <_malloc_r+0xce>
 8005154:	290b      	cmp	r1, #11
 8005156:	d917      	bls.n	8005188 <_malloc_r+0xc0>
 8005158:	19e2      	adds	r2, r4, r7
 800515a:	6027      	str	r7, [r4, #0]
 800515c:	42a3      	cmp	r3, r4
 800515e:	d111      	bne.n	8005184 <_malloc_r+0xbc>
 8005160:	602a      	str	r2, [r5, #0]
 8005162:	6863      	ldr	r3, [r4, #4]
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	6053      	str	r3, [r2, #4]
 8005168:	0030      	movs	r0, r6
 800516a:	0025      	movs	r5, r4
 800516c:	f000 f86c 	bl	8005248 <__malloc_unlock>
 8005170:	2207      	movs	r2, #7
 8005172:	350b      	adds	r5, #11
 8005174:	1d23      	adds	r3, r4, #4
 8005176:	4395      	bics	r5, r2
 8005178:	1aea      	subs	r2, r5, r3
 800517a:	429d      	cmp	r5, r3
 800517c:	d0e5      	beq.n	800514a <_malloc_r+0x82>
 800517e:	1b5b      	subs	r3, r3, r5
 8005180:	50a3      	str	r3, [r4, r2]
 8005182:	e7e2      	b.n	800514a <_malloc_r+0x82>
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e7ec      	b.n	8005162 <_malloc_r+0x9a>
 8005188:	6862      	ldr	r2, [r4, #4]
 800518a:	42a3      	cmp	r3, r4
 800518c:	d101      	bne.n	8005192 <_malloc_r+0xca>
 800518e:	602a      	str	r2, [r5, #0]
 8005190:	e7ea      	b.n	8005168 <_malloc_r+0xa0>
 8005192:	605a      	str	r2, [r3, #4]
 8005194:	e7e8      	b.n	8005168 <_malloc_r+0xa0>
 8005196:	0023      	movs	r3, r4
 8005198:	6864      	ldr	r4, [r4, #4]
 800519a:	e7a7      	b.n	80050ec <_malloc_r+0x24>
 800519c:	002c      	movs	r4, r5
 800519e:	686d      	ldr	r5, [r5, #4]
 80051a0:	e7af      	b.n	8005102 <_malloc_r+0x3a>
 80051a2:	230c      	movs	r3, #12
 80051a4:	0030      	movs	r0, r6
 80051a6:	6033      	str	r3, [r6, #0]
 80051a8:	f000 f84e 	bl	8005248 <__malloc_unlock>
 80051ac:	e7cd      	b.n	800514a <_malloc_r+0x82>
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000808 	.word	0x20000808

080051b4 <_realloc_r>:
 80051b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051b6:	0007      	movs	r7, r0
 80051b8:	000e      	movs	r6, r1
 80051ba:	0014      	movs	r4, r2
 80051bc:	2900      	cmp	r1, #0
 80051be:	d105      	bne.n	80051cc <_realloc_r+0x18>
 80051c0:	0011      	movs	r1, r2
 80051c2:	f7ff ff81 	bl	80050c8 <_malloc_r>
 80051c6:	0005      	movs	r5, r0
 80051c8:	0028      	movs	r0, r5
 80051ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d103      	bne.n	80051d8 <_realloc_r+0x24>
 80051d0:	f7ff ff0e 	bl	8004ff0 <_free_r>
 80051d4:	0025      	movs	r5, r4
 80051d6:	e7f7      	b.n	80051c8 <_realloc_r+0x14>
 80051d8:	f000 f83e 	bl	8005258 <_malloc_usable_size_r>
 80051dc:	9001      	str	r0, [sp, #4]
 80051de:	4284      	cmp	r4, r0
 80051e0:	d803      	bhi.n	80051ea <_realloc_r+0x36>
 80051e2:	0035      	movs	r5, r6
 80051e4:	0843      	lsrs	r3, r0, #1
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	d3ee      	bcc.n	80051c8 <_realloc_r+0x14>
 80051ea:	0021      	movs	r1, r4
 80051ec:	0038      	movs	r0, r7
 80051ee:	f7ff ff6b 	bl	80050c8 <_malloc_r>
 80051f2:	1e05      	subs	r5, r0, #0
 80051f4:	d0e8      	beq.n	80051c8 <_realloc_r+0x14>
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	0022      	movs	r2, r4
 80051fa:	429c      	cmp	r4, r3
 80051fc:	d900      	bls.n	8005200 <_realloc_r+0x4c>
 80051fe:	001a      	movs	r2, r3
 8005200:	0031      	movs	r1, r6
 8005202:	0028      	movs	r0, r5
 8005204:	f7ff fbc0 	bl	8004988 <memcpy>
 8005208:	0031      	movs	r1, r6
 800520a:	0038      	movs	r0, r7
 800520c:	f7ff fef0 	bl	8004ff0 <_free_r>
 8005210:	e7da      	b.n	80051c8 <_realloc_r+0x14>
	...

08005214 <_sbrk_r>:
 8005214:	2300      	movs	r3, #0
 8005216:	b570      	push	{r4, r5, r6, lr}
 8005218:	4d06      	ldr	r5, [pc, #24]	; (8005234 <_sbrk_r+0x20>)
 800521a:	0004      	movs	r4, r0
 800521c:	0008      	movs	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fc fec0 	bl	8001fa4 <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d103      	bne.n	8005230 <_sbrk_r+0x1c>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d000      	beq.n	8005230 <_sbrk_r+0x1c>
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	bd70      	pop	{r4, r5, r6, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	20000810 	.word	0x20000810

08005238 <__malloc_lock>:
 8005238:	b510      	push	{r4, lr}
 800523a:	4802      	ldr	r0, [pc, #8]	; (8005244 <__malloc_lock+0xc>)
 800523c:	f000 f814 	bl	8005268 <__retarget_lock_acquire_recursive>
 8005240:	bd10      	pop	{r4, pc}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	20000814 	.word	0x20000814

08005248 <__malloc_unlock>:
 8005248:	b510      	push	{r4, lr}
 800524a:	4802      	ldr	r0, [pc, #8]	; (8005254 <__malloc_unlock+0xc>)
 800524c:	f000 f80d 	bl	800526a <__retarget_lock_release_recursive>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	20000814 	.word	0x20000814

08005258 <_malloc_usable_size_r>:
 8005258:	1f0b      	subs	r3, r1, #4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	1f18      	subs	r0, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	da01      	bge.n	8005266 <_malloc_usable_size_r+0xe>
 8005262:	580b      	ldr	r3, [r1, r0]
 8005264:	18c0      	adds	r0, r0, r3
 8005266:	4770      	bx	lr

08005268 <__retarget_lock_acquire_recursive>:
 8005268:	4770      	bx	lr

0800526a <__retarget_lock_release_recursive>:
 800526a:	4770      	bx	lr

0800526c <_init>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr

08005278 <_fini>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr
