
Szeloba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b38  08007450  08007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f88  08009f88  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f90  08009f90  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f90  08009f90  00019f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f94  08009f94  00019f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08009f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000194  0800a12c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800a12c  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014690  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a3  00000000  00000000  0003484c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  000379f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00038b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017381  00000000  00000000  00039b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cdb  00000000  00000000  00050f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086eda  00000000  00000000  00067be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeabe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c4  00000000  00000000  000eeb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000194 	.word	0x20000194
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007438 	.word	0x08007438

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000198 	.word	0x20000198
 8000104:	08007438 	.word	0x08007438

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08b      	sub	sp, #44	; 0x2c
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	2414      	movs	r4, #20
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2314      	movs	r3, #20
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f006 fb42 	bl	8006b66 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b53      	ldr	r3, [pc, #332]	; (8000630 <MX_GPIO_Init+0x164>)
 80004e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004e6:	4b52      	ldr	r3, [pc, #328]	; (8000630 <MX_GPIO_Init+0x164>)
 80004e8:	2104      	movs	r1, #4
 80004ea:	430a      	orrs	r2, r1
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ee:	4b50      	ldr	r3, [pc, #320]	; (8000630 <MX_GPIO_Init+0x164>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f2:	2204      	movs	r2, #4
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <MX_GPIO_Init+0x164>)
 80004fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fe:	4b4c      	ldr	r3, [pc, #304]	; (8000630 <MX_GPIO_Init+0x164>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	430a      	orrs	r2, r1
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
 8000506:	4b4a      	ldr	r3, [pc, #296]	; (8000630 <MX_GPIO_Init+0x164>)
 8000508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b47      	ldr	r3, [pc, #284]	; (8000630 <MX_GPIO_Init+0x164>)
 8000514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000516:	4b46      	ldr	r3, [pc, #280]	; (8000630 <MX_GPIO_Init+0x164>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
 800051e:	4b44      	ldr	r3, [pc, #272]	; (8000630 <MX_GPIO_Init+0x164>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b41      	ldr	r3, [pc, #260]	; (8000630 <MX_GPIO_Init+0x164>)
 800052c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800052e:	4b40      	ldr	r3, [pc, #256]	; (8000630 <MX_GPIO_Init+0x164>)
 8000530:	2102      	movs	r1, #2
 8000532:	430a      	orrs	r2, r1
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
 8000536:	4b3e      	ldr	r3, [pc, #248]	; (8000630 <MX_GPIO_Init+0x164>)
 8000538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800053a:	2202      	movs	r2, #2
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <MX_GPIO_Init+0x164>)
 8000544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000546:	4b3a      	ldr	r3, [pc, #232]	; (8000630 <MX_GPIO_Init+0x164>)
 8000548:	2108      	movs	r1, #8
 800054a:	430a      	orrs	r2, r1
 800054c:	62da      	str	r2, [r3, #44]	; 0x2c
 800054e:	4b38      	ldr	r3, [pc, #224]	; (8000630 <MX_GPIO_Init+0x164>)
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	2208      	movs	r2, #8
 8000554:	4013      	ands	r3, r2
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800055a:	193b      	adds	r3, r7, r4
 800055c:	4a35      	ldr	r2, [pc, #212]	; (8000634 <MX_GPIO_Init+0x168>)
 800055e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2203      	movs	r2, #3
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056c:	193b      	adds	r3, r7, r4
 800056e:	4a32      	ldr	r2, [pc, #200]	; (8000638 <MX_GPIO_Init+0x16c>)
 8000570:	0019      	movs	r1, r3
 8000572:	0010      	movs	r0, r2
 8000574:	f002 fd60 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2202      	movs	r2, #2
 800057c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2203      	movs	r2, #3
 8000582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800058a:	193b      	adds	r3, r7, r4
 800058c:	4a2b      	ldr	r2, [pc, #172]	; (800063c <MX_GPIO_Init+0x170>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f002 fd51 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SET_BTN_Pin;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2210      	movs	r2, #16
 800059a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2284      	movs	r2, #132	; 0x84
 80005a0:	0392      	lsls	r2, r2, #14
 80005a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2201      	movs	r2, #1
 80005a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_BTN_GPIO_Port, &GPIO_InitStruct);
 80005aa:	193a      	adds	r2, r7, r4
 80005ac:	23a0      	movs	r3, #160	; 0xa0
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 fd40 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	4a21      	ldr	r2, [pc, #132]	; (8000640 <MX_GPIO_Init+0x174>)
 80005bc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2203      	movs	r2, #3
 80005c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	193a      	adds	r2, r7, r4
 80005cc:	23a0      	movs	r3, #160	; 0xa0
 80005ce:	05db      	lsls	r3, r3, #23
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fd30 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <MX_GPIO_Init+0x178>)
 80005dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2203      	movs	r2, #3
 80005e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a16      	ldr	r2, [pc, #88]	; (8000648 <MX_GPIO_Init+0x17c>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f002 fd21 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2204      	movs	r2, #4
 80005fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2203      	movs	r2, #3
 8000602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060a:	187b      	adds	r3, r7, r1
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <MX_GPIO_Init+0x180>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f002 fd11 	bl	8003038 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2007      	movs	r0, #7
 800061c:	f002 fc52 	bl	8002ec4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000620:	2007      	movs	r0, #7
 8000622:	f002 fc64 	bl	8002eee <HAL_NVIC_EnableIRQ>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00b      	add	sp, #44	; 0x2c
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	00003fff 	.word	0x00003fff
 8000638:	50000800 	.word	0x50000800
 800063c:	50001c00 	.word	0x50001c00
 8000640:	00009fe0 	.word	0x00009fe0
 8000644:	0000fcff 	.word	0x0000fcff
 8000648:	50000400 	.word	0x50000400
 800064c:	50000c00 	.word	0x50000c00

08000650 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fe8b 	bl	80033a8 <HAL_I2C_Init>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 fb25 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069c:	2100      	movs	r1, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 fac6 	bl	8003c30 <HAL_I2CEx_ConfigAnalogFilter>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fb1c 	bl	8000ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	0018      	movs	r0, r3
 80006b2:	f003 fb09 	bl	8003cc8 <HAL_I2CEx_ConfigDigitalFilter>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 fb13 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200001b0 	.word	0x200001b0
 80006c8:	40005400 	.word	0x40005400
 80006cc:	0000020b 	.word	0x0000020b

080006d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	240c      	movs	r4, #12
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f006 fa3f 	bl	8006b66 <memset>
  if(i2cHandle->Instance==I2C1)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a18      	ldr	r2, [pc, #96]	; (8000750 <HAL_I2C_MspInit+0x80>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d129      	bne.n	8000746 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_I2C_MspInit+0x84>)
 80006f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_I2C_MspInit+0x84>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	430a      	orrs	r2, r1
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_I2C_MspInit+0x84>)
 8000700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000702:	2202      	movs	r2, #2
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2212      	movs	r2, #18
 8000718:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2203      	movs	r2, #3
 8000724:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2204      	movs	r2, #4
 800072a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	187b      	adds	r3, r7, r1
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_I2C_MspInit+0x88>)
 8000730:	0019      	movs	r1, r3
 8000732:	0010      	movs	r0, r2
 8000734:	f002 fc80 	bl	8003038 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_I2C_MspInit+0x84>)
 800073a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_I2C_MspInit+0x84>)
 800073e:	2180      	movs	r1, #128	; 0x80
 8000740:	0389      	lsls	r1, r1, #14
 8000742:	430a      	orrs	r2, r1
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b009      	add	sp, #36	; 0x24
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40005400 	.word	0x40005400
 8000754:	40021000 	.word	0x40021000
 8000758:	50000400 	.word	0x50000400

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f002 fa70 	bl	8002c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f830 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f7ff feb0 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800076c:	f002 f9c4 	bl	8002af8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000770:	f7ff ff6e 	bl	8000650 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000774:	f002 f864 	bl	8002840 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000778:	f002 f8c6 	bl	8002908 <MX_TIM6_Init>
  MX_TIM7_Init();
 800077c:	f002 f900 	bl	8002980 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  // USART & TIMERS
  HAL_UART_Receive_IT(&huart2, &usart2data, 1);
 8000780:	490d      	ldr	r1, [pc, #52]	; (80007b8 <main+0x5c>)
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <main+0x60>)
 8000784:	2201      	movs	r2, #1
 8000786:	0018      	movs	r0, r3
 8000788:	f004 ff38 	bl	80055fc <HAL_UART_Receive_IT>
  printUART((unsigned char*)"Running...");
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <main+0x64>)
 800078e:	0018      	movs	r0, r3
 8000790:	f000 faae 	bl	8000cf0 <printUART>
  // display initialization
  SSD1306_Init();
 8000794:	f000 fb6e 	bl	8000e74 <SSD1306_Init>
  SSD1306_SetContrast(0);
 8000798:	2000      	movs	r0, #0
 800079a:	f001 f847 	bl	800182c <SSD1306_SetContrast>
  setTheme();
 800079e:	f001 f909 	bl	80019b4 <setTheme>
  __HAL_TIM_SET_COUNTER(&htim2, 32000);
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <main+0x68>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	22fa      	movs	r2, #250	; 0xfa
 80007a8:	01d2      	lsls	r2, r2, #7
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <main+0x68>)
 80007ae:	213c      	movs	r1, #60	; 0x3c
 80007b0:	0018      	movs	r0, r3
 80007b2:	f004 fb99 	bl	8004ee8 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <main+0x5a>
 80007b8:	200001fc 	.word	0x200001fc
 80007bc:	200006e0 	.word	0x200006e0
 80007c0:	08007450 	.word	0x08007450
 80007c4:	20000620 	.word	0x20000620

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b09f      	sub	sp, #124	; 0x7c
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	2440      	movs	r4, #64	; 0x40
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2338      	movs	r3, #56	; 0x38
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f006 f9c4 	bl	8006b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	232c      	movs	r3, #44	; 0x2c
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	0018      	movs	r0, r3
 80007e4:	2314      	movs	r3, #20
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f006 f9bc 	bl	8006b66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2328      	movs	r3, #40	; 0x28
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f006 f9b5 	bl	8006b66 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <SystemClock_Config+0xc8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a24      	ldr	r2, [pc, #144]	; (8000894 <SystemClock_Config+0xcc>)
 8000802:	401a      	ands	r2, r3
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SystemClock_Config+0xc8>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0109      	lsls	r1, r1, #4
 800080a:	430a      	orrs	r2, r1
 800080c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	22a0      	movs	r2, #160	; 0xa0
 8000818:	02d2      	lsls	r2, r2, #11
 800081a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	f003 fa9b 	bl	8003d60 <HAL_RCC_OscConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800082e:	f000 fa59 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	212c      	movs	r1, #44	; 0x2c
 8000834:	187b      	adds	r3, r7, r1
 8000836:	220f      	movs	r2, #15
 8000838:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2100      	movs	r1, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f003 fe56 	bl	8004508 <HAL_RCC_ClockConfig>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000860:	f000 fa40 	bl	8000ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	220a      	movs	r2, #10
 8000868:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2204      	movs	r2, #4
 800086e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f004 f869 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000882:	f000 fa2f 	bl	8000ce4 <Error_Handler>
  }
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b01f      	add	sp, #124	; 0x7c
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40007000 	.word	0x40007000
 8000894:	ffffe7ff 	.word	0xffffe7ff

08000898 <HAL_UART_RxCpltCallback>:

// =========================================================================================
/* UART */
// =========================================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_UART_RxCpltCallback+0x38>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10d      	bne.n	80008c6 <HAL_UART_RxCpltCallback+0x2e>
	{
		if(usart2data == '\r')
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_UART_RxCpltCallback+0x3c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b0d      	cmp	r3, #13
 80008b0:	d103      	bne.n	80008ba <HAL_UART_RxCpltCallback+0x22>
		{
			printUART((uint8_t *) "Connected");
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_UART_RxCpltCallback+0x40>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fa1b 	bl	8000cf0 <printUART>
		}
		HAL_UART_Receive_IT(&huart2, &usart2data, 1);
 80008ba:	4906      	ldr	r1, [pc, #24]	; (80008d4 <HAL_UART_RxCpltCallback+0x3c>)
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_UART_RxCpltCallback+0x44>)
 80008be:	2201      	movs	r2, #1
 80008c0:	0018      	movs	r0, r3
 80008c2:	f004 fe9b 	bl	80055fc <HAL_UART_Receive_IT>
	}
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	40004400 	.word	0x40004400
 80008d4:	200001fc 	.word	0x200001fc
 80008d8:	0800745c 	.word	0x0800745c
 80008dc:	200006e0 	.word	0x200006e0

080008e0 <HAL_TIM_IC_CaptureCallback>:

// =========================================================================================
/* TIMERS - ENCODER */
// =========================================================================================
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d11b      	bne.n	800092c <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint8_t tim7BusyFlag = HAL_TIM_Base_GetState(&htim7);
 80008f4:	250f      	movs	r5, #15
 80008f6:	197c      	adds	r4, r7, r5
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x54>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f004 fc89 	bl	8005212 <HAL_TIM_Base_GetState>
 8000900:	0003      	movs	r3, r0
 8000902:	7023      	strb	r3, [r4, #0]
		uint8_t encoderBusyFlag = HAL_TIM_Encoder_GetState(&htim7);
 8000904:	260e      	movs	r6, #14
 8000906:	19bc      	adds	r4, r7, r6
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x54>)
 800090a:	0018      	movs	r0, r3
 800090c:	f004 fc8d 	bl	800522a <HAL_TIM_Encoder_GetState>
 8000910:	0003      	movs	r3, r0
 8000912:	7023      	strb	r3, [r4, #0]
		if(tim7BusyFlag == 1)
 8000914:	197b      	adds	r3, r7, r5
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d107      	bne.n	800092c <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if(encoderBusyFlag == 1)
 800091c:	19bb      	adds	r3, r7, r6
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d103      	bne.n	800092c <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				HAL_TIM_Base_Start_IT(&htim7);
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000926:	0018      	movs	r0, r3
 8000928:	f004 f9c6 	bl	8004cb8 <HAL_TIM_Base_Start_IT>
			}
		}
	}
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b005      	add	sp, #20
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000934:	200006a0 	.word	0x200006a0

08000938 <HAL_TIM_PeriodElapsedCallback>:

// =========================================================================================
/* TIMERS - COUNTING */
// =========================================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

	// ========================
	/* TIM6 - CLICK BUFFOR */
	// ========================
	if(htim->Instance == TIM6)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4ac6      	ldr	r2, [pc, #792]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d000      	beq.n	800094c <HAL_TIM_PeriodElapsedCallback+0x14>
 800094a:	e102      	b.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x21a>
	{
		bool btnBusyFlag = HAL_GPIO_ReadPin(GPIOA, SET_BTN_Pin);
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2110      	movs	r1, #16
 8000952:	0018      	movs	r0, r3
 8000954:	f002 fcee 	bl	8003334 <HAL_GPIO_ReadPin>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	240e      	movs	r4, #14
 800095e:	193b      	adds	r3, r7, r4
 8000960:	1e51      	subs	r1, r2, #1
 8000962:	418a      	sbcs	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8000966:	4bbf      	ldr	r3, [pc, #764]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000968:	0018      	movs	r0, r3
 800096a:	f004 f9f7 	bl	8004d5c <HAL_TIM_Base_Stop_IT>

		if(!btnBusyFlag)
 800096e:	193b      	adds	r3, r7, r4
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2201      	movs	r2, #1
 8000974:	4053      	eors	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d100      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x46>
 800097c:	e09d      	b.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x182>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 800097e:	4bb9      	ldr	r3, [pc, #740]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000980:	0018      	movs	r0, r3
 8000982:	f004 f999 	bl	8004cb8 <HAL_TIM_Base_Start_IT>
			switch(workStep)
 8000986:	4bb8      	ldr	r3, [pc, #736]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b05      	cmp	r3, #5
 800098e:	d100      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000990:	e071      	b.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x13e>
 8000992:	dd00      	ble.n	8000996 <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000994:	e09a      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
 8000996:	2b04      	cmp	r3, #4
 8000998:	d04b      	beq.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0xfa>
 800099a:	dd00      	ble.n	800099e <HAL_TIM_PeriodElapsedCallback+0x66>
 800099c:	e096      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d002      	beq.n	80009a8 <HAL_TIM_PeriodElapsedCallback+0x70>
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d023      	beq.n	80009ee <HAL_TIM_PeriodElapsedCallback+0xb6>
 80009a6:	e091      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
			{
				case 2: // step 2
					pressBtnCounter++;
 80009a8:	4bb0      	ldr	r3, [pc, #704]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4bae      	ldr	r3, [pc, #696]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009b4:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 80009b6:	4bad      	ldr	r3, [pc, #692]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	220f      	movs	r2, #15
 80009be:	4293      	cmp	r3, r2
 80009c0:	d800      	bhi.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80009c2:	e07c      	b.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x186>
					{
						width_MAIN = arrayToInt_chVal();
 80009c4:	f001 fcea 	bl	800239c <arrayToInt_chVal>
 80009c8:	0003      	movs	r3, r0
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4ba8      	ldr	r3, [pc, #672]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80009ce:	701a      	strb	r2, [r3, #0]
						workStep = 3;
 80009d0:	4ba5      	ldr	r3, [pc, #660]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 80009d6:	4ba5      	ldr	r3, [pc, #660]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 80009dc:	4ba1      	ldr	r3, [pc, #644]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f004 f9bc 	bl	8004d5c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 80009e4:	f001 fdc2 	bl	800256c <clearSettings>
						setTheme();
 80009e8:	f000 ffe4 	bl	80019b4 <setTheme>
					}
				break;
 80009ec:	e067      	b.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x186>
				case 3: // step 3
					pressBtnCounter++;
 80009ee:	4b9f      	ldr	r3, [pc, #636]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b9c      	ldr	r3, [pc, #624]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009fa:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 80009fc:	4b9b      	ldr	r3, [pc, #620]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	220f      	movs	r2, #15
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d95c      	bls.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x18a>
					{
						turns_MAIN = arrayToInt_chVal();
 8000a08:	f001 fcc8 	bl	800239c <arrayToInt_chVal>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b98      	ldr	r3, [pc, #608]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000a12:	701a      	strb	r2, [r3, #0]
						workStep = 4;
 8000a14:	4b94      	ldr	r3, [pc, #592]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000a1a:	4b94      	ldr	r3, [pc, #592]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000a20:	4b90      	ldr	r3, [pc, #576]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f004 f99a 	bl	8004d5c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000a28:	f001 fda0 	bl	800256c <clearSettings>
						setTheme();
 8000a2c:	f000 ffc2 	bl	80019b4 <setTheme>
					}
				break;
 8000a30:	e047      	b.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x18a>
				case 4: // step 4
					pressBtnCounter++;
 8000a32:	4b8e      	ldr	r3, [pc, #568]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b8b      	ldr	r3, [pc, #556]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a3e:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 8000a40:	4b8a      	ldr	r3, [pc, #552]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	220f      	movs	r2, #15
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d93c      	bls.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x18e>
					{
						diameter_MAIN = arrayToInt_chVal();
 8000a4c:	f001 fca6 	bl	800239c <arrayToInt_chVal>
 8000a50:	0003      	movs	r3, r0
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	4b88      	ldr	r3, [pc, #544]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000a56:	701a      	strb	r2, [r3, #0]
						workStep = 5;
 8000a58:	4b83      	ldr	r3, [pc, #524]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000a5a:	2205      	movs	r2, #5
 8000a5c:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000a5e:	4b83      	ldr	r3, [pc, #524]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000a64:	4b7f      	ldr	r3, [pc, #508]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f004 f978 	bl	8004d5c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000a6c:	f001 fd7e 	bl	800256c <clearSettings>
						setTheme();
 8000a70:	f000 ffa0 	bl	80019b4 <setTheme>
					}
				break;
 8000a74:	e027      	b.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x18e>
				case 5: // step 5
					pressBtnCounter++;
 8000a76:	4b7d      	ldr	r3, [pc, #500]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b7a      	ldr	r3, [pc, #488]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a82:	701a      	strb	r2, [r3, #0]
					if(pressBtnCounter > PRESS_BTN_TIME)
 8000a84:	4b79      	ldr	r3, [pc, #484]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d91c      	bls.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x192>
					{
						speed_MAIN = arrayToInt_chVal();
 8000a90:	f001 fc84 	bl	800239c <arrayToInt_chVal>
 8000a94:	0003      	movs	r3, r0
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000a9a:	701a      	strb	r2, [r3, #0]
						workStep = 6;
 8000a9c:	4b72      	ldr	r3, [pc, #456]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000a9e:	2206      	movs	r2, #6
 8000aa0:	701a      	strb	r2, [r3, #0]
						pressBtnCounter = 0;
 8000aa2:	4b72      	ldr	r3, [pc, #456]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim6);
 8000aa8:	4b6e      	ldr	r3, [pc, #440]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f004 f956 	bl	8004d5c <HAL_TIM_Base_Stop_IT>
						clearSettings();
 8000ab0:	f001 fd5c 	bl	800256c <clearSettings>
						setTheme();
 8000ab4:	f000 ff7e 	bl	80019b4 <setTheme>
					}
				break;
 8000ab8:	e007      	b.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x192>
			}
		}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	e006      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	e004      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	e002      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	e000      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x194>
				break;
 8000aca:	46c0      	nop			; (mov r8, r8)
		if(btnBusyFlag)
 8000acc:	230e      	movs	r3, #14
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d03d      	beq.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x21a>
		{
			pressBtnCounter = 0;
 8000ad6:	4b65      	ldr	r3, [pc, #404]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
			switch(workStep)
 8000adc:	4b62      	ldr	r3, [pc, #392]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b0b      	cmp	r3, #11
 8000ae4:	d836      	bhi.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
 8000ae6:	009a      	lsls	r2, r3, #2
 8000ae8:	4b65      	ldr	r3, [pc, #404]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	469f      	mov	pc, r3
			{
				case 1: // step 1
					if(projectSelect == 0)
 8000af0:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d103      	bne.n	8000b02 <HAL_TIM_PeriodElapsedCallback+0x1ca>
					{
						workStep = 2;
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e002      	b.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x1d0>
					}
					else
					{
						workStep = 11;
 8000b02:	4b59      	ldr	r3, [pc, #356]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000b04:	220b      	movs	r2, #11
 8000b06:	701a      	strb	r2, [r3, #0]
					}
				setTheme();
 8000b08:	f000 ff54 	bl	80019b4 <setTheme>
				break;
 8000b0c:	e022      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 11: // step 11
					workStep = 1;
 8000b0e:	4b56      	ldr	r3, [pc, #344]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
					setTheme();
 8000b14:	f000 ff4e 	bl	80019b4 <setTheme>
				break;
 8000b18:	e01c      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 2: // step 2
					showValueScreen(CARCASS_WIDTH, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f9e7 	bl	8001ef4 <showValueScreen>
				break;
 8000b26:	e015      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 3: // step 3
					showValueScreen(CARCASS_COIL_TURNS, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f001 f9e0 	bl	8001ef4 <showValueScreen>
				break;
 8000b34:	e00e      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 4: // step 4
					showValueScreen(WINDING_DIAMETER, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000b36:	2300      	movs	r3, #0
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f001 f9d9 	bl	8001ef4 <showValueScreen>
				break;
 8000b42:	e007      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
				case 5: // step 5
					showValueScreen(WINDING_SPEED, VALUE_NO_CHANGING, 0, CONTI_RUN);
 8000b44:	2300      	movs	r3, #0
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f001 f9d2 	bl	8001ef4 <showValueScreen>
				break;
 8000b50:	e000      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0x21c>
			}
		}
 8000b52:	46c0      	nop			; (mov r8, r8)
	}

	// ========================
	/* TIM7 - BUFFOR LEFT/RIGHT */
	// ========================
	if(htim->Instance == TIM7)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d000      	beq.n	8000b60 <HAL_TIM_PeriodElapsedCallback+0x228>
 8000b5e:	e07a      	b.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x31e>
	{
		HAL_TIM_Base_Stop_IT(&htim7);
 8000b60:	4b4a      	ldr	r3, [pc, #296]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f004 f8fa 	bl	8004d5c <HAL_TIM_Base_Stop_IT>
		encoderCount = (__HAL_TIM_GET_COUNTER(&htim2) / 2);
 8000b68:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	085b      	lsrs	r3, r3, #1
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b74:	801a      	strh	r2, [r3, #0]
		bool direction;
		if(encoderCount != encoderCountPrev)
 8000b76:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d067      	beq.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x31e>
		{
			if(encoderCount > encoderCountPrev)
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d904      	bls.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x268>
			{
				direction = 1;
 8000b96:	230f      	movs	r3, #15
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e003      	b.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0x270>
			}
			else
			{
				direction = 0;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
			}
			encoderCountPrev = encoderCount;
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8000bb0:	801a      	strh	r2, [r3, #0]
			switch(workStep)
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b05      	cmp	r3, #5
 8000bba:	d84d      	bhi.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x320>
 8000bbc:	009a      	lsls	r2, r3, #2
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	469f      	mov	pc, r3
			{
				case 1: // step 1
					if(!direction)
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	18fb      	adds	r3, r7, r3
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4053      	eors	r3, r2
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00c      	beq.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2b8>
					{
						if(projectSelect > 0)
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d013      	beq.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x2d0>
						{
							projectSelect--;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	3b01      	subs	r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x2d0>
						}
					}
					else
					{
						if((projectSelect) < PROJECT_COUNT)
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d806      	bhi.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x2d0>
						{
							projectSelect++;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000c06:	701a      	strb	r2, [r3, #0]
						}
					}
					setTheme();
 8000c08:	f000 fed4 	bl	80019b4 <setTheme>
				break;
 8000c0c:	e024      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x320>
				case 2: // step 2
					showValueScreen(CARCASS_WIDTH, VALUE_CHANGING, direction, CONTI_RUN);
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f001 f96b 	bl	8001ef4 <showValueScreen>
				break;
 8000c1e:	e01b      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x320>
				case 3: // step 3
					showValueScreen(CARCASS_COIL_TURNS, VALUE_CHANGING, direction, CONTI_RUN);
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f001 f962 	bl	8001ef4 <showValueScreen>
				break;
 8000c30:	e012      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x320>
				case 4: // step 4
					showValueScreen(WINDING_DIAMETER, VALUE_CHANGING, direction, CONTI_RUN);
 8000c32:	230f      	movs	r3, #15
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f001 f959 	bl	8001ef4 <showValueScreen>
				break;
 8000c42:	e009      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x320>
				case 5: // step 4
					showValueScreen(WINDING_SPEED, VALUE_CHANGING, direction, CONTI_RUN);
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	781a      	ldrb	r2, [r3, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f001 f950 	bl	8001ef4 <showValueScreen>
				break;
 8000c54:	e000      	b.n	8000c58 <HAL_TIM_PeriodElapsedCallback+0x320>
			}
		}
 8000c56:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b005      	add	sp, #20
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	40001000 	.word	0x40001000
 8000c64:	20000660 	.word	0x20000660
 8000c68:	2000060e 	.word	0x2000060e
 8000c6c:	20000200 	.word	0x20000200
 8000c70:	20000201 	.word	0x20000201
 8000c74:	20000202 	.word	0x20000202
 8000c78:	20000203 	.word	0x20000203
 8000c7c:	20000204 	.word	0x20000204
 8000c80:	080075a8 	.word	0x080075a8
 8000c84:	2000060f 	.word	0x2000060f
 8000c88:	40001400 	.word	0x40001400
 8000c8c:	200006a0 	.word	0x200006a0
 8000c90:	20000620 	.word	0x20000620
 8000c94:	200001fe 	.word	0x200001fe
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	080075d8 	.word	0x080075d8

08000ca0 <HAL_GPIO_EXTI_Callback>:

// =========================================================================================
/* GPIO */
// =========================================================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	1dbb      	adds	r3, r7, #6
 8000caa:	801a      	strh	r2, [r3, #0]
	uint8_t tim6BusyFlag = HAL_TIM_Base_GetState(&htim7);
 8000cac:	250f      	movs	r5, #15
 8000cae:	197c      	adds	r4, r7, r5
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f004 faad 	bl	8005212 <HAL_TIM_Base_GetState>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	7023      	strb	r3, [r4, #0]
	if(tim6BusyFlag == 1)
 8000cbc:	197b      	adds	r3, r7, r5
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d107      	bne.n	8000cd4 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if(GPIO_Pin == SET_BTN_Pin)
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	d103      	bne.n	8000cd4 <HAL_GPIO_EXTI_Callback+0x34>
		{
			HAL_TIM_Base_Start_IT(&htim6);
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 fff2 	bl	8004cb8 <HAL_TIM_Base_Start_IT>
		}
	}
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b004      	add	sp, #16
 8000cda:	bdb0      	pop	{r4, r5, r7, pc}
 8000cdc:	200006a0 	.word	0x200006a0
 8000ce0:	20000660 	.word	0x20000660

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <printUART>:

#include "misc.h"

// UART
void printUART(unsigned char * str)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t length = strlen(str);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fa04 	bl	8000108 <strlen>
 8000d00:	0002      	movs	r2, r0
 8000d02:	210f      	movs	r1, #15
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, str, length, 10);
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <printUART+0x3c>)
 8000d12:	230a      	movs	r3, #10
 8000d14:	f004 fbca 	bl	80054ac <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (unsigned char*)"\r\n", 2, 10);
 8000d18:	4905      	ldr	r1, [pc, #20]	; (8000d30 <printUART+0x40>)
 8000d1a:	4804      	ldr	r0, [pc, #16]	; (8000d2c <printUART+0x3c>)
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	2202      	movs	r2, #2
 8000d20:	f004 fbc4 	bl	80054ac <HAL_UART_Transmit>
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200006e0 	.word	0x200006e0
 8000d30:	08007468 	.word	0x08007468

08000d34 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	0008      	movs	r0, r1
 8000d3e:	60ba      	str	r2, [r7, #8]
 8000d40:	0019      	movs	r1, r3
 8000d42:	230e      	movs	r3, #14
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	1c22      	adds	r2, r4, #0
 8000d48:	801a      	strh	r2, [r3, #0]
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	1c0a      	adds	r2, r1, #0
 8000d56:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000d58:	1dbb      	adds	r3, r7, #6
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8000d5e:	3307      	adds	r3, #7
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da00      	bge.n	8000d66 <SSD1306_DrawBitmap+0x32>
 8000d64:	3307      	adds	r3, #7
 8000d66:	10db      	asrs	r3, r3, #3
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2310      	movs	r3, #16
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000d70:	2317      	movs	r3, #23
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8000d78:	2314      	movs	r3, #20
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	e068      	b.n	8000e54 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8000d82:	2312      	movs	r3, #18
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	801a      	strh	r2, [r3, #0]
 8000d8a:	e048      	b.n	8000e1e <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	001a      	movs	r2, r3
 8000d94:	2307      	movs	r3, #7
 8000d96:	4013      	ands	r3, r2
 8000d98:	d006      	beq.n	8000da8 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 8000d9a:	2317      	movs	r3, #23
 8000d9c:	18fa      	adds	r2, r7, r3
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	18db      	adds	r3, r3, r3
 8000da4:	7013      	strb	r3, [r2, #0]
 8000da6:	e019      	b.n	8000ddc <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000da8:	2314      	movs	r3, #20
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2200      	movs	r2, #0
 8000dae:	5e9b      	ldrsh	r3, [r3, r2]
 8000db0:	2210      	movs	r2, #16
 8000db2:	18ba      	adds	r2, r7, r2
 8000db4:	2100      	movs	r1, #0
 8000db6:	5e52      	ldrsh	r2, [r2, r1]
 8000db8:	435a      	muls	r2, r3
 8000dba:	2312      	movs	r3, #18
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	5e5b      	ldrsh	r3, [r3, r1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	da00      	bge.n	8000dc8 <SSD1306_DrawBitmap+0x94>
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	10db      	asrs	r3, r3, #3
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	001a      	movs	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	189a      	adds	r2, r3, r2
 8000dd4:	2317      	movs	r3, #23
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000ddc:	2317      	movs	r3, #23
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da11      	bge.n	8000e0c <SSD1306_DrawBitmap+0xd8>
 8000de8:	230e      	movs	r3, #14
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	2312      	movs	r3, #18
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	18d3      	adds	r3, r2, r3
 8000df6:	b298      	uxth	r0, r3
 8000df8:	230c      	movs	r3, #12
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	8819      	ldrh	r1, [r3, #0]
 8000dfe:	232c      	movs	r3, #44	; 0x2c
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	001a      	movs	r2, r3
 8000e08:	f000 f946 	bl	8001098 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000e0c:	2112      	movs	r1, #18
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	5e9b      	ldrsh	r3, [r3, r2]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	3301      	adds	r3, #1
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	2312      	movs	r3, #18
 8000e20:	18fa      	adds	r2, r7, r3
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	2100      	movs	r1, #0
 8000e26:	5e52      	ldrsh	r2, [r2, r1]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5e5b      	ldrsh	r3, [r3, r1]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbad      	blt.n	8000d8c <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 8000e30:	2114      	movs	r1, #20
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	5e9b      	ldrsh	r3, [r3, r2]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	210c      	movs	r1, #12
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	5e9b      	ldrsh	r3, [r3, r2]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	2314      	movs	r3, #20
 8000e56:	18fa      	adds	r2, r7, r3
 8000e58:	2328      	movs	r3, #40	; 0x28
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5e52      	ldrsh	r2, [r2, r1]
 8000e60:	2100      	movs	r1, #0
 8000e62:	5e5b      	ldrsh	r3, [r3, r1]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	db8c      	blt.n	8000d82 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b007      	add	sp, #28
 8000e70:	bd90      	pop	{r4, r7, pc}
	...

08000e74 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000e7a:	f000 fcf3 	bl	8001864 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <SSD1306_Init+0x178>)
 8000e80:	485b      	ldr	r0, [pc, #364]	; (8000ff0 <SSD1306_Init+0x17c>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	2178      	movs	r1, #120	; 0x78
 8000e86:	f002 fc2d 	bl	80036e4 <HAL_I2C_IsDeviceReady>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e0a8      	b.n	8000fe4 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000e92:	4b58      	ldr	r3, [pc, #352]	; (8000ff4 <SSD1306_Init+0x180>)
 8000e94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e96:	e002      	b.n	8000e9e <SSD1306_Init+0x2a>
		p--;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1f9      	bne.n	8000e98 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ea4:	22ae      	movs	r2, #174	; 0xae
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2078      	movs	r0, #120	; 0x78
 8000eaa:	f000 fd5b 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000eae:	2220      	movs	r2, #32
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	; 0x78
 8000eb4:	f000 fd56 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000eb8:	2210      	movs	r2, #16
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2078      	movs	r0, #120	; 0x78
 8000ebe:	f000 fd51 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ec2:	22b0      	movs	r2, #176	; 0xb0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	; 0x78
 8000ec8:	f000 fd4c 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000ecc:	22c8      	movs	r2, #200	; 0xc8
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2078      	movs	r0, #120	; 0x78
 8000ed2:	f000 fd47 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2078      	movs	r0, #120	; 0x78
 8000edc:	f000 fd42 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2078      	movs	r0, #120	; 0x78
 8000ee6:	f000 fd3d 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	2100      	movs	r1, #0
 8000eee:	2078      	movs	r0, #120	; 0x78
 8000ef0:	f000 fd38 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000ef4:	2281      	movs	r2, #129	; 0x81
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2078      	movs	r0, #120	; 0x78
 8000efa:	f000 fd33 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	2100      	movs	r1, #0
 8000f02:	2078      	movs	r0, #120	; 0x78
 8000f04:	f000 fd2e 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f08:	22a1      	movs	r2, #161	; 0xa1
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2078      	movs	r0, #120	; 0x78
 8000f0e:	f000 fd29 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f12:	22a6      	movs	r2, #166	; 0xa6
 8000f14:	2100      	movs	r1, #0
 8000f16:	2078      	movs	r0, #120	; 0x78
 8000f18:	f000 fd24 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f1c:	22a8      	movs	r2, #168	; 0xa8
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2078      	movs	r0, #120	; 0x78
 8000f22:	f000 fd1f 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000f26:	223f      	movs	r2, #63	; 0x3f
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2078      	movs	r0, #120	; 0x78
 8000f2c:	f000 fd1a 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f30:	22a4      	movs	r2, #164	; 0xa4
 8000f32:	2100      	movs	r1, #0
 8000f34:	2078      	movs	r0, #120	; 0x78
 8000f36:	f000 fd15 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000f3a:	22d3      	movs	r2, #211	; 0xd3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2078      	movs	r0, #120	; 0x78
 8000f40:	f000 fd10 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2078      	movs	r0, #120	; 0x78
 8000f4a:	f000 fd0b 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f4e:	22d5      	movs	r2, #213	; 0xd5
 8000f50:	2100      	movs	r1, #0
 8000f52:	2078      	movs	r0, #120	; 0x78
 8000f54:	f000 fd06 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000f58:	22f0      	movs	r2, #240	; 0xf0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2078      	movs	r0, #120	; 0x78
 8000f5e:	f000 fd01 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000f62:	22d9      	movs	r2, #217	; 0xd9
 8000f64:	2100      	movs	r1, #0
 8000f66:	2078      	movs	r0, #120	; 0x78
 8000f68:	f000 fcfc 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000f6c:	2222      	movs	r2, #34	; 0x22
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2078      	movs	r0, #120	; 0x78
 8000f72:	f000 fcf7 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000f76:	22da      	movs	r2, #218	; 0xda
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f000 fcf2 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000f80:	2212      	movs	r2, #18
 8000f82:	2100      	movs	r1, #0
 8000f84:	2078      	movs	r0, #120	; 0x78
 8000f86:	f000 fced 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000f8a:	22db      	movs	r2, #219	; 0xdb
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2078      	movs	r0, #120	; 0x78
 8000f90:	f000 fce8 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000f94:	2220      	movs	r2, #32
 8000f96:	2100      	movs	r1, #0
 8000f98:	2078      	movs	r0, #120	; 0x78
 8000f9a:	f000 fce3 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000f9e:	228d      	movs	r2, #141	; 0x8d
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f000 fcde 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000fa8:	2214      	movs	r2, #20
 8000faa:	2100      	movs	r1, #0
 8000fac:	2078      	movs	r0, #120	; 0x78
 8000fae:	f000 fcd9 	bl	8001964 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000fb2:	22af      	movs	r2, #175	; 0xaf
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2078      	movs	r0, #120	; 0x78
 8000fb8:	f000 fcd4 	bl	8001964 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000fbc:	222e      	movs	r2, #46	; 0x2e
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2078      	movs	r0, #120	; 0x78
 8000fc2:	f000 fccf 	bl	8001964 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f84c 	bl	8001064 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000fcc:	f000 f816 	bl	8000ffc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <SSD1306_Init+0x184>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SSD1306_Init+0x184>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SSD1306_Init+0x184>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b002      	add	sp, #8
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	00004e20 	.word	0x00004e20
 8000ff0:	200001b0 	.word	0x200001b0
 8000ff4:	000009c4 	.word	0x000009c4
 8000ff8:	20000608 	.word	0x20000608

08000ffc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e021      	b.n	800104e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3b50      	subs	r3, #80	; 0x50
 8001010:	b2db      	uxtb	r3, r3
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	; 0x78
 8001018:	f000 fca4 	bl	8001964 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2078      	movs	r0, #120	; 0x78
 8001022:	f000 fc9f 	bl	8001964 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001026:	2210      	movs	r2, #16
 8001028:	2100      	movs	r1, #0
 800102a:	2078      	movs	r0, #120	; 0x78
 800102c:	f000 fc9a 	bl	8001964 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	01da      	lsls	r2, r3, #7
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <SSD1306_UpdateScreen+0x64>)
 8001038:	18d2      	adds	r2, r2, r3
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	2078      	movs	r0, #120	; 0x78
 8001040:	f000 fc24 	bl	800188c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	3201      	adds	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b07      	cmp	r3, #7
 8001054:	d9d9      	bls.n	800100a <SSD1306_UpdateScreen+0xe>
	}
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b002      	add	sp, #8
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000208 	.word	0x20000208

08001064 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	0002      	movs	r2, r0
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <SSD1306_Fill+0x18>
 8001078:	2300      	movs	r3, #0
 800107a:	e000      	b.n	800107e <SSD1306_Fill+0x1a>
 800107c:	23ff      	movs	r3, #255	; 0xff
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <SSD1306_Fill+0x30>)
 8001084:	0019      	movs	r1, r3
 8001086:	f005 fd6e 	bl	8006b66 <memset>
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000208 	.word	0x20000208

08001098 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	0004      	movs	r4, r0
 80010a0:	0008      	movs	r0, r1
 80010a2:	0011      	movs	r1, r2
 80010a4:	1dbb      	adds	r3, r7, #6
 80010a6:	1c22      	adds	r2, r4, #0
 80010a8:	801a      	strh	r2, [r3, #0]
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	1c02      	adds	r2, r0, #0
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	1cfb      	adds	r3, r7, #3
 80010b2:	1c0a      	adds	r2, r1, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	if (
 80010b6:	1dbb      	adds	r3, r7, #6
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	2b7f      	cmp	r3, #127	; 0x7f
 80010bc:	d852      	bhi.n	8001164 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	2b3f      	cmp	r3, #63	; 0x3f
 80010c4:	d84e      	bhi.n	8001164 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <SSD1306_DrawPixel+0xd4>)
 80010c8:	791b      	ldrb	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80010ce:	1cfb      	adds	r3, r7, #3
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	425a      	negs	r2, r3
 80010d4:	4153      	adcs	r3, r2
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	1cfb      	adds	r3, r7, #3
 80010da:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80010dc:	1cfb      	adds	r3, r7, #3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d11e      	bne.n	8001122 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	881a      	ldrh	r2, [r3, #0]
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	b298      	uxth	r0, r3
 80010f0:	0003      	movs	r3, r0
 80010f2:	01db      	lsls	r3, r3, #7
 80010f4:	18d3      	adds	r3, r2, r3
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <SSD1306_DrawPixel+0xd8>)
 80010f8:	5cd3      	ldrb	r3, [r2, r3]
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	2107      	movs	r1, #7
 8001102:	400b      	ands	r3, r1
 8001104:	2101      	movs	r1, #1
 8001106:	4099      	lsls	r1, r3
 8001108:	000b      	movs	r3, r1
 800110a:	b25b      	sxtb	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b259      	sxtb	r1, r3
 8001110:	1dbb      	adds	r3, r7, #6
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	0003      	movs	r3, r0
 8001116:	01db      	lsls	r3, r3, #7
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	b2c9      	uxtb	r1, r1
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <SSD1306_DrawPixel+0xd8>)
 800111e:	54d1      	strb	r1, [r2, r3]
 8001120:	e021      	b.n	8001166 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001122:	1dbb      	adds	r3, r7, #6
 8001124:	881a      	ldrh	r2, [r3, #0]
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	08db      	lsrs	r3, r3, #3
 800112c:	b298      	uxth	r0, r3
 800112e:	0003      	movs	r3, r0
 8001130:	01db      	lsls	r3, r3, #7
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <SSD1306_DrawPixel+0xd8>)
 8001136:	5cd3      	ldrb	r3, [r2, r3]
 8001138:	b25b      	sxtb	r3, r3
 800113a:	1d3a      	adds	r2, r7, #4
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	2107      	movs	r1, #7
 8001140:	400a      	ands	r2, r1
 8001142:	2101      	movs	r1, #1
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	b252      	sxtb	r2, r2
 800114a:	43d2      	mvns	r2, r2
 800114c:	b252      	sxtb	r2, r2
 800114e:	4013      	ands	r3, r2
 8001150:	b259      	sxtb	r1, r3
 8001152:	1dbb      	adds	r3, r7, #6
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	0003      	movs	r3, r0
 8001158:	01db      	lsls	r3, r3, #7
 800115a:	18d3      	adds	r3, r2, r3
 800115c:	b2c9      	uxtb	r1, r1
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <SSD1306_DrawPixel+0xd8>)
 8001160:	54d1      	strb	r1, [r2, r3]
 8001162:	e000      	b.n	8001166 <SSD1306_DrawPixel+0xce>
		return;
 8001164:	46c0      	nop			; (mov r8, r8)
	}
}
 8001166:	46bd      	mov	sp, r7
 8001168:	b003      	add	sp, #12
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	20000608 	.word	0x20000608
 8001170:	20000208 	.word	0x20000208

08001174 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	801a      	strh	r2, [r3, #0]
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	1c0a      	adds	r2, r1, #0
 8001184:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SSD1306_GotoXY+0x2c>)
 8001188:	1dba      	adds	r2, r7, #6
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SSD1306_GotoXY+0x2c>)
 8001190:	1d3a      	adds	r2, r7, #4
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	805a      	strh	r2, [r3, #2]
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000608 	.word	0x20000608

080011a4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6039      	str	r1, [r7, #0]
 80011ac:	0011      	movs	r1, r2
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	1c02      	adds	r2, r0, #0
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	1dbb      	adds	r3, r7, #6
 80011b6:	1c0a      	adds	r2, r1, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <SSD1306_Putc+0x100>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	18d3      	adds	r3, r2, r3
	if (
 80011c6:	2b7f      	cmp	r3, #127	; 0x7f
 80011c8:	dc07      	bgt.n	80011da <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <SSD1306_Putc+0x100>)
 80011cc:	885b      	ldrh	r3, [r3, #2]
 80011ce:	001a      	movs	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	785b      	ldrb	r3, [r3, #1]
 80011d4:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011d6:	2b3f      	cmp	r3, #63	; 0x3f
 80011d8:	dd01      	ble.n	80011de <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e05e      	b.n	800129c <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e04a      	b.n	800127a <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3b20      	subs	r3, #32
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	7849      	ldrb	r1, [r1, #1]
 80011f2:	434b      	muls	r3, r1
 80011f4:	0019      	movs	r1, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	18cb      	adds	r3, r1, r3
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	e02f      	b.n	8001268 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	409a      	lsls	r2, r3
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	4013      	ands	r3, r2
 8001214:	d011      	beq.n	800123a <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <SSD1306_Putc+0x100>)
 8001218:	881a      	ldrh	r2, [r3, #0]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	b29b      	uxth	r3, r3
 800121e:	18d3      	adds	r3, r2, r3
 8001220:	b298      	uxth	r0, r3
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <SSD1306_Putc+0x100>)
 8001224:	885a      	ldrh	r2, [r3, #2]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	b29b      	uxth	r3, r3
 800122a:	18d3      	adds	r3, r2, r3
 800122c:	b299      	uxth	r1, r3
 800122e:	1dbb      	adds	r3, r7, #6
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	001a      	movs	r2, r3
 8001234:	f7ff ff30 	bl	8001098 <SSD1306_DrawPixel>
 8001238:	e013      	b.n	8001262 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <SSD1306_Putc+0x100>)
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	b29b      	uxth	r3, r3
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	b298      	uxth	r0, r3
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <SSD1306_Putc+0x100>)
 8001248:	885a      	ldrh	r2, [r3, #2]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	b29b      	uxth	r3, r3
 800124e:	18d3      	adds	r3, r2, r3
 8001250:	b299      	uxth	r1, r3
 8001252:	1dbb      	adds	r3, r7, #6
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	425a      	negs	r2, r3
 8001258:	4153      	adcs	r3, r2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	001a      	movs	r2, r3
 800125e:	f7ff ff1b 	bl	8001098 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	3301      	adds	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	001a      	movs	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4293      	cmp	r3, r2
 8001272:	d3c9      	bcc.n	8001208 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	001a      	movs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4293      	cmp	r3, r2
 8001284:	d3ae      	bcc.n	80011e4 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <SSD1306_Putc+0x100>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <SSD1306_Putc+0x100>)
 8001296:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001298:	1dfb      	adds	r3, r7, #7
 800129a:	781b      	ldrb	r3, [r3, #0]
}
 800129c:	0018      	movs	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	b006      	add	sp, #24
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000608 	.word	0x20000608

080012a8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 80012b6:	e013      	b.n	80012e0 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	0019      	movs	r1, r3
 80012c4:	f7ff ff6e 	bl	80011a4 <SSD1306_Putc>
 80012c8:	0003      	movs	r3, r0
 80012ca:	001a      	movs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d002      	beq.n	80012da <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	e008      	b.n	80012ec <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e7      	bne.n	80012b8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	0005      	movs	r5, r0
 80012fc:	000c      	movs	r4, r1
 80012fe:	0010      	movs	r0, r2
 8001300:	0019      	movs	r1, r3
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	1c2a      	adds	r2, r5, #0
 8001306:	801a      	strh	r2, [r3, #0]
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	1c22      	adds	r2, r4, #0
 800130c:	801a      	strh	r2, [r3, #0]
 800130e:	1cbb      	adds	r3, r7, #2
 8001310:	1c02      	adds	r2, r0, #0
 8001312:	801a      	strh	r2, [r3, #0]
 8001314:	003b      	movs	r3, r7
 8001316:	1c0a      	adds	r2, r1, #0
 8001318:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800131a:	1dbb      	adds	r3, r7, #6
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2b7f      	cmp	r3, #127	; 0x7f
 8001320:	d902      	bls.n	8001328 <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 8001322:	1dbb      	adds	r3, r7, #6
 8001324:	227f      	movs	r2, #127	; 0x7f
 8001326:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001328:	1cbb      	adds	r3, r7, #2
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	2b7f      	cmp	r3, #127	; 0x7f
 800132e:	d902      	bls.n	8001336 <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 8001330:	1cbb      	adds	r3, r7, #2
 8001332:	227f      	movs	r2, #127	; 0x7f
 8001334:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2b3f      	cmp	r3, #63	; 0x3f
 800133c:	d902      	bls.n	8001344 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	223f      	movs	r2, #63	; 0x3f
 8001342:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001344:	003b      	movs	r3, r7
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	2b3f      	cmp	r3, #63	; 0x3f
 800134a:	d902      	bls.n	8001352 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 800134c:	003b      	movs	r3, r7
 800134e:	223f      	movs	r2, #63	; 0x3f
 8001350:	801a      	strh	r2, [r3, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001352:	1dba      	adds	r2, r7, #6
 8001354:	1cbb      	adds	r3, r7, #2
 8001356:	8812      	ldrh	r2, [r2, #0]
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d207      	bcs.n	800136e <SSD1306_DrawLine+0x7a>
 800135e:	1cba      	adds	r2, r7, #2
 8001360:	1dbb      	adds	r3, r7, #6
 8001362:	8812      	ldrh	r2, [r2, #0]
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21b      	sxth	r3, r3
 800136c:	e006      	b.n	800137c <SSD1306_DrawLine+0x88>
 800136e:	1dba      	adds	r2, r7, #6
 8001370:	1cbb      	adds	r3, r7, #2
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	b21b      	sxth	r3, r3
 800137c:	2212      	movs	r2, #18
 800137e:	18ba      	adds	r2, r7, r2
 8001380:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001382:	1d3a      	adds	r2, r7, #4
 8001384:	003b      	movs	r3, r7
 8001386:	8812      	ldrh	r2, [r2, #0]
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d207      	bcs.n	800139e <SSD1306_DrawLine+0xaa>
 800138e:	003a      	movs	r2, r7
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	8812      	ldrh	r2, [r2, #0]
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	b21b      	sxth	r3, r3
 800139c:	e006      	b.n	80013ac <SSD1306_DrawLine+0xb8>
 800139e:	1d3a      	adds	r2, r7, #4
 80013a0:	003b      	movs	r3, r7
 80013a2:	8812      	ldrh	r2, [r2, #0]
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	2210      	movs	r2, #16
 80013ae:	18ba      	adds	r2, r7, r2
 80013b0:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1; 
 80013b2:	1dba      	adds	r2, r7, #6
 80013b4:	1cbb      	adds	r3, r7, #2
 80013b6:	8812      	ldrh	r2, [r2, #0]
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d201      	bcs.n	80013c2 <SSD1306_DrawLine+0xce>
 80013be:	2201      	movs	r2, #1
 80013c0:	e001      	b.n	80013c6 <SSD1306_DrawLine+0xd2>
 80013c2:	2301      	movs	r3, #1
 80013c4:	425a      	negs	r2, r3
 80013c6:	230e      	movs	r3, #14
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1; 
 80013cc:	1d3a      	adds	r2, r7, #4
 80013ce:	003b      	movs	r3, r7
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d201      	bcs.n	80013dc <SSD1306_DrawLine+0xe8>
 80013d8:	2201      	movs	r2, #1
 80013da:	e001      	b.n	80013e0 <SSD1306_DrawLine+0xec>
 80013dc:	2301      	movs	r3, #1
 80013de:	425a      	negs	r2, r3
 80013e0:	230c      	movs	r3, #12
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80013e6:	2112      	movs	r1, #18
 80013e8:	187a      	adds	r2, r7, r1
 80013ea:	2310      	movs	r3, #16
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	2000      	movs	r0, #0
 80013f0:	5e12      	ldrsh	r2, [r2, r0]
 80013f2:	2000      	movs	r0, #0
 80013f4:	5e1b      	ldrsh	r3, [r3, r0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dd08      	ble.n	800140c <SSD1306_DrawLine+0x118>
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	5e9b      	ldrsh	r3, [r3, r2]
 8001400:	2b00      	cmp	r3, #0
 8001402:	da00      	bge.n	8001406 <SSD1306_DrawLine+0x112>
 8001404:	3301      	adds	r3, #1
 8001406:	105b      	asrs	r3, r3, #1
 8001408:	b21b      	sxth	r3, r3
 800140a:	e009      	b.n	8001420 <SSD1306_DrawLine+0x12c>
 800140c:	2310      	movs	r3, #16
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	2200      	movs	r2, #0
 8001412:	5e9b      	ldrsh	r3, [r3, r2]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da00      	bge.n	800141a <SSD1306_DrawLine+0x126>
 8001418:	3301      	adds	r3, #1
 800141a:	105b      	asrs	r3, r3, #1
 800141c:	425b      	negs	r3, r3
 800141e:	b21b      	sxth	r3, r3
 8001420:	2216      	movs	r2, #22
 8001422:	18ba      	adds	r2, r7, r2
 8001424:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 8001426:	2312      	movs	r3, #18
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	2200      	movs	r2, #0
 800142c:	5e9b      	ldrsh	r3, [r3, r2]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d148      	bne.n	80014c4 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 8001432:	003a      	movs	r2, r7
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d20c      	bcs.n	8001458 <SSD1306_DrawLine+0x164>
			tmp = y1;
 800143e:	2108      	movs	r1, #8
 8001440:	187b      	adds	r3, r7, r1
 8001442:	003a      	movs	r2, r7
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 8001448:	003b      	movs	r3, r7
 800144a:	1d3a      	adds	r2, r7, #4
 800144c:	8812      	ldrh	r2, [r2, #0]
 800144e:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	187a      	adds	r2, r7, r1
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 8001458:	1cba      	adds	r2, r7, #2
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	8812      	ldrh	r2, [r2, #0]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d20c      	bcs.n	800147e <SSD1306_DrawLine+0x18a>
			tmp = x1;
 8001464:	2108      	movs	r1, #8
 8001466:	187b      	adds	r3, r7, r1
 8001468:	1cba      	adds	r2, r7, #2
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 800146e:	1cbb      	adds	r3, r7, #2
 8001470:	1dba      	adds	r2, r7, #6
 8001472:	8812      	ldrh	r2, [r2, #0]
 8001474:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	187a      	adds	r2, r7, r1
 800147a:	8812      	ldrh	r2, [r2, #0]
 800147c:	801a      	strh	r2, [r3, #0]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800147e:	2314      	movs	r3, #20
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	801a      	strh	r2, [r3, #0]
 8001488:	e013      	b.n	80014b2 <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 800148a:	2414      	movs	r4, #20
 800148c:	193b      	adds	r3, r7, r4
 800148e:	8819      	ldrh	r1, [r3, #0]
 8001490:	2328      	movs	r3, #40	; 0x28
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	1dbb      	adds	r3, r7, #6
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff fdfc 	bl	8001098 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014a0:	0021      	movs	r1, r4
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2200      	movs	r2, #0
 80014a6:	5e9b      	ldrsh	r3, [r3, r2]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	801a      	strh	r2, [r3, #0]
 80014b2:	2314      	movs	r3, #20
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	5e9a      	ldrsh	r2, [r3, r2]
 80014ba:	003b      	movs	r3, r7
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dde3      	ble.n	800148a <SSD1306_DrawLine+0x196>
		}
		
		/* Return from function */
		return;
 80014c2:	e0a3      	b.n	800160c <SSD1306_DrawLine+0x318>
	}
	
	if (dy == 0) {
 80014c4:	2310      	movs	r3, #16
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	5e9b      	ldrsh	r3, [r3, r2]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d148      	bne.n	8001562 <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 80014d0:	003a      	movs	r2, r7
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	8812      	ldrh	r2, [r2, #0]
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d20c      	bcs.n	80014f6 <SSD1306_DrawLine+0x202>
			tmp = y1;
 80014dc:	2108      	movs	r1, #8
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	003a      	movs	r2, r7
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 80014e6:	003b      	movs	r3, r7
 80014e8:	1d3a      	adds	r2, r7, #4
 80014ea:	8812      	ldrh	r2, [r2, #0]
 80014ec:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	187a      	adds	r2, r7, r1
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 80014f6:	1cba      	adds	r2, r7, #2
 80014f8:	1dbb      	adds	r3, r7, #6
 80014fa:	8812      	ldrh	r2, [r2, #0]
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d20c      	bcs.n	800151c <SSD1306_DrawLine+0x228>
			tmp = x1;
 8001502:	2108      	movs	r1, #8
 8001504:	187b      	adds	r3, r7, r1
 8001506:	1cba      	adds	r2, r7, #2
 8001508:	8812      	ldrh	r2, [r2, #0]
 800150a:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	1dba      	adds	r2, r7, #6
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8001514:	1dbb      	adds	r3, r7, #6
 8001516:	187a      	adds	r2, r7, r1
 8001518:	8812      	ldrh	r2, [r2, #0]
 800151a:	801a      	strh	r2, [r3, #0]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800151c:	2314      	movs	r3, #20
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	1dba      	adds	r2, r7, #6
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	e013      	b.n	8001550 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 8001528:	2414      	movs	r4, #20
 800152a:	193b      	adds	r3, r7, r4
 800152c:	8818      	ldrh	r0, [r3, #0]
 800152e:	2328      	movs	r3, #40	; 0x28
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	f7ff fdad 	bl	8001098 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800153e:	0021      	movs	r1, r4
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2200      	movs	r2, #0
 8001544:	5e9b      	ldrsh	r3, [r3, r2]
 8001546:	b29b      	uxth	r3, r3
 8001548:	3301      	adds	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	187b      	adds	r3, r7, r1
 800154e:	801a      	strh	r2, [r3, #0]
 8001550:	2314      	movs	r3, #20
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2200      	movs	r2, #0
 8001556:	5e9a      	ldrsh	r2, [r3, r2]
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	dde3      	ble.n	8001528 <SSD1306_DrawLine+0x234>
		}
		
		/* Return from function */
		return;
 8001560:	e054      	b.n	800160c <SSD1306_DrawLine+0x318>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001562:	2328      	movs	r3, #40	; 0x28
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	8819      	ldrh	r1, [r3, #0]
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fd91 	bl	8001098 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001576:	1dba      	adds	r2, r7, #6
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	8812      	ldrh	r2, [r2, #0]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d105      	bne.n	800158e <SSD1306_DrawLine+0x29a>
 8001582:	1d3a      	adds	r2, r7, #4
 8001584:	003b      	movs	r3, r7
 8001586:	8812      	ldrh	r2, [r2, #0]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d03d      	beq.n	800160a <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err; 
 800158e:	200a      	movs	r0, #10
 8001590:	183b      	adds	r3, r7, r0
 8001592:	2116      	movs	r1, #22
 8001594:	187a      	adds	r2, r7, r1
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 800159a:	183b      	adds	r3, r7, r0
 800159c:	2200      	movs	r2, #0
 800159e:	5e9a      	ldrsh	r2, [r3, r2]
 80015a0:	2312      	movs	r3, #18
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	2000      	movs	r0, #0
 80015a6:	5e1b      	ldrsh	r3, [r3, r0]
 80015a8:	425b      	negs	r3, r3
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dd10      	ble.n	80015d0 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	881a      	ldrh	r2, [r3, #0]
 80015b2:	2310      	movs	r3, #16
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 80015c0:	230e      	movs	r3, #14
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	8819      	ldrh	r1, [r3, #0]
 80015c6:	1dbb      	adds	r3, r7, #6
 80015c8:	1dba      	adds	r2, r7, #6
 80015ca:	8812      	ldrh	r2, [r2, #0]
 80015cc:	188a      	adds	r2, r1, r2
 80015ce:	801a      	strh	r2, [r3, #0]
		} 
		if (e2 < dy) {
 80015d0:	230a      	movs	r3, #10
 80015d2:	18fa      	adds	r2, r7, r3
 80015d4:	2310      	movs	r3, #16
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2100      	movs	r1, #0
 80015da:	5e52      	ldrsh	r2, [r2, r1]
 80015dc:	2100      	movs	r1, #0
 80015de:	5e5b      	ldrsh	r3, [r3, r1]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dabe      	bge.n	8001562 <SSD1306_DrawLine+0x26e>
			err += dx;
 80015e4:	2116      	movs	r1, #22
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	2312      	movs	r3, #18
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 80015f8:	230c      	movs	r3, #12
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	8819      	ldrh	r1, [r3, #0]
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	1d3a      	adds	r2, r7, #4
 8001602:	8812      	ldrh	r2, [r2, #0]
 8001604:	188a      	adds	r2, r1, r2
 8001606:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 8001608:	e7ab      	b.n	8001562 <SSD1306_DrawLine+0x26e>
			break;
 800160a:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
 800160c:	46bd      	mov	sp, r7
 800160e:	b006      	add	sp, #24
 8001610:	bdb0      	pop	{r4, r5, r7, pc}

08001612 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001612:	b5b0      	push	{r4, r5, r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af02      	add	r7, sp, #8
 8001618:	0005      	movs	r5, r0
 800161a:	000c      	movs	r4, r1
 800161c:	0010      	movs	r0, r2
 800161e:	0019      	movs	r1, r3
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	1c2a      	adds	r2, r5, #0
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	1c22      	adds	r2, r4, #0
 800162a:	801a      	strh	r2, [r3, #0]
 800162c:	1cbb      	adds	r3, r7, #2
 800162e:	1c02      	adds	r2, r0, #0
 8001630:	801a      	strh	r2, [r3, #0]
 8001632:	003b      	movs	r3, r7
 8001634:	1c0a      	adds	r2, r1, #0
 8001636:	801a      	strh	r2, [r3, #0]
	/* Check input parameters */
	if (
 8001638:	1dbb      	adds	r3, r7, #6
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b7f      	cmp	r3, #127	; 0x7f
 800163e:	d900      	bls.n	8001642 <SSD1306_DrawRectangle+0x30>
 8001640:	e07a      	b.n	8001738 <SSD1306_DrawRectangle+0x126>
		x >= SSD1306_WIDTH ||
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2b3f      	cmp	r3, #63	; 0x3f
 8001648:	d900      	bls.n	800164c <SSD1306_DrawRectangle+0x3a>
 800164a:	e075      	b.n	8001738 <SSD1306_DrawRectangle+0x126>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800164c:	1dbb      	adds	r3, r7, #6
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	1cbb      	adds	r3, r7, #2
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	18d3      	adds	r3, r2, r3
 8001656:	2b7f      	cmp	r3, #127	; 0x7f
 8001658:	dd05      	ble.n	8001666 <SSD1306_DrawRectangle+0x54>
		w = SSD1306_WIDTH - x;
 800165a:	1cbb      	adds	r3, r7, #2
 800165c:	1dba      	adds	r2, r7, #6
 800165e:	8812      	ldrh	r2, [r2, #0]
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	1a8a      	subs	r2, r1, r2
 8001664:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	003b      	movs	r3, r7
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	18d3      	adds	r3, r2, r3
 8001670:	2b3f      	cmp	r3, #63	; 0x3f
 8001672:	dd05      	ble.n	8001680 <SSD1306_DrawRectangle+0x6e>
		h = SSD1306_HEIGHT - y;
 8001674:	003b      	movs	r3, r7
 8001676:	1d3a      	adds	r2, r7, #4
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	1a8a      	subs	r2, r1, r2
 800167e:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001680:	1dba      	adds	r2, r7, #6
 8001682:	1cbb      	adds	r3, r7, #2
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	881c      	ldrh	r4, [r3, #0]
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	8819      	ldrh	r1, [r3, #0]
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	8818      	ldrh	r0, [r3, #0]
 8001698:	2518      	movs	r5, #24
 800169a:	197b      	adds	r3, r7, r5
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	0023      	movs	r3, r4
 80016a2:	f7ff fe27 	bl	80012f4 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80016a6:	1d3a      	adds	r2, r7, #4
 80016a8:	003b      	movs	r3, r7
 80016aa:	8812      	ldrh	r2, [r2, #0]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	b299      	uxth	r1, r3
 80016b2:	1dba      	adds	r2, r7, #6
 80016b4:	1cbb      	adds	r3, r7, #2
 80016b6:	8812      	ldrh	r2, [r2, #0]
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	18d3      	adds	r3, r2, r3
 80016bc:	b29c      	uxth	r4, r3
 80016be:	1d3a      	adds	r2, r7, #4
 80016c0:	003b      	movs	r3, r7
 80016c2:	8812      	ldrh	r2, [r2, #0]
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	1dbb      	adds	r3, r7, #6
 80016cc:	8818      	ldrh	r0, [r3, #0]
 80016ce:	197b      	adds	r3, r7, r5
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	0013      	movs	r3, r2
 80016d6:	0022      	movs	r2, r4
 80016d8:	f7ff fe0c 	bl	80012f4 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80016dc:	1d3a      	adds	r2, r7, #4
 80016de:	003b      	movs	r3, r7
 80016e0:	8812      	ldrh	r2, [r2, #0]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	b29c      	uxth	r4, r3
 80016e8:	1dbb      	adds	r3, r7, #6
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	8819      	ldrh	r1, [r3, #0]
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	8818      	ldrh	r0, [r3, #0]
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	0023      	movs	r3, r4
 80016fc:	f7ff fdfa 	bl	80012f4 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001700:	1dba      	adds	r2, r7, #6
 8001702:	1cbb      	adds	r3, r7, #2
 8001704:	8812      	ldrh	r2, [r2, #0]
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	18d3      	adds	r3, r2, r3
 800170a:	b298      	uxth	r0, r3
 800170c:	1dba      	adds	r2, r7, #6
 800170e:	1cbb      	adds	r3, r7, #2
 8001710:	8812      	ldrh	r2, [r2, #0]
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	b29c      	uxth	r4, r3
 8001718:	1d3a      	adds	r2, r7, #4
 800171a:	003b      	movs	r3, r7
 800171c:	8812      	ldrh	r2, [r2, #0]
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	8819      	ldrh	r1, [r3, #0]
 8001728:	197b      	adds	r3, r7, r5
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	0013      	movs	r3, r2
 8001730:	0022      	movs	r2, r4
 8001732:	f7ff fddf 	bl	80012f4 <SSD1306_DrawLine>
 8001736:	e000      	b.n	800173a <SSD1306_DrawRectangle+0x128>
		return;
 8001738:	46c0      	nop			; (mov r8, r8)
}
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bdb0      	pop	{r4, r5, r7, pc}

08001740 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af02      	add	r7, sp, #8
 8001746:	0005      	movs	r5, r0
 8001748:	000c      	movs	r4, r1
 800174a:	0010      	movs	r0, r2
 800174c:	0019      	movs	r1, r3
 800174e:	1dbb      	adds	r3, r7, #6
 8001750:	1c2a      	adds	r2, r5, #0
 8001752:	801a      	strh	r2, [r3, #0]
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	1c22      	adds	r2, r4, #0
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	1cbb      	adds	r3, r7, #2
 800175c:	1c02      	adds	r2, r0, #0
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	003b      	movs	r3, r7
 8001762:	1c0a      	adds	r2, r1, #0
 8001764:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001766:	1dbb      	adds	r3, r7, #6
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	2b7f      	cmp	r3, #127	; 0x7f
 800176c:	d850      	bhi.n	8001810 <SSD1306_DrawFilledRectangle+0xd0>
		x >= SSD1306_WIDTH ||
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	2b3f      	cmp	r3, #63	; 0x3f
 8001774:	d84c      	bhi.n	8001810 <SSD1306_DrawFilledRectangle+0xd0>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	1cbb      	adds	r3, r7, #2
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	18d3      	adds	r3, r2, r3
 8001780:	2b7f      	cmp	r3, #127	; 0x7f
 8001782:	dd05      	ble.n	8001790 <SSD1306_DrawFilledRectangle+0x50>
		w = SSD1306_WIDTH - x;
 8001784:	1cbb      	adds	r3, r7, #2
 8001786:	1dba      	adds	r2, r7, #6
 8001788:	8812      	ldrh	r2, [r2, #0]
 800178a:	2180      	movs	r1, #128	; 0x80
 800178c:	1a8a      	subs	r2, r1, r2
 800178e:	801a      	strh	r2, [r3, #0]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	003b      	movs	r3, r7
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	18d3      	adds	r3, r2, r3
 800179a:	2b3f      	cmp	r3, #63	; 0x3f
 800179c:	dd05      	ble.n	80017aa <SSD1306_DrawFilledRectangle+0x6a>
		h = SSD1306_HEIGHT - y;
 800179e:	003b      	movs	r3, r7
 80017a0:	1d3a      	adds	r2, r7, #4
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	2140      	movs	r1, #64	; 0x40
 80017a6:	1a8a      	subs	r2, r1, r2
 80017a8:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80017aa:	230f      	movs	r3, #15
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	e024      	b.n	80017fe <SSD1306_DrawFilledRectangle+0xbe>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80017b4:	200f      	movs	r0, #15
 80017b6:	183b      	adds	r3, r7, r0
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	b299      	uxth	r1, r3
 80017c4:	1dba      	adds	r2, r7, #6
 80017c6:	1cbb      	adds	r3, r7, #2
 80017c8:	8812      	ldrh	r2, [r2, #0]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	b29c      	uxth	r4, r3
 80017d0:	0005      	movs	r5, r0
 80017d2:	183b      	adds	r3, r7, r0
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	18d3      	adds	r3, r2, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	1dbb      	adds	r3, r7, #6
 80017e2:	8818      	ldrh	r0, [r3, #0]
 80017e4:	2320      	movs	r3, #32
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	0013      	movs	r3, r2
 80017ee:	0022      	movs	r2, r4
 80017f0:	f7ff fd80 	bl	80012f4 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80017f4:	197b      	adds	r3, r7, r5
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	197b      	adds	r3, r7, r5
 80017fa:	3201      	adds	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	230f      	movs	r3, #15
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
 8001806:	003a      	movs	r2, r7
 8001808:	8812      	ldrh	r2, [r2, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d2d2      	bcs.n	80017b4 <SSD1306_DrawFilledRectangle+0x74>
 800180e:	e000      	b.n	8001812 <SSD1306_DrawFilledRectangle+0xd2>
		return;
 8001810:	46c0      	nop			; (mov r8, r8)
	}
}
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bdb0      	pop	{r4, r5, r7, pc}

08001818 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fc21 	bl	8001064 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001822:	f7ff fbeb 	bl	8000ffc <SSD1306_UpdateScreen>
}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <SSD1306_SetContrast>:
	SSD1306_WRITECOMMAND(0x8D);  
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}

void SSD1306_SetContrast(const uint8_t value) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	0002      	movs	r2, r0
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001838:	210f      	movs	r1, #15
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2281      	movs	r2, #129	; 0x81
 800183e:	701a      	strb	r2, [r3, #0]
    SSD1306_WRITECOMMAND(kSetContrastControlRegister);
 8001840:	187b      	adds	r3, r7, r1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	2078      	movs	r0, #120	; 0x78
 800184a:	f000 f88b 	bl	8001964 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(value);
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	001a      	movs	r2, r3
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	; 0x78
 8001858:	f000 f884 	bl	8001964 <ssd1306_I2C_Write>
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b004      	add	sp, #16
 8001862:	bd80      	pop	{r7, pc}

08001864 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <ssd1306_I2C_Init+0x24>)
 800186c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186e:	e002      	b.n	8001876 <ssd1306_I2C_Init+0x12>
		p--;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b002      	add	sp, #8
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	0003d090 	.word	0x0003d090

0800188c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b0c6      	sub	sp, #280	; 0x118
 8001890:	af02      	add	r7, sp, #8
 8001892:	0004      	movs	r4, r0
 8001894:	0008      	movs	r0, r1
 8001896:	603a      	str	r2, [r7, #0]
 8001898:	0019      	movs	r1, r3
 800189a:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <ssd1306_I2C_WriteMulti+0xc4>)
 800189c:	2588      	movs	r5, #136	; 0x88
 800189e:	006d      	lsls	r5, r5, #1
 80018a0:	195b      	adds	r3, r3, r5
 80018a2:	19db      	adds	r3, r3, r7
 80018a4:	1c22      	adds	r2, r4, #0
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <ssd1306_I2C_WriteMulti+0xc8>)
 80018aa:	002c      	movs	r4, r5
 80018ac:	191b      	adds	r3, r3, r4
 80018ae:	19db      	adds	r3, r3, r7
 80018b0:	1c02      	adds	r2, r0, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <ssd1306_I2C_WriteMulti+0xcc>)
 80018b6:	0020      	movs	r0, r4
 80018b8:	181b      	adds	r3, r3, r0
 80018ba:	19db      	adds	r3, r3, r7
 80018bc:	1c0a      	adds	r2, r1, #0
 80018be:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <ssd1306_I2C_WriteMulti+0xd0>)
 80018c2:	181b      	adds	r3, r3, r0
 80018c4:	19db      	adds	r3, r3, r7
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <ssd1306_I2C_WriteMulti+0xc8>)
 80018c8:	1812      	adds	r2, r2, r0
 80018ca:	19d2      	adds	r2, r2, r7
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80018d0:	2310      	movs	r3, #16
 80018d2:	33ff      	adds	r3, #255	; 0xff
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	e014      	b.n	8001906 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 80018dc:	2010      	movs	r0, #16
 80018de:	30ff      	adds	r0, #255	; 0xff
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	18d2      	adds	r2, r2, r3
 80018e8:	183b      	adds	r3, r7, r0
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	7811      	ldrb	r1, [r2, #0]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <ssd1306_I2C_WriteMulti+0xd0>)
 80018f2:	2488      	movs	r4, #136	; 0x88
 80018f4:	0064      	lsls	r4, r4, #1
 80018f6:	1912      	adds	r2, r2, r4
 80018f8:	19d2      	adds	r2, r2, r7
 80018fa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018fc:	183b      	adds	r3, r7, r0
 80018fe:	781a      	ldrb	r2, [r3, #0]
 8001900:	183b      	adds	r3, r7, r0
 8001902:	3201      	adds	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	2310      	movs	r3, #16
 8001908:	33ff      	adds	r3, #255	; 0xff
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <ssd1306_I2C_WriteMulti+0xcc>)
 8001912:	2188      	movs	r1, #136	; 0x88
 8001914:	0049      	lsls	r1, r1, #1
 8001916:	1852      	adds	r2, r2, r1
 8001918:	19d2      	adds	r2, r2, r7
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8dd      	bhi.n	80018dc <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <ssd1306_I2C_WriteMulti+0xc4>)
 8001922:	000a      	movs	r2, r1
 8001924:	189b      	adds	r3, r3, r2
 8001926:	19db      	adds	r3, r3, r7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b299      	uxth	r1, r3
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <ssd1306_I2C_WriteMulti+0xcc>)
 800192e:	189b      	adds	r3, r3, r2
 8001930:	19db      	adds	r3, r3, r7
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	3301      	adds	r3, #1
 8001936:	b29b      	uxth	r3, r3
 8001938:	220c      	movs	r2, #12
 800193a:	18ba      	adds	r2, r7, r2
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <ssd1306_I2C_WriteMulti+0xd4>)
 800193e:	240a      	movs	r4, #10
 8001940:	9400      	str	r4, [sp, #0]
 8001942:	f001 fdc7 	bl	80034d4 <HAL_I2C_Master_Transmit>
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b044      	add	sp, #272	; 0x110
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	fffffef7 	.word	0xfffffef7
 8001954:	fffffef6 	.word	0xfffffef6
 8001958:	fffffef4 	.word	0xfffffef4
 800195c:	fffffefc 	.word	0xfffffefc
 8001960:	200001b0 	.word	0x200001b0

08001964 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b087      	sub	sp, #28
 8001968:	af02      	add	r7, sp, #8
 800196a:	0004      	movs	r4, r0
 800196c:	0008      	movs	r0, r1
 800196e:	0011      	movs	r1, r2
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	1c22      	adds	r2, r4, #0
 8001974:	701a      	strb	r2, [r3, #0]
 8001976:	1dbb      	adds	r3, r7, #6
 8001978:	1c02      	adds	r2, r0, #0
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	1d7b      	adds	r3, r7, #5
 800197e:	1c0a      	adds	r2, r1, #0
 8001980:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8001982:	200c      	movs	r0, #12
 8001984:	183b      	adds	r3, r7, r0
 8001986:	1dba      	adds	r2, r7, #6
 8001988:	7812      	ldrb	r2, [r2, #0]
 800198a:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 800198c:	183b      	adds	r3, r7, r0
 800198e:	1d7a      	adds	r2, r7, #5
 8001990:	7812      	ldrb	r2, [r2, #0]
 8001992:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b299      	uxth	r1, r3
 800199a:	183a      	adds	r2, r7, r0
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <ssd1306_I2C_Write+0x4c>)
 800199e:	230a      	movs	r3, #10
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2302      	movs	r3, #2
 80019a4:	f001 fd96 	bl	80034d4 <HAL_I2C_Master_Transmit>
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b005      	add	sp, #20
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	200001b0 	.word	0x200001b0

080019b4 <setTheme>:
//markery wyboru
volatile int8_t markerPosition 		= 0; 			// polozenie wskaznika ustawianej wartosci
volatile int8_t arrayToken[5] 		= {0,0,0,0,0};	// ustawianie wartosci

void setTheme(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b092      	sub	sp, #72	; 0x48
 80019b8:	af00      	add	r7, sp, #0
	clearContent();
 80019ba:	f000 fe01 	bl	80025c0 <clearContent>
	switch (workStep)
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <setTheme+0x10c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b0b      	cmp	r3, #11
 80019c6:	d874      	bhi.n	8001ab2 <setTheme+0xfe>
 80019c8:	009a      	lsls	r2, r3, #2
 80019ca:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <setTheme+0x110>)
 80019cc:	18d3      	adds	r3, r2, r3
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	469f      	mov	pc, r3
	{
		case 0: // wyświetla logo
			showLogo();
 80019d2:	f000 f889 	bl	8001ae8 <showLogo>
			workStep++;
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <setTheme+0x10c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3301      	adds	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <setTheme+0x10c>)
 80019e2:	701a      	strb	r2, [r3, #0]
			SSD1306_UpdateScreen();
 80019e4:	f7ff fb0a 	bl	8000ffc <SSD1306_UpdateScreen>
			HAL_Delay(1000);
 80019e8:	23fa      	movs	r3, #250	; 0xfa
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 f999 	bl	8002d24 <HAL_Delay>
			SSD1306_Clear();
 80019f2:	f7ff ff11 	bl	8001818 <SSD1306_Clear>
			SSD1306_UpdateScreen();
 80019f6:	f7ff fb01 	bl	8000ffc <SSD1306_UpdateScreen>
			setTheme();
 80019fa:	f7ff ffdb 	bl	80019b4 <setTheme>
		break;
 80019fe:	e058      	b.n	8001ab2 <setTheme+0xfe>
		case 1: // wybór projektu - nowy lub istniejacy
			showLabelBar(DISP_PROJECT_LABEL);
 8001a00:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <setTheme+0x114>)
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 fdc0 	bl	8002588 <showLabelBar>
			progressBarWidth = (128 / ((PROJECT_COUNT + 1) / 2) + ((PROJECT_COUNT + 1) % 2));
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <setTheme+0x118>)
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	701a      	strb	r2, [r3, #0]
			progressBarStep = projectSelect / 2;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <setTheme+0x11c>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <setTheme+0x120>)
 8001a1a:	701a      	strb	r2, [r3, #0]
			paginationBar(progressBarWidth, progressBarStep);
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <setTheme+0x118>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <setTheme+0x120>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f000 fdd6 	bl	80025dc <paginationBar>
			showProjectSelectMenu();
 8001a30:	f000 f86c 	bl	8001b0c <showProjectSelectMenu>
		break;
 8001a34:	e03d      	b.n	8001ab2 <setTheme+0xfe>
		case 11:; // szczegoly projektu
			Project Handler = getProjectStructByID(projectSelect);
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <setTheme+0x11c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 fe1d 	bl	8002680 <getProjectStructByID>
			showProjectDetails(&Handler);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f000 f9c3 	bl	8001dd4 <showProjectDetails>
		break;
 8001a4e:	e030      	b.n	8001ab2 <setTheme+0xfe>
		case 2: // ustawienie szerokości karkasu
			showLabelBar(DISP_SET_WIDTH_LABEL);
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <setTheme+0x124>)
 8001a52:	0018      	movs	r0, r3
 8001a54:	f000 fd98 	bl	8002588 <showLabelBar>
			showValueScreen(CARCASS_WIDTH, 0, 0, FIRST_RUN);
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 fa48 	bl	8001ef4 <showValueScreen>
		break;
 8001a64:	e025      	b.n	8001ab2 <setTheme+0xfe>
		case 3: // ustawienie ilosci zwojow
			showLabelBar(DISP_SET_TURNS_LABEL);
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <setTheme+0x128>)
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fd8d 	bl	8002588 <showLabelBar>
			showValueScreen(CARCASS_COIL_TURNS, 0, 0, FIRST_RUN);
 8001a6e:	2301      	movs	r3, #1
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2001      	movs	r0, #1
 8001a76:	f000 fa3d 	bl	8001ef4 <showValueScreen>
		break;
 8001a7a:	e01a      	b.n	8001ab2 <setTheme+0xfe>
		case 4: // srednica uzwojenia
			showLabelBar(DISP_SET_DIAMETER_LABEL);
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <setTheme+0x12c>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 fd82 	bl	8002588 <showLabelBar>
			showValueScreen(WINDING_DIAMETER, 0, 0, FIRST_RUN);
 8001a84:	2301      	movs	r3, #1
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f000 fa32 	bl	8001ef4 <showValueScreen>
		break;
 8001a90:	e00f      	b.n	8001ab2 <setTheme+0xfe>
		case 5: // szybkosc nawijania
			showLabelBar(DISP_SET_DIAMETER_LABEL);
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <setTheme+0x12c>)
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 fd77 	bl	8002588 <showLabelBar>
			showValueScreen(WINDING_SPEED, 0, 0, FIRST_RUN);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f000 fa27 	bl	8001ef4 <showValueScreen>
		break;
 8001aa6:	e004      	b.n	8001ab2 <setTheme+0xfe>
		case 6: // podsumowanie
			showLabelBar(DISP_SET_SUMMARY_LABEL);
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <setTheme+0x130>)
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 fd6c 	bl	8002588 <showLabelBar>
		break;
 8001ab0:	46c0      	nop			; (mov r8, r8)
	}
	SSD1306_UpdateScreen();
 8001ab2:	f7ff faa3 	bl	8000ffc <SSD1306_UpdateScreen>
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b012      	add	sp, #72	; 0x48
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	2000060e 	.word	0x2000060e
 8001ac4:	080089f0 	.word	0x080089f0
 8001ac8:	08007470 	.word	0x08007470
 8001acc:	20000610 	.word	0x20000610
 8001ad0:	2000060f 	.word	0x2000060f
 8001ad4:	20000611 	.word	0x20000611
 8001ad8:	08007484 	.word	0x08007484
 8001adc:	08007494 	.word	0x08007494
 8001ae0:	080074a4 	.word	0x080074a4
 8001ae4:	080074b4 	.word	0x080074b4

08001ae8 <showLogo>:

// start - 0
// -------------------------------------------------------------------------------------
void showLogo(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af02      	add	r7, sp, #8
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001aee:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <showLogo+0x20>)
 8001af0:	2301      	movs	r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2340      	movs	r3, #64	; 0x40
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	2100      	movs	r1, #0
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff f919 	bl	8000d34 <SSD1306_DrawBitmap>
}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	080075f0 	.word	0x080075f0

08001b0c <showProjectSelectMenu>:

// wybór projektu - 1
// -------------------------------------------------------------------------------------
void showProjectSelectMenu(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b092      	sub	sp, #72	; 0x48
 8001b10:	af00      	add	r7, sp, #0
	uint8_t side = 5;
 8001b12:	2347      	movs	r3, #71	; 0x47
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2205      	movs	r2, #5
 8001b18:	701a      	strb	r2, [r3, #0]
	uint8_t display = projectSelect;
 8001b1a:	2346      	movs	r3, #70	; 0x46
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <showProjectSelectMenu+0x10c>)
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	701a      	strb	r2, [r3, #0]
	uint8_t step = 0;
 8001b24:	2345      	movs	r3, #69	; 0x45
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]

		if(projectSelect < 2)
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <showProjectSelectMenu+0x10c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d866      	bhi.n	8001c04 <showProjectSelectMenu+0xf8>
		{
			newTaskElement();
 8001b36:	f000 f871 	bl	8001c1c <newTaskElement>
			Project Handler = getProjectStructByID(1);
 8001b3a:	003b      	movs	r3, r7
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fd9e 	bl	8002680 <getProjectStructByID>
			showProjectElements(&Handler, 69);
 8001b44:	003b      	movs	r3, r7
 8001b46:	2145      	movs	r1, #69	; 0x45
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 f8af 	bl	8001cac <showProjectElements>
					showProjectElements(&Handler, side);
				}
				step++;
			}
		}
}
 8001b4e:	e05e      	b.n	8001c0e <showProjectSelectMenu+0x102>
				if(!step)
 8001b50:	2345      	movs	r3, #69	; 0x45
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d121      	bne.n	8001b9e <showProjectSelectMenu+0x92>
					if(projectSelect % 2)
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <showProjectSelectMenu+0x10c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <showProjectSelectMenu+0x68>
						side = 68;
 8001b6a:	2347      	movs	r3, #71	; 0x47
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2244      	movs	r2, #68	; 0x44
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e003      	b.n	8001b7c <showProjectSelectMenu+0x70>
						side = 5;
 8001b74:	2347      	movs	r3, #71	; 0x47
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2205      	movs	r2, #5
 8001b7a:	701a      	strb	r2, [r3, #0]
					Project Handler = getProjectStructByID(display);
 8001b7c:	003a      	movs	r2, r7
 8001b7e:	2346      	movs	r3, #70	; 0x46
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	0019      	movs	r1, r3
 8001b86:	0010      	movs	r0, r2
 8001b88:	f000 fd7a 	bl	8002680 <getProjectStructByID>
					showProjectElements(&Handler, side);
 8001b8c:	2347      	movs	r3, #71	; 0x47
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	003b      	movs	r3, r7
 8001b94:	0011      	movs	r1, r2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f888 	bl	8001cac <showProjectElements>
 8001b9c:	e02c      	b.n	8001bf8 <showProjectSelectMenu+0xec>
					if(projectSelect % 2)
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <showProjectSelectMenu+0x10c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00a      	beq.n	8001bc4 <showProjectSelectMenu+0xb8>
						display--;
 8001bae:	2146      	movs	r1, #70	; 0x46
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
						side = 5;
 8001bba:	2347      	movs	r3, #71	; 0x47
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e009      	b.n	8001bd8 <showProjectSelectMenu+0xcc>
						display++;
 8001bc4:	2146      	movs	r1, #70	; 0x46
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	3201      	adds	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
						side = 68;
 8001bd0:	2347      	movs	r3, #71	; 0x47
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2244      	movs	r2, #68	; 0x44
 8001bd6:	701a      	strb	r2, [r3, #0]
					Project Handler = getProjectStructByID(display);
 8001bd8:	003a      	movs	r2, r7
 8001bda:	2346      	movs	r3, #70	; 0x46
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	0019      	movs	r1, r3
 8001be2:	0010      	movs	r0, r2
 8001be4:	f000 fd4c 	bl	8002680 <getProjectStructByID>
					showProjectElements(&Handler, side);
 8001be8:	2347      	movs	r3, #71	; 0x47
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	003b      	movs	r3, r7
 8001bf0:	0011      	movs	r1, r2
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 f85a 	bl	8001cac <showProjectElements>
				step++;
 8001bf8:	2145      	movs	r1, #69	; 0x45
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	3201      	adds	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
			while(step < 2)
 8001c04:	2345      	movs	r3, #69	; 0x45
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d9a0      	bls.n	8001b50 <showProjectSelectMenu+0x44>
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b012      	add	sp, #72	; 0x48
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	2000060f 	.word	0x2000060f

08001c1c <newTaskElement>:

void newTaskElement(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
	bool color = 0;
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
	if((projectSelect + 3) % 2)
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <newTaskElement+0x80>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3303      	adds	r3, #3
 8001c30:	001a      	movs	r2, r3
 8001c32:	2301      	movs	r3, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <newTaskElement+0x34>
	{
		SSD1306_DrawFilledRectangle(5, 25, 56, 47, 1);
 8001c38:	2301      	movs	r3, #1
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	232f      	movs	r3, #47	; 0x2f
 8001c3e:	2238      	movs	r2, #56	; 0x38
 8001c40:	2119      	movs	r1, #25
 8001c42:	2005      	movs	r0, #5
 8001c44:	f7ff fd7c 	bl	8001740 <SSD1306_DrawFilledRectangle>
		color = 0;
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	e00a      	b.n	8001c66 <newTaskElement+0x4a>
	}
	else
	{
		SSD1306_DrawRectangle(5, 25, 56, 47, 1);
 8001c50:	2301      	movs	r3, #1
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	232f      	movs	r3, #47	; 0x2f
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	2119      	movs	r1, #25
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f7ff fcd9 	bl	8001612 <SSD1306_DrawRectangle>
		color = 1;
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
	}

	SSD1306_GotoXY(18, 33);
 8001c66:	2121      	movs	r1, #33	; 0x21
 8001c68:	2012      	movs	r0, #18
 8001c6a:	f7ff fa83 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts("Nowe", &Font_7x10, color);
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <newTaskElement+0x84>)
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <newTaskElement+0x88>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff fb16 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(9, 46);
 8001c7c:	212e      	movs	r1, #46	; 0x2e
 8001c7e:	2009      	movs	r0, #9
 8001c80:	f7ff fa78 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts("zadanie", &Font_7x10, color);
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	4905      	ldr	r1, [pc, #20]	; (8001ca0 <newTaskElement+0x84>)
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <newTaskElement+0x8c>)
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff fb0b 	bl	80012a8 <SSD1306_Puts>
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	2000060f 	.word	0x2000060f
 8001ca0:	20000114 	.word	0x20000114
 8001ca4:	080074c4 	.word	0x080074c4
 8001ca8:	080074cc 	.word	0x080074cc

08001cac <showProjectElements>:

void showProjectElements(Project * project, uint8_t margin)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	1cfb      	adds	r3, r7, #3
 8001cb8:	701a      	strb	r2, [r3, #0]
	bool color = 0;
 8001cba:	240f      	movs	r4, #15
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	if(margin == 5)
 8001cc2:	1cfb      	adds	r3, r7, #3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d124      	bne.n	8001d14 <showProjectElements+0x68>
	{
		if((projectSelect + 3) % 2)
 8001cca:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <showProjectElements+0x120>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <showProjectElements+0x4a>
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001cda:	1cfb      	adds	r3, r7, #3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	232f      	movs	r3, #47	; 0x2f
 8001ce6:	2238      	movs	r2, #56	; 0x38
 8001ce8:	2119      	movs	r1, #25
 8001cea:	f7ff fd29 	bl	8001740 <SSD1306_DrawFilledRectangle>
			color = 0;
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e033      	b.n	8001d5e <showProjectElements+0xb2>
		}
		else
		{
			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001cf6:	1cfb      	adds	r3, r7, #3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	232f      	movs	r3, #47	; 0x2f
 8001d02:	2238      	movs	r2, #56	; 0x38
 8001d04:	2119      	movs	r1, #25
 8001d06:	f7ff fc84 	bl	8001612 <SSD1306_DrawRectangle>
			color = 1;
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e024      	b.n	8001d5e <showProjectElements+0xb2>
		}
	}
	else
	{
		if((projectSelect + 3) % 2)
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <showProjectElements+0x120>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3303      	adds	r3, #3
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d00e      	beq.n	8001d42 <showProjectElements+0x96>
		{

			SSD1306_DrawRectangle(margin, 25, 56, 47, 1);
 8001d24:	1cfb      	adds	r3, r7, #3
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b298      	uxth	r0, r3
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	232f      	movs	r3, #47	; 0x2f
 8001d30:	2238      	movs	r2, #56	; 0x38
 8001d32:	2119      	movs	r1, #25
 8001d34:	f7ff fc6d 	bl	8001612 <SSD1306_DrawRectangle>
			color = 1;
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	e00d      	b.n	8001d5e <showProjectElements+0xb2>
		}
		else
		{
			SSD1306_DrawFilledRectangle(margin, 25, 56, 47, 1);
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b298      	uxth	r0, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	232f      	movs	r3, #47	; 0x2f
 8001d4e:	2238      	movs	r2, #56	; 0x38
 8001d50:	2119      	movs	r1, #25
 8001d52:	f7ff fcf5 	bl	8001740 <SSD1306_DrawFilledRectangle>
			color = 0;
 8001d56:	230f      	movs	r3, #15
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
		}
	}
	margin += 4;
 8001d5e:	1cfb      	adds	r3, r7, #3
 8001d60:	1cfa      	adds	r2, r7, #3
 8001d62:	7812      	ldrb	r2, [r2, #0]
 8001d64:	3204      	adds	r2, #4
 8001d66:	701a      	strb	r2, [r3, #0]
	SSD1306_GotoXY(margin, 29);
 8001d68:	1cfb      	adds	r3, r7, #3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	211d      	movs	r1, #29
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff f9ff 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(project->shortName, &Font_7x10, color);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6858      	ldr	r0, [r3, #4]
 8001d7a:	240f      	movs	r4, #15
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <showProjectElements+0x124>)
 8001d82:	0019      	movs	r1, r3
 8001d84:	f7ff fa90 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 40);
 8001d88:	1cfb      	adds	r3, r7, #3
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2128      	movs	r1, #40	; 0x28
 8001d90:	0018      	movs	r0, r3
 8001d92:	f7ff f9ef 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(project->desc1, &Font_7x10, color);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6898      	ldr	r0, [r3, #8]
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <showProjectElements+0x124>)
 8001da0:	0019      	movs	r1, r3
 8001da2:	f7ff fa81 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(margin, 51);
 8001da6:	1cfb      	adds	r3, r7, #3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2133      	movs	r1, #51	; 0x33
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff f9e0 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(project->desc2, &Font_7x10, color);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68d8      	ldr	r0, [r3, #12]
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <showProjectElements+0x124>)
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	f7ff fa72 	bl	80012a8 <SSD1306_Puts>
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b005      	add	sp, #20
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	2000060f 	.word	0x2000060f
 8001dd0:	20000114 	.word	0x20000114

08001dd4 <showProjectDetails>:

// szczegoly projektu - 11
// -------------------------------------------------------------------------------------

void showProjectDetails(Project * project)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

	char width[10];
	sprintf(width, "%i.%imm", project->width / 10, project->width % 10);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8b1b      	ldrh	r3, [r3, #24]
 8001de0:	210a      	movs	r1, #10
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7fe f9a2 	bl	800012c <__udivsi3>
 8001de8:	0003      	movs	r3, r0
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	001c      	movs	r4, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8b1b      	ldrh	r3, [r3, #24]
 8001df2:	210a      	movs	r1, #10
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7fe fa1f 	bl	8000238 <__aeabi_uidivmod>
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4938      	ldr	r1, [pc, #224]	; (8001ee0 <showProjectDetails+0x10c>)
 8001e00:	250c      	movs	r5, #12
 8001e02:	1978      	adds	r0, r7, r5
 8001e04:	0022      	movs	r2, r4
 8001e06:	f004 feb7 	bl	8006b78 <siprintf>
	showLabelBar(project->fullName);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fbba 	bl	8002588 <showLabelBar>
	SSD1306_GotoXY(0, 20);
 8001e14:	2114      	movs	r1, #20
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff f9ac 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(WIDTH_LABEL, &Font_7x10, 1);
 8001e1c:	4931      	ldr	r1, [pc, #196]	; (8001ee4 <showProjectDetails+0x110>)
 8001e1e:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <showProjectDetails+0x114>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	0018      	movs	r0, r3
 8001e24:	f7ff fa40 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(70, 20);
 8001e28:	2114      	movs	r1, #20
 8001e2a:	2046      	movs	r0, #70	; 0x46
 8001e2c:	f7ff f9a2 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(width, &Font_7x10, 1);
 8001e30:	492c      	ldr	r1, [pc, #176]	; (8001ee4 <showProjectDetails+0x110>)
 8001e32:	197b      	adds	r3, r7, r5
 8001e34:	2201      	movs	r2, #1
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7ff fa36 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(0, 31);
 8001e3c:	211f      	movs	r1, #31
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff f998 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(TASK_NO_LABEL, &Font_7x10, 1);
 8001e44:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <showProjectDetails+0x110>)
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <showProjectDetails+0x118>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff fa2c 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(70, 31);
 8001e50:	211f      	movs	r1, #31
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f7ff f98e 	bl	8001174 <SSD1306_GotoXY>
	uint8_t count = countArray(project);
 8001e58:	2617      	movs	r6, #23
 8001e5a:	19bc      	adds	r4, r7, r6
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fbdd 	bl	800261e <countArray>
 8001e64:	0003      	movs	r3, r0
 8001e66:	7023      	strb	r3, [r4, #0]
	sprintf(width, "%i", count);
 8001e68:	19bb      	adds	r3, r7, r6
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4920      	ldr	r1, [pc, #128]	; (8001ef0 <showProjectDetails+0x11c>)
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	0018      	movs	r0, r3
 8001e72:	f004 fe81 	bl	8006b78 <siprintf>
	SSD1306_Puts(width, &Font_7x10, 1);
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <showProjectDetails+0x110>)
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fa13 	bl	80012a8 <SSD1306_Puts>

	char * desc1;
	char * desc2;
	if(!project->desc1F)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <showProjectDetails+0xbe>
	{
		desc1 = project->desc1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	e002      	b.n	8001e98 <showProjectDetails+0xc4>
	}
	else
	{
		desc1 = project->desc1F;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	61fb      	str	r3, [r7, #28]
	}
	if(!project->desc2F)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d103      	bne.n	8001ea8 <showProjectDetails+0xd4>
	{
		desc2 = project->desc2;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	e002      	b.n	8001eae <showProjectDetails+0xda>
	}
	else
	{
		desc2 = project->desc2F;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	61bb      	str	r3, [r7, #24]
	}
	SSD1306_GotoXY(0, 42);
 8001eae:	212a      	movs	r1, #42	; 0x2a
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff f95f 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(desc1, &Font_7x10, 1);
 8001eb6:	490b      	ldr	r1, [pc, #44]	; (8001ee4 <showProjectDetails+0x110>)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff f9f3 	bl	80012a8 <SSD1306_Puts>
	SSD1306_GotoXY(0, 53);
 8001ec2:	2135      	movs	r1, #53	; 0x35
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff f955 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(desc2, &Font_7x10, 1);
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <showProjectDetails+0x110>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff f9e9 	bl	80012a8 <SSD1306_Puts>
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b009      	add	sp, #36	; 0x24
 8001edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	080074d4 	.word	0x080074d4
 8001ee4:	20000114 	.word	0x20000114
 8001ee8:	080074dc 	.word	0x080074dc
 8001eec:	080074e8 	.word	0x080074e8
 8001ef0:	080074f4 	.word	0x080074f4

08001ef4 <showValueScreen>:

// ustawianie wartosci - 2++
// -------------------------------------------------------------------------------------
void showValueScreen(VALUE_TYPE type, uint8_t runMode, bool direction, bool first)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	0005      	movs	r5, r0
 8001efc:	000c      	movs	r4, r1
 8001efe:	0010      	movs	r0, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	1c2a      	adds	r2, r5, #0
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	1dbb      	adds	r3, r7, #6
 8001f0a:	1c22      	adds	r2, r4, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	1d7b      	adds	r3, r7, #5
 8001f10:	1c02      	adds	r2, r0, #0
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	1c0a      	adds	r2, r1, #0
 8001f18:	701a      	strb	r2, [r3, #0]
	char valueLettering[10];
	uint8_t typeToken = type;
 8001f1a:	2117      	movs	r1, #23
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	1dfa      	adds	r2, r7, #7
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	701a      	strb	r2, [r3, #0]

	switch (typeToken)
 8001f24:	187b      	adds	r3, r7, r1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d100      	bne.n	8001f2e <showValueScreen+0x3a>
 8001f2c:	e0c7      	b.n	80020be <showValueScreen+0x1ca>
 8001f2e:	dd00      	ble.n	8001f32 <showValueScreen+0x3e>
 8001f30:	e0f7      	b.n	8002122 <showValueScreen+0x22e>
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d100      	bne.n	8001f38 <showValueScreen+0x44>
 8001f36:	e088      	b.n	800204a <showValueScreen+0x156>
 8001f38:	dd00      	ble.n	8001f3c <showValueScreen+0x48>
 8001f3a:	e0f2      	b.n	8002122 <showValueScreen+0x22e>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <showValueScreen+0x52>
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d041      	beq.n	8001fc8 <showValueScreen+0xd4>
 8001f44:	e0ed      	b.n	8002122 <showValueScreen+0x22e>
	{
		case 0:
			if(first) {
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00d      	beq.n	8001f6a <showValueScreen+0x76>
				SSD1306_DrawBitmap(0, 0, width, 128, 64, 1);
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <showValueScreen+0x254>)
 8001f50:	2301      	movs	r3, #1
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2340      	movs	r3, #64	; 0x40
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7fe fee9 	bl	8000d34 <SSD1306_DrawBitmap>
				intToArray_chVal(CARCASS_MIN_WIDTH);
 8001f62:	2032      	movs	r0, #50	; 0x32
 8001f64:	f000 fa54 	bl	8002410 <intToArray_chVal>
 8001f68:	e012      	b.n	8001f90 <showValueScreen+0x9c>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, CARCASS_MIN_WIDTH, CARCASS_MAX_WIDTH);}
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <showValueScreen+0x96>
 8001f72:	4b76      	ldr	r3, [pc, #472]	; (800214c <showValueScreen+0x258>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	b2d9      	uxtb	r1, r3
 8001f7a:	4a75      	ldr	r2, [pc, #468]	; (8002150 <showValueScreen+0x25c>)
 8001f7c:	1d7b      	adds	r3, r7, #5
 8001f7e:	7818      	ldrb	r0, [r3, #0]
 8001f80:	0013      	movs	r3, r2
 8001f82:	2232      	movs	r2, #50	; 0x32
 8001f84:	f000 f952 	bl	800222c <changeValue>
 8001f88:	e002      	b.n	8001f90 <showValueScreen+0x9c>
				else{moveMarker(4);}
 8001f8a:	2004      	movs	r0, #4
 8001f8c:	f000 f92e 	bl	80021ec <moveMarker>
			}
			setMarkerPosition(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f000 f8f3 	bl	800217c <setMarkerPosition>
			sprintf(valueLettering, "%i%i%i.%imm", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 8001f96:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <showValueScreen+0x260>)
 8001f98:	78db      	ldrb	r3, [r3, #3]
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <showValueScreen+0x260>)
 8001fa0:	789b      	ldrb	r3, [r3, #2]
 8001fa2:	b25b      	sxtb	r3, r3
 8001fa4:	001d      	movs	r5, r3
 8001fa6:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <showValueScreen+0x260>)
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	001a      	movs	r2, r3
 8001fae:	4b69      	ldr	r3, [pc, #420]	; (8002154 <showValueScreen+0x260>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	4968      	ldr	r1, [pc, #416]	; (8002158 <showValueScreen+0x264>)
 8001fb6:	200c      	movs	r0, #12
 8001fb8:	1838      	adds	r0, r7, r0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	002b      	movs	r3, r5
 8001fc0:	0022      	movs	r2, r4
 8001fc2:	f004 fdd9 	bl	8006b78 <siprintf>
		break;
 8001fc6:	e0ac      	b.n	8002122 <showValueScreen+0x22e>
		case 1:
			if(first) {
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00d      	beq.n	8001fec <showValueScreen+0xf8>
				SSD1306_DrawBitmap(0, 0, turns, 128, 64, 1);
 8001fd0:	4a62      	ldr	r2, [pc, #392]	; (800215c <showValueScreen+0x268>)
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe fea8 	bl	8000d34 <SSD1306_DrawBitmap>
				intToArray_chVal(CARCASS_MIN_TURNS);
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f000 fa13 	bl	8002410 <intToArray_chVal>
 8001fea:	e012      	b.n	8002012 <showValueScreen+0x11e>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, CARCASS_MIN_TURNS, CARCASS_MAX_TURNS);}
 8001fec:	1dbb      	adds	r3, r7, #6
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <showValueScreen+0x118>
 8001ff4:	4b55      	ldr	r3, [pc, #340]	; (800214c <showValueScreen+0x258>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	b2d9      	uxtb	r1, r3
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <showValueScreen+0x26c>)
 8001ffe:	1d7b      	adds	r3, r7, #5
 8002000:	7818      	ldrb	r0, [r3, #0]
 8002002:	0013      	movs	r3, r2
 8002004:	220a      	movs	r2, #10
 8002006:	f000 f911 	bl	800222c <changeValue>
 800200a:	e002      	b.n	8002012 <showValueScreen+0x11e>
				else{moveMarker(4);}
 800200c:	2004      	movs	r0, #4
 800200e:	f000 f8ed 	bl	80021ec <moveMarker>
			}
			setMarkerPosition(0);
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f8b2 	bl	800217c <setMarkerPosition>
			sprintf(valueLettering, "%i%i%i%izw.", arrayToken[3], arrayToken[2], arrayToken[1], arrayToken[0]);
 8002018:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <showValueScreen+0x260>)
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	b25b      	sxtb	r3, r3
 800201e:	001c      	movs	r4, r3
 8002020:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <showValueScreen+0x260>)
 8002022:	789b      	ldrb	r3, [r3, #2]
 8002024:	b25b      	sxtb	r3, r3
 8002026:	001d      	movs	r5, r3
 8002028:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <showValueScreen+0x260>)
 800202a:	785b      	ldrb	r3, [r3, #1]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	001a      	movs	r2, r3
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <showValueScreen+0x260>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b25b      	sxtb	r3, r3
 8002036:	494b      	ldr	r1, [pc, #300]	; (8002164 <showValueScreen+0x270>)
 8002038:	200c      	movs	r0, #12
 800203a:	1838      	adds	r0, r7, r0
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9200      	str	r2, [sp, #0]
 8002040:	002b      	movs	r3, r5
 8002042:	0022      	movs	r2, r4
 8002044:	f004 fd98 	bl	8006b78 <siprintf>
		break;
 8002048:	e06b      	b.n	8002122 <showValueScreen+0x22e>
		case 2:
			if(first) {
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <showValueScreen+0x17a>
				SSD1306_DrawBitmap(0, 0, diameter, 128, 64, 1);
 8002052:	4a45      	ldr	r2, [pc, #276]	; (8002168 <showValueScreen+0x274>)
 8002054:	2301      	movs	r3, #1
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	2100      	movs	r1, #0
 8002060:	2000      	movs	r0, #0
 8002062:	f7fe fe67 	bl	8000d34 <SSD1306_DrawBitmap>
				intToArray_chVal(WINDING_MIN_DIAMETER);
 8002066:	2001      	movs	r0, #1
 8002068:	f000 f9d2 	bl	8002410 <intToArray_chVal>
 800206c:	e011      	b.n	8002092 <showValueScreen+0x19e>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, WINDING_MIN_DIAMETER, WINDING_MAX_DIAMETER);}
 800206e:	1dbb      	adds	r3, r7, #6
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <showValueScreen+0x198>
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <showValueScreen+0x258>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	b2d9      	uxtb	r1, r3
 800207e:	1d7b      	adds	r3, r7, #5
 8002080:	7818      	ldrb	r0, [r3, #0]
 8002082:	23fa      	movs	r3, #250	; 0xfa
 8002084:	2201      	movs	r2, #1
 8002086:	f000 f8d1 	bl	800222c <changeValue>
 800208a:	e002      	b.n	8002092 <showValueScreen+0x19e>
				else{moveMarker(3);}
 800208c:	2003      	movs	r0, #3
 800208e:	f000 f8ad 	bl	80021ec <moveMarker>
			}
			setMarkerPosition(2);
 8002092:	2002      	movs	r0, #2
 8002094:	f000 f872 	bl	800217c <setMarkerPosition>
			sprintf(valueLettering, "~%i.%i%imm", arrayToken[2], arrayToken[1], arrayToken[0]);
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <showValueScreen+0x260>)
 800209a:	789b      	ldrb	r3, [r3, #2]
 800209c:	b25b      	sxtb	r3, r3
 800209e:	001a      	movs	r2, r3
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <showValueScreen+0x260>)
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	001c      	movs	r4, r3
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <showValueScreen+0x260>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	492f      	ldr	r1, [pc, #188]	; (800216c <showValueScreen+0x278>)
 80020b0:	200c      	movs	r0, #12
 80020b2:	1838      	adds	r0, r7, r0
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	0023      	movs	r3, r4
 80020b8:	f004 fd5e 	bl	8006b78 <siprintf>
		break;
 80020bc:	e031      	b.n	8002122 <showValueScreen+0x22e>
		case 3:
			if(first) {
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <showValueScreen+0x1ee>
				SSD1306_DrawBitmap(0, 0, speed, 128, 64, 1);
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <showValueScreen+0x27c>)
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	2100      	movs	r1, #0
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7fe fe2d 	bl	8000d34 <SSD1306_DrawBitmap>
				intToArray_chVal(WINDING_MIN_SPEED);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 f998 	bl	8002410 <intToArray_chVal>
 80020e0:	e011      	b.n	8002106 <showValueScreen+0x212>
			}
			else
			{
				if(runMode) {changeValue(direction, markerPosition, WINDING_MIN_SPEED, WINDING_MAX_SPEED);}
 80020e2:	1dbb      	adds	r3, r7, #6
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <showValueScreen+0x20c>
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <showValueScreen+0x258>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	b2d9      	uxtb	r1, r3
 80020f2:	1d7b      	adds	r3, r7, #5
 80020f4:	7818      	ldrb	r0, [r3, #0]
 80020f6:	2309      	movs	r3, #9
 80020f8:	2201      	movs	r2, #1
 80020fa:	f000 f897 	bl	800222c <changeValue>
 80020fe:	e002      	b.n	8002106 <showValueScreen+0x212>
				else{moveMarker(1);}
 8002100:	2001      	movs	r0, #1
 8002102:	f000 f873 	bl	80021ec <moveMarker>
			}
			setMarkerPosition(0);
 8002106:	2000      	movs	r0, #0
 8002108:	f000 f838 	bl	800217c <setMarkerPosition>
			sprintf(valueLettering, "   %i", arrayToken[0]);
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <showValueScreen+0x260>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b25b      	sxtb	r3, r3
 8002112:	001a      	movs	r2, r3
 8002114:	4917      	ldr	r1, [pc, #92]	; (8002174 <showValueScreen+0x280>)
 8002116:	230c      	movs	r3, #12
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	0018      	movs	r0, r3
 800211c:	f004 fd2c 	bl	8006b78 <siprintf>
		break;
 8002120:	46c0      	nop			; (mov r8, r8)
	}

	clearValue();
 8002122:	f000 fa14 	bl	800254e <clearValue>
	SSD1306_GotoXY(25, 20);
 8002126:	2114      	movs	r1, #20
 8002128:	2019      	movs	r0, #25
 800212a:	f7ff f823 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(valueLettering, &Font_11x18, 1);
 800212e:	4912      	ldr	r1, [pc, #72]	; (8002178 <showValueScreen+0x284>)
 8002130:	230c      	movs	r3, #12
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	2201      	movs	r2, #1
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff f8b6 	bl	80012a8 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800213c:	f7fe ff5e 	bl	8000ffc <SSD1306_UpdateScreen>
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	080079f0 	.word	0x080079f0
 800214c:	20000612 	.word	0x20000612
 8002150:	000004e2 	.word	0x000004e2
 8002154:	20000614 	.word	0x20000614
 8002158:	080074f8 	.word	0x080074f8
 800215c:	08007df0 	.word	0x08007df0
 8002160:	000009c4 	.word	0x000009c4
 8002164:	08007504 	.word	0x08007504
 8002168:	080081f0 	.word	0x080081f0
 800216c:	08007510 	.word	0x08007510
 8002170:	080085f0 	.word	0x080085f0
 8002174:	0800751c 	.word	0x0800751c
 8002178:	2000011c 	.word	0x2000011c

0800217c <setMarkerPosition>:

void setMarkerPosition(uint8_t divider)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	0002      	movs	r2, r0
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	701a      	strb	r2, [r3, #0]
	clearMarker();
 8002188:	f000 f9d3 	bl	8002532 <clearMarker>
	uint8_t correction = 0;
 800218c:	210f      	movs	r1, #15
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= divider)
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <setMarkerPosition+0x6c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25b      	sxtb	r3, r3
 800219a:	001a      	movs	r2, r3
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	db02      	blt.n	80021aa <setMarkerPosition+0x2e>
	{
		correction = 11;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	220b      	movs	r2, #11
 80021a8:	701a      	strb	r2, [r3, #0]
	}
	char margin = (73 - ((markerPosition * 11) + correction));
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <setMarkerPosition+0x6c>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b25b      	sxtb	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	1c1a      	adds	r2, r3, #0
 80021b4:	0092      	lsls	r2, r2, #2
 80021b6:	18d2      	adds	r2, r2, r3
 80021b8:	1892      	adds	r2, r2, r2
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	230f      	movs	r3, #15
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	18d3      	adds	r3, r2, r3
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	200e      	movs	r0, #14
 80021ca:	183b      	adds	r3, r7, r0
 80021cc:	2149      	movs	r1, #73	; 0x49
 80021ce:	1a8a      	subs	r2, r1, r2
 80021d0:	701a      	strb	r2, [r3, #0]
	drawMarker(margin, 39);
 80021d2:	183b      	adds	r3, r7, r0
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2127      	movs	r1, #39	; 0x27
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 f95f 	bl	800249c <drawMarker>
}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b004      	add	sp, #16
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000612 	.word	0x20000612

080021ec <moveMarker>:

void moveMarker(uint8_t range)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0002      	movs	r2, r0
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	701a      	strb	r2, [r3, #0]
	markerPosition++;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <moveMarker+0x3c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	3301      	adds	r3, #1
 8002202:	b2db      	uxtb	r3, r3
 8002204:	b25a      	sxtb	r2, r3
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <moveMarker+0x3c>)
 8002208:	701a      	strb	r2, [r3, #0]
	if(markerPosition >= range) {markerPosition = 0;}
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <moveMarker+0x3c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b25b      	sxtb	r3, r3
 8002210:	001a      	movs	r2, r3
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	db02      	blt.n	8002220 <moveMarker+0x34>
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <moveMarker+0x3c>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b002      	add	sp, #8
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000612 	.word	0x20000612

0800222c <changeValue>:

void changeValue(bool set, uint8_t position, uint16_t min, uint16_t max)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	0005      	movs	r5, r0
 8002234:	000c      	movs	r4, r1
 8002236:	0010      	movs	r0, r2
 8002238:	0019      	movs	r1, r3
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	1c2a      	adds	r2, r5, #0
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	1dbb      	adds	r3, r7, #6
 8002242:	1c22      	adds	r2, r4, #0
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	1c02      	adds	r2, r0, #0
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	1cbb      	adds	r3, r7, #2
 800224e:	1c0a      	adds	r2, r1, #0
 8002250:	801a      	strh	r2, [r3, #0]
	uint16_t value;
	uint16_t valueToken = arrayToInt_chVal();
 8002252:	2310      	movs	r3, #16
 8002254:	18fc      	adds	r4, r7, r3
 8002256:	f000 f8a1 	bl	800239c <arrayToInt_chVal>
 800225a:	0003      	movs	r3, r0
 800225c:	8023      	strh	r3, [r4, #0]
	uint16_t expo 		= 1;
 800225e:	2314      	movs	r3, #20
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2201      	movs	r2, #1
 8002264:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < position; i++)
 8002266:	2313      	movs	r3, #19
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e00e      	b.n	800228e <changeValue+0x62>
	{
		expo *= 10;
 8002270:	2314      	movs	r3, #20
 8002272:	18fa      	adds	r2, r7, r3
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	1c19      	adds	r1, r3, #0
 800227a:	0089      	lsls	r1, r1, #2
 800227c:	18cb      	adds	r3, r1, r3
 800227e:	18db      	adds	r3, r3, r3
 8002280:	8013      	strh	r3, [r2, #0]
	for(uint8_t i = 0; i < position; i++)
 8002282:	2113      	movs	r1, #19
 8002284:	187b      	adds	r3, r7, r1
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	187b      	adds	r3, r7, r1
 800228a:	3201      	adds	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	2313      	movs	r3, #19
 8002290:	18fa      	adds	r2, r7, r3
 8002292:	1dbb      	adds	r3, r7, #6
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3e9      	bcc.n	8002270 <changeValue+0x44>
	}

	uint8_t overflowFlag = arrayToken[position] = (valueToken / expo) % 10; // określa wartość cyfry nad markerem wyboru
 800229c:	2410      	movs	r4, #16
 800229e:	193a      	adds	r2, r7, r4
 80022a0:	2514      	movs	r5, #20
 80022a2:	197b      	adds	r3, r7, r5
 80022a4:	8812      	ldrh	r2, [r2, #0]
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	0019      	movs	r1, r3
 80022aa:	0010      	movs	r0, r2
 80022ac:	f7fd ff3e 	bl	800012c <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	210a      	movs	r1, #10
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7fd ffbe 	bl	8000238 <__aeabi_uidivmod>
 80022bc:	000b      	movs	r3, r1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b251      	sxtb	r1, r2
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <changeValue+0x16c>)
 80022c8:	1c08      	adds	r0, r1, #0
 80022ca:	54d0      	strb	r0, [r2, r3]
 80022cc:	200f      	movs	r0, #15
 80022ce:	183b      	adds	r3, r7, r0
 80022d0:	1c0a      	adds	r2, r1, #0
 80022d2:	701a      	strb	r2, [r3, #0]

	if(set)
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01d      	beq.n	8002318 <changeValue+0xec>
	{
		if(overflowFlag >= 9)
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d90e      	bls.n	8002302 <changeValue+0xd6>
		{
			value = valueToken - (expo * 9);
 80022e4:	197b      	adds	r3, r7, r5
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	1c1a      	adds	r2, r3, #0
 80022ea:	0352      	lsls	r2, r2, #13
 80022ec:	1ad2      	subs	r2, r2, r3
 80022ee:	00d2      	lsls	r2, r2, #3
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	b299      	uxth	r1, r3
 80022f4:	2316      	movs	r3, #22
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	193a      	adds	r2, r7, r4
 80022fa:	8812      	ldrh	r2, [r2, #0]
 80022fc:	188a      	adds	r2, r1, r2
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	e028      	b.n	8002354 <changeValue+0x128>
		}
		else
		{
			value = valueToken + expo;
 8002302:	2316      	movs	r3, #22
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2210      	movs	r2, #16
 8002308:	18b9      	adds	r1, r7, r2
 800230a:	2214      	movs	r2, #20
 800230c:	18ba      	adds	r2, r7, r2
 800230e:	8809      	ldrh	r1, [r1, #0]
 8002310:	8812      	ldrh	r2, [r2, #0]
 8002312:	188a      	adds	r2, r1, r2
 8002314:	801a      	strh	r2, [r3, #0]
 8002316:	e01d      	b.n	8002354 <changeValue+0x128>
		}
	}
	else
	{
		if(overflowFlag <= 0)
 8002318:	230f      	movs	r3, #15
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <changeValue+0x114>
		{
			value = valueToken + (expo * 9);
 8002322:	2314      	movs	r3, #20
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	1c1a      	adds	r2, r3, #0
 800232a:	00d2      	lsls	r2, r2, #3
 800232c:	18d3      	adds	r3, r2, r3
 800232e:	b299      	uxth	r1, r3
 8002330:	2316      	movs	r3, #22
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2210      	movs	r2, #16
 8002336:	18ba      	adds	r2, r7, r2
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	188a      	adds	r2, r1, r2
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	e009      	b.n	8002354 <changeValue+0x128>
		}
		else
		{
			value = valueToken - expo;
 8002340:	2316      	movs	r3, #22
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	2210      	movs	r2, #16
 8002346:	18b9      	adds	r1, r7, r2
 8002348:	2214      	movs	r2, #20
 800234a:	18ba      	adds	r2, r7, r2
 800234c:	8809      	ldrh	r1, [r1, #0]
 800234e:	8812      	ldrh	r2, [r2, #0]
 8002350:	1a8a      	subs	r2, r1, r2
 8002352:	801a      	strh	r2, [r3, #0]
		}
	}
	if(value < min){value = valueToken;}
 8002354:	2116      	movs	r1, #22
 8002356:	187a      	adds	r2, r7, r1
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d204      	bcs.n	800236c <changeValue+0x140>
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2210      	movs	r2, #16
 8002366:	18ba      	adds	r2, r7, r2
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	801a      	strh	r2, [r3, #0]
	if(value > max){value = valueToken;}
 800236c:	2116      	movs	r1, #22
 800236e:	187a      	adds	r2, r7, r1
 8002370:	1cbb      	adds	r3, r7, #2
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d904      	bls.n	8002384 <changeValue+0x158>
 800237a:	187b      	adds	r3, r7, r1
 800237c:	2210      	movs	r2, #16
 800237e:	18ba      	adds	r2, r7, r2
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	801a      	strh	r2, [r3, #0]
	intToArray_chVal(value);
 8002384:	2316      	movs	r3, #22
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	0018      	movs	r0, r3
 800238c:	f000 f840 	bl	8002410 <intToArray_chVal>
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b006      	add	sp, #24
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	20000614 	.word	0x20000614

0800239c <arrayToInt_chVal>:

uint16_t arrayToInt_chVal(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	uint16_t expo;
	uint16_t value = 0;
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2200      	movs	r2, #0
 80023a6:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < 5; i++)
 80023a8:	1cfb      	adds	r3, r7, #3
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e023      	b.n	80023f8 <arrayToInt_chVal+0x5c>
	{
		if(!i){expo = 1;}
 80023b0:	1cfb      	adds	r3, r7, #3
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <arrayToInt_chVal+0x24>
 80023b8:	1dbb      	adds	r3, r7, #6
 80023ba:	2201      	movs	r2, #1
 80023bc:	801a      	strh	r2, [r3, #0]
 80023be:	e007      	b.n	80023d0 <arrayToInt_chVal+0x34>
		else{expo *= 10;}
 80023c0:	1dba      	adds	r2, r7, #6
 80023c2:	1dbb      	adds	r3, r7, #6
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	1c19      	adds	r1, r3, #0
 80023c8:	0089      	lsls	r1, r1, #2
 80023ca:	18cb      	adds	r3, r1, r3
 80023cc:	18db      	adds	r3, r3, r3
 80023ce:	8013      	strh	r3, [r2, #0]
		value = value + (expo * arrayToken[i]);
 80023d0:	1cfb      	adds	r3, r7, #3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <arrayToInt_chVal+0x70>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	1dba      	adds	r2, r7, #6
 80023de:	8812      	ldrh	r2, [r2, #0]
 80023e0:	4353      	muls	r3, r2
 80023e2:	b299      	uxth	r1, r3
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	1d3a      	adds	r2, r7, #4
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	188a      	adds	r2, r1, r2
 80023ec:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++)
 80023ee:	1cfb      	adds	r3, r7, #3
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	1cfb      	adds	r3, r7, #3
 80023f4:	3201      	adds	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	1cfb      	adds	r3, r7, #3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d9d7      	bls.n	80023b0 <arrayToInt_chVal+0x14>
	}
	return value;
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	881b      	ldrh	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000614 	.word	0x20000614

08002410 <intToArray_chVal>:

void intToArray_chVal(uint16_t value)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	0002      	movs	r2, r0
 8002418:	1dbb      	adds	r3, r7, #6
 800241a:	801a      	strh	r2, [r3, #0]
	uint16_t expo;
	for(uint8_t i = 0; i < 5; i++)
 800241c:	230d      	movs	r3, #13
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e02e      	b.n	8002484 <intToArray_chVal+0x74>
	{
		if(!i){expo = 1;}
 8002426:	230d      	movs	r3, #13
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d104      	bne.n	800243a <intToArray_chVal+0x2a>
 8002430:	230e      	movs	r3, #14
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2201      	movs	r2, #1
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	e008      	b.n	800244c <intToArray_chVal+0x3c>
		else{expo *= 10;}
 800243a:	230e      	movs	r3, #14
 800243c:	18fa      	adds	r2, r7, r3
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	1c19      	adds	r1, r3, #0
 8002444:	0089      	lsls	r1, r1, #2
 8002446:	18cb      	adds	r3, r1, r3
 8002448:	18db      	adds	r3, r3, r3
 800244a:	8013      	strh	r3, [r2, #0]
		arrayToken[i] = (value / expo) % 10;
 800244c:	1dba      	adds	r2, r7, #6
 800244e:	230e      	movs	r3, #14
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	8812      	ldrh	r2, [r2, #0]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	0019      	movs	r1, r3
 8002458:	0010      	movs	r0, r2
 800245a:	f7fd fe67 	bl	800012c <__udivsi3>
 800245e:	0003      	movs	r3, r0
 8002460:	b29b      	uxth	r3, r3
 8002462:	210a      	movs	r1, #10
 8002464:	0018      	movs	r0, r3
 8002466:	f7fd fee7 	bl	8000238 <__aeabi_uidivmod>
 800246a:	000b      	movs	r3, r1
 800246c:	b29a      	uxth	r2, r3
 800246e:	200d      	movs	r0, #13
 8002470:	183b      	adds	r3, r7, r0
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b251      	sxtb	r1, r2
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <intToArray_chVal+0x88>)
 8002478:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 5; i++)
 800247a:	183b      	adds	r3, r7, r0
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	183b      	adds	r3, r7, r0
 8002480:	3201      	adds	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	230d      	movs	r3, #13
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d9cb      	bls.n	8002426 <intToArray_chVal+0x16>
	}
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46c0      	nop			; (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b004      	add	sp, #16
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000614 	.word	0x20000614

0800249c <drawMarker>:

void drawMarker(uint8_t width, uint8_t height)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	0002      	movs	r2, r0
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	1dbb      	adds	r3, r7, #6
 80024aa:	1c0a      	adds	r2, r1, #0
 80024ac:	701a      	strb	r2, [r3, #0]
	for(uint8_t h = 0; h < 5; h++)
 80024ae:	230f      	movs	r3, #15
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e032      	b.n	800251e <drawMarker+0x82>
	{
		uint8_t w = 0;
 80024b8:	230e      	movs	r3, #14
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 80024c0:	e01f      	b.n	8002502 <drawMarker+0x66>
		{
			SSD1306_DrawPixel(((width - h) + w), height + h, 1);
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	210f      	movs	r1, #15
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	240e      	movs	r4, #14
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	18d3      	adds	r3, r2, r3
 80024de:	b298      	uxth	r0, r3
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	18d3      	adds	r3, r2, r3
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2201      	movs	r2, #1
 80024f2:	0019      	movs	r1, r3
 80024f4:	f7fe fdd0 	bl	8001098 <SSD1306_DrawPixel>
			w++;
 80024f8:	193b      	adds	r3, r7, r4
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	193b      	adds	r3, r7, r4
 80024fe:	3201      	adds	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
		while(w <= (h * 2))
 8002502:	230e      	movs	r3, #14
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	210f      	movs	r1, #15
 800250a:	187b      	adds	r3, r7, r1
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	429a      	cmp	r2, r3
 8002512:	ddd6      	ble.n	80024c2 <drawMarker+0x26>
	for(uint8_t h = 0; h < 5; h++)
 8002514:	187b      	adds	r3, r7, r1
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	187b      	adds	r3, r7, r1
 800251a:	3201      	adds	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	230f      	movs	r3, #15
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d9c7      	bls.n	80024b8 <drawMarker+0x1c>
		}
	}
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b005      	add	sp, #20
 8002530:	bd90      	pop	{r4, r7, pc}

08002532 <clearMarker>:
void clearMarker(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 39, 80, 5, 0);
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2305      	movs	r3, #5
 800253e:	2250      	movs	r2, #80	; 0x50
 8002540:	2127      	movs	r1, #39	; 0x27
 8002542:	2014      	movs	r0, #20
 8002544:	f7ff f8fc 	bl	8001740 <SSD1306_DrawFilledRectangle>
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <clearValue>:
void clearValue(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(20, 20, 100, 18, 0);
 8002554:	2300      	movs	r3, #0
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2312      	movs	r3, #18
 800255a:	2264      	movs	r2, #100	; 0x64
 800255c:	2114      	movs	r1, #20
 800255e:	2014      	movs	r0, #20
 8002560:	f7ff f8ee 	bl	8001740 <SSD1306_DrawFilledRectangle>
}
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <clearSettings>:

void clearSettings(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	intToArray_chVal(CARCASS_MIN_TURNS);
 8002570:	200a      	movs	r0, #10
 8002572:	f7ff ff4d 	bl	8002410 <intToArray_chVal>
	markerPosition = 0;
 8002576:	4b03      	ldr	r3, [pc, #12]	; (8002584 <clearSettings+0x18>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	20000612 	.word	0x20000612

08002588 <showLabelBar>:

// uniwersalne
// -------------------------------------------------------------------------------------
void showLabelBar(char* label)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
	SSD1306_DrawFilledRectangle(0, 0, 128, 16, 1);
 8002590:	2301      	movs	r3, #1
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2310      	movs	r3, #16
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	2100      	movs	r1, #0
 800259a:	2000      	movs	r0, #0
 800259c:	f7ff f8d0 	bl	8001740 <SSD1306_DrawFilledRectangle>
	SSD1306_GotoXY(4, 4);
 80025a0:	2104      	movs	r1, #4
 80025a2:	2004      	movs	r0, #4
 80025a4:	f7fe fde6 	bl	8001174 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, 0);
 80025a8:	4904      	ldr	r1, [pc, #16]	; (80025bc <showLabelBar+0x34>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	0018      	movs	r0, r3
 80025b0:	f7fe fe7a 	bl	80012a8 <SSD1306_Puts>
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b002      	add	sp, #8
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000114 	.word	0x20000114

080025c0 <clearContent>:


void clearContent(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af02      	add	r7, sp, #8
	SSD1306_DrawFilledRectangle(0, 18, 128, 46, 0);
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	232e      	movs	r3, #46	; 0x2e
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	2112      	movs	r1, #18
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff f8b5 	bl	8001740 <SSD1306_DrawFilledRectangle>
}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <paginationBar>:

void paginationBar(uint8_t pageBarWidth, uint8_t pageNo)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	0002      	movs	r2, r0
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	1dbb      	adds	r3, r7, #6
 80025ea:	1c0a      	adds	r2, r1, #0
 80025ec:	701a      	strb	r2, [r3, #0]
	uint8_t pageBarMargin = pageBarWidth * pageNo;
 80025ee:	200f      	movs	r0, #15
 80025f0:	183b      	adds	r3, r7, r0
 80025f2:	1dfa      	adds	r2, r7, #7
 80025f4:	1db9      	adds	r1, r7, #6
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	7809      	ldrb	r1, [r1, #0]
 80025fa:	434a      	muls	r2, r1
 80025fc:	701a      	strb	r2, [r3, #0]
	SSD1306_DrawFilledRectangle(pageBarMargin, 18, pageBarWidth, 3, 1);
 80025fe:	183b      	adds	r3, r7, r0
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b298      	uxth	r0, r3
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b29a      	uxth	r2, r3
 800260a:	2301      	movs	r3, #1
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2303      	movs	r3, #3
 8002610:	2112      	movs	r1, #18
 8002612:	f7ff f895 	bl	8001740 <SSD1306_DrawFilledRectangle>
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b004      	add	sp, #16
 800261c:	bd80      	pop	{r7, pc}

0800261e <countArray>:

uint8_t countArray(Project * project)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b084      	sub	sp, #16
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8002626:	230f      	movs	r3, #15
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 800262e:	230e      	movs	r3, #14
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e016      	b.n	8002666 <countArray+0x48>
	{
		if(project->coil[i][0] > 0)
 8002638:	230e      	movs	r3, #14
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	3306      	adds	r3, #6
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	3302      	adds	r3, #2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <countArray+0x3c>
		{
			count++;
 800264e:	210f      	movs	r1, #15
 8002650:	187b      	adds	r3, r7, r1
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	187b      	adds	r3, r7, r1
 8002656:	3201      	adds	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<10; i++)
 800265a:	210e      	movs	r1, #14
 800265c:	187b      	adds	r3, r7, r1
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	187b      	adds	r3, r7, r1
 8002662:	3201      	adds	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	230e      	movs	r3, #14
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b09      	cmp	r3, #9
 800266e:	d9e3      	bls.n	8002638 <countArray+0x1a>
		}
	}
	return count;
 8002670:	230f      	movs	r3, #15
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <getProjectStructByID>:
	0,
	{{}}
};

Project getProjectStructByID(uint8_t id)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	000a      	movs	r2, r1
 800268a:	1cfb      	adds	r3, r7, #3
 800268c:	701a      	strb	r2, [r3, #0]
	switch(id)
 800268e:	1cfb      	adds	r3, r7, #3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d017      	beq.n	80026c6 <getProjectStructByID+0x46>
 8002696:	dc1f      	bgt.n	80026d8 <getProjectStructByID+0x58>
 8002698:	2b01      	cmp	r3, #1
 800269a:	d002      	beq.n	80026a2 <getProjectStructByID+0x22>
 800269c:	2b02      	cmp	r3, #2
 800269e:	d009      	beq.n	80026b4 <getProjectStructByID+0x34>
 80026a0:	e01a      	b.n	80026d8 <getProjectStructByID+0x58>
	{
		case 1:
			return PeaveyC30_MAIN;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <getProjectStructByID+0x70>)
 80026a6:	0010      	movs	r0, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	2344      	movs	r3, #68	; 0x44
 80026ac:	001a      	movs	r2, r3
 80026ae:	f004 fa51 	bl	8006b54 <memcpy>
 80026b2:	e019      	b.n	80026e8 <getProjectStructByID+0x68>
		break;
		case 2:
			return PeaveyC30_SPK;
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <getProjectStructByID+0x74>)
 80026b8:	0010      	movs	r0, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	2344      	movs	r3, #68	; 0x44
 80026be:	001a      	movs	r2, r3
 80026c0:	f004 fa48 	bl	8006b54 <memcpy>
 80026c4:	e010      	b.n	80026e8 <getProjectStructByID+0x68>
		break;
		case 3:
			return Test_Trafo;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <getProjectStructByID+0x78>)
 80026ca:	0010      	movs	r0, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	2344      	movs	r3, #68	; 0x44
 80026d0:	001a      	movs	r2, r3
 80026d2:	f004 fa3f 	bl	8006b54 <memcpy>
 80026d6:	e007      	b.n	80026e8 <getProjectStructByID+0x68>
		break;
	}
	return Empty;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <getProjectStructByID+0x7c>)
 80026dc:	0010      	movs	r0, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	2344      	movs	r3, #68	; 0x44
 80026e2:	001a      	movs	r2, r3
 80026e4:	f004 fa36 	bl	8006b54 <memcpy>
}
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000004 	.word	0x20000004
 80026f4:	20000048 	.word	0x20000048
 80026f8:	2000008c 	.word	0x2000008c
 80026fc:	200000d0 	.word	0x200000d0

08002700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_MspInit+0x24>)
 8002706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_MspInit+0x24>)
 800270a:	2101      	movs	r1, #1
 800270c:	430a      	orrs	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_MspInit+0x24>)
 8002712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_MspInit+0x24>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0549      	lsls	r1, r1, #21
 800271a:	430a      	orrs	r2, r1
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000

08002728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800272c:	e7fe      	b.n	800272c <NMI_Handler+0x4>

0800272e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <HardFault_Handler+0x4>

08002734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800274c:	f000 face 	bl	8002cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_BTN_Pin);
 800275a:	2010      	movs	r0, #16
 800275c:	f000 fe08 	bl	8003370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <TIM2_IRQHandler+0x14>)
 800276e:	0018      	movs	r0, r3
 8002770:	f002 fc4f 	bl	8005012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	20000620 	.word	0x20000620

08002780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <TIM6_DAC_IRQHandler+0x14>)
 8002786:	0018      	movs	r0, r3
 8002788:	f002 fc43 	bl	8005012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	20000660 	.word	0x20000660

08002798 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <TIM7_IRQHandler+0x14>)
 800279e:	0018      	movs	r0, r3
 80027a0:	f002 fc37 	bl	8005012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	200006a0 	.word	0x200006a0

080027b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <USART2_IRQHandler+0x14>)
 80027b6:	0018      	movs	r0, r3
 80027b8:	f002 ff88 	bl	80056cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	200006e0 	.word	0x200006e0

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	18d3      	adds	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f004 f982 	bl	8006b00 <__errno>
 80027fc:	0003      	movs	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	2301      	movs	r3, #1
 8002804:	425b      	negs	r3, r3
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	18d2      	adds	r2, r2, r3
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b006      	add	sp, #24
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20005000 	.word	0x20005000
 8002828:	00000400 	.word	0x00000400
 800282c:	2000061c 	.word	0x2000061c
 8002830:	20000778 	.word	0x20000778

08002834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b08d      	sub	sp, #52	; 0x34
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002846:	240c      	movs	r4, #12
 8002848:	193b      	adds	r3, r7, r4
 800284a:	0018      	movs	r0, r3
 800284c:	2324      	movs	r3, #36	; 0x24
 800284e:	001a      	movs	r2, r3
 8002850:	2100      	movs	r1, #0
 8002852:	f004 f988 	bl	8006b66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	0018      	movs	r0, r3
 800285a:	2308      	movs	r3, #8
 800285c:	001a      	movs	r2, r3
 800285e:	2100      	movs	r1, #0
 8002860:	f004 f981 	bl	8006b66 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002864:	4b26      	ldr	r3, [pc, #152]	; (8002900 <MX_TIM2_Init+0xc0>)
 8002866:	2280      	movs	r2, #128	; 0x80
 8002868:	05d2      	lsls	r2, r2, #23
 800286a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <MX_TIM2_Init+0xc0>)
 800286e:	2200      	movs	r2, #0
 8002870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <MX_TIM2_Init+0xc0>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <MX_TIM2_Init+0xc0>)
 800287a:	4a22      	ldr	r2, [pc, #136]	; (8002904 <MX_TIM2_Init+0xc4>)
 800287c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <MX_TIM2_Init+0xc0>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <MX_TIM2_Init+0xc0>)
 8002886:	2200      	movs	r2, #0
 8002888:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800288a:	0021      	movs	r1, r4
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002892:	187b      	adds	r3, r7, r1
 8002894:	2200      	movs	r2, #0
 8002896:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2201      	movs	r2, #1
 800289c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 15;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	220f      	movs	r2, #15
 80028a8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2201      	movs	r2, #1
 80028b4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2200      	movs	r2, #0
 80028ba:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 15;
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	220f      	movs	r2, #15
 80028c0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028c2:	187a      	adds	r2, r7, r1
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_TIM2_Init+0xc0>)
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f002 fa6d 	bl	8004da8 <HAL_TIM_Encoder_Init>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80028d2:	f7fe fa07 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2200      	movs	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028e2:	1d3a      	adds	r2, r7, #4
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_TIM2_Init+0xc0>)
 80028e6:	0011      	movs	r1, r2
 80028e8:	0018      	movs	r0, r3
 80028ea:	f002 fd2d 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80028ee:	1e03      	subs	r3, r0, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80028f2:	f7fe f9f7 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b00d      	add	sp, #52	; 0x34
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000620 	.word	0x20000620
 8002904:	0000ffff 	.word	0x0000ffff

08002908 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290e:	003b      	movs	r3, r7
 8002910:	0018      	movs	r0, r3
 8002912:	2308      	movs	r3, #8
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f004 f925 	bl	8006b66 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800291c:	4b15      	ldr	r3, [pc, #84]	; (8002974 <MX_TIM6_Init+0x6c>)
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <MX_TIM6_Init+0x70>)
 8002920:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <MX_TIM6_Init+0x6c>)
 8002924:	4a15      	ldr	r2, [pc, #84]	; (800297c <MX_TIM6_Init+0x74>)
 8002926:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <MX_TIM6_Init+0x6c>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_TIM6_Init+0x6c>)
 8002930:	2263      	movs	r2, #99	; 0x63
 8002932:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <MX_TIM6_Init+0x6c>)
 8002936:	2200      	movs	r2, #0
 8002938:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_TIM6_Init+0x6c>)
 800293c:	0018      	movs	r0, r3
 800293e:	f002 f97b 	bl	8004c38 <HAL_TIM_Base_Init>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002946:	f7fe f9cd 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800294a:	003b      	movs	r3, r7
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002950:	003b      	movs	r3, r7
 8002952:	2200      	movs	r2, #0
 8002954:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002956:	003a      	movs	r2, r7
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_TIM6_Init+0x6c>)
 800295a:	0011      	movs	r1, r2
 800295c:	0018      	movs	r0, r3
 800295e:	f002 fcf3 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d001      	beq.n	800296a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002966:	f7fe f9bd 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b002      	add	sp, #8
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	20000660 	.word	0x20000660
 8002978:	40001000 	.word	0x40001000
 800297c:	00001f3f 	.word	0x00001f3f

08002980 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002986:	003b      	movs	r3, r7
 8002988:	0018      	movs	r0, r3
 800298a:	2308      	movs	r3, #8
 800298c:	001a      	movs	r2, r3
 800298e:	2100      	movs	r1, #0
 8002990:	f004 f8e9 	bl	8006b66 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <MX_TIM7_Init+0x6c>)
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <MX_TIM7_Init+0x70>)
 8002998:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_TIM7_Init+0x6c>)
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <MX_TIM7_Init+0x74>)
 800299e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_TIM7_Init+0x6c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_TIM7_Init+0x6c>)
 80029a8:	2263      	movs	r2, #99	; 0x63
 80029aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_TIM7_Init+0x6c>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_TIM7_Init+0x6c>)
 80029b4:	0018      	movs	r0, r3
 80029b6:	f002 f93f 	bl	8004c38 <HAL_TIM_Base_Init>
 80029ba:	1e03      	subs	r3, r0, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80029be:	f7fe f991 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c2:	003b      	movs	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c8:	003b      	movs	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80029ce:	003a      	movs	r2, r7
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_TIM7_Init+0x6c>)
 80029d2:	0011      	movs	r1, r2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f002 fcb7 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 80029de:	f7fe f981 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	200006a0 	.word	0x200006a0
 80029f0:	40001400 	.word	0x40001400
 80029f4:	00001f3f 	.word	0x00001f3f

080029f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	240c      	movs	r4, #12
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	0018      	movs	r0, r3
 8002a06:	2314      	movs	r3, #20
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f004 f8ab 	bl	8006b66 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	05db      	lsls	r3, r3, #23
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d130      	bne.n	8002a7e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_TIM_Encoder_MspInit+0x90>)
 8002a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_TIM_Encoder_MspInit+0x90>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	430a      	orrs	r2, r1
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <HAL_TIM_Encoder_MspInit+0x90>)
 8002a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_TIM_Encoder_MspInit+0x90>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	430a      	orrs	r2, r1
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a34:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_TIM_Encoder_MspInit+0x90>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a40:	0021      	movs	r1, r4
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	2203      	movs	r2, #3
 8002a46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a60:	187a      	adds	r2, r7, r1
 8002a62:	23a0      	movs	r3, #160	; 0xa0
 8002a64:	05db      	lsls	r3, r3, #23
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fae5 	bl	8003038 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	200f      	movs	r0, #15
 8002a74:	f000 fa26 	bl	8002ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a78:	200f      	movs	r0, #15
 8002a7a:	f000 fa38 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b009      	add	sp, #36	; 0x24
 8002a84:	bd90      	pop	{r4, r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_TIM_Base_MspInit+0x60>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10e      	bne.n	8002abc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_TIM_Base_MspInit+0x64>)
 8002aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_TIM_Base_MspInit+0x64>)
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	2011      	movs	r0, #17
 8002ab0:	f000 fa08 	bl	8002ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ab4:	2011      	movs	r0, #17
 8002ab6:	f000 fa1a 	bl	8002eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002aba:	e012      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_TIM_Base_MspInit+0x68>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <HAL_TIM_Base_MspInit+0x64>)
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_TIM_Base_MspInit+0x64>)
 8002acc:	2120      	movs	r1, #32
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2012      	movs	r0, #18
 8002ad8:	f000 f9f4 	bl	8002ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002adc:	2012      	movs	r0, #18
 8002ade:	f000 fa06 	bl	8002eee <HAL_NVIC_EnableIRQ>
}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	40001000 	.word	0x40001000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40001400 	.word	0x40001400

08002af8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002afe:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <MX_USART2_UART_Init+0x5c>)
 8002b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b04:	22e1      	movs	r2, #225	; 0xe1
 8002b06:	0252      	lsls	r2, r2, #9
 8002b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b1e:	220c      	movs	r2, #12
 8002b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <MX_USART2_UART_Init+0x58>)
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f002 fc61 	bl	8005404 <HAL_UART_Init>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d001      	beq.n	8002b4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b46:	f7fe f8cd 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	200006e0 	.word	0x200006e0
 8002b54:	40004400 	.word	0x40004400

08002b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	240c      	movs	r4, #12
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	0018      	movs	r0, r3
 8002b66:	2314      	movs	r3, #20
 8002b68:	001a      	movs	r2, r3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	f003 fffb 	bl	8006b66 <memset>
  if(uartHandle->Instance==USART2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_UART_MspInit+0x90>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d131      	bne.n	8002bde <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_UART_MspInit+0x94>)
 8002b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_UART_MspInit+0x94>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0289      	lsls	r1, r1, #10
 8002b84:	430a      	orrs	r2, r1
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_UART_MspInit+0x94>)
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_UART_MspInit+0x94>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_UART_MspInit+0x94>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ba0:	0021      	movs	r1, r4
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	220c      	movs	r2, #12
 8002ba6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2202      	movs	r2, #2
 8002bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	187a      	adds	r2, r7, r1
 8002bc2:	23a0      	movs	r3, #160	; 0xa0
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 fa35 	bl	8003038 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	201c      	movs	r0, #28
 8002bd4:	f000 f976 	bl	8002ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bd8:	201c      	movs	r0, #28
 8002bda:	f000 f988 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b009      	add	sp, #36	; 0x24
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	40004400 	.word	0x40004400
 8002bec:	40021000 	.word	0x40021000

08002bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002bf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf4:	480d      	ldr	r0, [pc, #52]	; (8002c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bf6:	490e      	ldr	r1, [pc, #56]	; (8002c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <LoopForever+0xe>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bfc:	e002      	b.n	8002c04 <LoopCopyDataInit>

08002bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c02:	3304      	adds	r3, #4

08002c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c08:	d3f9      	bcc.n	8002bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c0c:	4c0b      	ldr	r4, [pc, #44]	; (8002c3c <LoopForever+0x16>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c10:	e001      	b.n	8002c16 <LoopFillZerobss>

08002c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c14:	3204      	adds	r2, #4

08002c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c18:	d3fb      	bcc.n	8002c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002c1a:	f7ff fe0b 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f003 ff75 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c22:	f7fd fd9b 	bl	800075c <main>

08002c26 <LoopForever>:

LoopForever:
    b LoopForever
 8002c26:	e7fe      	b.n	8002c26 <LoopForever>
   ldr   r0, =_estack
 8002c28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c30:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002c34:	08009f98 	.word	0x08009f98
  ldr r2, =_sbss
 8002c38:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002c3c:	20000778 	.word	0x20000778

08002c40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC1_COMP_IRQHandler>
	...

08002c44 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_Init+0x3c>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_Init+0x3c>)
 8002c56:	2140      	movs	r1, #64	; 0x40
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f000 f811 	bl	8002c84 <HAL_InitTick>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e001      	b.n	8002c72 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c6e:	f7ff fd47 	bl	8002700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	40022000 	.word	0x40022000

08002c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_InitTick+0x5c>)
 8002c8e:	681c      	ldr	r4, [r3, #0]
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_InitTick+0x60>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	0019      	movs	r1, r3
 8002c96:	23fa      	movs	r3, #250	; 0xfa
 8002c98:	0098      	lsls	r0, r3, #2
 8002c9a:	f7fd fa47 	bl	800012c <__udivsi3>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fa42 	bl	800012c <__udivsi3>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f92f 	bl	8002f0e <HAL_SYSTICK_Config>
 8002cb0:	1e03      	subs	r3, r0, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e00f      	b.n	8002cd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d80b      	bhi.n	8002cd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 f8fc 	bl	8002ec4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_InitTick+0x64>)
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b003      	add	sp, #12
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	20000124 	.word	0x20000124
 8002ce4:	2000012c 	.word	0x2000012c
 8002ce8:	20000128 	.word	0x20000128

08002cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_IncTick+0x1c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_IncTick+0x20>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	18d2      	adds	r2, r2, r3
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_IncTick+0x20>)
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	2000012c 	.word	0x2000012c
 8002d0c:	20000764 	.word	0x20000764

08002d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  return uwTick;
 8002d14:	4b02      	ldr	r3, [pc, #8]	; (8002d20 <HAL_GetTick+0x10>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	20000764 	.word	0x20000764

08002d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	d005      	beq.n	8002d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_Delay+0x44>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	001a      	movs	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	189b      	adds	r3, r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	f7ff ffe0 	bl	8002d10 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8f7      	bhi.n	8002d4c <HAL_Delay+0x28>
  {
  }
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	2000012c 	.word	0x2000012c

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	0002      	movs	r2, r0
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d7e:	d809      	bhi.n	8002d94 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	001a      	movs	r2, r3
 8002d86:	231f      	movs	r3, #31
 8002d88:	401a      	ands	r2, r3
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_EnableIRQ+0x30>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4091      	lsls	r1, r2
 8002d90:	000a      	movs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
  }
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	0002      	movs	r2, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b7f      	cmp	r3, #127	; 0x7f
 8002db4:	d828      	bhi.n	8002e08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db6:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <__NVIC_SetPriority+0xd4>)
 8002db8:	1dfb      	adds	r3, r7, #7
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	33c0      	adds	r3, #192	; 0xc0
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	589b      	ldr	r3, [r3, r2]
 8002dc6:	1dfa      	adds	r2, r7, #7
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	0011      	movs	r1, r2
 8002dcc:	2203      	movs	r2, #3
 8002dce:	400a      	ands	r2, r1
 8002dd0:	00d2      	lsls	r2, r2, #3
 8002dd2:	21ff      	movs	r1, #255	; 0xff
 8002dd4:	4091      	lsls	r1, r2
 8002dd6:	000a      	movs	r2, r1
 8002dd8:	43d2      	mvns	r2, r2
 8002dda:	401a      	ands	r2, r3
 8002ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	401a      	ands	r2, r3
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	0018      	movs	r0, r3
 8002dec:	2303      	movs	r3, #3
 8002dee:	4003      	ands	r3, r0
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df4:	481f      	ldr	r0, [pc, #124]	; (8002e74 <__NVIC_SetPriority+0xd4>)
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	33c0      	adds	r3, #192	; 0xc0
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e06:	e031      	b.n	8002e6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <__NVIC_SetPriority+0xd8>)
 8002e0a:	1dfb      	adds	r3, r7, #7
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	0019      	movs	r1, r3
 8002e10:	230f      	movs	r3, #15
 8002e12:	400b      	ands	r3, r1
 8002e14:	3b08      	subs	r3, #8
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3306      	adds	r3, #6
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	18d3      	adds	r3, r2, r3
 8002e1e:	3304      	adds	r3, #4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1dfa      	adds	r2, r7, #7
 8002e24:	7812      	ldrb	r2, [r2, #0]
 8002e26:	0011      	movs	r1, r2
 8002e28:	2203      	movs	r2, #3
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	00d2      	lsls	r2, r2, #3
 8002e2e:	21ff      	movs	r1, #255	; 0xff
 8002e30:	4091      	lsls	r1, r2
 8002e32:	000a      	movs	r2, r1
 8002e34:	43d2      	mvns	r2, r2
 8002e36:	401a      	ands	r2, r3
 8002e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	22ff      	movs	r2, #255	; 0xff
 8002e40:	401a      	ands	r2, r3
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	0018      	movs	r0, r3
 8002e48:	2303      	movs	r3, #3
 8002e4a:	4003      	ands	r3, r0
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <__NVIC_SetPriority+0xd8>)
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	001c      	movs	r4, r3
 8002e58:	230f      	movs	r3, #15
 8002e5a:	4023      	ands	r3, r4
 8002e5c:	3b08      	subs	r3, #8
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	430a      	orrs	r2, r1
 8002e62:	3306      	adds	r3, #6
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	18c3      	adds	r3, r0, r3
 8002e68:	3304      	adds	r3, #4
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b003      	add	sp, #12
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	045b      	lsls	r3, r3, #17
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d301      	bcc.n	8002e94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e90:	2301      	movs	r3, #1
 8002e92:	e010      	b.n	8002eb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <SysTick_Config+0x44>)
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7ff ff7c 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SysTick_Config+0x44>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <SysTick_Config+0x44>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	e000e010 	.word	0xe000e010

08002ec4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	210f      	movs	r1, #15
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	1c02      	adds	r2, r0, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	0011      	movs	r1, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff ff5d 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b004      	add	sp, #16
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	0002      	movs	r2, r0
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff ff33 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f7ff ffaf 	bl	8002e7c <SysTick_Config>
 8002f1e:	0003      	movs	r3, r0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b002      	add	sp, #8
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	230f      	movs	r3, #15
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2225      	movs	r2, #37	; 0x25
 8002f3c:	5c9b      	ldrb	r3, [r3, r2]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d008      	beq.n	8002f56 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2224      	movs	r2, #36	; 0x24
 8002f4e:	2100      	movs	r1, #0
 8002f50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e024      	b.n	8002fa0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	210e      	movs	r1, #14
 8002f62:	438a      	bics	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	438a      	bics	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	221c      	movs	r2, #28
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2101      	movs	r1, #1
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2225      	movs	r2, #37	; 0x25
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2224      	movs	r2, #36	; 0x24
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]

    return status;
 8002f9a:	230f      	movs	r3, #15
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b004      	add	sp, #16
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2225      	movs	r2, #37	; 0x25
 8002fbc:	5c9b      	ldrb	r3, [r3, r2]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d006      	beq.n	8002fd2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e02a      	b.n	8003028 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	210e      	movs	r1, #14
 8002fde:	438a      	bics	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	438a      	bics	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	221c      	movs	r2, #28
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2101      	movs	r1, #1
 8003000:	4091      	lsls	r1, r2
 8003002:	000a      	movs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2225      	movs	r2, #37	; 0x25
 800300a:	2101      	movs	r1, #1
 800300c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2224      	movs	r2, #36	; 0x24
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	0010      	movs	r0, r2
 8003026:	4798      	blx	r3
    }
  }
  return status;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	781b      	ldrb	r3, [r3, #0]
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800304e:	e155      	b.n	80032fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4091      	lsls	r1, r2
 800305a:	000a      	movs	r2, r1
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d100      	bne.n	8003068 <HAL_GPIO_Init+0x30>
 8003066:	e146      	b.n	80032f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	2b01      	cmp	r3, #1
 8003072:	d005      	beq.n	8003080 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2203      	movs	r2, #3
 800307a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800307c:	2b02      	cmp	r3, #2
 800307e:	d130      	bne.n	80030e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	409a      	lsls	r2, r3
 800308e:	0013      	movs	r3, r2
 8003090:	43da      	mvns	r2, r3
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b6:	2201      	movs	r2, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	43da      	mvns	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	2201      	movs	r2, #1
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
 80030d4:	0013      	movs	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d017      	beq.n	800311e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	409a      	lsls	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	43da      	mvns	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	4013      	ands	r3, r2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d123      	bne.n	8003172 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	58d3      	ldr	r3, [r2, r3]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2107      	movs	r1, #7
 8003156:	400b      	ands	r3, r1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	0092      	lsls	r2, r2, #2
 800316e:	6939      	ldr	r1, [r7, #16]
 8003170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	409a      	lsls	r2, r3
 8003180:	0013      	movs	r3, r2
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	401a      	ands	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	23c0      	movs	r3, #192	; 0xc0
 80031ac:	029b      	lsls	r3, r3, #10
 80031ae:	4013      	ands	r3, r2
 80031b0:	d100      	bne.n	80031b4 <HAL_GPIO_Init+0x17c>
 80031b2:	e0a0      	b.n	80032f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b4:	4b57      	ldr	r3, [pc, #348]	; (8003314 <HAL_GPIO_Init+0x2dc>)
 80031b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b8:	4b56      	ldr	r3, [pc, #344]	; (8003314 <HAL_GPIO_Init+0x2dc>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	430a      	orrs	r2, r1
 80031be:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_GPIO_Init+0x2e0>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	589b      	ldr	r3, [r3, r2]
 80031cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2203      	movs	r2, #3
 80031d2:	4013      	ands	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	409a      	lsls	r2, r3
 80031da:	0013      	movs	r3, r2
 80031dc:	43da      	mvns	r2, r3
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	23a0      	movs	r3, #160	; 0xa0
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x1f6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4a      	ldr	r2, [pc, #296]	; (800331c <HAL_GPIO_Init+0x2e4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x1f2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a49      	ldr	r2, [pc, #292]	; (8003320 <HAL_GPIO_Init+0x2e8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x1ee>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_GPIO_Init+0x2ec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x1ea>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a47      	ldr	r2, [pc, #284]	; (8003328 <HAL_GPIO_Init+0x2f0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x1e6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a46      	ldr	r2, [pc, #280]	; (800332c <HAL_GPIO_Init+0x2f4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x1e2>
 8003216:	2305      	movs	r3, #5
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x1f8>
 800321a:	2306      	movs	r3, #6
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x1f8>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x1f8>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x1f8>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x1f8>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x1f8>
 800322e:	2300      	movs	r3, #0
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	2103      	movs	r1, #3
 8003234:	400a      	ands	r2, r1
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_GPIO_Init+0x2e0>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43da      	mvns	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	025b      	lsls	r3, r3, #9
 8003266:	4013      	ands	r3, r2
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43da      	mvns	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	029b      	lsls	r3, r3, #10
 8003290:	4013      	ands	r3, r2
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800329c:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	035b      	lsls	r3, r3, #13
 80032ba:	4013      	ands	r3, r2
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032cc:	4b18      	ldr	r3, [pc, #96]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43da      	mvns	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	039b      	lsls	r3, r3, #14
 80032e4:	4013      	ands	r3, r2
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_GPIO_Init+0x2f8>)
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	40da      	lsrs	r2, r3
 8003304:	1e13      	subs	r3, r2, #0
 8003306:	d000      	beq.n	800330a <HAL_GPIO_Init+0x2d2>
 8003308:	e6a2      	b.n	8003050 <HAL_GPIO_Init+0x18>
  }
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b006      	add	sp, #24
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40021000 	.word	0x40021000
 8003318:	40010000 	.word	0x40010000
 800331c:	50000400 	.word	0x50000400
 8003320:	50000800 	.word	0x50000800
 8003324:	50000c00 	.word	0x50000c00
 8003328:	50001000 	.word	0x50001000
 800332c:	50001c00 	.word	0x50001c00
 8003330:	40010400 	.word	0x40010400

08003334 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	000a      	movs	r2, r1
 800333e:	1cbb      	adds	r3, r7, #2
 8003340:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	1cba      	adds	r2, r7, #2
 8003348:	8812      	ldrh	r2, [r2, #0]
 800334a:	4013      	ands	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800334e:	230f      	movs	r3, #15
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e003      	b.n	8003360 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003358:	230f      	movs	r3, #15
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003360:	230f      	movs	r3, #15
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	0002      	movs	r2, r0
 8003378:	1dbb      	adds	r3, r7, #6
 800337a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	1dba      	adds	r2, r7, #6
 8003382:	8812      	ldrh	r2, [r2, #0]
 8003384:	4013      	ands	r3, r2
 8003386:	d008      	beq.n	800339a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800338a:	1dba      	adds	r2, r7, #6
 800338c:	8812      	ldrh	r2, [r2, #0]
 800338e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003390:	1dbb      	adds	r3, r7, #6
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	0018      	movs	r0, r3
 8003396:	f7fd fc83 	bl	8000ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e082      	b.n	80034c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2241      	movs	r2, #65	; 0x41
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2240      	movs	r2, #64	; 0x40
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7fd f97d 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2241      	movs	r2, #65	; 0x41
 80033da:	2124      	movs	r1, #36	; 0x24
 80033dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	438a      	bics	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_I2C_Init+0x120>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4931      	ldr	r1, [pc, #196]	; (80034cc <HAL_I2C_Init+0x124>)
 8003408:	400a      	ands	r2, r1
 800340a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d108      	bne.n	8003426 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	0209      	lsls	r1, r1, #8
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e007      	b.n	8003436 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2184      	movs	r1, #132	; 0x84
 8003430:	0209      	lsls	r1, r1, #8
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d104      	bne.n	8003448 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	491f      	ldr	r1, [pc, #124]	; (80034d0 <HAL_I2C_Init+0x128>)
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	491a      	ldr	r1, [pc, #104]	; (80034cc <HAL_I2C_Init+0x124>)
 8003464:	400a      	ands	r2, r1
 8003466:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	431a      	orrs	r2, r3
 8003472:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69d9      	ldr	r1, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2101      	movs	r1, #1
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2241      	movs	r2, #65	; 0x41
 80034ac:	2120      	movs	r1, #32
 80034ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2242      	movs	r2, #66	; 0x42
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	f0ffffff 	.word	0xf0ffffff
 80034cc:	ffff7fff 	.word	0xffff7fff
 80034d0:	02008000 	.word	0x02008000

080034d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b089      	sub	sp, #36	; 0x24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	0008      	movs	r0, r1
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	0019      	movs	r1, r3
 80034e2:	230a      	movs	r3, #10
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	2308      	movs	r3, #8
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	1c0a      	adds	r2, r1, #0
 80034f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2241      	movs	r2, #65	; 0x41
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d000      	beq.n	8003500 <HAL_I2C_Master_Transmit+0x2c>
 80034fe:	e0e7      	b.n	80036d0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2240      	movs	r2, #64	; 0x40
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_I2C_Master_Transmit+0x3a>
 800350a:	2302      	movs	r3, #2
 800350c:	e0e1      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1fe>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003516:	f7ff fbfb 	bl	8002d10 <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	0219      	lsls	r1, r3, #8
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2319      	movs	r3, #25
 800352a:	2201      	movs	r2, #1
 800352c:	f000 fa16 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 8003530:	1e03      	subs	r3, r0, #0
 8003532:	d001      	beq.n	8003538 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0cc      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2241      	movs	r2, #65	; 0x41
 800353c:	2121      	movs	r1, #33	; 0x21
 800353e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2242      	movs	r2, #66	; 0x42
 8003544:	2110      	movs	r1, #16
 8003546:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2208      	movs	r2, #8
 8003558:	18ba      	adds	r2, r7, r2
 800355a:	8812      	ldrh	r2, [r2, #0]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	; 0xff
 800356c:	d911      	bls.n	8003592 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	; 0xff
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	045c      	lsls	r4, r3, #17
 800357e:	230a      	movs	r3, #10
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	8819      	ldrh	r1, [r3, #0]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	4b55      	ldr	r3, [pc, #340]	; (80036dc <HAL_I2C_Master_Transmit+0x208>)
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	0023      	movs	r3, r4
 800358c:	f000 fb1a 	bl	8003bc4 <I2C_TransferConfig>
 8003590:	e075      	b.n	800367e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	049c      	lsls	r4, r3, #18
 80035a6:	230a      	movs	r3, #10
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	8819      	ldrh	r1, [r3, #0]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_I2C_Master_Transmit+0x208>)
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	0023      	movs	r3, r4
 80035b4:	f000 fb06 	bl	8003bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035b8:	e061      	b.n	800367e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 fa0a 	bl	80039da <I2C_WaitOnTXISFlagUntilTimeout>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e081      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03a      	beq.n	800367e <HAL_I2C_Master_Transmit+0x1aa>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d136      	bne.n	800367e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	0013      	movs	r3, r2
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	f000 f99d 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e053      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	2bff      	cmp	r3, #255	; 0xff
 8003632:	d911      	bls.n	8003658 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	22ff      	movs	r2, #255	; 0xff
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	b2da      	uxtb	r2, r3
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	045c      	lsls	r4, r3, #17
 8003644:	230a      	movs	r3, #10
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	8819      	ldrh	r1, [r3, #0]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	2300      	movs	r3, #0
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	0023      	movs	r3, r4
 8003652:	f000 fab7 	bl	8003bc4 <I2C_TransferConfig>
 8003656:	e012      	b.n	800367e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	b2da      	uxtb	r2, r3
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	049c      	lsls	r4, r3, #18
 800366c:	230a      	movs	r3, #10
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	8819      	ldrh	r1, [r3, #0]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0023      	movs	r3, r4
 800367a:	f000 faa3 	bl	8003bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d198      	bne.n	80035ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	0018      	movs	r0, r3
 8003690:	f000 f9e2 	bl	8003a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01a      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2220      	movs	r2, #32
 80036a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	490c      	ldr	r1, [pc, #48]	; (80036e0 <HAL_I2C_Master_Transmit+0x20c>)
 80036b0:	400a      	ands	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2241      	movs	r2, #65	; 0x41
 80036b8:	2120      	movs	r1, #32
 80036ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2242      	movs	r2, #66	; 0x42
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2240      	movs	r2, #64	; 0x40
 80036c8:	2100      	movs	r1, #0
 80036ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b007      	add	sp, #28
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	80002000 	.word	0x80002000
 80036e0:	fe00e800 	.word	0xfe00e800

080036e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	; 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	230a      	movs	r3, #10
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	1c0a      	adds	r2, r1, #0
 80036f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2241      	movs	r2, #65	; 0x41
 8003700:	5c9b      	ldrb	r3, [r3, r2]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	d000      	beq.n	800370a <HAL_I2C_IsDeviceReady+0x26>
 8003708:	e0fe      	b.n	8003908 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	401a      	ands	r2, r3
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	429a      	cmp	r2, r3
 800371c:	d101      	bne.n	8003722 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	e0f3      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2240      	movs	r2, #64	; 0x40
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_I2C_IsDeviceReady+0x4c>
 800372c:	2302      	movs	r3, #2
 800372e:	e0ec      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2240      	movs	r2, #64	; 0x40
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2241      	movs	r2, #65	; 0x41
 800373c:	2124      	movs	r1, #36	; 0x24
 800373e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_I2C_IsDeviceReady+0x7a>
 800374e:	230a      	movs	r3, #10
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	059b      	lsls	r3, r3, #22
 8003756:	0d9b      	lsrs	r3, r3, #22
 8003758:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_I2C_IsDeviceReady+0x230>)
 800375a:	431a      	orrs	r2, r3
 800375c:	e007      	b.n	800376e <HAL_I2C_IsDeviceReady+0x8a>
 800375e:	230a      	movs	r3, #10
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	0d9b      	lsrs	r3, r3, #22
 8003768:	22a0      	movs	r2, #160	; 0xa0
 800376a:	0192      	lsls	r2, r2, #6
 800376c:	431a      	orrs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003774:	f7ff facc 	bl	8002d10 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2220      	movs	r2, #32
 8003784:	4013      	ands	r3, r2
 8003786:	3b20      	subs	r3, #32
 8003788:	425a      	negs	r2, r3
 800378a:	4153      	adcs	r3, r2
 800378c:	b2da      	uxtb	r2, r3
 800378e:	231f      	movs	r3, #31
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2210      	movs	r2, #16
 800379c:	4013      	ands	r3, r2
 800379e:	3b10      	subs	r3, #16
 80037a0:	425a      	negs	r2, r3
 80037a2:	4153      	adcs	r3, r2
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	231e      	movs	r3, #30
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80037ac:	e035      	b.n	800381a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d01a      	beq.n	80037ea <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7ff faac 	bl	8002d10 <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <HAL_I2C_IsDeviceReady+0xe6>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2241      	movs	r2, #65	; 0x41
 80037ce:	2120      	movs	r1, #32
 80037d0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	2220      	movs	r2, #32
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2240      	movs	r2, #64	; 0x40
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e08f      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2220      	movs	r2, #32
 80037f2:	4013      	ands	r3, r2
 80037f4:	3b20      	subs	r3, #32
 80037f6:	425a      	negs	r2, r3
 80037f8:	4153      	adcs	r3, r2
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	231f      	movs	r3, #31
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2210      	movs	r2, #16
 800380a:	4013      	ands	r3, r2
 800380c:	3b10      	subs	r3, #16
 800380e:	425a      	negs	r2, r3
 8003810:	4153      	adcs	r3, r2
 8003812:	b2da      	uxtb	r2, r3
 8003814:	231e      	movs	r3, #30
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800381a:	231f      	movs	r3, #31
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d104      	bne.n	800382e <HAL_I2C_IsDeviceReady+0x14a>
 8003824:	231e      	movs	r3, #30
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0bf      	beq.n	80037ae <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2210      	movs	r2, #16
 8003836:	4013      	ands	r3, r2
 8003838:	2b10      	cmp	r3, #16
 800383a:	d01a      	beq.n	8003872 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	0013      	movs	r3, r2
 8003846:	2200      	movs	r2, #0
 8003848:	2120      	movs	r1, #32
 800384a:	f000 f887 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 800384e:	1e03      	subs	r3, r0, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e059      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2220      	movs	r2, #32
 800385c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2241      	movs	r2, #65	; 0x41
 8003862:	2120      	movs	r1, #32
 8003864:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e04b      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	0013      	movs	r3, r2
 800387c:	2200      	movs	r2, #0
 800387e:	2120      	movs	r1, #32
 8003880:	f000 f86c 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e03e      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2220      	movs	r2, #32
 800389a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d119      	bne.n	80038d8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	01c9      	lsls	r1, r1, #7
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	0013      	movs	r3, r2
 80038c0:	2200      	movs	r2, #0
 80038c2:	2120      	movs	r1, #32
 80038c4:	f000 f84a 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e01c      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2220      	movs	r2, #32
 80038d6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d900      	bls.n	80038e8 <HAL_I2C_IsDeviceReady+0x204>
 80038e6:	e72e      	b.n	8003746 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2241      	movs	r2, #65	; 0x41
 80038ec:	2120      	movs	r1, #32
 80038ee:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	2220      	movs	r2, #32
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b008      	add	sp, #32
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	02002000 	.word	0x02002000

08003918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2202      	movs	r2, #2
 8003928:	4013      	ands	r3, r2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d103      	bne.n	8003936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	2b01      	cmp	r3, #1
 8003942:	d007      	beq.n	8003954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	430a      	orrs	r2, r1
 8003952:	619a      	str	r2, [r3, #24]
  }
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396c:	e021      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	d01e      	beq.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003974:	f7ff f9cc 	bl	8002d10 <HAL_GetTick>
 8003978:	0002      	movs	r2, r0
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d302      	bcc.n	800398a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d113      	bne.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	2220      	movs	r2, #32
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2241      	movs	r2, #65	; 0x41
 800399a:	2120      	movs	r1, #32
 800399c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2242      	movs	r2, #66	; 0x42
 80039a2:	2100      	movs	r1, #0
 80039a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00f      	b.n	80039d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	425a      	negs	r2, r3
 80039c2:	4153      	adcs	r3, r2
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	001a      	movs	r2, r3
 80039c8:	1dfb      	adds	r3, r7, #7
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d0ce      	beq.n	800396e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039e6:	e02b      	b.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f86e 	bl	8003ad0 <I2C_IsAcknowledgeFailed>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d001      	beq.n	80039fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e029      	b.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3301      	adds	r3, #1
 8003a00:	d01e      	beq.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7ff f985 	bl	8002d10 <HAL_GetTick>
 8003a06:	0002      	movs	r2, r0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d113      	bne.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2241      	movs	r2, #65	; 0x41
 8003a28:	2120      	movs	r1, #32
 8003a2a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2242      	movs	r2, #66	; 0x42
 8003a30:	2100      	movs	r1, #0
 8003a32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e007      	b.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2202      	movs	r2, #2
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d1cc      	bne.n	80039e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a64:	e028      	b.n	8003ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 f82f 	bl	8003ad0 <I2C_IsAcknowledgeFailed>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d001      	beq.n	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e026      	b.n	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7ff f949 	bl	8002d10 <HAL_GetTick>
 8003a7e:	0002      	movs	r2, r0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d113      	bne.n	8003ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	2220      	movs	r2, #32
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2241      	movs	r2, #65	; 0x41
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2242      	movs	r2, #66	; 0x42
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e007      	b.n	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d1cf      	bne.n	8003a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b004      	add	sp, #16
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d164      	bne.n	8003bb4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	049b      	lsls	r3, r3, #18
 8003af4:	401a      	ands	r2, r3
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	049b      	lsls	r3, r3, #18
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d02b      	beq.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	01c9      	lsls	r1, r1, #7
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b10:	e021      	b.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	d01e      	beq.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7ff f8fa 	bl	8002d10 <HAL_GetTick>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_IsAcknowledgeFailed+0x5e>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d113      	bne.n	8003b56 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	2220      	movs	r2, #32
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2241      	movs	r2, #65	; 0x41
 8003b3e:	2120      	movs	r1, #32
 8003b40:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2242      	movs	r2, #66	; 0x42
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e02f      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d1d6      	bne.n	8003b12 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2220      	movs	r2, #32
 8003b72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7ff fece 	bl	8003918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003b88:	400a      	ands	r2, r1
 8003b8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2204      	movs	r2, #4
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2241      	movs	r2, #65	; 0x41
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2242      	movs	r2, #66	; 0x42
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2240      	movs	r2, #64	; 0x40
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b004      	add	sp, #16
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	fe00e800 	.word	0xfe00e800

08003bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	0008      	movs	r0, r1
 8003bce:	0011      	movs	r1, r2
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	240a      	movs	r4, #10
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	1c02      	adds	r2, r0, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	2009      	movs	r0, #9
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	1c0a      	adds	r2, r1, #0
 8003be0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	0d51      	lsrs	r1, r2, #21
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	00d2      	lsls	r2, r2, #3
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <I2C_TransferConfig+0x68>)
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	43d2      	mvns	r2, r2
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	193b      	adds	r3, r7, r4
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	059b      	lsls	r3, r3, #22
 8003c02:	0d9a      	lsrs	r2, r3, #22
 8003c04:	183b      	adds	r3, r7, r0
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	0418      	lsls	r0, r3, #16
 8003c0a:	23ff      	movs	r3, #255	; 0xff
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	4003      	ands	r3, r0
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b005      	add	sp, #20
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	03ff63ff 	.word	0x03ff63ff

08003c30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2241      	movs	r2, #65	; 0x41
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d138      	bne.n	8003cb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e032      	b.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2240      	movs	r2, #64	; 0x40
 8003c58:	2101      	movs	r1, #1
 8003c5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2241      	movs	r2, #65	; 0x41
 8003c60:	2124      	movs	r1, #36	; 0x24
 8003c62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2101      	movs	r1, #1
 8003c70:	438a      	bics	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4911      	ldr	r1, [pc, #68]	; (8003cc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6819      	ldr	r1, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2241      	movs	r2, #65	; 0x41
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	ffffefff 	.word	0xffffefff

08003cc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2241      	movs	r2, #65	; 0x41
 8003cd6:	5c9b      	ldrb	r3, [r3, r2]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d139      	bne.n	8003d52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e033      	b.n	8003d54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2241      	movs	r2, #65	; 0x41
 8003cf8:	2124      	movs	r1, #36	; 0x24
 8003cfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2101      	movs	r1, #1
 8003d08:	438a      	bics	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2241      	movs	r2, #65	; 0x41
 8003d42:	2120      	movs	r1, #32
 8003d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	fffff0ff 	.word	0xfffff0ff

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b5b0      	push	{r4, r5, r7, lr}
 8003d62:	b08a      	sub	sp, #40	; 0x28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f000 fbbf 	bl	80044f2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d74:	4bc9      	ldr	r3, [pc, #804]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	220c      	movs	r2, #12
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7e:	4bc7      	ldr	r3, [pc, #796]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	025b      	lsls	r3, r3, #9
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4013      	ands	r3, r2
 8003d92:	d100      	bne.n	8003d96 <HAL_RCC_OscConfig+0x36>
 8003d94:	e07e      	b.n	8003e94 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d007      	beq.n	8003dac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d112      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x68>
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	025b      	lsls	r3, r3, #9
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d10d      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	4bbb      	ldr	r3, [pc, #748]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	4013      	ands	r3, r2
 8003db6:	d100      	bne.n	8003dba <HAL_RCC_OscConfig+0x5a>
 8003db8:	e06b      	b.n	8003e92 <HAL_RCC_OscConfig+0x132>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d167      	bne.n	8003e92 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 fb95 	bl	80044f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x84>
 8003dd4:	4bb1      	ldr	r3, [pc, #708]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4bb0      	ldr	r3, [pc, #704]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	0249      	lsls	r1, r1, #9
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e027      	b.n	8003e34 <HAL_RCC_OscConfig+0xd4>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	23a0      	movs	r3, #160	; 0xa0
 8003dea:	02db      	lsls	r3, r3, #11
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d10e      	bne.n	8003e0e <HAL_RCC_OscConfig+0xae>
 8003df0:	4baa      	ldr	r3, [pc, #680]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4ba9      	ldr	r3, [pc, #676]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003df6:	2180      	movs	r1, #128	; 0x80
 8003df8:	02c9      	lsls	r1, r1, #11
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	4ba7      	ldr	r3, [pc, #668]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4ba6      	ldr	r3, [pc, #664]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	0249      	lsls	r1, r1, #9
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e012      	b.n	8003e34 <HAL_RCC_OscConfig+0xd4>
 8003e0e:	4ba3      	ldr	r3, [pc, #652]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4ba2      	ldr	r3, [pc, #648]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e14:	49a2      	ldr	r1, [pc, #648]	; (80040a0 <HAL_RCC_OscConfig+0x340>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	4ba0      	ldr	r3, [pc, #640]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	025b      	lsls	r3, r3, #9
 8003e22:	4013      	ands	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4b9c      	ldr	r3, [pc, #624]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b9b      	ldr	r3, [pc, #620]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e2e:	499d      	ldr	r1, [pc, #628]	; (80040a4 <HAL_RCC_OscConfig+0x344>)
 8003e30:	400a      	ands	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe ff68 	bl	8002d10 <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e44:	e009      	b.n	8003e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e46:	f7fe ff63 	bl	8002d10 <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b64      	cmp	r3, #100	; 0x64
 8003e52:	d902      	bls.n	8003e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	f000 fb4c 	bl	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e5a:	4b90      	ldr	r3, [pc, #576]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	029b      	lsls	r3, r3, #10
 8003e62:	4013      	ands	r3, r2
 8003e64:	d0ef      	beq.n	8003e46 <HAL_RCC_OscConfig+0xe6>
 8003e66:	e015      	b.n	8003e94 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe ff52 	bl	8002d10 <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e72:	f7fe ff4d 	bl	8002d10 <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b64      	cmp	r3, #100	; 0x64
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e336      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e84:	4b85      	ldr	r3, [pc, #532]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d1f0      	bne.n	8003e72 <HAL_RCC_OscConfig+0x112>
 8003e90:	e000      	b.n	8003e94 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e92:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d100      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x140>
 8003e9e:	e099      	b.n	8003fd4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b7a      	ldr	r3, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	4393      	bics	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d13e      	bne.n	8003f4c <HAL_RCC_OscConfig+0x1ec>
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d13b      	bne.n	8003f4c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ed4:	4b71      	ldr	r3, [pc, #452]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	4013      	ands	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x188>
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e304      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a6e      	ldr	r2, [pc, #440]	; (80040a8 <HAL_RCC_OscConfig+0x348>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	021a      	lsls	r2, r3, #8
 8003ef8:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003efe:	4b67      	ldr	r3, [pc, #412]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2209      	movs	r2, #9
 8003f04:	4393      	bics	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f10:	f000 fc42 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8003f14:	0001      	movs	r1, r0
 8003f16:	4b61      	ldr	r3, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	220f      	movs	r2, #15
 8003f1e:	4013      	ands	r3, r2
 8003f20:	4a62      	ldr	r2, [pc, #392]	; (80040ac <HAL_RCC_OscConfig+0x34c>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	000a      	movs	r2, r1
 8003f26:	40da      	lsrs	r2, r3
 8003f28:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <HAL_RCC_OscConfig+0x350>)
 8003f2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f2c:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_OscConfig+0x354>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2513      	movs	r5, #19
 8003f32:	197c      	adds	r4, r7, r5
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fe fea5 	bl	8002c84 <HAL_InitTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f3e:	197b      	adds	r3, r7, r5
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d046      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003f46:	197b      	adds	r3, r7, r5
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	e2d2      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d027      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2209      	movs	r2, #9
 8003f58:	4393      	bics	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fed4 	bl	8002d10 <HAL_GetTick>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6e:	f7fe fecf 	bl	8002d10 <HAL_GetTick>
 8003f72:	0002      	movs	r2, r0
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e2b8      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f80:	4b46      	ldr	r3, [pc, #280]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2204      	movs	r2, #4
 8003f86:	4013      	ands	r3, r2
 8003f88:	d0f1      	beq.n	8003f6e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <HAL_RCC_OscConfig+0x348>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	4b40      	ldr	r3, [pc, #256]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	e018      	b.n	8003fd4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa2:	4b3e      	ldr	r3, [pc, #248]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	438a      	bics	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fe feaf 	bl	8002d10 <HAL_GetTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb8:	f7fe feaa 	bl	8002d10 <HAL_GetTick>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e293      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fca:	4b34      	ldr	r3, [pc, #208]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d1f1      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d100      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x280>
 8003fde:	e0a2      	b.n	8004126 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d140      	bne.n	8004068 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d005      	beq.n	8003ffe <HAL_RCC_OscConfig+0x29e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e279      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <HAL_RCC_OscConfig+0x358>)
 8004004:	4013      	ands	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400c:	4b23      	ldr	r3, [pc, #140]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	0a19      	lsrs	r1, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	061a      	lsls	r2, r3, #24
 8004020:	4b1e      	ldr	r3, [pc, #120]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	0b5b      	lsrs	r3, r3, #13
 800402c:	3301      	adds	r3, #1
 800402e:	2280      	movs	r2, #128	; 0x80
 8004030:	0212      	lsls	r2, r2, #8
 8004032:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	210f      	movs	r1, #15
 800403c:	400b      	ands	r3, r1
 800403e:	491b      	ldr	r1, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x34c>)
 8004040:	5ccb      	ldrb	r3, [r1, r3]
 8004042:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_RCC_OscConfig+0x350>)
 8004046:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <HAL_RCC_OscConfig+0x354>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2513      	movs	r5, #19
 800404e:	197c      	adds	r4, r7, r5
 8004050:	0018      	movs	r0, r3
 8004052:	f7fe fe17 	bl	8002c84 <HAL_InitTick>
 8004056:	0003      	movs	r3, r0
 8004058:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800405a:	197b      	adds	r3, r7, r5
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d061      	beq.n	8004126 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004062:	197b      	adds	r3, r7, r5
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	e244      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d040      	beq.n	80040f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_OscConfig+0x33c>)
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	0049      	lsls	r1, r1, #1
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fe fe47 	bl	8002d10 <HAL_GetTick>
 8004082:	0003      	movs	r3, r0
 8004084:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004086:	e019      	b.n	80040bc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004088:	f7fe fe42 	bl	8002d10 <HAL_GetTick>
 800408c:	0002      	movs	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d912      	bls.n	80040bc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e22b      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	40021000 	.word	0x40021000
 80040a0:	fffeffff 	.word	0xfffeffff
 80040a4:	fffbffff 	.word	0xfffbffff
 80040a8:	ffffe0ff 	.word	0xffffe0ff
 80040ac:	08009ee8 	.word	0x08009ee8
 80040b0:	20000124 	.word	0x20000124
 80040b4:	20000128 	.word	0x20000128
 80040b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040bc:	4bca      	ldr	r3, [pc, #808]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d0df      	beq.n	8004088 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040c8:	4bc7      	ldr	r3, [pc, #796]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4ac7      	ldr	r2, [pc, #796]	; (80043ec <HAL_RCC_OscConfig+0x68c>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d6:	4bc4      	ldr	r3, [pc, #784]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040dc:	4bc2      	ldr	r3, [pc, #776]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	0a19      	lsrs	r1, r3, #8
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	061a      	lsls	r2, r3, #24
 80040ea:	4bbf      	ldr	r3, [pc, #764]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	e019      	b.n	8004126 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040f2:	4bbd      	ldr	r3, [pc, #756]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4bbc      	ldr	r3, [pc, #752]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80040f8:	49bd      	ldr	r1, [pc, #756]	; (80043f0 <HAL_RCC_OscConfig+0x690>)
 80040fa:	400a      	ands	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fe fe07 	bl	8002d10 <HAL_GetTick>
 8004102:	0003      	movs	r3, r0
 8004104:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004108:	f7fe fe02 	bl	8002d10 <HAL_GetTick>
 800410c:	0002      	movs	r2, r0
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1eb      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800411a:	4bb3      	ldr	r3, [pc, #716]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2208      	movs	r2, #8
 800412c:	4013      	ands	r3, r2
 800412e:	d036      	beq.n	800419e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d019      	beq.n	800416c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004138:	4bab      	ldr	r3, [pc, #684]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800413a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800413c:	4baa      	ldr	r3, [pc, #680]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800413e:	2101      	movs	r1, #1
 8004140:	430a      	orrs	r2, r1
 8004142:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fe fde4 	bl	8002d10 <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414e:	f7fe fddf 	bl	8002d10 <HAL_GetTick>
 8004152:	0002      	movs	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1c8      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004160:	4ba1      	ldr	r3, [pc, #644]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	2202      	movs	r2, #2
 8004166:	4013      	ands	r3, r2
 8004168:	d0f1      	beq.n	800414e <HAL_RCC_OscConfig+0x3ee>
 800416a:	e018      	b.n	800419e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b9e      	ldr	r3, [pc, #632]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800416e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004170:	4b9d      	ldr	r3, [pc, #628]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004172:	2101      	movs	r1, #1
 8004174:	438a      	bics	r2, r1
 8004176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004178:	f7fe fdca 	bl	8002d10 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004182:	f7fe fdc5 	bl	8002d10 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e1ae      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004194:	4b94      	ldr	r3, [pc, #592]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	2202      	movs	r2, #2
 800419a:	4013      	ands	r3, r2
 800419c:	d1f1      	bne.n	8004182 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2204      	movs	r2, #4
 80041a4:	4013      	ands	r3, r2
 80041a6:	d100      	bne.n	80041aa <HAL_RCC_OscConfig+0x44a>
 80041a8:	e0ae      	b.n	8004308 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041aa:	2023      	movs	r0, #35	; 0x23
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b2:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80041b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	055b      	lsls	r3, r3, #21
 80041ba:	4013      	ands	r3, r2
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	4b8a      	ldr	r3, [pc, #552]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80041c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c2:	4b89      	ldr	r3, [pc, #548]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80041c4:	2180      	movs	r1, #128	; 0x80
 80041c6:	0549      	lsls	r1, r1, #21
 80041c8:	430a      	orrs	r2, r1
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80041cc:	183b      	adds	r3, r7, r0
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCC_OscConfig+0x694>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d11a      	bne.n	8004214 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041de:	4b85      	ldr	r3, [pc, #532]	; (80043f4 <HAL_RCC_OscConfig+0x694>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b84      	ldr	r3, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x694>)
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	0049      	lsls	r1, r1, #1
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fe fd90 	bl	8002d10 <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f6:	f7fe fd8b 	bl	8002d10 <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b64      	cmp	r3, #100	; 0x64
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e174      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b7a      	ldr	r3, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x694>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	429a      	cmp	r2, r3
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x4d0>
 8004220:	4b71      	ldr	r3, [pc, #452]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004224:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	0049      	lsls	r1, r1, #1
 800422a:	430a      	orrs	r2, r1
 800422c:	651a      	str	r2, [r3, #80]	; 0x50
 800422e:	e031      	b.n	8004294 <HAL_RCC_OscConfig+0x534>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10c      	bne.n	8004252 <HAL_RCC_OscConfig+0x4f2>
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800423a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800423e:	496c      	ldr	r1, [pc, #432]	; (80043f0 <HAL_RCC_OscConfig+0x690>)
 8004240:	400a      	ands	r2, r1
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
 8004244:	4b68      	ldr	r3, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004248:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800424a:	496b      	ldr	r1, [pc, #428]	; (80043f8 <HAL_RCC_OscConfig+0x698>)
 800424c:	400a      	ands	r2, r1
 800424e:	651a      	str	r2, [r3, #80]	; 0x50
 8004250:	e020      	b.n	8004294 <HAL_RCC_OscConfig+0x534>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	23a0      	movs	r3, #160	; 0xa0
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	429a      	cmp	r2, r3
 800425c:	d10e      	bne.n	800427c <HAL_RCC_OscConfig+0x51c>
 800425e:	4b62      	ldr	r3, [pc, #392]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	00c9      	lsls	r1, r1, #3
 8004268:	430a      	orrs	r2, r1
 800426a:	651a      	str	r2, [r3, #80]	; 0x50
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800426e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004270:	4b5d      	ldr	r3, [pc, #372]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004272:	2180      	movs	r1, #128	; 0x80
 8004274:	0049      	lsls	r1, r1, #1
 8004276:	430a      	orrs	r2, r1
 8004278:	651a      	str	r2, [r3, #80]	; 0x50
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0x534>
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800427e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004280:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004282:	495b      	ldr	r1, [pc, #364]	; (80043f0 <HAL_RCC_OscConfig+0x690>)
 8004284:	400a      	ands	r2, r1
 8004286:	651a      	str	r2, [r3, #80]	; 0x50
 8004288:	4b57      	ldr	r3, [pc, #348]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800428a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800428e:	495a      	ldr	r1, [pc, #360]	; (80043f8 <HAL_RCC_OscConfig+0x698>)
 8004290:	400a      	ands	r2, r1
 8004292:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d015      	beq.n	80042c8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429c:	f7fe fd38 	bl	8002d10 <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	e009      	b.n	80042ba <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fe fd33 	bl	8002d10 <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	4a52      	ldr	r2, [pc, #328]	; (80043fc <HAL_RCC_OscConfig+0x69c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e11b      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ba:	4b4b      	ldr	r3, [pc, #300]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80042bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4013      	ands	r3, r2
 80042c4:	d0ef      	beq.n	80042a6 <HAL_RCC_OscConfig+0x546>
 80042c6:	e014      	b.n	80042f2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c8:	f7fe fd22 	bl	8002d10 <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d0:	e009      	b.n	80042e6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe fd1d 	bl	8002d10 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	4a47      	ldr	r2, [pc, #284]	; (80043fc <HAL_RCC_OscConfig+0x69c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e105      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80042e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4013      	ands	r3, r2
 80042f0:	d1ef      	bne.n	80042d2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042f2:	2323      	movs	r3, #35	; 0x23
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b3a      	ldr	r3, [pc, #232]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80042fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004302:	493f      	ldr	r1, [pc, #252]	; (8004400 <HAL_RCC_OscConfig+0x6a0>)
 8004304:	400a      	ands	r2, r1
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2220      	movs	r2, #32
 800430e:	4013      	ands	r3, r2
 8004310:	d049      	beq.n	80043a6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d026      	beq.n	8004368 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800431a:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004320:	2101      	movs	r1, #1
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800432c:	2101      	movs	r1, #1
 800432e:	430a      	orrs	r2, r1
 8004330:	635a      	str	r2, [r3, #52]	; 0x34
 8004332:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x6a4>)
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	4b33      	ldr	r3, [pc, #204]	; (8004404 <HAL_RCC_OscConfig+0x6a4>)
 8004338:	2180      	movs	r1, #128	; 0x80
 800433a:	0189      	lsls	r1, r1, #6
 800433c:	430a      	orrs	r2, r1
 800433e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe fce6 	bl	8002d10 <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434a:	f7fe fce1 	bl	8002d10 <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0ca      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	2202      	movs	r2, #2
 8004362:	4013      	ands	r3, r2
 8004364:	d0f1      	beq.n	800434a <HAL_RCC_OscConfig+0x5ea>
 8004366:	e01e      	b.n	80043a6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004368:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800436e:	2101      	movs	r1, #1
 8004370:	438a      	bics	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_RCC_OscConfig+0x6a4>)
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCC_OscConfig+0x6a4>)
 800437a:	4923      	ldr	r1, [pc, #140]	; (8004408 <HAL_RCC_OscConfig+0x6a8>)
 800437c:	400a      	ands	r2, r1
 800437e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fe fcc6 	bl	8002d10 <HAL_GetTick>
 8004384:	0003      	movs	r3, r0
 8004386:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800438a:	f7fe fcc1 	bl	8002d10 <HAL_GetTick>
 800438e:	0002      	movs	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e0aa      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2202      	movs	r2, #2
 80043a2:	4013      	ands	r3, r2
 80043a4:	d1f1      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d100      	bne.n	80043b0 <HAL_RCC_OscConfig+0x650>
 80043ae:	e09f      	b.n	80044f0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d100      	bne.n	80043b8 <HAL_RCC_OscConfig+0x658>
 80043b6:	e078      	b.n	80044aa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d159      	bne.n	8004474 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <HAL_RCC_OscConfig+0x688>)
 80043c6:	4911      	ldr	r1, [pc, #68]	; (800440c <HAL_RCC_OscConfig+0x6ac>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fe fca0 	bl	8002d10 <HAL_GetTick>
 80043d0:	0003      	movs	r3, r0
 80043d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043d4:	e01c      	b.n	8004410 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fe fc9b 	bl	8002d10 <HAL_GetTick>
 80043da:	0002      	movs	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d915      	bls.n	8004410 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e084      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
 80043e8:	40021000 	.word	0x40021000
 80043ec:	ffff1fff 	.word	0xffff1fff
 80043f0:	fffffeff 	.word	0xfffffeff
 80043f4:	40007000 	.word	0x40007000
 80043f8:	fffffbff 	.word	0xfffffbff
 80043fc:	00001388 	.word	0x00001388
 8004400:	efffffff 	.word	0xefffffff
 8004404:	40010000 	.word	0x40010000
 8004408:	ffffdfff 	.word	0xffffdfff
 800440c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004410:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	049b      	lsls	r3, r3, #18
 8004418:	4013      	ands	r3, r2
 800441a:	d1dc      	bne.n	80043d6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441c:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4a37      	ldr	r2, [pc, #220]	; (8004500 <HAL_RCC_OscConfig+0x7a0>)
 8004422:	4013      	ands	r3, r2
 8004424:	0019      	movs	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004434:	431a      	orrs	r2, r3
 8004436:	4b31      	ldr	r3, [pc, #196]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b2e      	ldr	r3, [pc, #184]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	0449      	lsls	r1, r1, #17
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fe fc61 	bl	8002d10 <HAL_GetTick>
 800444e:	0003      	movs	r3, r0
 8004450:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe fc5c 	bl	8002d10 <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e045      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004466:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	049b      	lsls	r3, r3, #18
 800446e:	4013      	ands	r3, r2
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0x6f4>
 8004472:	e03d      	b.n	80044f0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b20      	ldr	r3, [pc, #128]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 800447a:	4922      	ldr	r1, [pc, #136]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800447c:	400a      	ands	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe fc46 	bl	8002d10 <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448a:	f7fe fc41 	bl	8002d10 <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e02a      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	049b      	lsls	r3, r3, #18
 80044a4:	4013      	ands	r3, r2
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x72a>
 80044a8:	e022      	b.n	80044f0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e01d      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044b6:	4b11      	ldr	r3, [pc, #68]	; (80044fc <HAL_RCC_OscConfig+0x79c>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	025b      	lsls	r3, r3, #9
 80044c2:	401a      	ands	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d10f      	bne.n	80044ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	23f0      	movs	r3, #240	; 0xf0
 80044d0:	039b      	lsls	r3, r3, #14
 80044d2:	401a      	ands	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d107      	bne.n	80044ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	23c0      	movs	r3, #192	; 0xc0
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	401a      	ands	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b00a      	add	sp, #40	; 0x28
 80044f8:	bdb0      	pop	{r4, r5, r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	40021000 	.word	0x40021000
 8004500:	ff02ffff 	.word	0xff02ffff
 8004504:	feffffff 	.word	0xfeffffff

08004508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004508:	b5b0      	push	{r4, r5, r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e128      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800451c:	4b96      	ldr	r3, [pc, #600]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d91e      	bls.n	8004568 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b93      	ldr	r3, [pc, #588]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2201      	movs	r2, #1
 8004530:	4393      	bics	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	4b90      	ldr	r3, [pc, #576]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800453c:	f7fe fbe8 	bl	8002d10 <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004544:	e009      	b.n	800455a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004546:	f7fe fbe3 	bl	8002d10 <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	4a8a      	ldr	r2, [pc, #552]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e109      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b87      	ldr	r3, [pc, #540]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2201      	movs	r2, #1
 8004560:	4013      	ands	r3, r2
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d1ee      	bne.n	8004546 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2202      	movs	r2, #2
 800456e:	4013      	ands	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004572:	4b83      	ldr	r3, [pc, #524]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	22f0      	movs	r2, #240	; 0xf0
 8004578:	4393      	bics	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 8004582:	430a      	orrs	r2, r1
 8004584:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	d100      	bne.n	8004592 <HAL_RCC_ClockConfig+0x8a>
 8004590:	e089      	b.n	80046a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800459a:	4b79      	ldr	r3, [pc, #484]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	029b      	lsls	r3, r3, #10
 80045a2:	4013      	ands	r3, r2
 80045a4:	d120      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0e1      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045b2:	4b73      	ldr	r3, [pc, #460]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	049b      	lsls	r3, r3, #18
 80045ba:	4013      	ands	r3, r2
 80045bc:	d114      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0d5      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ca:	4b6d      	ldr	r3, [pc, #436]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2204      	movs	r2, #4
 80045d0:	4013      	ands	r3, r2
 80045d2:	d109      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0ca      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045d8:	4b69      	ldr	r3, [pc, #420]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0c2      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e8:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2203      	movs	r2, #3
 80045ee:	4393      	bics	r3, r2
 80045f0:	0019      	movs	r1, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b62      	ldr	r3, [pc, #392]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 80045f8:	430a      	orrs	r2, r1
 80045fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045fc:	f7fe fb88 	bl	8002d10 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d111      	bne.n	8004630 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800460c:	e009      	b.n	8004622 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460e:	f7fe fb7f 	bl	8002d10 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e0a5      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004622:	4b57      	ldr	r3, [pc, #348]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	220c      	movs	r2, #12
 8004628:	4013      	ands	r3, r2
 800462a:	2b08      	cmp	r3, #8
 800462c:	d1ef      	bne.n	800460e <HAL_RCC_ClockConfig+0x106>
 800462e:	e03a      	b.n	80046a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b03      	cmp	r3, #3
 8004636:	d111      	bne.n	800465c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004638:	e009      	b.n	800464e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463a:	f7fe fb69 	bl	8002d10 <HAL_GetTick>
 800463e:	0002      	movs	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	4a4d      	ldr	r2, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e08f      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464e:	4b4c      	ldr	r3, [pc, #304]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	220c      	movs	r2, #12
 8004654:	4013      	ands	r3, r2
 8004656:	2b0c      	cmp	r3, #12
 8004658:	d1ef      	bne.n	800463a <HAL_RCC_ClockConfig+0x132>
 800465a:	e024      	b.n	80046a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d11b      	bne.n	800469c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004664:	e009      	b.n	800467a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004666:	f7fe fb53 	bl	8002d10 <HAL_GetTick>
 800466a:	0002      	movs	r2, r0
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	4a42      	ldr	r2, [pc, #264]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e079      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	220c      	movs	r2, #12
 8004680:	4013      	ands	r3, r2
 8004682:	2b04      	cmp	r3, #4
 8004684:	d1ef      	bne.n	8004666 <HAL_RCC_ClockConfig+0x15e>
 8004686:	e00e      	b.n	80046a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fe fb42 	bl	8002d10 <HAL_GetTick>
 800468c:	0002      	movs	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	4a3a      	ldr	r2, [pc, #232]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d901      	bls.n	800469c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e068      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	220c      	movs	r2, #12
 80046a2:	4013      	ands	r3, r2
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2201      	movs	r2, #1
 80046ac:	4013      	ands	r3, r2
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d21e      	bcs.n	80046f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b4:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	4393      	bics	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046c6:	f7fe fb23 	bl	8002d10 <HAL_GetTick>
 80046ca:	0003      	movs	r3, r0
 80046cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	e009      	b.n	80046e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fe fb1e 	bl	8002d10 <HAL_GetTick>
 80046d4:	0002      	movs	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	4a28      	ldr	r2, [pc, #160]	; (800477c <HAL_RCC_ClockConfig+0x274>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e044      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCC_ClockConfig+0x270>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2201      	movs	r2, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d1ee      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2204      	movs	r2, #4
 80046f8:	4013      	ands	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fc:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a20      	ldr	r2, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x27c>)
 8004702:	4013      	ands	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 800470c:	430a      	orrs	r2, r1
 800470e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	4013      	ands	r3, r2
 8004718:	d00a      	beq.n	8004730 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a1a      	ldr	r2, [pc, #104]	; (8004788 <HAL_RCC_ClockConfig+0x280>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	00da      	lsls	r2, r3, #3
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004730:	f000 f832 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004734:	0001      	movs	r1, r0
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <HAL_RCC_ClockConfig+0x278>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	220f      	movs	r2, #15
 800473e:	4013      	ands	r3, r2
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_RCC_ClockConfig+0x284>)
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	000a      	movs	r2, r1
 8004746:	40da      	lsrs	r2, r3
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <HAL_RCC_ClockConfig+0x288>)
 800474a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_RCC_ClockConfig+0x28c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	250b      	movs	r5, #11
 8004752:	197c      	adds	r4, r7, r5
 8004754:	0018      	movs	r0, r3
 8004756:	f7fe fa95 	bl	8002c84 <HAL_InitTick>
 800475a:	0003      	movs	r3, r0
 800475c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800475e:	197b      	adds	r3, r7, r5
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004766:	197b      	adds	r3, r7, r5
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	e000      	b.n	800476e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b004      	add	sp, #16
 8004774:	bdb0      	pop	{r4, r5, r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	40022000 	.word	0x40022000
 800477c:	00001388 	.word	0x00001388
 8004780:	40021000 	.word	0x40021000
 8004784:	fffff8ff 	.word	0xfffff8ff
 8004788:	ffffc7ff 	.word	0xffffc7ff
 800478c:	08009ee8 	.word	0x08009ee8
 8004790:	20000124 	.word	0x20000124
 8004794:	20000128 	.word	0x20000128

08004798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b5b0      	push	{r4, r5, r7, lr}
 800479a:	b08e      	sub	sp, #56	; 0x38
 800479c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800479e:	4b4c      	ldr	r3, [pc, #304]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a6:	230c      	movs	r3, #12
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d014      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x40>
 80047ae:	d900      	bls.n	80047b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80047b0:	e07b      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x112>
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x24>
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d00b      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ba:	e076      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047bc:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2210      	movs	r2, #16
 80047c2:	4013      	ands	r3, r2
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047c6:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047ca:	e07c      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80047cc:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047d0:	e079      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047d2:	4b42      	ldr	r3, [pc, #264]	; (80048dc <HAL_RCC_GetSysClockFreq+0x144>)
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047d6:	e076      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	0c9a      	lsrs	r2, r3, #18
 80047dc:	230f      	movs	r3, #15
 80047de:	401a      	ands	r2, r3
 80047e0:	4b3f      	ldr	r3, [pc, #252]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80047e2:	5c9b      	ldrb	r3, [r3, r2]
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	0d9a      	lsrs	r2, r3, #22
 80047ea:	2303      	movs	r3, #3
 80047ec:	4013      	ands	r3, r2
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047f2:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	4013      	ands	r3, r2
 80047fc:	d01a      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	4a35      	ldr	r2, [pc, #212]	; (80048dc <HAL_RCC_GetSysClockFreq+0x144>)
 8004808:	2300      	movs	r3, #0
 800480a:	69b8      	ldr	r0, [r7, #24]
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	f7fb fd39 	bl	8000284 <__aeabi_lmul>
 8004812:	0002      	movs	r2, r0
 8004814:	000b      	movs	r3, r1
 8004816:	0010      	movs	r0, r2
 8004818:	0019      	movs	r1, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f7fb fd0d 	bl	8000244 <__aeabi_uldivmod>
 800482a:	0002      	movs	r2, r0
 800482c:	000b      	movs	r3, r1
 800482e:	0013      	movs	r3, r2
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
 8004832:	e037      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	4013      	ands	r3, r2
 800483c:	d01a      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004848:	2300      	movs	r3, #0
 800484a:	68b8      	ldr	r0, [r7, #8]
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	f7fb fd19 	bl	8000284 <__aeabi_lmul>
 8004852:	0002      	movs	r2, r0
 8004854:	000b      	movs	r3, r1
 8004856:	0010      	movs	r0, r2
 8004858:	0019      	movs	r1, r3
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	2300      	movs	r3, #0
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f7fb fced 	bl	8000244 <__aeabi_uldivmod>
 800486a:	0002      	movs	r2, r0
 800486c:	000b      	movs	r3, r1
 800486e:	0013      	movs	r3, r2
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
 8004872:	e017      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	0018      	movs	r0, r3
 8004878:	2300      	movs	r3, #0
 800487a:	0019      	movs	r1, r3
 800487c:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800487e:	2300      	movs	r3, #0
 8004880:	f7fb fd00 	bl	8000284 <__aeabi_lmul>
 8004884:	0002      	movs	r2, r0
 8004886:	000b      	movs	r3, r1
 8004888:	0010      	movs	r0, r2
 800488a:	0019      	movs	r1, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	001c      	movs	r4, r3
 8004890:	2300      	movs	r3, #0
 8004892:	001d      	movs	r5, r3
 8004894:	0022      	movs	r2, r4
 8004896:	002b      	movs	r3, r5
 8004898:	f7fb fcd4 	bl	8000244 <__aeabi_uldivmod>
 800489c:	0002      	movs	r2, r0
 800489e:	000b      	movs	r3, r1
 80048a0:	0013      	movs	r3, r2
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048a8:	e00d      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	0b5b      	lsrs	r3, r3, #13
 80048b0:	2207      	movs	r2, #7
 80048b2:	4013      	ands	r3, r2
 80048b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	3301      	adds	r3, #1
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	0212      	lsls	r2, r2, #8
 80048be:	409a      	lsls	r2, r3
 80048c0:	0013      	movs	r3, r2
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b00e      	add	sp, #56	; 0x38
 80048ce:	bdb0      	pop	{r4, r5, r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	003d0900 	.word	0x003d0900
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200
 80048e0:	08009f00 	.word	0x08009f00

080048e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e8:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	20000124 	.word	0x20000124

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff2 	bl	80048e4 <HAL_RCC_GetHCLKFreq>
 8004900:	0001      	movs	r1, r0
 8004902:	4b06      	ldr	r3, [pc, #24]	; (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	2207      	movs	r2, #7
 800490a:	4013      	ands	r3, r2
 800490c:	4a04      	ldr	r2, [pc, #16]	; (8004920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	40d9      	lsrs	r1, r3
 8004912:	000b      	movs	r3, r1
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	40021000 	.word	0x40021000
 8004920:	08009ef8 	.word	0x08009ef8

08004924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004928:	f7ff ffdc 	bl	80048e4 <HAL_RCC_GetHCLKFreq>
 800492c:	0001      	movs	r1, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	0adb      	lsrs	r3, r3, #11
 8004934:	2207      	movs	r2, #7
 8004936:	4013      	ands	r3, r2
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <HAL_RCC_GetPCLK2Freq+0x28>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	40d9      	lsrs	r1, r3
 800493e:	000b      	movs	r3, r1
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40021000 	.word	0x40021000
 800494c:	08009ef8 	.word	0x08009ef8

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004958:	2317      	movs	r3, #23
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2220      	movs	r2, #32
 8004966:	4013      	ands	r3, r2
 8004968:	d106      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	4013      	ands	r3, r2
 8004974:	d100      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004976:	e0d9      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004978:	4ba4      	ldr	r3, [pc, #656]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800497a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	055b      	lsls	r3, r3, #21
 8004980:	4013      	ands	r3, r2
 8004982:	d10a      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4ba1      	ldr	r3, [pc, #644]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	4ba0      	ldr	r3, [pc, #640]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800498a:	2180      	movs	r1, #128	; 0x80
 800498c:	0549      	lsls	r1, r1, #21
 800498e:	430a      	orrs	r2, r1
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004992:	2317      	movs	r3, #23
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b9d      	ldr	r3, [pc, #628]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	d11a      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b9a      	ldr	r3, [pc, #616]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4b99      	ldr	r3, [pc, #612]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	0049      	lsls	r1, r1, #1
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b4:	f7fe f9ac 	bl	8002d10 <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fe f9a7 	bl	8002d10 <HAL_GetTick>
 80049c2:	0002      	movs	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	; 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e118      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b8f      	ldr	r3, [pc, #572]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4013      	ands	r3, r2
 80049da:	d0f0      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049dc:	4b8b      	ldr	r3, [pc, #556]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	23c0      	movs	r3, #192	; 0xc0
 80049e2:	039b      	lsls	r3, r3, #14
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	23c0      	movs	r3, #192	; 0xc0
 80049ee:	039b      	lsls	r3, r3, #14
 80049f0:	4013      	ands	r3, r2
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d107      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	23c0      	movs	r3, #192	; 0xc0
 80049fe:	039b      	lsls	r3, r3, #14
 8004a00:	4013      	ands	r3, r2
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d013      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	23c0      	movs	r3, #192	; 0xc0
 8004a0e:	029b      	lsls	r3, r3, #10
 8004a10:	401a      	ands	r2, r3
 8004a12:	23c0      	movs	r3, #192	; 0xc0
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10a      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a1a:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	029b      	lsls	r3, r3, #10
 8004a22:	401a      	ands	r2, r3
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	029b      	lsls	r3, r3, #10
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0e8      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a30:	4b76      	ldr	r3, [pc, #472]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a34:	23c0      	movs	r3, #192	; 0xc0
 8004a36:	029b      	lsls	r3, r3, #10
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d049      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	23c0      	movs	r3, #192	; 0xc0
 8004a48:	029b      	lsls	r3, r3, #10
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d004      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2220      	movs	r2, #32
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	23c0      	movs	r3, #192	; 0xc0
 8004a62:	029b      	lsls	r3, r3, #10
 8004a64:	4013      	ands	r3, r2
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d034      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	4013      	ands	r3, r2
 8004a76:	d02e      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a78:	4b64      	ldr	r3, [pc, #400]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	4a65      	ldr	r2, [pc, #404]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a82:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a86:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a88:	2180      	movs	r1, #128	; 0x80
 8004a8a:	0309      	lsls	r1, r1, #12
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a90:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a94:	4b5d      	ldr	r3, [pc, #372]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a96:	4960      	ldr	r1, [pc, #384]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a9c:	4b5b      	ldr	r3, [pc, #364]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d014      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe f930 	bl	8002d10 <HAL_GetTick>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ab4:	e009      	b.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fe f92b 	bl	8002d10 <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	4a56      	ldr	r2, [pc, #344]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e09b      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aca:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d0ef      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	23c0      	movs	r3, #192	; 0xc0
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	401a      	ands	r2, r3
 8004ae0:	23c0      	movs	r3, #192	; 0xc0
 8004ae2:	029b      	lsls	r3, r3, #10
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d10c      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004ae8:	4b48      	ldr	r3, [pc, #288]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a4c      	ldr	r2, [pc, #304]	; (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	23c0      	movs	r3, #192	; 0xc0
 8004af8:	039b      	lsls	r3, r3, #14
 8004afa:	401a      	ands	r2, r3
 8004afc:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	23c0      	movs	r3, #192	; 0xc0
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	401a      	ands	r2, r3
 8004b10:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b12:	430a      	orrs	r2, r1
 8004b14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b16:	2317      	movs	r3, #23
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b24:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b26:	493f      	ldr	r1, [pc, #252]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	d009      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b36:	4b35      	ldr	r3, [pc, #212]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	0019      	movs	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b46:	430a      	orrs	r2, r1
 8004b48:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	4013      	ands	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b58:	220c      	movs	r2, #12
 8004b5a:	4393      	bics	r3, r2
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b64:	430a      	orrs	r2, r1
 8004b66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	0019      	movs	r1, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b82:	430a      	orrs	r2, r1
 8004b84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4013      	ands	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb0:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	0019      	movs	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	4013      	ands	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf0:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	0019      	movs	r1, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b006      	add	sp, #24
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40007000 	.word	0x40007000
 8004c14:	fffcffff 	.word	0xfffcffff
 8004c18:	fff7ffff 	.word	0xfff7ffff
 8004c1c:	00001388 	.word	0x00001388
 8004c20:	ffcfffff 	.word	0xffcfffff
 8004c24:	efffffff 	.word	0xefffffff
 8004c28:	fffff3ff 	.word	0xfffff3ff
 8004c2c:	ffffcfff 	.word	0xffffcfff
 8004c30:	fbffffff 	.word	0xfbffffff
 8004c34:	fff3ffff 	.word	0xfff3ffff

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e032      	b.n	8004cb0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2239      	movs	r2, #57	; 0x39
 8004c4e:	5c9b      	ldrb	r3, [r3, r2]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2238      	movs	r2, #56	; 0x38
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fd ff13 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2239      	movs	r2, #57	; 0x39
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	0019      	movs	r1, r3
 8004c78:	0010      	movs	r0, r2
 8004c7a:	f000 fae3 	bl	8005244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	223e      	movs	r2, #62	; 0x3e
 8004c82:	2101      	movs	r1, #1
 8004c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	223a      	movs	r2, #58	; 0x3a
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	223b      	movs	r2, #59	; 0x3b
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	223c      	movs	r2, #60	; 0x3c
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	223d      	movs	r2, #61	; 0x3d
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2239      	movs	r2, #57	; 0x39
 8004caa:	2101      	movs	r1, #1
 8004cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b002      	add	sp, #8
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2239      	movs	r2, #57	; 0x39
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d001      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e03b      	b.n	8004d48 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2239      	movs	r2, #57	; 0x39
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	05db      	lsls	r3, r3, #23
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d00e      	beq.n	8004d12 <HAL_TIM_Base_Start_IT+0x5a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <HAL_TIM_Base_Start_IT+0x98>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_TIM_Base_Start_IT+0x5a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_TIM_Base_Start_IT+0x5a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d111      	bne.n	8004d36 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2207      	movs	r2, #7
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b06      	cmp	r3, #6
 8004d22:	d010      	beq.n	8004d46 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d34:	e007      	b.n	8004d46 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2101      	movs	r1, #1
 8004d42:	430a      	orrs	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b004      	add	sp, #16
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40010800 	.word	0x40010800
 8004d58:	40011400 	.word	0x40011400

08004d5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	438a      	bics	r2, r1
 8004d72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <HAL_TIM_Base_Stop_IT+0x48>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_Base_Stop_IT+0x34>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	438a      	bics	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2239      	movs	r2, #57	; 0x39
 8004d94:	2101      	movs	r1, #1
 8004d96:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	00001111 	.word	0x00001111

08004da8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e088      	b.n	8004ece <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2239      	movs	r2, #57	; 0x39
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2238      	movs	r2, #56	; 0x38
 8004dcc:	2100      	movs	r1, #0
 8004dce:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fd fe10 	bl	80029f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2239      	movs	r2, #57	; 0x39
 8004ddc:	2102      	movs	r1, #2
 8004dde:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689a      	ldr	r2, [r3, #8]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	493b      	ldr	r1, [pc, #236]	; (8004ed8 <HAL_TIM_Encoder_Init+0x130>)
 8004dec:	400a      	ands	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	0019      	movs	r1, r3
 8004dfa:	0010      	movs	r0, r2
 8004dfc:	f000 fa22 	bl	8005244 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <HAL_TIM_Encoder_Init+0x134>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4313      	orrs	r3, r2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <HAL_TIM_Encoder_Init+0x138>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <HAL_TIM_Encoder_Init+0x13c>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	4313      	orrs	r3, r2
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	011a      	lsls	r2, r3, #4
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2222      	movs	r2, #34	; 0x22
 8004e76:	4393      	bics	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2288      	movs	r2, #136	; 0x88
 8004e7e:	4393      	bics	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	223e      	movs	r2, #62	; 0x3e
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223a      	movs	r2, #58	; 0x3a
 8004eb8:	2101      	movs	r1, #1
 8004eba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	223b      	movs	r2, #59	; 0x3b
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2239      	movs	r2, #57	; 0x39
 8004ec8:	2101      	movs	r1, #1
 8004eca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b006      	add	sp, #24
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	ffffbff8 	.word	0xffffbff8
 8004edc:	fffffcfc 	.word	0xfffffcfc
 8004ee0:	fffff3f3 	.word	0xfffff3f3
 8004ee4:	ffff0f0f 	.word	0xffff0f0f

08004ee8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ef2:	200f      	movs	r0, #15
 8004ef4:	183b      	adds	r3, r7, r0
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	213a      	movs	r1, #58	; 0x3a
 8004efa:	5c52      	ldrb	r2, [r2, r1]
 8004efc:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004efe:	230e      	movs	r3, #14
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	213b      	movs	r1, #59	; 0x3b
 8004f06:	5c52      	ldrb	r2, [r2, r1]
 8004f08:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <HAL_TIM_Encoder_Start_IT+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f10:	183b      	adds	r3, r7, r0
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d001      	beq.n	8004f1c <HAL_TIM_Encoder_Start_IT+0x34>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e076      	b.n	800500a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	223a      	movs	r2, #58	; 0x3a
 8004f20:	2102      	movs	r1, #2
 8004f22:	5499      	strb	r1, [r3, r2]
 8004f24:	e022      	b.n	8004f6c <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d10b      	bne.n	8004f44 <HAL_TIM_Encoder_Start_IT+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f2c:	230e      	movs	r3, #14
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d001      	beq.n	8004f3a <HAL_TIM_Encoder_Start_IT+0x52>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e067      	b.n	800500a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	223b      	movs	r2, #59	; 0x3b
 8004f3e:	2102      	movs	r1, #2
 8004f40:	5499      	strb	r1, [r3, r2]
 8004f42:	e013      	b.n	8004f6c <HAL_TIM_Encoder_Start_IT+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f44:	230f      	movs	r3, #15
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d104      	bne.n	8004f58 <HAL_TIM_Encoder_Start_IT+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f4e:	230e      	movs	r3, #14
 8004f50:	18fb      	adds	r3, r7, r3
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <HAL_TIM_Encoder_Start_IT+0x74>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e056      	b.n	800500a <HAL_TIM_Encoder_Start_IT+0x122>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	223a      	movs	r2, #58	; 0x3a
 8004f60:	2102      	movs	r1, #2
 8004f62:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	223b      	movs	r2, #59	; 0x3b
 8004f68:	2102      	movs	r1, #2
 8004f6a:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_Encoder_Start_IT+0x92>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d010      	beq.n	8004f9a <HAL_TIM_Encoder_Start_IT+0xb2>
 8004f78:	e01f      	b.n	8004fba <HAL_TIM_Encoder_Start_IT+0xd2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	2100      	movs	r1, #0
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 f9bc 	bl	8005300 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2102      	movs	r1, #2
 8004f94:	430a      	orrs	r2, r1
 8004f96:	60da      	str	r2, [r3, #12]
      break;
 8004f98:	e02e      	b.n	8004ff8 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 f9ac 	bl	8005300 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2104      	movs	r1, #4
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]
      break;
 8004fb8:	e01e      	b.n	8004ff8 <HAL_TIM_Encoder_Start_IT+0x110>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f000 f99c 	bl	8005300 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	2104      	movs	r1, #4
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 f995 	bl	8005300 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	60da      	str	r2, [r3, #12]
      break;
 8004ff6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2101      	movs	r1, #1
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b004      	add	sp, #16
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2202      	movs	r2, #2
 8005022:	4013      	ands	r3, r2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d124      	bne.n	8005072 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2202      	movs	r2, #2
 8005030:	4013      	ands	r3, r2
 8005032:	2b02      	cmp	r3, #2
 8005034:	d11d      	bne.n	8005072 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2203      	movs	r2, #3
 800503c:	4252      	negs	r2, r2
 800503e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2203      	movs	r2, #3
 800504e:	4013      	ands	r3, r2
 8005050:	d004      	beq.n	800505c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0018      	movs	r0, r3
 8005056:	f7fb fc43 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 800505a:	e007      	b.n	800506c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	0018      	movs	r0, r3
 8005060:	f000 f8bf 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	0018      	movs	r0, r3
 8005068:	f000 f8c3 	bl	80051f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2204      	movs	r2, #4
 800507a:	4013      	ands	r3, r2
 800507c:	2b04      	cmp	r3, #4
 800507e:	d125      	bne.n	80050cc <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2204      	movs	r2, #4
 8005088:	4013      	ands	r3, r2
 800508a:	2b04      	cmp	r3, #4
 800508c:	d11e      	bne.n	80050cc <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2205      	movs	r2, #5
 8005094:	4252      	negs	r2, r2
 8005096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	23c0      	movs	r3, #192	; 0xc0
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fb fc16 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 80050b4:	e007      	b.n	80050c6 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 f892 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	0018      	movs	r0, r3
 80050c2:	f000 f896 	bl	80051f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2208      	movs	r2, #8
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d124      	bne.n	8005124 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2208      	movs	r2, #8
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d11d      	bne.n	8005124 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2209      	movs	r2, #9
 80050ee:	4252      	negs	r2, r2
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	2203      	movs	r2, #3
 8005100:	4013      	ands	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0018      	movs	r0, r3
 8005108:	f7fb fbea 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 800510c:	e007      	b.n	800511e <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 f866 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	0018      	movs	r0, r3
 800511a:	f000 f86a 	bl	80051f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2210      	movs	r2, #16
 800512c:	4013      	ands	r3, r2
 800512e:	2b10      	cmp	r3, #16
 8005130:	d125      	bne.n	800517e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2210      	movs	r2, #16
 800513a:	4013      	ands	r3, r2
 800513c:	2b10      	cmp	r3, #16
 800513e:	d11e      	bne.n	800517e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2211      	movs	r2, #17
 8005146:	4252      	negs	r2, r2
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	23c0      	movs	r3, #192	; 0xc0
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f7fb fbbd 	bl	80008e0 <HAL_TIM_IC_CaptureCallback>
 8005166:	e007      	b.n	8005178 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0018      	movs	r0, r3
 800516c:	f000 f839 	bl	80051e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	0018      	movs	r0, r3
 8005174:	f000 f83d 	bl	80051f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2201      	movs	r2, #1
 8005186:	4013      	ands	r3, r2
 8005188:	2b01      	cmp	r3, #1
 800518a:	d10f      	bne.n	80051ac <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	4013      	ands	r3, r2
 8005196:	2b01      	cmp	r3, #1
 8005198:	d108      	bne.n	80051ac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2202      	movs	r2, #2
 80051a0:	4252      	negs	r2, r2
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	0018      	movs	r0, r3
 80051a8:	f7fb fbc6 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2240      	movs	r2, #64	; 0x40
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d10f      	bne.n	80051da <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2240      	movs	r2, #64	; 0x40
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d108      	bne.n	80051da <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2241      	movs	r2, #65	; 0x41
 80051ce:	4252      	negs	r2, r2
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f000 f814 	bl	8005202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b002      	add	sp, #8
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b002      	add	sp, #8
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b002      	add	sp, #8
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b002      	add	sp, #8
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  return htim->State;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2239      	movs	r2, #57	; 0x39
 800521e:	5c9b      	ldrb	r3, [r3, r2]
 8005220:	b2db      	uxtb	r3, r3
}
 8005222:	0018      	movs	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	b002      	add	sp, #8
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  return htim->State;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2239      	movs	r2, #57	; 0x39
 8005236:	5c9b      	ldrb	r3, [r3, r2]
 8005238:	b2db      	uxtb	r3, r3
}
 800523a:	0018      	movs	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	b002      	add	sp, #8
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	05db      	lsls	r3, r3, #23
 800525a:	429a      	cmp	r2, r3
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0x32>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <TIM_Base_SetConfig+0xac>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0x32>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <TIM_Base_SetConfig+0xb0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0x32>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <TIM_Base_SetConfig+0xb4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2270      	movs	r2, #112	; 0x70
 800527a:	4393      	bics	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	05db      	lsls	r3, r3, #23
 800528e:	429a      	cmp	r2, r3
 8005290:	d00b      	beq.n	80052aa <TIM_Base_SetConfig+0x66>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <TIM_Base_SetConfig+0xac>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d007      	beq.n	80052aa <TIM_Base_SetConfig+0x66>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <TIM_Base_SetConfig+0xb0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_Base_SetConfig+0x66>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <TIM_Base_SetConfig+0xb4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d108      	bne.n	80052bc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <TIM_Base_SetConfig+0xb8>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	4393      	bics	r3, r2
 80052c2:	001a      	movs	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	615a      	str	r2, [r3, #20]
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b004      	add	sp, #16
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40010800 	.word	0x40010800
 80052f8:	40011400 	.word	0x40011400
 80052fc:	fffffcff 	.word	0xfffffcff

08005300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	221f      	movs	r2, #31
 8005310:	4013      	ands	r3, r2
 8005312:	2201      	movs	r2, #1
 8005314:	409a      	lsls	r2, r3
 8005316:	0013      	movs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	43d2      	mvns	r2, r2
 8005322:	401a      	ands	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	211f      	movs	r1, #31
 8005330:	400b      	ands	r3, r1
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4099      	lsls	r1, r3
 8005336:	000b      	movs	r3, r1
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	b006      	add	sp, #24
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2238      	movs	r2, #56	; 0x38
 8005356:	5c9b      	ldrb	r3, [r3, r2]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e047      	b.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2238      	movs	r2, #56	; 0x38
 8005364:	2101      	movs	r1, #1
 8005366:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2239      	movs	r2, #57	; 0x39
 800536c:	2102      	movs	r1, #2
 800536e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2270      	movs	r2, #112	; 0x70
 8005384:	4393      	bics	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	05db      	lsls	r3, r3, #23
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d00e      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d009      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10c      	bne.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	4393      	bics	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2239      	movs	r2, #57	; 0x39
 80053e2:	2101      	movs	r1, #1
 80053e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2238      	movs	r2, #56	; 0x38
 80053ea:	2100      	movs	r1, #0
 80053ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b004      	add	sp, #16
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40010800 	.word	0x40010800
 8005400:	40011400 	.word	0x40011400

08005404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e044      	b.n	80054a0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2274      	movs	r2, #116	; 0x74
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	0018      	movs	r0, r3
 800542a:	f7fd fb95 	bl	8002b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2224      	movs	r2, #36	; 0x24
 8005432:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	438a      	bics	r2, r1
 8005442:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	0018      	movs	r0, r3
 8005448:	f000 fc36 	bl	8005cb8 <UART_SetConfig>
 800544c:	0003      	movs	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e024      	b.n	80054a0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	0018      	movs	r0, r3
 8005462:	f000 fec9 	bl	80061f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	490d      	ldr	r1, [pc, #52]	; (80054a8 <HAL_UART_Init+0xa4>)
 8005472:	400a      	ands	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	212a      	movs	r1, #42	; 0x2a
 8005482:	438a      	bics	r2, r1
 8005484:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2101      	movs	r1, #1
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0018      	movs	r0, r3
 800549a:	f000 ff61 	bl	8006360 <UART_CheckIdleState>
 800549e:	0003      	movs	r3, r0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	ffffb7ff 	.word	0xffffb7ff

080054ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	1dbb      	adds	r3, r7, #6
 80054ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d000      	beq.n	80054c6 <HAL_UART_Transmit+0x1a>
 80054c4:	e095      	b.n	80055f2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_UART_Transmit+0x28>
 80054cc:	1dbb      	adds	r3, r7, #6
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e08d      	b.n	80055f4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	2380      	movs	r3, #128	; 0x80
 80054de:	015b      	lsls	r3, r3, #5
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d109      	bne.n	80054f8 <HAL_UART_Transmit+0x4c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2201      	movs	r2, #1
 80054f0:	4013      	ands	r3, r2
 80054f2:	d001      	beq.n	80054f8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e07d      	b.n	80055f4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2274      	movs	r2, #116	; 0x74
 80054fc:	5c9b      	ldrb	r3, [r3, r2]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UART_Transmit+0x5a>
 8005502:	2302      	movs	r3, #2
 8005504:	e076      	b.n	80055f4 <HAL_UART_Transmit+0x148>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2274      	movs	r2, #116	; 0x74
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	2100      	movs	r1, #0
 8005514:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2221      	movs	r2, #33	; 0x21
 800551a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800551c:	f7fd fbf8 	bl	8002d10 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1dba      	adds	r2, r7, #6
 8005528:	2150      	movs	r1, #80	; 0x50
 800552a:	8812      	ldrh	r2, [r2, #0]
 800552c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1dba      	adds	r2, r7, #6
 8005532:	2152      	movs	r1, #82	; 0x52
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	015b      	lsls	r3, r3, #5
 8005540:	429a      	cmp	r2, r3
 8005542:	d108      	bne.n	8005556 <HAL_UART_Transmit+0xaa>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	e003      	b.n	800555e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2274      	movs	r2, #116	; 0x74
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005566:	e02c      	b.n	80055c2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	0013      	movs	r3, r2
 8005572:	2200      	movs	r2, #0
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	f000 ff3b 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 800557a:	1e03      	subs	r3, r0, #0
 800557c:	d001      	beq.n	8005582 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e038      	b.n	80055f4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	001a      	movs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	05d2      	lsls	r2, r2, #23
 8005594:	0dd2      	lsrs	r2, r2, #23
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	3302      	adds	r3, #2
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e007      	b.n	80055b0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2252      	movs	r2, #82	; 0x52
 80055b4:	5a9b      	ldrh	r3, [r3, r2]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b299      	uxth	r1, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2252      	movs	r2, #82	; 0x52
 80055c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2252      	movs	r2, #82	; 0x52
 80055c6:	5a9b      	ldrh	r3, [r3, r2]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1cc      	bne.n	8005568 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	0013      	movs	r3, r2
 80055d8:	2200      	movs	r2, #0
 80055da:	2140      	movs	r1, #64	; 0x40
 80055dc:	f000 ff08 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 80055e0:	1e03      	subs	r3, r0, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e005      	b.n	80055f4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b008      	add	sp, #32
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	1dbb      	adds	r3, r7, #6
 8005608:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800560e:	2b20      	cmp	r3, #32
 8005610:	d155      	bne.n	80056be <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <HAL_UART_Receive_IT+0x24>
 8005618:	1dbb      	adds	r3, r7, #6
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e04d      	b.n	80056c0 <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	015b      	lsls	r3, r3, #5
 800562c:	429a      	cmp	r2, r3
 800562e:	d109      	bne.n	8005644 <HAL_UART_Receive_IT+0x48>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d105      	bne.n	8005644 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2201      	movs	r2, #1
 800563c:	4013      	ands	r3, r2
 800563e:	d001      	beq.n	8005644 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e03d      	b.n	80056c0 <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2274      	movs	r2, #116	; 0x74
 8005648:	5c9b      	ldrb	r3, [r3, r2]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_UART_Receive_IT+0x56>
 800564e:	2302      	movs	r3, #2
 8005650:	e036      	b.n	80056c0 <HAL_UART_Receive_IT+0xc4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2274      	movs	r2, #116	; 0x74
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_UART_Receive_IT+0xcc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d020      	beq.n	80056ac <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	4013      	ands	r3, r2
 8005676:	d019      	beq.n	80056ac <HAL_UART_Receive_IT+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	613b      	str	r3, [r7, #16]
  return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	2301      	movs	r3, #1
 8005684:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2180      	movs	r1, #128	; 0x80
 800569a:	04c9      	lsls	r1, r1, #19
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f383 8810 	msr	PRIMASK, r3
}
 80056aa:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056ac:	1dbb      	adds	r3, r7, #6
 80056ae:	881a      	ldrh	r2, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 ff5f 	bl	8006578 <UART_Start_Receive_IT>
 80056ba:	0003      	movs	r3, r0
 80056bc:	e000      	b.n	80056c0 <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b008      	add	sp, #32
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40004800 	.word	0x40004800

080056cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b0ab      	sub	sp, #172	; 0xac
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	22a4      	movs	r2, #164	; 0xa4
 80056dc:	18b9      	adds	r1, r7, r2
 80056de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	20a0      	movs	r0, #160	; 0xa0
 80056e8:	1839      	adds	r1, r7, r0
 80056ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	219c      	movs	r1, #156	; 0x9c
 80056f4:	1879      	adds	r1, r7, r1
 80056f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056f8:	0011      	movs	r1, r2
 80056fa:	18bb      	adds	r3, r7, r2
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a99      	ldr	r2, [pc, #612]	; (8005964 <HAL_UART_IRQHandler+0x298>)
 8005700:	4013      	ands	r3, r2
 8005702:	2298      	movs	r2, #152	; 0x98
 8005704:	18bc      	adds	r4, r7, r2
 8005706:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005708:	18bb      	adds	r3, r7, r2
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d114      	bne.n	800573a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005710:	187b      	adds	r3, r7, r1
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2220      	movs	r2, #32
 8005716:	4013      	ands	r3, r2
 8005718:	d00f      	beq.n	800573a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800571a:	183b      	adds	r3, r7, r0
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2220      	movs	r2, #32
 8005720:	4013      	ands	r3, r2
 8005722:	d00a      	beq.n	800573a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005728:	2b00      	cmp	r3, #0
 800572a:	d100      	bne.n	800572e <HAL_UART_IRQHandler+0x62>
 800572c:	e298      	b.n	8005c60 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	0010      	movs	r0, r2
 8005736:	4798      	blx	r3
      }
      return;
 8005738:	e292      	b.n	8005c60 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800573a:	2398      	movs	r3, #152	; 0x98
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d100      	bne.n	8005746 <HAL_UART_IRQHandler+0x7a>
 8005744:	e114      	b.n	8005970 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005746:	239c      	movs	r3, #156	; 0x9c
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2201      	movs	r2, #1
 800574e:	4013      	ands	r3, r2
 8005750:	d106      	bne.n	8005760 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005752:	23a0      	movs	r3, #160	; 0xa0
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a83      	ldr	r2, [pc, #524]	; (8005968 <HAL_UART_IRQHandler+0x29c>)
 800575a:	4013      	ands	r3, r2
 800575c:	d100      	bne.n	8005760 <HAL_UART_IRQHandler+0x94>
 800575e:	e107      	b.n	8005970 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005760:	23a4      	movs	r3, #164	; 0xa4
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2201      	movs	r2, #1
 8005768:	4013      	ands	r3, r2
 800576a:	d012      	beq.n	8005792 <HAL_UART_IRQHandler+0xc6>
 800576c:	23a0      	movs	r3, #160	; 0xa0
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	4013      	ands	r3, r2
 8005778:	d00b      	beq.n	8005792 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	589b      	ldr	r3, [r3, r2]
 8005788:	2201      	movs	r2, #1
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005792:	23a4      	movs	r3, #164	; 0xa4
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2202      	movs	r2, #2
 800579a:	4013      	ands	r3, r2
 800579c:	d011      	beq.n	80057c2 <HAL_UART_IRQHandler+0xf6>
 800579e:	239c      	movs	r3, #156	; 0x9c
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	4013      	ands	r3, r2
 80057a8:	d00b      	beq.n	80057c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2202      	movs	r2, #2
 80057b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	589b      	ldr	r3, [r3, r2]
 80057b8:	2204      	movs	r2, #4
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2180      	movs	r1, #128	; 0x80
 80057c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c2:	23a4      	movs	r3, #164	; 0xa4
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2204      	movs	r2, #4
 80057ca:	4013      	ands	r3, r2
 80057cc:	d011      	beq.n	80057f2 <HAL_UART_IRQHandler+0x126>
 80057ce:	239c      	movs	r3, #156	; 0x9c
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2201      	movs	r2, #1
 80057d6:	4013      	ands	r3, r2
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2204      	movs	r2, #4
 80057e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2280      	movs	r2, #128	; 0x80
 80057e6:	589b      	ldr	r3, [r3, r2]
 80057e8:	2202      	movs	r2, #2
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2180      	movs	r1, #128	; 0x80
 80057f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057f2:	23a4      	movs	r3, #164	; 0xa4
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2208      	movs	r2, #8
 80057fa:	4013      	ands	r3, r2
 80057fc:	d017      	beq.n	800582e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057fe:	23a0      	movs	r3, #160	; 0xa0
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2220      	movs	r2, #32
 8005806:	4013      	ands	r3, r2
 8005808:	d105      	bne.n	8005816 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800580a:	239c      	movs	r3, #156	; 0x9c
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2201      	movs	r2, #1
 8005812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005814:	d00b      	beq.n	800582e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2208      	movs	r2, #8
 800581c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2280      	movs	r2, #128	; 0x80
 8005822:	589b      	ldr	r3, [r3, r2]
 8005824:	2208      	movs	r2, #8
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800582e:	23a4      	movs	r3, #164	; 0xa4
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	4013      	ands	r3, r2
 800583a:	d013      	beq.n	8005864 <HAL_UART_IRQHandler+0x198>
 800583c:	23a0      	movs	r3, #160	; 0xa0
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	04db      	lsls	r3, r3, #19
 8005846:	4013      	ands	r3, r2
 8005848:	d00c      	beq.n	8005864 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	589b      	ldr	r3, [r3, r2]
 800585a:	2220      	movs	r2, #32
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2180      	movs	r1, #128	; 0x80
 8005862:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	589b      	ldr	r3, [r3, r2]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d100      	bne.n	8005870 <HAL_UART_IRQHandler+0x1a4>
 800586e:	e1f9      	b.n	8005c64 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005870:	23a4      	movs	r3, #164	; 0xa4
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2220      	movs	r2, #32
 8005878:	4013      	ands	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800587c:	23a0      	movs	r3, #160	; 0xa0
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2220      	movs	r2, #32
 8005884:	4013      	ands	r3, r2
 8005886:	d008      	beq.n	800589a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	0010      	movs	r0, r2
 8005898:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	589b      	ldr	r3, [r3, r2]
 80058a0:	2194      	movs	r1, #148	; 0x94
 80058a2:	187a      	adds	r2, r7, r1
 80058a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2240      	movs	r2, #64	; 0x40
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d004      	beq.n	80058be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058b4:	187b      	adds	r3, r7, r1
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2228      	movs	r2, #40	; 0x28
 80058ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058bc:	d047      	beq.n	800594e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f000 ff09 	bl	80066d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2240      	movs	r2, #64	; 0x40
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d137      	bne.n	8005944 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d4:	f3ef 8310 	mrs	r3, PRIMASK
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80058da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058dc:	2090      	movs	r0, #144	; 0x90
 80058de:	183a      	adds	r2, r7, r0
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	2301      	movs	r3, #1
 80058e4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058e8:	f383 8810 	msr	PRIMASK, r3
}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2140      	movs	r1, #64	; 0x40
 80058fa:	438a      	bics	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]
 80058fe:	183b      	adds	r3, r7, r0
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	2b00      	cmp	r3, #0
 8005912:	d012      	beq.n	800593a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	4a14      	ldr	r2, [pc, #80]	; (800596c <HAL_UART_IRQHandler+0x2a0>)
 800591a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	0018      	movs	r0, r3
 8005922:	f7fd fb41 	bl	8002fa8 <HAL_DMA_Abort_IT>
 8005926:	1e03      	subs	r3, r0, #0
 8005928:	d01a      	beq.n	8005960 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	0018      	movs	r0, r3
 8005936:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e012      	b.n	8005960 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	0018      	movs	r0, r3
 800593e:	f000 f9a7 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005942:	e00d      	b.n	8005960 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 f9a2 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594c:	e008      	b.n	8005960 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	0018      	movs	r0, r3
 8005952:	f000 f99d 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	2100      	movs	r1, #0
 800595c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800595e:	e181      	b.n	8005c64 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005960:	46c0      	nop			; (mov r8, r8)
    return;
 8005962:	e17f      	b.n	8005c64 <HAL_UART_IRQHandler+0x598>
 8005964:	0000080f 	.word	0x0000080f
 8005968:	04000120 	.word	0x04000120
 800596c:	0800679d 	.word	0x0800679d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	2b01      	cmp	r3, #1
 8005976:	d000      	beq.n	800597a <HAL_UART_IRQHandler+0x2ae>
 8005978:	e133      	b.n	8005be2 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800597a:	23a4      	movs	r3, #164	; 0xa4
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2210      	movs	r2, #16
 8005982:	4013      	ands	r3, r2
 8005984:	d100      	bne.n	8005988 <HAL_UART_IRQHandler+0x2bc>
 8005986:	e12c      	b.n	8005be2 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005988:	23a0      	movs	r3, #160	; 0xa0
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2210      	movs	r2, #16
 8005990:	4013      	ands	r3, r2
 8005992:	d100      	bne.n	8005996 <HAL_UART_IRQHandler+0x2ca>
 8005994:	e125      	b.n	8005be2 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2210      	movs	r2, #16
 800599c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2240      	movs	r2, #64	; 0x40
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d000      	beq.n	80059ae <HAL_UART_IRQHandler+0x2e2>
 80059ac:	e09d      	b.n	8005aea <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	217e      	movs	r1, #126	; 0x7e
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80059bc:	187b      	adds	r3, r7, r1
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d100      	bne.n	80059c6 <HAL_UART_IRQHandler+0x2fa>
 80059c4:	e150      	b.n	8005c68 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2258      	movs	r2, #88	; 0x58
 80059ca:	5a9b      	ldrh	r3, [r3, r2]
 80059cc:	187a      	adds	r2, r7, r1
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d300      	bcc.n	80059d6 <HAL_UART_IRQHandler+0x30a>
 80059d4:	e148      	b.n	8005c68 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	187a      	adds	r2, r7, r1
 80059da:	215a      	movs	r1, #90	; 0x5a
 80059dc:	8812      	ldrh	r2, [r2, #0]
 80059de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2220      	movs	r2, #32
 80059ea:	4013      	ands	r3, r2
 80059ec:	d16e      	bne.n	8005acc <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ee:	f3ef 8310 	mrs	r3, PRIMASK
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f8:	2301      	movs	r3, #1
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	f383 8810 	msr	PRIMASK, r3
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	499a      	ldr	r1, [pc, #616]	; (8005c78 <HAL_UART_IRQHandler+0x5ac>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a20:	f3ef 8310 	mrs	r3, PRIMASK
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	677b      	str	r3, [r7, #116]	; 0x74
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	f383 8810 	msr	PRIMASK, r3
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2101      	movs	r1, #1
 8005a42:	438a      	bics	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4c:	f383 8810 	msr	PRIMASK, r3
}
 8005a50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a52:	f3ef 8310 	mrs	r3, PRIMASK
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2140      	movs	r1, #64	; 0x40
 8005a74:	438a      	bics	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a90:	f3ef 8310 	mrs	r3, PRIMASK
 8005a94:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa0:	f383 8810 	msr	PRIMASK, r3
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2110      	movs	r1, #16
 8005ab2:	438a      	bics	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7fd fa2e 	bl	8002f28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2258      	movs	r2, #88	; 0x58
 8005ad0:	5a9a      	ldrh	r2, [r3, r2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	215a      	movs	r1, #90	; 0x5a
 8005ad6:	5a5b      	ldrh	r3, [r3, r1]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0011      	movs	r1, r2
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f000 f8dc 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ae8:	e0be      	b.n	8005c68 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2258      	movs	r2, #88	; 0x58
 8005aee:	5a99      	ldrh	r1, [r3, r2]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	225a      	movs	r2, #90	; 0x5a
 8005af4:	5a9b      	ldrh	r3, [r3, r2]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	208e      	movs	r0, #142	; 0x8e
 8005afa:	183b      	adds	r3, r7, r0
 8005afc:	1a8a      	subs	r2, r1, r2
 8005afe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	225a      	movs	r2, #90	; 0x5a
 8005b04:	5a9b      	ldrh	r3, [r3, r2]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d100      	bne.n	8005b0e <HAL_UART_IRQHandler+0x442>
 8005b0c:	e0ae      	b.n	8005c6c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d100      	bne.n	8005b18 <HAL_UART_IRQHandler+0x44c>
 8005b16:	e0a9      	b.n	8005c6c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b18:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b20:	2488      	movs	r4, #136	; 0x88
 8005b22:	193a      	adds	r2, r7, r4
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	2301      	movs	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	494f      	ldr	r1, [pc, #316]	; (8005c7c <HAL_UART_IRQHandler+0x5b0>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f383 8810 	msr	PRIMASK, r3
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b56:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	2484      	movs	r4, #132	; 0x84
 8005b5a:	193a      	adds	r2, r7, r4
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2101      	movs	r1, #1
 8005b76:	438a      	bics	r2, r1
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	193b      	adds	r3, r7, r4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f383 8810 	msr	PRIMASK, r3
}
 8005b86:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	2480      	movs	r4, #128	; 0x80
 8005ba4:	193a      	adds	r2, r7, r4
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	2301      	movs	r3, #1
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	438a      	bics	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	193b      	adds	r3, r7, r4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	f383 8810 	msr	PRIMASK, r3
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd2:	183b      	adds	r3, r7, r0
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0011      	movs	r1, r2
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f000 f860 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be0:	e044      	b.n	8005c6c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005be2:	23a4      	movs	r3, #164	; 0xa4
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	035b      	lsls	r3, r3, #13
 8005bec:	4013      	ands	r3, r2
 8005bee:	d010      	beq.n	8005c12 <HAL_UART_IRQHandler+0x546>
 8005bf0:	239c      	movs	r3, #156	; 0x9c
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	03db      	lsls	r3, r3, #15
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2280      	movs	r2, #128	; 0x80
 8005c04:	0352      	lsls	r2, r2, #13
 8005c06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 ff70 	bl	8006af0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c10:	e02f      	b.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c12:	23a4      	movs	r3, #164	; 0xa4
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00f      	beq.n	8005c3e <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c1e:	23a0      	movs	r3, #160	; 0xa0
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2280      	movs	r2, #128	; 0x80
 8005c26:	4013      	ands	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01e      	beq.n	8005c70 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	0010      	movs	r0, r2
 8005c3a:	4798      	blx	r3
    }
    return;
 8005c3c:	e018      	b.n	8005c70 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c3e:	23a4      	movs	r3, #164	; 0xa4
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2240      	movs	r2, #64	; 0x40
 8005c46:	4013      	ands	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
 8005c4a:	23a0      	movs	r3, #160	; 0xa0
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2240      	movs	r2, #64	; 0x40
 8005c52:	4013      	ands	r3, r2
 8005c54:	d00d      	beq.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f000 fdb6 	bl	80067ca <UART_EndTransmit_IT>
    return;
 8005c5e:	e008      	b.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	e006      	b.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
    return;
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	e004      	b.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005c68:	46c0      	nop			; (mov r8, r8)
 8005c6a:	e002      	b.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
      return;
 8005c6c:	46c0      	nop			; (mov r8, r8)
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_IRQHandler+0x5a6>
    return;
 8005c70:	46c0      	nop			; (mov r8, r8)
  }

}
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b02b      	add	sp, #172	; 0xac
 8005c76:	bd90      	pop	{r4, r7, pc}
 8005c78:	fffffeff 	.word	0xfffffeff
 8005c7c:	fffffedf 	.word	0xfffffedf

08005c80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c88:	46c0      	nop			; (mov r8, r8)
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c98:	46c0      	nop			; (mov r8, r8)
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	000a      	movs	r2, r1
 8005caa:	1cbb      	adds	r3, r7, #2
 8005cac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b002      	add	sp, #8
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b5b0      	push	{r4, r5, r7, lr}
 8005cba:	b08e      	sub	sp, #56	; 0x38
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc0:	231a      	movs	r3, #26
 8005cc2:	2218      	movs	r2, #24
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	19db      	adds	r3, r3, r7
 8005cc8:	2200      	movs	r2, #0
 8005cca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4ac3      	ldr	r2, [pc, #780]	; (8005ff8 <UART_SetConfig+0x340>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4abe      	ldr	r2, [pc, #760]	; (8005ffc <UART_SetConfig+0x344>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	0019      	movs	r1, r3
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4ab8      	ldr	r2, [pc, #736]	; (8006000 <UART_SetConfig+0x348>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	4ab4      	ldr	r2, [pc, #720]	; (8006004 <UART_SetConfig+0x34c>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	0019      	movs	r1, r3
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4ab0      	ldr	r2, [pc, #704]	; (8006008 <UART_SetConfig+0x350>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d131      	bne.n	8005db0 <UART_SetConfig+0xf8>
 8005d4c:	4baf      	ldr	r3, [pc, #700]	; (800600c <UART_SetConfig+0x354>)
 8005d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d50:	2203      	movs	r2, #3
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d01d      	beq.n	8005d94 <UART_SetConfig+0xdc>
 8005d58:	d823      	bhi.n	8005da2 <UART_SetConfig+0xea>
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d00c      	beq.n	8005d78 <UART_SetConfig+0xc0>
 8005d5e:	d820      	bhi.n	8005da2 <UART_SetConfig+0xea>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <UART_SetConfig+0xb2>
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d00e      	beq.n	8005d86 <UART_SetConfig+0xce>
 8005d68:	e01b      	b.n	8005da2 <UART_SetConfig+0xea>
 8005d6a:	231b      	movs	r3, #27
 8005d6c:	2218      	movs	r2, #24
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	19db      	adds	r3, r3, r7
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e0b4      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005d78:	231b      	movs	r3, #27
 8005d7a:	2218      	movs	r2, #24
 8005d7c:	189b      	adds	r3, r3, r2
 8005d7e:	19db      	adds	r3, r3, r7
 8005d80:	2202      	movs	r2, #2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e0ad      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005d86:	231b      	movs	r3, #27
 8005d88:	2218      	movs	r2, #24
 8005d8a:	189b      	adds	r3, r3, r2
 8005d8c:	19db      	adds	r3, r3, r7
 8005d8e:	2204      	movs	r2, #4
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e0a6      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005d94:	231b      	movs	r3, #27
 8005d96:	2218      	movs	r2, #24
 8005d98:	189b      	adds	r3, r3, r2
 8005d9a:	19db      	adds	r3, r3, r7
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e09f      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005da2:	231b      	movs	r3, #27
 8005da4:	2218      	movs	r2, #24
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	19db      	adds	r3, r3, r7
 8005daa:	2210      	movs	r2, #16
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e098      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a96      	ldr	r2, [pc, #600]	; (8006010 <UART_SetConfig+0x358>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d131      	bne.n	8005e1e <UART_SetConfig+0x166>
 8005dba:	4b94      	ldr	r3, [pc, #592]	; (800600c <UART_SetConfig+0x354>)
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	220c      	movs	r2, #12
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d01d      	beq.n	8005e02 <UART_SetConfig+0x14a>
 8005dc6:	d823      	bhi.n	8005e10 <UART_SetConfig+0x158>
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d00c      	beq.n	8005de6 <UART_SetConfig+0x12e>
 8005dcc:	d820      	bhi.n	8005e10 <UART_SetConfig+0x158>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <UART_SetConfig+0x120>
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00e      	beq.n	8005df4 <UART_SetConfig+0x13c>
 8005dd6:	e01b      	b.n	8005e10 <UART_SetConfig+0x158>
 8005dd8:	231b      	movs	r3, #27
 8005dda:	2218      	movs	r2, #24
 8005ddc:	189b      	adds	r3, r3, r2
 8005dde:	19db      	adds	r3, r3, r7
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e07d      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005de6:	231b      	movs	r3, #27
 8005de8:	2218      	movs	r2, #24
 8005dea:	189b      	adds	r3, r3, r2
 8005dec:	19db      	adds	r3, r3, r7
 8005dee:	2202      	movs	r2, #2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e076      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005df4:	231b      	movs	r3, #27
 8005df6:	2218      	movs	r2, #24
 8005df8:	189b      	adds	r3, r3, r2
 8005dfa:	19db      	adds	r3, r3, r7
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	e06f      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005e02:	231b      	movs	r3, #27
 8005e04:	2218      	movs	r2, #24
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	19db      	adds	r3, r3, r7
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e068      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005e10:	231b      	movs	r3, #27
 8005e12:	2218      	movs	r2, #24
 8005e14:	189b      	adds	r3, r3, r2
 8005e16:	19db      	adds	r3, r3, r7
 8005e18:	2210      	movs	r2, #16
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e061      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7c      	ldr	r2, [pc, #496]	; (8006014 <UART_SetConfig+0x35c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d106      	bne.n	8005e36 <UART_SetConfig+0x17e>
 8005e28:	231b      	movs	r3, #27
 8005e2a:	2218      	movs	r2, #24
 8005e2c:	189b      	adds	r3, r3, r2
 8005e2e:	19db      	adds	r3, r3, r7
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	e055      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a77      	ldr	r2, [pc, #476]	; (8006018 <UART_SetConfig+0x360>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d106      	bne.n	8005e4e <UART_SetConfig+0x196>
 8005e40:	231b      	movs	r3, #27
 8005e42:	2218      	movs	r2, #24
 8005e44:	189b      	adds	r3, r3, r2
 8005e46:	19db      	adds	r3, r3, r7
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e049      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6b      	ldr	r2, [pc, #428]	; (8006000 <UART_SetConfig+0x348>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d13e      	bne.n	8005ed6 <UART_SetConfig+0x21e>
 8005e58:	4b6c      	ldr	r3, [pc, #432]	; (800600c <UART_SetConfig+0x354>)
 8005e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e5c:	23c0      	movs	r3, #192	; 0xc0
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	4013      	ands	r3, r2
 8005e62:	22c0      	movs	r2, #192	; 0xc0
 8005e64:	0112      	lsls	r2, r2, #4
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <UART_SetConfig+0x202>
 8005e6a:	22c0      	movs	r2, #192	; 0xc0
 8005e6c:	0112      	lsls	r2, r2, #4
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d82a      	bhi.n	8005ec8 <UART_SetConfig+0x210>
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	0112      	lsls	r2, r2, #4
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d011      	beq.n	8005e9e <UART_SetConfig+0x1e6>
 8005e7a:	2280      	movs	r2, #128	; 0x80
 8005e7c:	0112      	lsls	r2, r2, #4
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d822      	bhi.n	8005ec8 <UART_SetConfig+0x210>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <UART_SetConfig+0x1d8>
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	00d2      	lsls	r2, r2, #3
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <UART_SetConfig+0x1f4>
 8005e8e:	e01b      	b.n	8005ec8 <UART_SetConfig+0x210>
 8005e90:	231b      	movs	r3, #27
 8005e92:	2218      	movs	r2, #24
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	19db      	adds	r3, r3, r7
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e021      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005e9e:	231b      	movs	r3, #27
 8005ea0:	2218      	movs	r2, #24
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	19db      	adds	r3, r3, r7
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e01a      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005eac:	231b      	movs	r3, #27
 8005eae:	2218      	movs	r2, #24
 8005eb0:	189b      	adds	r3, r3, r2
 8005eb2:	19db      	adds	r3, r3, r7
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	e013      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005eba:	231b      	movs	r3, #27
 8005ebc:	2218      	movs	r2, #24
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	19db      	adds	r3, r3, r7
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e00c      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005ec8:	231b      	movs	r3, #27
 8005eca:	2218      	movs	r2, #24
 8005ecc:	189b      	adds	r3, r3, r2
 8005ece:	19db      	adds	r3, r3, r7
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	e005      	b.n	8005ee2 <UART_SetConfig+0x22a>
 8005ed6:	231b      	movs	r3, #27
 8005ed8:	2218      	movs	r2, #24
 8005eda:	189b      	adds	r3, r3, r2
 8005edc:	19db      	adds	r3, r3, r7
 8005ede:	2210      	movs	r2, #16
 8005ee0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a46      	ldr	r2, [pc, #280]	; (8006000 <UART_SetConfig+0x348>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d000      	beq.n	8005eee <UART_SetConfig+0x236>
 8005eec:	e09a      	b.n	8006024 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eee:	231b      	movs	r3, #27
 8005ef0:	2218      	movs	r2, #24
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	19db      	adds	r3, r3, r7
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d01d      	beq.n	8005f38 <UART_SetConfig+0x280>
 8005efc:	dc20      	bgt.n	8005f40 <UART_SetConfig+0x288>
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d015      	beq.n	8005f2e <UART_SetConfig+0x276>
 8005f02:	dc1d      	bgt.n	8005f40 <UART_SetConfig+0x288>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <UART_SetConfig+0x256>
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d005      	beq.n	8005f18 <UART_SetConfig+0x260>
 8005f0c:	e018      	b.n	8005f40 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7fe fcf3 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8005f12:	0003      	movs	r3, r0
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f16:	e01c      	b.n	8005f52 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f18:	4b3c      	ldr	r3, [pc, #240]	; (800600c <UART_SetConfig+0x354>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d002      	beq.n	8005f28 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005f22:	4b3e      	ldr	r3, [pc, #248]	; (800601c <UART_SetConfig+0x364>)
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f26:	e014      	b.n	8005f52 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <UART_SetConfig+0x368>)
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f2c:	e011      	b.n	8005f52 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe fc33 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8005f32:	0003      	movs	r3, r0
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f36:	e00c      	b.n	8005f52 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f3e:	e008      	b.n	8005f52 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f44:	231a      	movs	r3, #26
 8005f46:	2218      	movs	r2, #24
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	19db      	adds	r3, r3, r7
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
        break;
 8005f50:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d100      	bne.n	8005f5a <UART_SetConfig+0x2a2>
 8005f58:	e134      	b.n	80061c4 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	0013      	movs	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d305      	bcc.n	8005f76 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d906      	bls.n	8005f84 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005f76:	231a      	movs	r3, #26
 8005f78:	2218      	movs	r2, #24
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	19db      	adds	r3, r3, r7
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e11f      	b.n	80061c4 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	613b      	str	r3, [r7, #16]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	6939      	ldr	r1, [r7, #16]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	000b      	movs	r3, r1
 8005f92:	0e1b      	lsrs	r3, r3, #24
 8005f94:	0010      	movs	r0, r2
 8005f96:	0205      	lsls	r5, r0, #8
 8005f98:	431d      	orrs	r5, r3
 8005f9a:	000b      	movs	r3, r1
 8005f9c:	021c      	lsls	r4, r3, #8
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	68b8      	ldr	r0, [r7, #8]
 8005fac:	68f9      	ldr	r1, [r7, #12]
 8005fae:	1900      	adds	r0, r0, r4
 8005fb0:	4169      	adcs	r1, r5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f7fa f940 	bl	8000244 <__aeabi_uldivmod>
 8005fc4:	0002      	movs	r2, r0
 8005fc6:	000b      	movs	r3, r1
 8005fc8:	0013      	movs	r3, r2
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fce:	23c0      	movs	r3, #192	; 0xc0
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d309      	bcc.n	8005fea <UART_SetConfig+0x332>
 8005fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	035b      	lsls	r3, r3, #13
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d204      	bcs.n	8005fea <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe6:	60da      	str	r2, [r3, #12]
 8005fe8:	e0ec      	b.n	80061c4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fea:	231a      	movs	r3, #26
 8005fec:	2218      	movs	r2, #24
 8005fee:	189b      	adds	r3, r3, r2
 8005ff0:	19db      	adds	r3, r3, r7
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e0e5      	b.n	80061c4 <UART_SetConfig+0x50c>
 8005ff8:	efff69f3 	.word	0xefff69f3
 8005ffc:	ffffcfff 	.word	0xffffcfff
 8006000:	40004800 	.word	0x40004800
 8006004:	fffff4ff 	.word	0xfffff4ff
 8006008:	40013800 	.word	0x40013800
 800600c:	40021000 	.word	0x40021000
 8006010:	40004400 	.word	0x40004400
 8006014:	40004c00 	.word	0x40004c00
 8006018:	40005000 	.word	0x40005000
 800601c:	003d0900 	.word	0x003d0900
 8006020:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	021b      	lsls	r3, r3, #8
 800602c:	429a      	cmp	r2, r3
 800602e:	d000      	beq.n	8006032 <UART_SetConfig+0x37a>
 8006030:	e071      	b.n	8006116 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006032:	231b      	movs	r3, #27
 8006034:	2218      	movs	r2, #24
 8006036:	189b      	adds	r3, r3, r2
 8006038:	19db      	adds	r3, r3, r7
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d822      	bhi.n	8006086 <UART_SetConfig+0x3ce>
 8006040:	009a      	lsls	r2, r3, #2
 8006042:	4b68      	ldr	r3, [pc, #416]	; (80061e4 <UART_SetConfig+0x52c>)
 8006044:	18d3      	adds	r3, r2, r3
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604a:	f7fe fc55 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 800604e:	0003      	movs	r3, r0
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006052:	e021      	b.n	8006098 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fe fc66 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 8006058:	0003      	movs	r3, r0
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800605c:	e01c      	b.n	8006098 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800605e:	4b62      	ldr	r3, [pc, #392]	; (80061e8 <UART_SetConfig+0x530>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2210      	movs	r2, #16
 8006064:	4013      	ands	r3, r2
 8006066:	d002      	beq.n	800606e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006068:	4b60      	ldr	r3, [pc, #384]	; (80061ec <UART_SetConfig+0x534>)
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800606c:	e014      	b.n	8006098 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800606e:	4b60      	ldr	r3, [pc, #384]	; (80061f0 <UART_SetConfig+0x538>)
 8006070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006072:	e011      	b.n	8006098 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006074:	f7fe fb90 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8006078:	0003      	movs	r3, r0
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800607c:	e00c      	b.n	8006098 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006084:	e008      	b.n	8006098 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800608a:	231a      	movs	r3, #26
 800608c:	2218      	movs	r2, #24
 800608e:	189b      	adds	r3, r3, r2
 8006090:	19db      	adds	r3, r3, r7
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
        break;
 8006096:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d100      	bne.n	80060a0 <UART_SetConfig+0x3e8>
 800609e:	e091      	b.n	80061c4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	005a      	lsls	r2, r3, #1
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	18d2      	adds	r2, r2, r3
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	0019      	movs	r1, r3
 80060b2:	0010      	movs	r0, r2
 80060b4:	f7fa f83a 	bl	800012c <__udivsi3>
 80060b8:	0003      	movs	r3, r0
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	2b0f      	cmp	r3, #15
 80060c2:	d921      	bls.n	8006108 <UART_SetConfig+0x450>
 80060c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	025b      	lsls	r3, r3, #9
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d21c      	bcs.n	8006108 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	200e      	movs	r0, #14
 80060d4:	2418      	movs	r4, #24
 80060d6:	1903      	adds	r3, r0, r4
 80060d8:	19db      	adds	r3, r3, r7
 80060da:	210f      	movs	r1, #15
 80060dc:	438a      	bics	r2, r1
 80060de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2207      	movs	r2, #7
 80060e8:	4013      	ands	r3, r2
 80060ea:	b299      	uxth	r1, r3
 80060ec:	1903      	adds	r3, r0, r4
 80060ee:	19db      	adds	r3, r3, r7
 80060f0:	1902      	adds	r2, r0, r4
 80060f2:	19d2      	adds	r2, r2, r7
 80060f4:	8812      	ldrh	r2, [r2, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1902      	adds	r2, r0, r4
 8006100:	19d2      	adds	r2, r2, r7
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	e05d      	b.n	80061c4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006108:	231a      	movs	r3, #26
 800610a:	2218      	movs	r2, #24
 800610c:	189b      	adds	r3, r3, r2
 800610e:	19db      	adds	r3, r3, r7
 8006110:	2201      	movs	r2, #1
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	e056      	b.n	80061c4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006116:	231b      	movs	r3, #27
 8006118:	2218      	movs	r2, #24
 800611a:	189b      	adds	r3, r3, r2
 800611c:	19db      	adds	r3, r3, r7
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d822      	bhi.n	800616a <UART_SetConfig+0x4b2>
 8006124:	009a      	lsls	r2, r3, #2
 8006126:	4b33      	ldr	r3, [pc, #204]	; (80061f4 <UART_SetConfig+0x53c>)
 8006128:	18d3      	adds	r3, r2, r3
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800612e:	f7fe fbe3 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 8006132:	0003      	movs	r3, r0
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006136:	e021      	b.n	800617c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006138:	f7fe fbf4 	bl	8004924 <HAL_RCC_GetPCLK2Freq>
 800613c:	0003      	movs	r3, r0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006140:	e01c      	b.n	800617c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006142:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <UART_SetConfig+0x530>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2210      	movs	r2, #16
 8006148:	4013      	ands	r3, r2
 800614a:	d002      	beq.n	8006152 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <UART_SetConfig+0x534>)
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006150:	e014      	b.n	800617c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8006152:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <UART_SetConfig+0x538>)
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006156:	e011      	b.n	800617c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006158:	f7fe fb1e 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 800615c:	0003      	movs	r3, r0
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006160:	e00c      	b.n	800617c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006168:	e008      	b.n	800617c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800616e:	231a      	movs	r3, #26
 8006170:	2218      	movs	r2, #24
 8006172:	189b      	adds	r3, r3, r2
 8006174:	19db      	adds	r3, r3, r7
 8006176:	2201      	movs	r2, #1
 8006178:	701a      	strb	r2, [r3, #0]
        break;
 800617a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d020      	beq.n	80061c4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085a      	lsrs	r2, r3, #1
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	18d2      	adds	r2, r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	0019      	movs	r1, r3
 8006192:	0010      	movs	r0, r2
 8006194:	f7f9 ffca 	bl	800012c <__udivsi3>
 8006198:	0003      	movs	r3, r0
 800619a:	b29b      	uxth	r3, r3
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	2b0f      	cmp	r3, #15
 80061a2:	d909      	bls.n	80061b8 <UART_SetConfig+0x500>
 80061a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	025b      	lsls	r3, r3, #9
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d204      	bcs.n	80061b8 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	e005      	b.n	80061c4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80061b8:	231a      	movs	r3, #26
 80061ba:	2218      	movs	r2, #24
 80061bc:	189b      	adds	r3, r3, r2
 80061be:	19db      	adds	r3, r3, r7
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2200      	movs	r2, #0
 80061c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2200      	movs	r2, #0
 80061ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061d0:	231a      	movs	r3, #26
 80061d2:	2218      	movs	r2, #24
 80061d4:	189b      	adds	r3, r3, r2
 80061d6:	19db      	adds	r3, r3, r7
 80061d8:	781b      	ldrb	r3, [r3, #0]
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b00e      	add	sp, #56	; 0x38
 80061e0:	bdb0      	pop	{r4, r5, r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	08009f0c 	.word	0x08009f0c
 80061e8:	40021000 	.word	0x40021000
 80061ec:	003d0900 	.word	0x003d0900
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	08009f30 	.word	0x08009f30

080061f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2201      	movs	r2, #1
 8006206:	4013      	ands	r3, r2
 8006208:	d00b      	beq.n	8006222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a4a      	ldr	r2, [pc, #296]	; (800633c <UART_AdvFeatureConfig+0x144>)
 8006212:	4013      	ands	r3, r2
 8006214:	0019      	movs	r1, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2202      	movs	r2, #2
 8006228:	4013      	ands	r3, r2
 800622a:	d00b      	beq.n	8006244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4a43      	ldr	r2, [pc, #268]	; (8006340 <UART_AdvFeatureConfig+0x148>)
 8006234:	4013      	ands	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2204      	movs	r2, #4
 800624a:	4013      	ands	r3, r2
 800624c:	d00b      	beq.n	8006266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a3b      	ldr	r2, [pc, #236]	; (8006344 <UART_AdvFeatureConfig+0x14c>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	2208      	movs	r2, #8
 800626c:	4013      	ands	r3, r2
 800626e:	d00b      	beq.n	8006288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4a34      	ldr	r2, [pc, #208]	; (8006348 <UART_AdvFeatureConfig+0x150>)
 8006278:	4013      	ands	r3, r2
 800627a:	0019      	movs	r1, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2210      	movs	r2, #16
 800628e:	4013      	ands	r3, r2
 8006290:	d00b      	beq.n	80062aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4a2c      	ldr	r2, [pc, #176]	; (800634c <UART_AdvFeatureConfig+0x154>)
 800629a:	4013      	ands	r3, r2
 800629c:	0019      	movs	r1, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2220      	movs	r2, #32
 80062b0:	4013      	ands	r3, r2
 80062b2:	d00b      	beq.n	80062cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4a25      	ldr	r2, [pc, #148]	; (8006350 <UART_AdvFeatureConfig+0x158>)
 80062bc:	4013      	ands	r3, r2
 80062be:	0019      	movs	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	2240      	movs	r2, #64	; 0x40
 80062d2:	4013      	ands	r3, r2
 80062d4:	d01d      	beq.n	8006312 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <UART_AdvFeatureConfig+0x15c>)
 80062de:	4013      	ands	r3, r2
 80062e0:	0019      	movs	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	035b      	lsls	r3, r3, #13
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d10b      	bne.n	8006312 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <UART_AdvFeatureConfig+0x160>)
 8006302:	4013      	ands	r3, r2
 8006304:	0019      	movs	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	4013      	ands	r3, r2
 800631a:	d00b      	beq.n	8006334 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	4a0e      	ldr	r2, [pc, #56]	; (800635c <UART_AdvFeatureConfig+0x164>)
 8006324:	4013      	ands	r3, r2
 8006326:	0019      	movs	r1, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]
  }
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}
 800633c:	fffdffff 	.word	0xfffdffff
 8006340:	fffeffff 	.word	0xfffeffff
 8006344:	fffbffff 	.word	0xfffbffff
 8006348:	ffff7fff 	.word	0xffff7fff
 800634c:	ffffefff 	.word	0xffffefff
 8006350:	ffffdfff 	.word	0xffffdfff
 8006354:	ffefffff 	.word	0xffefffff
 8006358:	ff9fffff 	.word	0xff9fffff
 800635c:	fff7ffff 	.word	0xfff7ffff

08006360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2280      	movs	r2, #128	; 0x80
 800636c:	2100      	movs	r1, #0
 800636e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006370:	f7fc fcce 	bl	8002d10 <HAL_GetTick>
 8006374:	0003      	movs	r3, r0
 8006376:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2208      	movs	r2, #8
 8006380:	4013      	ands	r3, r2
 8006382:	2b08      	cmp	r3, #8
 8006384:	d10c      	bne.n	80063a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	0391      	lsls	r1, r2, #14
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <UART_CheckIdleState+0x8c>)
 8006390:	9200      	str	r2, [sp, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	f000 f82c 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8006398:	1e03      	subs	r3, r0, #0
 800639a:	d001      	beq.n	80063a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e021      	b.n	80063e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2204      	movs	r2, #4
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d10c      	bne.n	80063c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2280      	movs	r2, #128	; 0x80
 80063b2:	03d1      	lsls	r1, r2, #15
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <UART_CheckIdleState+0x8c>)
 80063b8:	9200      	str	r2, [sp, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f000 f818 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 80063c0:	1e03      	subs	r3, r0, #0
 80063c2:	d001      	beq.n	80063c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e00d      	b.n	80063e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2274      	movs	r2, #116	; 0x74
 80063de:	2100      	movs	r1, #0
 80063e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	0018      	movs	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b004      	add	sp, #16
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	01ffffff 	.word	0x01ffffff

080063f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b094      	sub	sp, #80	; 0x50
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	1dfb      	adds	r3, r7, #7
 80063fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006400:	e0a3      	b.n	800654a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006404:	3301      	adds	r3, #1
 8006406:	d100      	bne.n	800640a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006408:	e09f      	b.n	800654a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640a:	f7fc fc81 	bl	8002d10 <HAL_GetTick>
 800640e:	0002      	movs	r2, r0
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006416:	429a      	cmp	r2, r3
 8006418:	d302      	bcc.n	8006420 <UART_WaitOnFlagUntilTimeout+0x30>
 800641a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800641c:	2b00      	cmp	r3, #0
 800641e:	d13d      	bne.n	800649c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006420:	f3ef 8310 	mrs	r3, PRIMASK
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006428:	647b      	str	r3, [r7, #68]	; 0x44
 800642a:	2301      	movs	r3, #1
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	f383 8810 	msr	PRIMASK, r3
}
 8006434:	46c0      	nop			; (mov r8, r8)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	494c      	ldr	r1, [pc, #304]	; (8006574 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006442:	400a      	ands	r2, r1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006448:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006452:	f3ef 8310 	mrs	r3, PRIMASK
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	643b      	str	r3, [r7, #64]	; 0x40
 800645c:	2301      	movs	r3, #1
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	f383 8810 	msr	PRIMASK, r3
}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2101      	movs	r1, #1
 8006474:	438a      	bics	r2, r1
 8006476:	609a      	str	r2, [r3, #8]
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	f383 8810 	msr	PRIMASK, r3
}
 8006482:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2274      	movs	r2, #116	; 0x74
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e067      	b.n	800656c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2204      	movs	r2, #4
 80064a4:	4013      	ands	r3, r2
 80064a6:	d050      	beq.n	800654a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	401a      	ands	r2, r3
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d146      	bne.n	800654a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2280      	movs	r2, #128	; 0x80
 80064c2:	0112      	lsls	r2, r2, #4
 80064c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064c6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ca:	613b      	str	r3, [r7, #16]
  return(result);
 80064cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f383 8810 	msr	PRIMASK, r3
}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4923      	ldr	r1, [pc, #140]	; (8006574 <UART_WaitOnFlagUntilTimeout+0x184>)
 80064e8:	400a      	ands	r2, r1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f383 8810 	msr	PRIMASK, r3
}
 80064f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f8:	f3ef 8310 	mrs	r3, PRIMASK
 80064fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80064fe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006500:	64bb      	str	r3, [r7, #72]	; 0x48
 8006502:	2301      	movs	r3, #1
 8006504:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f383 8810 	msr	PRIMASK, r3
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2101      	movs	r1, #1
 800651a:	438a      	bics	r2, r1
 800651c:	609a      	str	r2, [r3, #8]
 800651e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	f383 8810 	msr	PRIMASK, r3
}
 8006528:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2280      	movs	r2, #128	; 0x80
 800653a:	2120      	movs	r1, #32
 800653c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2274      	movs	r2, #116	; 0x74
 8006542:	2100      	movs	r1, #0
 8006544:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e010      	b.n	800656c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4013      	ands	r3, r2
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	425a      	negs	r2, r3
 800655a:	4153      	adcs	r3, r2
 800655c:	b2db      	uxtb	r3, r3
 800655e:	001a      	movs	r2, r3
 8006560:	1dfb      	adds	r3, r7, #7
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d100      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006568:	e74b      	b.n	8006402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b014      	add	sp, #80	; 0x50
 8006572:	bd80      	pop	{r7, pc}
 8006574:	fffffe5f 	.word	0xfffffe5f

08006578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08c      	sub	sp, #48	; 0x30
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	1dbb      	adds	r3, r7, #6
 8006584:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	1dba      	adds	r2, r7, #6
 8006590:	2158      	movs	r1, #88	; 0x58
 8006592:	8812      	ldrh	r2, [r2, #0]
 8006594:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1dba      	adds	r2, r7, #6
 800659a:	215a      	movs	r1, #90	; 0x5a
 800659c:	8812      	ldrh	r2, [r2, #0]
 800659e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	015b      	lsls	r3, r3, #5
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d10d      	bne.n	80065ce <UART_Start_Receive_IT+0x56>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <UART_Start_Receive_IT+0x4c>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	225c      	movs	r2, #92	; 0x5c
 80065be:	4943      	ldr	r1, [pc, #268]	; (80066cc <UART_Start_Receive_IT+0x154>)
 80065c0:	5299      	strh	r1, [r3, r2]
 80065c2:	e02e      	b.n	8006622 <UART_Start_Receive_IT+0xaa>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	225c      	movs	r2, #92	; 0x5c
 80065c8:	21ff      	movs	r1, #255	; 0xff
 80065ca:	5299      	strh	r1, [r3, r2]
 80065cc:	e029      	b.n	8006622 <UART_Start_Receive_IT+0xaa>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10d      	bne.n	80065f2 <UART_Start_Receive_IT+0x7a>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <UART_Start_Receive_IT+0x70>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	225c      	movs	r2, #92	; 0x5c
 80065e2:	21ff      	movs	r1, #255	; 0xff
 80065e4:	5299      	strh	r1, [r3, r2]
 80065e6:	e01c      	b.n	8006622 <UART_Start_Receive_IT+0xaa>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	225c      	movs	r2, #92	; 0x5c
 80065ec:	217f      	movs	r1, #127	; 0x7f
 80065ee:	5299      	strh	r1, [r3, r2]
 80065f0:	e017      	b.n	8006622 <UART_Start_Receive_IT+0xaa>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	055b      	lsls	r3, r3, #21
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d10d      	bne.n	800661a <UART_Start_Receive_IT+0xa2>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <UART_Start_Receive_IT+0x98>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	225c      	movs	r2, #92	; 0x5c
 800660a:	217f      	movs	r1, #127	; 0x7f
 800660c:	5299      	strh	r1, [r3, r2]
 800660e:	e008      	b.n	8006622 <UART_Start_Receive_IT+0xaa>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	225c      	movs	r2, #92	; 0x5c
 8006614:	213f      	movs	r1, #63	; 0x3f
 8006616:	5299      	strh	r1, [r3, r2]
 8006618:	e003      	b.n	8006622 <UART_Start_Receive_IT+0xaa>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	225c      	movs	r2, #92	; 0x5c
 800661e:	2100      	movs	r1, #0
 8006620:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	2100      	movs	r1, #0
 8006628:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2222      	movs	r2, #34	; 0x22
 800662e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006630:	f3ef 8310 	mrs	r3, PRIMASK
 8006634:	61fb      	str	r3, [r7, #28]
  return(result);
 8006636:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800663a:	2301      	movs	r3, #1
 800663c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	46c0      	nop			; (mov r8, r8)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2101      	movs	r1, #1
 8006652:	430a      	orrs	r2, r1
 8006654:	609a      	str	r2, [r3, #8]
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	015b      	lsls	r3, r3, #5
 800666a:	429a      	cmp	r2, r3
 800666c:	d107      	bne.n	800667e <UART_Start_Receive_IT+0x106>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <UART_Start_Receive_IT+0x158>)
 800667a:	665a      	str	r2, [r3, #100]	; 0x64
 800667c:	e002      	b.n	8006684 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a14      	ldr	r2, [pc, #80]	; (80066d4 <UART_Start_Receive_IT+0x15c>)
 8006682:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2274      	movs	r2, #116	; 0x74
 8006688:	2100      	movs	r1, #0
 800668a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668c:	f3ef 8310 	mrs	r3, PRIMASK
 8006690:	613b      	str	r3, [r7, #16]
  return(result);
 8006692:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
 8006696:	2301      	movs	r3, #1
 8006698:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f383 8810 	msr	PRIMASK, r3
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2190      	movs	r1, #144	; 0x90
 80066ae:	0049      	lsls	r1, r1, #1
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f383 8810 	msr	PRIMASK, r3
}
 80066be:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	0018      	movs	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b00c      	add	sp, #48	; 0x30
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	000001ff 	.word	0x000001ff
 80066d0:	08006989 	.word	0x08006989
 80066d4:	08006821 	.word	0x08006821

080066d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	; 0x38
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	617b      	str	r3, [r7, #20]
  return(result);
 80066e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ea:	2301      	movs	r3, #1
 80066ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	f383 8810 	msr	PRIMASK, r3
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4925      	ldr	r1, [pc, #148]	; (8006798 <UART_EndRxTransfer+0xc0>)
 8006702:	400a      	ands	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	623b      	str	r3, [r7, #32]
  return(result);
 8006718:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	633b      	str	r3, [r7, #48]	; 0x30
 800671c:	2301      	movs	r3, #1
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	f383 8810 	msr	PRIMASK, r3
}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2101      	movs	r1, #1
 8006734:	438a      	bics	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	f383 8810 	msr	PRIMASK, r3
}
 8006742:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006748:	2b01      	cmp	r3, #1
 800674a:	d118      	bne.n	800677e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	60bb      	str	r3, [r7, #8]
  return(result);
 8006752:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006756:	2301      	movs	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2110      	movs	r1, #16
 800676e:	438a      	bics	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006790:	46c0      	nop			; (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b00e      	add	sp, #56	; 0x38
 8006796:	bd80      	pop	{r7, pc}
 8006798:	fffffedf 	.word	0xfffffedf

0800679c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	225a      	movs	r2, #90	; 0x5a
 80067ae:	2100      	movs	r1, #0
 80067b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2252      	movs	r2, #82	; 0x52
 80067b6:	2100      	movs	r1, #0
 80067b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	0018      	movs	r0, r3
 80067be:	f7ff fa67 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	46bd      	mov	sp, r7
 80067c6:	b004      	add	sp, #16
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80067d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	2301      	movs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f383 8810 	msr	PRIMASK, r3
}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2140      	movs	r1, #64	; 0x40
 80067f4:	438a      	bics	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	0018      	movs	r0, r3
 8006814:	f7ff fa34 	bl	8005c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b006      	add	sp, #24
 800681e:	bd80      	pop	{r7, pc}

08006820 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b090      	sub	sp, #64	; 0x40
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006828:	203e      	movs	r0, #62	; 0x3e
 800682a:	183b      	adds	r3, r7, r0
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	215c      	movs	r1, #92	; 0x5c
 8006830:	5a52      	ldrh	r2, [r2, r1]
 8006832:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006838:	2b22      	cmp	r3, #34	; 0x22
 800683a:	d000      	beq.n	800683e <UART_RxISR_8BIT+0x1e>
 800683c:	e095      	b.n	800696a <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006844:	213c      	movs	r1, #60	; 0x3c
 8006846:	187b      	adds	r3, r7, r1
 8006848:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800684a:	187b      	adds	r3, r7, r1
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b2da      	uxtb	r2, r3
 8006850:	183b      	adds	r3, r7, r0
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	b2d9      	uxtb	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	400a      	ands	r2, r1
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	225a      	movs	r2, #90	; 0x5a
 800686e:	5a9b      	ldrh	r3, [r3, r2]
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b299      	uxth	r1, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	225a      	movs	r2, #90	; 0x5a
 800687a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	225a      	movs	r2, #90	; 0x5a
 8006880:	5a9b      	ldrh	r3, [r3, r2]
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d178      	bne.n	800697a <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006888:	f3ef 8310 	mrs	r3, PRIMASK
 800688c:	61bb      	str	r3, [r7, #24]
  return(result);
 800688e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
 8006892:	2301      	movs	r3, #1
 8006894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	f383 8810 	msr	PRIMASK, r3
}
 800689c:	46c0      	nop			; (mov r8, r8)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4936      	ldr	r1, [pc, #216]	; (8006984 <UART_RxISR_8BIT+0x164>)
 80068aa:	400a      	ands	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f383 8810 	msr	PRIMASK, r3
}
 80068b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ba:	f3ef 8310 	mrs	r3, PRIMASK
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
 80068c4:	2301      	movs	r3, #1
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	f383 8810 	msr	PRIMASK, r3
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2101      	movs	r1, #1
 80068dc:	438a      	bics	r2, r1
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e6:	f383 8810 	msr	PRIMASK, r3
}
 80068ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d12f      	bne.n	8006960 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006906:	f3ef 8310 	mrs	r3, PRIMASK
 800690a:	60fb      	str	r3, [r7, #12]
  return(result);
 800690c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690e:	633b      	str	r3, [r7, #48]	; 0x30
 8006910:	2301      	movs	r3, #1
 8006912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2110      	movs	r1, #16
 8006928:	438a      	bics	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2210      	movs	r2, #16
 8006940:	4013      	ands	r3, r2
 8006942:	2b10      	cmp	r3, #16
 8006944:	d103      	bne.n	800694e <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2210      	movs	r2, #16
 800694c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2258      	movs	r2, #88	; 0x58
 8006952:	5a9a      	ldrh	r2, [r3, r2]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	0011      	movs	r1, r2
 8006958:	0018      	movs	r0, r3
 800695a:	f7ff f9a1 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800695e:	e00c      	b.n	800697a <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	0018      	movs	r0, r3
 8006964:	f7f9 ff98 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 8006968:	e007      	b.n	800697a <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2108      	movs	r1, #8
 8006976:	430a      	orrs	r2, r1
 8006978:	619a      	str	r2, [r3, #24]
}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	46bd      	mov	sp, r7
 800697e:	b010      	add	sp, #64	; 0x40
 8006980:	bd80      	pop	{r7, pc}
 8006982:	46c0      	nop			; (mov r8, r8)
 8006984:	fffffedf 	.word	0xfffffedf

08006988 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b090      	sub	sp, #64	; 0x40
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006990:	203e      	movs	r0, #62	; 0x3e
 8006992:	183b      	adds	r3, r7, r0
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	215c      	movs	r1, #92	; 0x5c
 8006998:	5a52      	ldrh	r2, [r2, r1]
 800699a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069a0:	2b22      	cmp	r3, #34	; 0x22
 80069a2:	d000      	beq.n	80069a6 <UART_RxISR_16BIT+0x1e>
 80069a4:	e095      	b.n	8006ad2 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ac:	213c      	movs	r1, #60	; 0x3c
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	183a      	adds	r2, r7, r0
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	8812      	ldrh	r2, [r2, #0]
 80069c0:	4013      	ands	r3, r2
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069cc:	1c9a      	adds	r2, r3, #2
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	225a      	movs	r2, #90	; 0x5a
 80069d6:	5a9b      	ldrh	r3, [r3, r2]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b299      	uxth	r1, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	225a      	movs	r2, #90	; 0x5a
 80069e2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	225a      	movs	r2, #90	; 0x5a
 80069e8:	5a9b      	ldrh	r3, [r3, r2]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d178      	bne.n	8006ae2 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f0:	f3ef 8310 	mrs	r3, PRIMASK
 80069f4:	617b      	str	r3, [r7, #20]
  return(result);
 80069f6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
 80069fa:	2301      	movs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	f383 8810 	msr	PRIMASK, r3
}
 8006a04:	46c0      	nop			; (mov r8, r8)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4936      	ldr	r1, [pc, #216]	; (8006aec <UART_RxISR_16BIT+0x164>)
 8006a12:	400a      	ands	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f383 8810 	msr	PRIMASK, r3
}
 8006a20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a22:	f3ef 8310 	mrs	r3, PRIMASK
 8006a26:	623b      	str	r3, [r7, #32]
  return(result);
 8006a28:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	f383 8810 	msr	PRIMASK, r3
}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2101      	movs	r1, #1
 8006a44:	438a      	bics	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	f383 8810 	msr	PRIMASK, r3
}
 8006a52:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d12f      	bne.n	8006ac8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a74:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f383 8810 	msr	PRIMASK, r3
}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2110      	movs	r1, #16
 8006a90:	438a      	bics	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d103      	bne.n	8006ab6 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2258      	movs	r2, #88	; 0x58
 8006aba:	5a9a      	ldrh	r2, [r3, r2]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	0011      	movs	r1, r2
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7ff f8ed 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac6:	e00c      	b.n	8006ae2 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7f9 fee4 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 8006ad0:	e007      	b.n	8006ae2 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2108      	movs	r1, #8
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b010      	add	sp, #64	; 0x40
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	fffffedf 	.word	0xfffffedf

08006af0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b002      	add	sp, #8
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <__errno>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <__errno+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	20000130 	.word	0x20000130

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	2600      	movs	r6, #0
 8006b10:	4d0c      	ldr	r5, [pc, #48]	; (8006b44 <__libc_init_array+0x38>)
 8006b12:	4c0d      	ldr	r4, [pc, #52]	; (8006b48 <__libc_init_array+0x3c>)
 8006b14:	1b64      	subs	r4, r4, r5
 8006b16:	10a4      	asrs	r4, r4, #2
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	2600      	movs	r6, #0
 8006b1e:	f000 fc8b 	bl	8007438 <_init>
 8006b22:	4d0a      	ldr	r5, [pc, #40]	; (8006b4c <__libc_init_array+0x40>)
 8006b24:	4c0a      	ldr	r4, [pc, #40]	; (8006b50 <__libc_init_array+0x44>)
 8006b26:	1b64      	subs	r4, r4, r5
 8006b28:	10a4      	asrs	r4, r4, #2
 8006b2a:	42a6      	cmp	r6, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	00b3      	lsls	r3, r6, #2
 8006b32:	58eb      	ldr	r3, [r5, r3]
 8006b34:	4798      	blx	r3
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	00b3      	lsls	r3, r6, #2
 8006b3c:	58eb      	ldr	r3, [r5, r3]
 8006b3e:	4798      	blx	r3
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	08009f90 	.word	0x08009f90
 8006b48:	08009f90 	.word	0x08009f90
 8006b4c:	08009f90 	.word	0x08009f90
 8006b50:	08009f94 	.word	0x08009f94

08006b54 <memcpy>:
 8006b54:	2300      	movs	r3, #0
 8006b56:	b510      	push	{r4, lr}
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d100      	bne.n	8006b5e <memcpy+0xa>
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	5ccc      	ldrb	r4, [r1, r3]
 8006b60:	54c4      	strb	r4, [r0, r3]
 8006b62:	3301      	adds	r3, #1
 8006b64:	e7f8      	b.n	8006b58 <memcpy+0x4>

08006b66 <memset>:
 8006b66:	0003      	movs	r3, r0
 8006b68:	1882      	adds	r2, r0, r2
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d100      	bne.n	8006b70 <memset+0xa>
 8006b6e:	4770      	bx	lr
 8006b70:	7019      	strb	r1, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	e7f9      	b.n	8006b6a <memset+0x4>
	...

08006b78 <siprintf>:
 8006b78:	b40e      	push	{r1, r2, r3}
 8006b7a:	b500      	push	{lr}
 8006b7c:	490b      	ldr	r1, [pc, #44]	; (8006bac <siprintf+0x34>)
 8006b7e:	b09c      	sub	sp, #112	; 0x70
 8006b80:	ab1d      	add	r3, sp, #116	; 0x74
 8006b82:	9002      	str	r0, [sp, #8]
 8006b84:	9006      	str	r0, [sp, #24]
 8006b86:	9107      	str	r1, [sp, #28]
 8006b88:	9104      	str	r1, [sp, #16]
 8006b8a:	4809      	ldr	r0, [pc, #36]	; (8006bb0 <siprintf+0x38>)
 8006b8c:	4909      	ldr	r1, [pc, #36]	; (8006bb4 <siprintf+0x3c>)
 8006b8e:	cb04      	ldmia	r3!, {r2}
 8006b90:	9105      	str	r1, [sp, #20]
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	a902      	add	r1, sp, #8
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	f000 f870 	bl	8006c7c <_svfiprintf_r>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9a02      	ldr	r2, [sp, #8]
 8006ba0:	7013      	strb	r3, [r2, #0]
 8006ba2:	b01c      	add	sp, #112	; 0x70
 8006ba4:	bc08      	pop	{r3}
 8006ba6:	b003      	add	sp, #12
 8006ba8:	4718      	bx	r3
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	7fffffff 	.word	0x7fffffff
 8006bb0:	20000130 	.word	0x20000130
 8006bb4:	ffff0208 	.word	0xffff0208

08006bb8 <__ssputs_r>:
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	688e      	ldr	r6, [r1, #8]
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	0007      	movs	r7, r0
 8006bc0:	000c      	movs	r4, r1
 8006bc2:	9203      	str	r2, [sp, #12]
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	429e      	cmp	r6, r3
 8006bc8:	d83c      	bhi.n	8006c44 <__ssputs_r+0x8c>
 8006bca:	2390      	movs	r3, #144	; 0x90
 8006bcc:	898a      	ldrh	r2, [r1, #12]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	421a      	tst	r2, r3
 8006bd2:	d034      	beq.n	8006c3e <__ssputs_r+0x86>
 8006bd4:	6909      	ldr	r1, [r1, #16]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	6960      	ldr	r0, [r4, #20]
 8006bda:	1a5b      	subs	r3, r3, r1
 8006bdc:	9302      	str	r3, [sp, #8]
 8006bde:	2303      	movs	r3, #3
 8006be0:	4343      	muls	r3, r0
 8006be2:	0fdd      	lsrs	r5, r3, #31
 8006be4:	18ed      	adds	r5, r5, r3
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	9802      	ldr	r0, [sp, #8]
 8006bea:	3301      	adds	r3, #1
 8006bec:	181b      	adds	r3, r3, r0
 8006bee:	106d      	asrs	r5, r5, #1
 8006bf0:	42ab      	cmp	r3, r5
 8006bf2:	d900      	bls.n	8006bf6 <__ssputs_r+0x3e>
 8006bf4:	001d      	movs	r5, r3
 8006bf6:	0553      	lsls	r3, r2, #21
 8006bf8:	d532      	bpl.n	8006c60 <__ssputs_r+0xa8>
 8006bfa:	0029      	movs	r1, r5
 8006bfc:	0038      	movs	r0, r7
 8006bfe:	f000 fb49 	bl	8007294 <_malloc_r>
 8006c02:	1e06      	subs	r6, r0, #0
 8006c04:	d109      	bne.n	8006c1a <__ssputs_r+0x62>
 8006c06:	230c      	movs	r3, #12
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	89a2      	ldrh	r2, [r4, #12]
 8006c10:	4240      	negs	r0, r0
 8006c12:	4313      	orrs	r3, r2
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	b005      	add	sp, #20
 8006c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1a:	9a02      	ldr	r2, [sp, #8]
 8006c1c:	6921      	ldr	r1, [r4, #16]
 8006c1e:	f7ff ff99 	bl	8006b54 <memcpy>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <__ssputs_r+0xc0>)
 8006c26:	401a      	ands	r2, r3
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	9b02      	ldr	r3, [sp, #8]
 8006c30:	6126      	str	r6, [r4, #16]
 8006c32:	18f6      	adds	r6, r6, r3
 8006c34:	6026      	str	r6, [r4, #0]
 8006c36:	6165      	str	r5, [r4, #20]
 8006c38:	9e01      	ldr	r6, [sp, #4]
 8006c3a:	1aed      	subs	r5, r5, r3
 8006c3c:	60a5      	str	r5, [r4, #8]
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	429e      	cmp	r6, r3
 8006c42:	d900      	bls.n	8006c46 <__ssputs_r+0x8e>
 8006c44:	9e01      	ldr	r6, [sp, #4]
 8006c46:	0032      	movs	r2, r6
 8006c48:	9903      	ldr	r1, [sp, #12]
 8006c4a:	6820      	ldr	r0, [r4, #0]
 8006c4c:	f000 faa3 	bl	8007196 <memmove>
 8006c50:	68a3      	ldr	r3, [r4, #8]
 8006c52:	2000      	movs	r0, #0
 8006c54:	1b9b      	subs	r3, r3, r6
 8006c56:	60a3      	str	r3, [r4, #8]
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	199e      	adds	r6, r3, r6
 8006c5c:	6026      	str	r6, [r4, #0]
 8006c5e:	e7da      	b.n	8006c16 <__ssputs_r+0x5e>
 8006c60:	002a      	movs	r2, r5
 8006c62:	0038      	movs	r0, r7
 8006c64:	f000 fb8c 	bl	8007380 <_realloc_r>
 8006c68:	1e06      	subs	r6, r0, #0
 8006c6a:	d1e0      	bne.n	8006c2e <__ssputs_r+0x76>
 8006c6c:	0038      	movs	r0, r7
 8006c6e:	6921      	ldr	r1, [r4, #16]
 8006c70:	f000 faa4 	bl	80071bc <_free_r>
 8006c74:	e7c7      	b.n	8006c06 <__ssputs_r+0x4e>
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	fffffb7f 	.word	0xfffffb7f

08006c7c <_svfiprintf_r>:
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	b0a1      	sub	sp, #132	; 0x84
 8006c80:	9003      	str	r0, [sp, #12]
 8006c82:	001d      	movs	r5, r3
 8006c84:	898b      	ldrh	r3, [r1, #12]
 8006c86:	000f      	movs	r7, r1
 8006c88:	0016      	movs	r6, r2
 8006c8a:	061b      	lsls	r3, r3, #24
 8006c8c:	d511      	bpl.n	8006cb2 <_svfiprintf_r+0x36>
 8006c8e:	690b      	ldr	r3, [r1, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10e      	bne.n	8006cb2 <_svfiprintf_r+0x36>
 8006c94:	2140      	movs	r1, #64	; 0x40
 8006c96:	f000 fafd 	bl	8007294 <_malloc_r>
 8006c9a:	6038      	str	r0, [r7, #0]
 8006c9c:	6138      	str	r0, [r7, #16]
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d105      	bne.n	8006cae <_svfiprintf_r+0x32>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	9a03      	ldr	r2, [sp, #12]
 8006ca6:	3801      	subs	r0, #1
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	b021      	add	sp, #132	; 0x84
 8006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	ac08      	add	r4, sp, #32
 8006cb6:	6163      	str	r3, [r4, #20]
 8006cb8:	3320      	adds	r3, #32
 8006cba:	7663      	strb	r3, [r4, #25]
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	76a3      	strb	r3, [r4, #26]
 8006cc0:	9507      	str	r5, [sp, #28]
 8006cc2:	0035      	movs	r5, r6
 8006cc4:	782b      	ldrb	r3, [r5, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <_svfiprintf_r+0x52>
 8006cca:	2b25      	cmp	r3, #37	; 0x25
 8006ccc:	d147      	bne.n	8006d5e <_svfiprintf_r+0xe2>
 8006cce:	1bab      	subs	r3, r5, r6
 8006cd0:	9305      	str	r3, [sp, #20]
 8006cd2:	42b5      	cmp	r5, r6
 8006cd4:	d00c      	beq.n	8006cf0 <_svfiprintf_r+0x74>
 8006cd6:	0032      	movs	r2, r6
 8006cd8:	0039      	movs	r1, r7
 8006cda:	9803      	ldr	r0, [sp, #12]
 8006cdc:	f7ff ff6c 	bl	8006bb8 <__ssputs_r>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d100      	bne.n	8006ce6 <_svfiprintf_r+0x6a>
 8006ce4:	e0ae      	b.n	8006e44 <_svfiprintf_r+0x1c8>
 8006ce6:	6962      	ldr	r2, [r4, #20]
 8006ce8:	9b05      	ldr	r3, [sp, #20]
 8006cea:	4694      	mov	ip, r2
 8006cec:	4463      	add	r3, ip
 8006cee:	6163      	str	r3, [r4, #20]
 8006cf0:	782b      	ldrb	r3, [r5, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d100      	bne.n	8006cf8 <_svfiprintf_r+0x7c>
 8006cf6:	e0a5      	b.n	8006e44 <_svfiprintf_r+0x1c8>
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4252      	negs	r2, r2
 8006cfe:	6062      	str	r2, [r4, #4]
 8006d00:	a904      	add	r1, sp, #16
 8006d02:	3254      	adds	r2, #84	; 0x54
 8006d04:	1852      	adds	r2, r2, r1
 8006d06:	1c6e      	adds	r6, r5, #1
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	60e3      	str	r3, [r4, #12]
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	7013      	strb	r3, [r2, #0]
 8006d10:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d12:	2205      	movs	r2, #5
 8006d14:	7831      	ldrb	r1, [r6, #0]
 8006d16:	4854      	ldr	r0, [pc, #336]	; (8006e68 <_svfiprintf_r+0x1ec>)
 8006d18:	f000 fa32 	bl	8007180 <memchr>
 8006d1c:	1c75      	adds	r5, r6, #1
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d11f      	bne.n	8006d62 <_svfiprintf_r+0xe6>
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	06d3      	lsls	r3, r2, #27
 8006d26:	d504      	bpl.n	8006d32 <_svfiprintf_r+0xb6>
 8006d28:	2353      	movs	r3, #83	; 0x53
 8006d2a:	a904      	add	r1, sp, #16
 8006d2c:	185b      	adds	r3, r3, r1
 8006d2e:	2120      	movs	r1, #32
 8006d30:	7019      	strb	r1, [r3, #0]
 8006d32:	0713      	lsls	r3, r2, #28
 8006d34:	d504      	bpl.n	8006d40 <_svfiprintf_r+0xc4>
 8006d36:	2353      	movs	r3, #83	; 0x53
 8006d38:	a904      	add	r1, sp, #16
 8006d3a:	185b      	adds	r3, r3, r1
 8006d3c:	212b      	movs	r1, #43	; 0x2b
 8006d3e:	7019      	strb	r1, [r3, #0]
 8006d40:	7833      	ldrb	r3, [r6, #0]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d016      	beq.n	8006d74 <_svfiprintf_r+0xf8>
 8006d46:	0035      	movs	r5, r6
 8006d48:	2100      	movs	r1, #0
 8006d4a:	200a      	movs	r0, #10
 8006d4c:	68e3      	ldr	r3, [r4, #12]
 8006d4e:	782a      	ldrb	r2, [r5, #0]
 8006d50:	1c6e      	adds	r6, r5, #1
 8006d52:	3a30      	subs	r2, #48	; 0x30
 8006d54:	2a09      	cmp	r2, #9
 8006d56:	d94e      	bls.n	8006df6 <_svfiprintf_r+0x17a>
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d111      	bne.n	8006d80 <_svfiprintf_r+0x104>
 8006d5c:	e017      	b.n	8006d8e <_svfiprintf_r+0x112>
 8006d5e:	3501      	adds	r5, #1
 8006d60:	e7b0      	b.n	8006cc4 <_svfiprintf_r+0x48>
 8006d62:	4b41      	ldr	r3, [pc, #260]	; (8006e68 <_svfiprintf_r+0x1ec>)
 8006d64:	6822      	ldr	r2, [r4, #0]
 8006d66:	1ac0      	subs	r0, r0, r3
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4083      	lsls	r3, r0
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	002e      	movs	r6, r5
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	e7ce      	b.n	8006d12 <_svfiprintf_r+0x96>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	9107      	str	r1, [sp, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	db01      	blt.n	8006d84 <_svfiprintf_r+0x108>
 8006d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d82:	e004      	b.n	8006d8e <_svfiprintf_r+0x112>
 8006d84:	425b      	negs	r3, r3
 8006d86:	60e3      	str	r3, [r4, #12]
 8006d88:	2302      	movs	r3, #2
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	782b      	ldrb	r3, [r5, #0]
 8006d90:	2b2e      	cmp	r3, #46	; 0x2e
 8006d92:	d10a      	bne.n	8006daa <_svfiprintf_r+0x12e>
 8006d94:	786b      	ldrb	r3, [r5, #1]
 8006d96:	2b2a      	cmp	r3, #42	; 0x2a
 8006d98:	d135      	bne.n	8006e06 <_svfiprintf_r+0x18a>
 8006d9a:	9b07      	ldr	r3, [sp, #28]
 8006d9c:	3502      	adds	r5, #2
 8006d9e:	1d1a      	adds	r2, r3, #4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	9207      	str	r2, [sp, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	db2b      	blt.n	8006e00 <_svfiprintf_r+0x184>
 8006da8:	9309      	str	r3, [sp, #36]	; 0x24
 8006daa:	4e30      	ldr	r6, [pc, #192]	; (8006e6c <_svfiprintf_r+0x1f0>)
 8006dac:	2203      	movs	r2, #3
 8006dae:	0030      	movs	r0, r6
 8006db0:	7829      	ldrb	r1, [r5, #0]
 8006db2:	f000 f9e5 	bl	8007180 <memchr>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d006      	beq.n	8006dc8 <_svfiprintf_r+0x14c>
 8006dba:	2340      	movs	r3, #64	; 0x40
 8006dbc:	1b80      	subs	r0, r0, r6
 8006dbe:	4083      	lsls	r3, r0
 8006dc0:	6822      	ldr	r2, [r4, #0]
 8006dc2:	3501      	adds	r5, #1
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	7829      	ldrb	r1, [r5, #0]
 8006dca:	2206      	movs	r2, #6
 8006dcc:	4828      	ldr	r0, [pc, #160]	; (8006e70 <_svfiprintf_r+0x1f4>)
 8006dce:	1c6e      	adds	r6, r5, #1
 8006dd0:	7621      	strb	r1, [r4, #24]
 8006dd2:	f000 f9d5 	bl	8007180 <memchr>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d03c      	beq.n	8006e54 <_svfiprintf_r+0x1d8>
 8006dda:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <_svfiprintf_r+0x1f8>)
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d125      	bne.n	8006e2c <_svfiprintf_r+0x1b0>
 8006de0:	2207      	movs	r2, #7
 8006de2:	9b07      	ldr	r3, [sp, #28]
 8006de4:	3307      	adds	r3, #7
 8006de6:	4393      	bics	r3, r2
 8006de8:	3308      	adds	r3, #8
 8006dea:	9307      	str	r3, [sp, #28]
 8006dec:	6963      	ldr	r3, [r4, #20]
 8006dee:	9a04      	ldr	r2, [sp, #16]
 8006df0:	189b      	adds	r3, r3, r2
 8006df2:	6163      	str	r3, [r4, #20]
 8006df4:	e765      	b.n	8006cc2 <_svfiprintf_r+0x46>
 8006df6:	4343      	muls	r3, r0
 8006df8:	0035      	movs	r5, r6
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	e7a6      	b.n	8006d4e <_svfiprintf_r+0xd2>
 8006e00:	2301      	movs	r3, #1
 8006e02:	425b      	negs	r3, r3
 8006e04:	e7d0      	b.n	8006da8 <_svfiprintf_r+0x12c>
 8006e06:	2300      	movs	r3, #0
 8006e08:	200a      	movs	r0, #10
 8006e0a:	001a      	movs	r2, r3
 8006e0c:	3501      	adds	r5, #1
 8006e0e:	6063      	str	r3, [r4, #4]
 8006e10:	7829      	ldrb	r1, [r5, #0]
 8006e12:	1c6e      	adds	r6, r5, #1
 8006e14:	3930      	subs	r1, #48	; 0x30
 8006e16:	2909      	cmp	r1, #9
 8006e18:	d903      	bls.n	8006e22 <_svfiprintf_r+0x1a6>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0c5      	beq.n	8006daa <_svfiprintf_r+0x12e>
 8006e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e20:	e7c3      	b.n	8006daa <_svfiprintf_r+0x12e>
 8006e22:	4342      	muls	r2, r0
 8006e24:	0035      	movs	r5, r6
 8006e26:	2301      	movs	r3, #1
 8006e28:	1852      	adds	r2, r2, r1
 8006e2a:	e7f1      	b.n	8006e10 <_svfiprintf_r+0x194>
 8006e2c:	ab07      	add	r3, sp, #28
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	003a      	movs	r2, r7
 8006e32:	0021      	movs	r1, r4
 8006e34:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <_svfiprintf_r+0x1fc>)
 8006e36:	9803      	ldr	r0, [sp, #12]
 8006e38:	e000      	b.n	8006e3c <_svfiprintf_r+0x1c0>
 8006e3a:	bf00      	nop
 8006e3c:	9004      	str	r0, [sp, #16]
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	3301      	adds	r3, #1
 8006e42:	d1d3      	bne.n	8006dec <_svfiprintf_r+0x170>
 8006e44:	89bb      	ldrh	r3, [r7, #12]
 8006e46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e48:	065b      	lsls	r3, r3, #25
 8006e4a:	d400      	bmi.n	8006e4e <_svfiprintf_r+0x1d2>
 8006e4c:	e72d      	b.n	8006caa <_svfiprintf_r+0x2e>
 8006e4e:	2001      	movs	r0, #1
 8006e50:	4240      	negs	r0, r0
 8006e52:	e72a      	b.n	8006caa <_svfiprintf_r+0x2e>
 8006e54:	ab07      	add	r3, sp, #28
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	003a      	movs	r2, r7
 8006e5a:	0021      	movs	r1, r4
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <_svfiprintf_r+0x1fc>)
 8006e5e:	9803      	ldr	r0, [sp, #12]
 8006e60:	f000 f87c 	bl	8006f5c <_printf_i>
 8006e64:	e7ea      	b.n	8006e3c <_svfiprintf_r+0x1c0>
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	08009f54 	.word	0x08009f54
 8006e6c:	08009f5a 	.word	0x08009f5a
 8006e70:	08009f5e 	.word	0x08009f5e
 8006e74:	00000000 	.word	0x00000000
 8006e78:	08006bb9 	.word	0x08006bb9

08006e7c <_printf_common>:
 8006e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7e:	0015      	movs	r5, r2
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	688a      	ldr	r2, [r1, #8]
 8006e84:	690b      	ldr	r3, [r1, #16]
 8006e86:	000c      	movs	r4, r1
 8006e88:	9000      	str	r0, [sp, #0]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	da00      	bge.n	8006e90 <_printf_common+0x14>
 8006e8e:	0013      	movs	r3, r2
 8006e90:	0022      	movs	r2, r4
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	3243      	adds	r2, #67	; 0x43
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	d001      	beq.n	8006ea0 <_printf_common+0x24>
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	069b      	lsls	r3, r3, #26
 8006ea4:	d502      	bpl.n	8006eac <_printf_common+0x30>
 8006ea6:	682b      	ldr	r3, [r5, #0]
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	2306      	movs	r3, #6
 8006eb0:	0017      	movs	r7, r2
 8006eb2:	401f      	ands	r7, r3
 8006eb4:	421a      	tst	r2, r3
 8006eb6:	d027      	beq.n	8006f08 <_printf_common+0x8c>
 8006eb8:	0023      	movs	r3, r4
 8006eba:	3343      	adds	r3, #67	; 0x43
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	1e5a      	subs	r2, r3, #1
 8006ec0:	4193      	sbcs	r3, r2
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	0692      	lsls	r2, r2, #26
 8006ec6:	d430      	bmi.n	8006f2a <_printf_common+0xae>
 8006ec8:	0022      	movs	r2, r4
 8006eca:	9901      	ldr	r1, [sp, #4]
 8006ecc:	9800      	ldr	r0, [sp, #0]
 8006ece:	9e08      	ldr	r6, [sp, #32]
 8006ed0:	3243      	adds	r2, #67	; 0x43
 8006ed2:	47b0      	blx	r6
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d025      	beq.n	8006f24 <_printf_common+0xa8>
 8006ed8:	2306      	movs	r3, #6
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	682a      	ldr	r2, [r5, #0]
 8006ede:	68e1      	ldr	r1, [r4, #12]
 8006ee0:	2500      	movs	r5, #0
 8006ee2:	4003      	ands	r3, r0
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d103      	bne.n	8006ef0 <_printf_common+0x74>
 8006ee8:	1a8d      	subs	r5, r1, r2
 8006eea:	43eb      	mvns	r3, r5
 8006eec:	17db      	asrs	r3, r3, #31
 8006eee:	401d      	ands	r5, r3
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	6922      	ldr	r2, [r4, #16]
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	dd01      	ble.n	8006efc <_printf_common+0x80>
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	18ed      	adds	r5, r5, r3
 8006efc:	2700      	movs	r7, #0
 8006efe:	42bd      	cmp	r5, r7
 8006f00:	d120      	bne.n	8006f44 <_printf_common+0xc8>
 8006f02:	2000      	movs	r0, #0
 8006f04:	e010      	b.n	8006f28 <_printf_common+0xac>
 8006f06:	3701      	adds	r7, #1
 8006f08:	68e3      	ldr	r3, [r4, #12]
 8006f0a:	682a      	ldr	r2, [r5, #0]
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	ddd2      	ble.n	8006eb8 <_printf_common+0x3c>
 8006f12:	0022      	movs	r2, r4
 8006f14:	2301      	movs	r3, #1
 8006f16:	9901      	ldr	r1, [sp, #4]
 8006f18:	9800      	ldr	r0, [sp, #0]
 8006f1a:	9e08      	ldr	r6, [sp, #32]
 8006f1c:	3219      	adds	r2, #25
 8006f1e:	47b0      	blx	r6
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d1f0      	bne.n	8006f06 <_printf_common+0x8a>
 8006f24:	2001      	movs	r0, #1
 8006f26:	4240      	negs	r0, r0
 8006f28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f2a:	2030      	movs	r0, #48	; 0x30
 8006f2c:	18e1      	adds	r1, r4, r3
 8006f2e:	3143      	adds	r1, #67	; 0x43
 8006f30:	7008      	strb	r0, [r1, #0]
 8006f32:	0021      	movs	r1, r4
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	3145      	adds	r1, #69	; 0x45
 8006f38:	7809      	ldrb	r1, [r1, #0]
 8006f3a:	18a2      	adds	r2, r4, r2
 8006f3c:	3243      	adds	r2, #67	; 0x43
 8006f3e:	3302      	adds	r3, #2
 8006f40:	7011      	strb	r1, [r2, #0]
 8006f42:	e7c1      	b.n	8006ec8 <_printf_common+0x4c>
 8006f44:	0022      	movs	r2, r4
 8006f46:	2301      	movs	r3, #1
 8006f48:	9901      	ldr	r1, [sp, #4]
 8006f4a:	9800      	ldr	r0, [sp, #0]
 8006f4c:	9e08      	ldr	r6, [sp, #32]
 8006f4e:	321a      	adds	r2, #26
 8006f50:	47b0      	blx	r6
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d0e6      	beq.n	8006f24 <_printf_common+0xa8>
 8006f56:	3701      	adds	r7, #1
 8006f58:	e7d1      	b.n	8006efe <_printf_common+0x82>
	...

08006f5c <_printf_i>:
 8006f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5e:	b08b      	sub	sp, #44	; 0x2c
 8006f60:	9206      	str	r2, [sp, #24]
 8006f62:	000a      	movs	r2, r1
 8006f64:	3243      	adds	r2, #67	; 0x43
 8006f66:	9307      	str	r3, [sp, #28]
 8006f68:	9005      	str	r0, [sp, #20]
 8006f6a:	9204      	str	r2, [sp, #16]
 8006f6c:	7e0a      	ldrb	r2, [r1, #24]
 8006f6e:	000c      	movs	r4, r1
 8006f70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f72:	2a78      	cmp	r2, #120	; 0x78
 8006f74:	d807      	bhi.n	8006f86 <_printf_i+0x2a>
 8006f76:	2a62      	cmp	r2, #98	; 0x62
 8006f78:	d809      	bhi.n	8006f8e <_printf_i+0x32>
 8006f7a:	2a00      	cmp	r2, #0
 8006f7c:	d100      	bne.n	8006f80 <_printf_i+0x24>
 8006f7e:	e0c1      	b.n	8007104 <_printf_i+0x1a8>
 8006f80:	2a58      	cmp	r2, #88	; 0x58
 8006f82:	d100      	bne.n	8006f86 <_printf_i+0x2a>
 8006f84:	e08c      	b.n	80070a0 <_printf_i+0x144>
 8006f86:	0026      	movs	r6, r4
 8006f88:	3642      	adds	r6, #66	; 0x42
 8006f8a:	7032      	strb	r2, [r6, #0]
 8006f8c:	e022      	b.n	8006fd4 <_printf_i+0x78>
 8006f8e:	0010      	movs	r0, r2
 8006f90:	3863      	subs	r0, #99	; 0x63
 8006f92:	2815      	cmp	r0, #21
 8006f94:	d8f7      	bhi.n	8006f86 <_printf_i+0x2a>
 8006f96:	f7f9 f8bf 	bl	8000118 <__gnu_thumb1_case_shi>
 8006f9a:	0016      	.short	0x0016
 8006f9c:	fff6001f 	.word	0xfff6001f
 8006fa0:	fff6fff6 	.word	0xfff6fff6
 8006fa4:	001ffff6 	.word	0x001ffff6
 8006fa8:	fff6fff6 	.word	0xfff6fff6
 8006fac:	fff6fff6 	.word	0xfff6fff6
 8006fb0:	003600a8 	.word	0x003600a8
 8006fb4:	fff6009a 	.word	0xfff6009a
 8006fb8:	00b9fff6 	.word	0x00b9fff6
 8006fbc:	0036fff6 	.word	0x0036fff6
 8006fc0:	fff6fff6 	.word	0xfff6fff6
 8006fc4:	009e      	.short	0x009e
 8006fc6:	0026      	movs	r6, r4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	3642      	adds	r6, #66	; 0x42
 8006fcc:	1d11      	adds	r1, r2, #4
 8006fce:	6019      	str	r1, [r3, #0]
 8006fd0:	6813      	ldr	r3, [r2, #0]
 8006fd2:	7033      	strb	r3, [r6, #0]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0a7      	b.n	8007128 <_printf_i+0x1cc>
 8006fd8:	6808      	ldr	r0, [r1, #0]
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	1d0a      	adds	r2, r1, #4
 8006fde:	0605      	lsls	r5, r0, #24
 8006fe0:	d50b      	bpl.n	8006ffa <_printf_i+0x9e>
 8006fe2:	680d      	ldr	r5, [r1, #0]
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	2d00      	cmp	r5, #0
 8006fe8:	da03      	bge.n	8006ff2 <_printf_i+0x96>
 8006fea:	232d      	movs	r3, #45	; 0x2d
 8006fec:	9a04      	ldr	r2, [sp, #16]
 8006fee:	426d      	negs	r5, r5
 8006ff0:	7013      	strb	r3, [r2, #0]
 8006ff2:	4b61      	ldr	r3, [pc, #388]	; (8007178 <_printf_i+0x21c>)
 8006ff4:	270a      	movs	r7, #10
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	e01b      	b.n	8007032 <_printf_i+0xd6>
 8006ffa:	680d      	ldr	r5, [r1, #0]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	0641      	lsls	r1, r0, #25
 8007000:	d5f1      	bpl.n	8006fe6 <_printf_i+0x8a>
 8007002:	b22d      	sxth	r5, r5
 8007004:	e7ef      	b.n	8006fe6 <_printf_i+0x8a>
 8007006:	680d      	ldr	r5, [r1, #0]
 8007008:	6819      	ldr	r1, [r3, #0]
 800700a:	1d08      	adds	r0, r1, #4
 800700c:	6018      	str	r0, [r3, #0]
 800700e:	062e      	lsls	r6, r5, #24
 8007010:	d501      	bpl.n	8007016 <_printf_i+0xba>
 8007012:	680d      	ldr	r5, [r1, #0]
 8007014:	e003      	b.n	800701e <_printf_i+0xc2>
 8007016:	066d      	lsls	r5, r5, #25
 8007018:	d5fb      	bpl.n	8007012 <_printf_i+0xb6>
 800701a:	680d      	ldr	r5, [r1, #0]
 800701c:	b2ad      	uxth	r5, r5
 800701e:	4b56      	ldr	r3, [pc, #344]	; (8007178 <_printf_i+0x21c>)
 8007020:	2708      	movs	r7, #8
 8007022:	9303      	str	r3, [sp, #12]
 8007024:	2a6f      	cmp	r2, #111	; 0x6f
 8007026:	d000      	beq.n	800702a <_printf_i+0xce>
 8007028:	3702      	adds	r7, #2
 800702a:	0023      	movs	r3, r4
 800702c:	2200      	movs	r2, #0
 800702e:	3343      	adds	r3, #67	; 0x43
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	db03      	blt.n	8007042 <_printf_i+0xe6>
 800703a:	2204      	movs	r2, #4
 800703c:	6821      	ldr	r1, [r4, #0]
 800703e:	4391      	bics	r1, r2
 8007040:	6021      	str	r1, [r4, #0]
 8007042:	2d00      	cmp	r5, #0
 8007044:	d102      	bne.n	800704c <_printf_i+0xf0>
 8007046:	9e04      	ldr	r6, [sp, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00c      	beq.n	8007066 <_printf_i+0x10a>
 800704c:	9e04      	ldr	r6, [sp, #16]
 800704e:	0028      	movs	r0, r5
 8007050:	0039      	movs	r1, r7
 8007052:	f7f9 f8f1 	bl	8000238 <__aeabi_uidivmod>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	3e01      	subs	r6, #1
 800705a:	5c5b      	ldrb	r3, [r3, r1]
 800705c:	7033      	strb	r3, [r6, #0]
 800705e:	002b      	movs	r3, r5
 8007060:	0005      	movs	r5, r0
 8007062:	429f      	cmp	r7, r3
 8007064:	d9f3      	bls.n	800704e <_printf_i+0xf2>
 8007066:	2f08      	cmp	r7, #8
 8007068:	d109      	bne.n	800707e <_printf_i+0x122>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	07db      	lsls	r3, r3, #31
 800706e:	d506      	bpl.n	800707e <_printf_i+0x122>
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	4293      	cmp	r3, r2
 8007076:	dc02      	bgt.n	800707e <_printf_i+0x122>
 8007078:	2330      	movs	r3, #48	; 0x30
 800707a:	3e01      	subs	r6, #1
 800707c:	7033      	strb	r3, [r6, #0]
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	1b9b      	subs	r3, r3, r6
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	9b07      	ldr	r3, [sp, #28]
 8007086:	0021      	movs	r1, r4
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	9805      	ldr	r0, [sp, #20]
 800708c:	9b06      	ldr	r3, [sp, #24]
 800708e:	aa09      	add	r2, sp, #36	; 0x24
 8007090:	f7ff fef4 	bl	8006e7c <_printf_common>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d14c      	bne.n	8007132 <_printf_i+0x1d6>
 8007098:	2001      	movs	r0, #1
 800709a:	4240      	negs	r0, r0
 800709c:	b00b      	add	sp, #44	; 0x2c
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a0:	3145      	adds	r1, #69	; 0x45
 80070a2:	700a      	strb	r2, [r1, #0]
 80070a4:	4a34      	ldr	r2, [pc, #208]	; (8007178 <_printf_i+0x21c>)
 80070a6:	9203      	str	r2, [sp, #12]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	6821      	ldr	r1, [r4, #0]
 80070ac:	ca20      	ldmia	r2!, {r5}
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	0608      	lsls	r0, r1, #24
 80070b2:	d516      	bpl.n	80070e2 <_printf_i+0x186>
 80070b4:	07cb      	lsls	r3, r1, #31
 80070b6:	d502      	bpl.n	80070be <_printf_i+0x162>
 80070b8:	2320      	movs	r3, #32
 80070ba:	4319      	orrs	r1, r3
 80070bc:	6021      	str	r1, [r4, #0]
 80070be:	2710      	movs	r7, #16
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	d1b2      	bne.n	800702a <_printf_i+0xce>
 80070c4:	2320      	movs	r3, #32
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	439a      	bics	r2, r3
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	e7ad      	b.n	800702a <_printf_i+0xce>
 80070ce:	2220      	movs	r2, #32
 80070d0:	6809      	ldr	r1, [r1, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	6022      	str	r2, [r4, #0]
 80070d6:	0022      	movs	r2, r4
 80070d8:	2178      	movs	r1, #120	; 0x78
 80070da:	3245      	adds	r2, #69	; 0x45
 80070dc:	7011      	strb	r1, [r2, #0]
 80070de:	4a27      	ldr	r2, [pc, #156]	; (800717c <_printf_i+0x220>)
 80070e0:	e7e1      	b.n	80070a6 <_printf_i+0x14a>
 80070e2:	0648      	lsls	r0, r1, #25
 80070e4:	d5e6      	bpl.n	80070b4 <_printf_i+0x158>
 80070e6:	b2ad      	uxth	r5, r5
 80070e8:	e7e4      	b.n	80070b4 <_printf_i+0x158>
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	680d      	ldr	r5, [r1, #0]
 80070ee:	1d10      	adds	r0, r2, #4
 80070f0:	6949      	ldr	r1, [r1, #20]
 80070f2:	6018      	str	r0, [r3, #0]
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	062e      	lsls	r6, r5, #24
 80070f8:	d501      	bpl.n	80070fe <_printf_i+0x1a2>
 80070fa:	6019      	str	r1, [r3, #0]
 80070fc:	e002      	b.n	8007104 <_printf_i+0x1a8>
 80070fe:	066d      	lsls	r5, r5, #25
 8007100:	d5fb      	bpl.n	80070fa <_printf_i+0x19e>
 8007102:	8019      	strh	r1, [r3, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	9e04      	ldr	r6, [sp, #16]
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	e7bb      	b.n	8007084 <_printf_i+0x128>
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	1d11      	adds	r1, r2, #4
 8007110:	6019      	str	r1, [r3, #0]
 8007112:	6816      	ldr	r6, [r2, #0]
 8007114:	2100      	movs	r1, #0
 8007116:	0030      	movs	r0, r6
 8007118:	6862      	ldr	r2, [r4, #4]
 800711a:	f000 f831 	bl	8007180 <memchr>
 800711e:	2800      	cmp	r0, #0
 8007120:	d001      	beq.n	8007126 <_printf_i+0x1ca>
 8007122:	1b80      	subs	r0, r0, r6
 8007124:	6060      	str	r0, [r4, #4]
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	2300      	movs	r3, #0
 800712c:	9a04      	ldr	r2, [sp, #16]
 800712e:	7013      	strb	r3, [r2, #0]
 8007130:	e7a8      	b.n	8007084 <_printf_i+0x128>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	0032      	movs	r2, r6
 8007136:	9906      	ldr	r1, [sp, #24]
 8007138:	9805      	ldr	r0, [sp, #20]
 800713a:	9d07      	ldr	r5, [sp, #28]
 800713c:	47a8      	blx	r5
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	d0aa      	beq.n	8007098 <_printf_i+0x13c>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	079b      	lsls	r3, r3, #30
 8007146:	d415      	bmi.n	8007174 <_printf_i+0x218>
 8007148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714a:	68e0      	ldr	r0, [r4, #12]
 800714c:	4298      	cmp	r0, r3
 800714e:	daa5      	bge.n	800709c <_printf_i+0x140>
 8007150:	0018      	movs	r0, r3
 8007152:	e7a3      	b.n	800709c <_printf_i+0x140>
 8007154:	0022      	movs	r2, r4
 8007156:	2301      	movs	r3, #1
 8007158:	9906      	ldr	r1, [sp, #24]
 800715a:	9805      	ldr	r0, [sp, #20]
 800715c:	9e07      	ldr	r6, [sp, #28]
 800715e:	3219      	adds	r2, #25
 8007160:	47b0      	blx	r6
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d098      	beq.n	8007098 <_printf_i+0x13c>
 8007166:	3501      	adds	r5, #1
 8007168:	68e3      	ldr	r3, [r4, #12]
 800716a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	42ab      	cmp	r3, r5
 8007170:	dcf0      	bgt.n	8007154 <_printf_i+0x1f8>
 8007172:	e7e9      	b.n	8007148 <_printf_i+0x1ec>
 8007174:	2500      	movs	r5, #0
 8007176:	e7f7      	b.n	8007168 <_printf_i+0x20c>
 8007178:	08009f65 	.word	0x08009f65
 800717c:	08009f76 	.word	0x08009f76

08007180 <memchr>:
 8007180:	b2c9      	uxtb	r1, r1
 8007182:	1882      	adds	r2, r0, r2
 8007184:	4290      	cmp	r0, r2
 8007186:	d101      	bne.n	800718c <memchr+0xc>
 8007188:	2000      	movs	r0, #0
 800718a:	4770      	bx	lr
 800718c:	7803      	ldrb	r3, [r0, #0]
 800718e:	428b      	cmp	r3, r1
 8007190:	d0fb      	beq.n	800718a <memchr+0xa>
 8007192:	3001      	adds	r0, #1
 8007194:	e7f6      	b.n	8007184 <memchr+0x4>

08007196 <memmove>:
 8007196:	b510      	push	{r4, lr}
 8007198:	4288      	cmp	r0, r1
 800719a:	d902      	bls.n	80071a2 <memmove+0xc>
 800719c:	188b      	adds	r3, r1, r2
 800719e:	4298      	cmp	r0, r3
 80071a0:	d303      	bcc.n	80071aa <memmove+0x14>
 80071a2:	2300      	movs	r3, #0
 80071a4:	e007      	b.n	80071b6 <memmove+0x20>
 80071a6:	5c8b      	ldrb	r3, [r1, r2]
 80071a8:	5483      	strb	r3, [r0, r2]
 80071aa:	3a01      	subs	r2, #1
 80071ac:	d2fb      	bcs.n	80071a6 <memmove+0x10>
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	5ccc      	ldrb	r4, [r1, r3]
 80071b2:	54c4      	strb	r4, [r0, r3]
 80071b4:	3301      	adds	r3, #1
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d1fa      	bne.n	80071b0 <memmove+0x1a>
 80071ba:	e7f8      	b.n	80071ae <memmove+0x18>

080071bc <_free_r>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	0005      	movs	r5, r0
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d010      	beq.n	80071e6 <_free_r+0x2a>
 80071c4:	1f0c      	subs	r4, r1, #4
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	da00      	bge.n	80071ce <_free_r+0x12>
 80071cc:	18e4      	adds	r4, r4, r3
 80071ce:	0028      	movs	r0, r5
 80071d0:	f000 f918 	bl	8007404 <__malloc_lock>
 80071d4:	4a1d      	ldr	r2, [pc, #116]	; (800724c <_free_r+0x90>)
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <_free_r+0x2c>
 80071dc:	6063      	str	r3, [r4, #4]
 80071de:	6014      	str	r4, [r2, #0]
 80071e0:	0028      	movs	r0, r5
 80071e2:	f000 f917 	bl	8007414 <__malloc_unlock>
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d908      	bls.n	80071fe <_free_r+0x42>
 80071ec:	6821      	ldr	r1, [r4, #0]
 80071ee:	1860      	adds	r0, r4, r1
 80071f0:	4283      	cmp	r3, r0
 80071f2:	d1f3      	bne.n	80071dc <_free_r+0x20>
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	1841      	adds	r1, r0, r1
 80071fa:	6021      	str	r1, [r4, #0]
 80071fc:	e7ee      	b.n	80071dc <_free_r+0x20>
 80071fe:	001a      	movs	r2, r3
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <_free_r+0x4e>
 8007206:	42a3      	cmp	r3, r4
 8007208:	d9f9      	bls.n	80071fe <_free_r+0x42>
 800720a:	6811      	ldr	r1, [r2, #0]
 800720c:	1850      	adds	r0, r2, r1
 800720e:	42a0      	cmp	r0, r4
 8007210:	d10b      	bne.n	800722a <_free_r+0x6e>
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	1809      	adds	r1, r1, r0
 8007216:	1850      	adds	r0, r2, r1
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	4283      	cmp	r3, r0
 800721c:	d1e0      	bne.n	80071e0 <_free_r+0x24>
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	1841      	adds	r1, r0, r1
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	6053      	str	r3, [r2, #4]
 8007228:	e7da      	b.n	80071e0 <_free_r+0x24>
 800722a:	42a0      	cmp	r0, r4
 800722c:	d902      	bls.n	8007234 <_free_r+0x78>
 800722e:	230c      	movs	r3, #12
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	e7d5      	b.n	80071e0 <_free_r+0x24>
 8007234:	6821      	ldr	r1, [r4, #0]
 8007236:	1860      	adds	r0, r4, r1
 8007238:	4283      	cmp	r3, r0
 800723a:	d103      	bne.n	8007244 <_free_r+0x88>
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	1841      	adds	r1, r0, r1
 8007242:	6021      	str	r1, [r4, #0]
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	6054      	str	r4, [r2, #4]
 8007248:	e7ca      	b.n	80071e0 <_free_r+0x24>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	20000768 	.word	0x20000768

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0f      	ldr	r6, [pc, #60]	; (8007290 <sbrk_aligned+0x40>)
 8007254:	000d      	movs	r5, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	0004      	movs	r4, r0
 800725a:	2900      	cmp	r1, #0
 800725c:	d102      	bne.n	8007264 <sbrk_aligned+0x14>
 800725e:	f000 f8bf 	bl	80073e0 <_sbrk_r>
 8007262:	6030      	str	r0, [r6, #0]
 8007264:	0029      	movs	r1, r5
 8007266:	0020      	movs	r0, r4
 8007268:	f000 f8ba 	bl	80073e0 <_sbrk_r>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d00a      	beq.n	8007286 <sbrk_aligned+0x36>
 8007270:	2303      	movs	r3, #3
 8007272:	1cc5      	adds	r5, r0, #3
 8007274:	439d      	bics	r5, r3
 8007276:	42a8      	cmp	r0, r5
 8007278:	d007      	beq.n	800728a <sbrk_aligned+0x3a>
 800727a:	1a29      	subs	r1, r5, r0
 800727c:	0020      	movs	r0, r4
 800727e:	f000 f8af 	bl	80073e0 <_sbrk_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d101      	bne.n	800728a <sbrk_aligned+0x3a>
 8007286:	2501      	movs	r5, #1
 8007288:	426d      	negs	r5, r5
 800728a:	0028      	movs	r0, r5
 800728c:	bd70      	pop	{r4, r5, r6, pc}
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	2000076c 	.word	0x2000076c

08007294 <_malloc_r>:
 8007294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007296:	2203      	movs	r2, #3
 8007298:	1ccb      	adds	r3, r1, #3
 800729a:	4393      	bics	r3, r2
 800729c:	3308      	adds	r3, #8
 800729e:	0006      	movs	r6, r0
 80072a0:	001f      	movs	r7, r3
 80072a2:	2b0c      	cmp	r3, #12
 80072a4:	d232      	bcs.n	800730c <_malloc_r+0x78>
 80072a6:	270c      	movs	r7, #12
 80072a8:	42b9      	cmp	r1, r7
 80072aa:	d831      	bhi.n	8007310 <_malloc_r+0x7c>
 80072ac:	0030      	movs	r0, r6
 80072ae:	f000 f8a9 	bl	8007404 <__malloc_lock>
 80072b2:	4d32      	ldr	r5, [pc, #200]	; (800737c <_malloc_r+0xe8>)
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	001c      	movs	r4, r3
 80072b8:	2c00      	cmp	r4, #0
 80072ba:	d12e      	bne.n	800731a <_malloc_r+0x86>
 80072bc:	0039      	movs	r1, r7
 80072be:	0030      	movs	r0, r6
 80072c0:	f7ff ffc6 	bl	8007250 <sbrk_aligned>
 80072c4:	0004      	movs	r4, r0
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d11e      	bne.n	8007308 <_malloc_r+0x74>
 80072ca:	682c      	ldr	r4, [r5, #0]
 80072cc:	0025      	movs	r5, r4
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	d14a      	bne.n	8007368 <_malloc_r+0xd4>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	0029      	movs	r1, r5
 80072d6:	18e3      	adds	r3, r4, r3
 80072d8:	0030      	movs	r0, r6
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	f000 f880 	bl	80073e0 <_sbrk_r>
 80072e0:	9b01      	ldr	r3, [sp, #4]
 80072e2:	4283      	cmp	r3, r0
 80072e4:	d143      	bne.n	800736e <_malloc_r+0xda>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	3703      	adds	r7, #3
 80072ea:	1aff      	subs	r7, r7, r3
 80072ec:	2303      	movs	r3, #3
 80072ee:	439f      	bics	r7, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	2f0c      	cmp	r7, #12
 80072f4:	d200      	bcs.n	80072f8 <_malloc_r+0x64>
 80072f6:	270c      	movs	r7, #12
 80072f8:	0039      	movs	r1, r7
 80072fa:	0030      	movs	r0, r6
 80072fc:	f7ff ffa8 	bl	8007250 <sbrk_aligned>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d034      	beq.n	800736e <_malloc_r+0xda>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	19df      	adds	r7, r3, r7
 8007308:	6027      	str	r7, [r4, #0]
 800730a:	e013      	b.n	8007334 <_malloc_r+0xa0>
 800730c:	2b00      	cmp	r3, #0
 800730e:	dacb      	bge.n	80072a8 <_malloc_r+0x14>
 8007310:	230c      	movs	r3, #12
 8007312:	2500      	movs	r5, #0
 8007314:	6033      	str	r3, [r6, #0]
 8007316:	0028      	movs	r0, r5
 8007318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	1bd1      	subs	r1, r2, r7
 800731e:	d420      	bmi.n	8007362 <_malloc_r+0xce>
 8007320:	290b      	cmp	r1, #11
 8007322:	d917      	bls.n	8007354 <_malloc_r+0xc0>
 8007324:	19e2      	adds	r2, r4, r7
 8007326:	6027      	str	r7, [r4, #0]
 8007328:	42a3      	cmp	r3, r4
 800732a:	d111      	bne.n	8007350 <_malloc_r+0xbc>
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	6053      	str	r3, [r2, #4]
 8007334:	0030      	movs	r0, r6
 8007336:	0025      	movs	r5, r4
 8007338:	f000 f86c 	bl	8007414 <__malloc_unlock>
 800733c:	2207      	movs	r2, #7
 800733e:	350b      	adds	r5, #11
 8007340:	1d23      	adds	r3, r4, #4
 8007342:	4395      	bics	r5, r2
 8007344:	1aea      	subs	r2, r5, r3
 8007346:	429d      	cmp	r5, r3
 8007348:	d0e5      	beq.n	8007316 <_malloc_r+0x82>
 800734a:	1b5b      	subs	r3, r3, r5
 800734c:	50a3      	str	r3, [r4, r2]
 800734e:	e7e2      	b.n	8007316 <_malloc_r+0x82>
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e7ec      	b.n	800732e <_malloc_r+0x9a>
 8007354:	6862      	ldr	r2, [r4, #4]
 8007356:	42a3      	cmp	r3, r4
 8007358:	d101      	bne.n	800735e <_malloc_r+0xca>
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	e7ea      	b.n	8007334 <_malloc_r+0xa0>
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	e7e8      	b.n	8007334 <_malloc_r+0xa0>
 8007362:	0023      	movs	r3, r4
 8007364:	6864      	ldr	r4, [r4, #4]
 8007366:	e7a7      	b.n	80072b8 <_malloc_r+0x24>
 8007368:	002c      	movs	r4, r5
 800736a:	686d      	ldr	r5, [r5, #4]
 800736c:	e7af      	b.n	80072ce <_malloc_r+0x3a>
 800736e:	230c      	movs	r3, #12
 8007370:	0030      	movs	r0, r6
 8007372:	6033      	str	r3, [r6, #0]
 8007374:	f000 f84e 	bl	8007414 <__malloc_unlock>
 8007378:	e7cd      	b.n	8007316 <_malloc_r+0x82>
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	20000768 	.word	0x20000768

08007380 <_realloc_r>:
 8007380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007382:	0007      	movs	r7, r0
 8007384:	000e      	movs	r6, r1
 8007386:	0014      	movs	r4, r2
 8007388:	2900      	cmp	r1, #0
 800738a:	d105      	bne.n	8007398 <_realloc_r+0x18>
 800738c:	0011      	movs	r1, r2
 800738e:	f7ff ff81 	bl	8007294 <_malloc_r>
 8007392:	0005      	movs	r5, r0
 8007394:	0028      	movs	r0, r5
 8007396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007398:	2a00      	cmp	r2, #0
 800739a:	d103      	bne.n	80073a4 <_realloc_r+0x24>
 800739c:	f7ff ff0e 	bl	80071bc <_free_r>
 80073a0:	0025      	movs	r5, r4
 80073a2:	e7f7      	b.n	8007394 <_realloc_r+0x14>
 80073a4:	f000 f83e 	bl	8007424 <_malloc_usable_size_r>
 80073a8:	9001      	str	r0, [sp, #4]
 80073aa:	4284      	cmp	r4, r0
 80073ac:	d803      	bhi.n	80073b6 <_realloc_r+0x36>
 80073ae:	0035      	movs	r5, r6
 80073b0:	0843      	lsrs	r3, r0, #1
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	d3ee      	bcc.n	8007394 <_realloc_r+0x14>
 80073b6:	0021      	movs	r1, r4
 80073b8:	0038      	movs	r0, r7
 80073ba:	f7ff ff6b 	bl	8007294 <_malloc_r>
 80073be:	1e05      	subs	r5, r0, #0
 80073c0:	d0e8      	beq.n	8007394 <_realloc_r+0x14>
 80073c2:	9b01      	ldr	r3, [sp, #4]
 80073c4:	0022      	movs	r2, r4
 80073c6:	429c      	cmp	r4, r3
 80073c8:	d900      	bls.n	80073cc <_realloc_r+0x4c>
 80073ca:	001a      	movs	r2, r3
 80073cc:	0031      	movs	r1, r6
 80073ce:	0028      	movs	r0, r5
 80073d0:	f7ff fbc0 	bl	8006b54 <memcpy>
 80073d4:	0031      	movs	r1, r6
 80073d6:	0038      	movs	r0, r7
 80073d8:	f7ff fef0 	bl	80071bc <_free_r>
 80073dc:	e7da      	b.n	8007394 <_realloc_r+0x14>
	...

080073e0 <_sbrk_r>:
 80073e0:	2300      	movs	r3, #0
 80073e2:	b570      	push	{r4, r5, r6, lr}
 80073e4:	4d06      	ldr	r5, [pc, #24]	; (8007400 <_sbrk_r+0x20>)
 80073e6:	0004      	movs	r4, r0
 80073e8:	0008      	movs	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fb f9ec 	bl	80027c8 <_sbrk>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d103      	bne.n	80073fc <_sbrk_r+0x1c>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d000      	beq.n	80073fc <_sbrk_r+0x1c>
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	20000770 	.word	0x20000770

08007404 <__malloc_lock>:
 8007404:	b510      	push	{r4, lr}
 8007406:	4802      	ldr	r0, [pc, #8]	; (8007410 <__malloc_lock+0xc>)
 8007408:	f000 f814 	bl	8007434 <__retarget_lock_acquire_recursive>
 800740c:	bd10      	pop	{r4, pc}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	20000774 	.word	0x20000774

08007414 <__malloc_unlock>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4802      	ldr	r0, [pc, #8]	; (8007420 <__malloc_unlock+0xc>)
 8007418:	f000 f80d 	bl	8007436 <__retarget_lock_release_recursive>
 800741c:	bd10      	pop	{r4, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	20000774 	.word	0x20000774

08007424 <_malloc_usable_size_r>:
 8007424:	1f0b      	subs	r3, r1, #4
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	1f18      	subs	r0, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	da01      	bge.n	8007432 <_malloc_usable_size_r+0xe>
 800742e:	580b      	ldr	r3, [r1, r0]
 8007430:	18c0      	adds	r0, r0, r3
 8007432:	4770      	bx	lr

08007434 <__retarget_lock_acquire_recursive>:
 8007434:	4770      	bx	lr

08007436 <__retarget_lock_release_recursive>:
 8007436:	4770      	bx	lr

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
